<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>出纳管理</title>
      <link href="/2024/02/24Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E5%87%BA%E7%BA%B3%E7%AE%A1%E7%90%86/11ads7pt/"/>
      <url>/2024/02/24Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E5%87%BA%E7%BA%B3%E7%AE%A1%E7%90%86/11ads7pt/</url>
      
        <content type="html"><![CDATA[<p>出纳的工作，就是按照公司有关规定和制度，进行票据、货币资金和有价证券的收付、保管、核算等的工作，即管理企业的货币资金、票据、有价证券的进进出出。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240225235253.png" alt="20240225235253"></p><h1 id="出纳管理-系统整体流程"><a href="#出纳管理-系统整体流程" class="headerlink" title="出纳管理-系统整体流程"></a>出纳管理-系统整体流程</h1><p>应用场景<br>处理日常业务：现金存取、 银行转账、收款/收款退款、付款/付款退款、应收票据结算、应付票据结算、现金盘点、银行存款对账、日清月结</p><h1 id="基础设置-出纳"><a href="#基础设置-出纳" class="headerlink" title="基础设置-出纳"></a>基础设置-出纳</h1><h2 id="职能及业务关系"><a href="#职能及业务关系" class="headerlink" title="职能及业务关系"></a>职能及业务关系</h2><p>应用介绍:</p><ul><li>出纳管理模块的应用组织为收付组织</li><li>定义了收付委托的业务关系后可以进行实际的收付款处理</li></ul><p>应用场景:<br>存在多组织应用时，定义组织职能并定义组织间委托关系</p><h2 id="银行"><a href="#银行" class="headerlink" title="银行"></a>银行</h2><p>应用介绍:</p><ul><li>用户需要根据自已企业的实际情况创建开户的银行</li></ul><p>应用场景:<br>有银行存款业务的企业都需要进行银行的维护<br>各个收付款单据在进行银行存款业务录入时候需要引用</p><h2 id="银行账号"><a href="#银行账号" class="headerlink" title="银行账号"></a>银行账号</h2><p>应用介绍:</p><ul><li>创建银行账号</li><li>银行账号分配</li><li>支持默认值设置</li></ul><p>应用场景:<br>企业需要进行银行账号的维护各个收付款单据在进行银行存款业务录入时候需要引用<br>多个组织共用一个账号时，需要进行银行账号分配</p><h2 id="内部账户"><a href="#内部账户" class="headerlink" title="内部账户"></a>内部账户</h2><p>应用介绍:</p><ul><li>收付组织创建内部账户</li><li>内部账户分配</li></ul><p>应用场景:<br>同一法人下事业部统支统收</p><h2 id="收付款用途"><a href="#收付款用途" class="headerlink" title="收付款用途"></a>收付款用途</h2><p>应用介绍:</p><ul><li>用户根据自已企业的实际情况去创建收付款用途</li></ul><p>应用场景:<br>各个收付款单据在进行业务录入时候需要选择收付款用途，以确认该笔业务是计入往来或费用【计入往来则影响应收（付） 账款的余额，参与应收（付）系统的核销】<br>凭证模版根据收付款用途设置对应入账科目</p><h2 id="结算方式"><a href="#结算方式" class="headerlink" title="结算方式"></a>结算方式</h2><p>应用介绍:</p><ul><li>除了预设的结算方式，用户根据自已企业的实际情况去创建</li><li>支持默认值设置</li></ul><p>应用场景:<br>各个收付款单据在进行业务录入时候需要选择结算方式，1 以确认该笔业务是以现金、银行存款、 票据交易以及内部结算。</p><h1 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h1><blockquote><p>系统正式启用时，需要录入余额银企未达项等初始数据</p></blockquote><h2 id="设置启用日期"><a href="#设置启用日期" class="headerlink" title="设置启用日期"></a>设置启用日期</h2><h2 id="初始数据录入"><a href="#初始数据录入" class="headerlink" title="初始数据录入"></a>初始数据录入</h2><h2 id="结束初始化"><a href="#结束初始化" class="headerlink" title="结束初始化"></a>结束初始化</h2>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云星空 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>情商/人际</title>
      <link href="/2024/02/24Emotional%20Quotient/%E6%83%85%E5%95%86%E3%80%81%E4%BA%BA%E9%99%85/10axs7pn/"/>
      <url>/2024/02/24Emotional%20Quotient/%E6%83%85%E5%95%86%E3%80%81%E4%BA%BA%E9%99%85/10axs7pn/</url>
      
        <content type="html"><![CDATA[<p>事情的起源源自于今年过年（2024）我与我唯一一个10年多的老朋友相聚我所表现出沉默寡言、种种格格不入，我就意识到是自己出问题了。我要做出改变，我不想成为一个别人眼中的木头一样的角色，其实你内心还是极其渴望与别人交往的，但是你总是碍于面子不敢踏出这一步，你总是害怕自己说错了什么而选择什么也不说，你总是用自以为是的幽默当作你的面具，你藏在面具背后痛苦挣扎，你总是逃避你内心真正喜欢的东西，是因为什么？我想了很久，那就是因为自卑，你从小到大一直都是自卑的，这种自卑刻在你的骨子里，你因父母是农民而不敢让朋友知道你的家庭情况，你因为自己没钱而选择装傻，而极力避开那些你认为美好的事物，你因为自己能力不足，而封闭自己把头藏在翅膀里，因为你自卑，你觉得你配不上。那些机会就像沙子一样从你的手心流过转瞬即逝，你真的甘心吗？你想成为一个有遗憾的人吗？</p><p>不，我要做出改变，我要迎合我的内心，我不想活得那么累，我要做一个眼里有光的人，我要遵循我自己的内心，所有我欣赏的事物我都要大方的去追求，我想做一个真实的人，我不想让面具长在我的脸上，我要撕下这面具，杀死过去的自己。我希望我能有几个知彼知己的朋友，希望讲起话来可以落落大方。遇到优秀的人我可以放下过往畅所欲言。</p><p>从现在起我要好好搞钱，以前我总是认为人不应该追求这种物质，生活不应该被这些物质所填充，还有诗和远方，还有自己的理想没有实现。但是我觉得我错了，过年回家，身边各种形形色色的人（包括自己的家人）张嘴闭嘴就是钱，也开始相信钱确实能解决大部分的问题，不开心的本质就是钱不够多，我不想我自己的家人需要钱的时候我却两手空空，我不想他们因为这个而伤感情。</p>]]></content>
      
      
      <categories>
          
          <category> Emotional Quotient </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库常用表名</title>
      <link href="/2024/01/31Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%90%8D/18axs7pv/"/>
      <url>/2024/01/31Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B8%B8%E7%94%A8%E8%A1%A8%E5%90%8D/18axs7pv/</url>
      
        <content type="html"><![CDATA[<p>以下数据表为金蝶云星空常用数据表。<br>数据表命名基本规则：</p><p>表名前缀：t<em> 或者 T</em></p><p>视图前缀：v<em> 或者 V</em></p><p>多语言表后缀：_L</p><p>关联关系表后缀：_LK</p><p>一、元数据<br>元数据: t_meta_objectType</p><p>元数据扩展信息表: t_meta_objectType_E</p><p>元数据缓存表: T_META_OBJECTTYPECACHE</p><p>元数据视图表: T_META_OBJECTTYPEVIEW</p><p>元数据视图：V_META_OBJECTTYPE_L</p><p>元数据扩展多语言名称：T_META_OBJECTTYPENAMEEX_L</p><p>元数据序号： T_META_OBJECTTYPE_E</p><p>基础资料元数据信息表: T_META_LOOKUPCLASS</p><p>基础资料元数据类型表: T_META_BASEDATATYPE</p><p>单据类型表: T_BAS_BILLTYPE，T_BAS_BILLTYPEFLDCTL</p><p>枚举元数据表: T_META_FORMENUM</p><p>枚举项元数据表: T_META_FORMENUMITEM</p><p>转换规则元数据表: T_META_CONVERTRULE</p><p>反写规则元数据表: t_bf_writebackrule</p><p>反写规则扩展表:t_BF_WriteBackRuleCust</p><p>表单和表关系表:T_META_TRACKERBILLTABLE</p><p>领域模型：T_MDL_DOMAINMODETYPE</p><p>领域子模型：T_MDL_DOMAINMODELSUB_L</p><p>元素：T_MDL_ELEMENTTYPE</p><p>元素分组：T_MDL_ELEMENTGROUP_L</p><p>属性：T_MDL_ELEMENTPROPERTY</p><p>领域元素：T_MDL_DOMAINMODELELEMENTMAP</p><p>领域元素属性：T_MDL_DOMAINMODELELPROPMAP</p><p>表单服务：T_MDL_FORMBUSINESS</p><p>操作函数：T_MDL_FORMFUNCTION</p><p>操作：T_MDL_FORMOPERATIONTYPE</p><p>效验：T_MDL_FORMVALIDATIONTYPE</p><p>二、弹性域相关表<br>辅助属性维度定义：T_BD_FLEXAUXPROPERTY</p><p>辅助属性数据表：T_BD_FLEXSITEMDETAILV</p><p>仓位值集表维度定义：t_bas_flexValues</p><p>仓位值集表维度仓位定义：T_BAS_FLEXVALUESENTRY</p><p>仓位值集数据表：t_bas_flexValuesDetail</p><p>核算维度维度定义：T_BD_FLEXITEMPROPERTY</p><p>核算维度数据表：T_BD_FLEXITEMDETAILV</p><p>三、菜单<br>子系统分组: T_META_TOPCLASS</p><p>子系统: T_META_SUBSYSTEM_L</p><p>模块: T_META_CONSOLESUBFUNC_L</p><p>菜单: T_META_CONSOLEDETAIL</p><p>四、权限<br>对象权限: T_SEC_OBJECTTYPEPERMISSION</p><p>权限表: T_SEC_FIELDPERMISSION</p><p>权限项表: t_sec_permissionItem</p><p>功能权限表: T_SEC_FUNCPERMISSION</p><p>功能权限项表: T_SEC_FUNCPERMISSIONENTRY</p><p>字段权限表: T_SEC_FIELDPERMISSION</p><p>字段权限项表: T_SEC_FIELDPERMISSIONENTRY</p><p>用户组织表: T_SEC_USERORG</p><p>角色表: T_SEC_ROLE</p><p>五、基础资料<br>基础资料和表：T_META_LOOKUPCLASS</p><p>组织表: T_ORG_ORGANIZATIONS</p><p>物料: T_BD_MATERIAL</p><p>采购价目表: t_PUR_PriceList</p><p>采购价目分发表: t_PUR_PriceList_Issue</p><p>用户表: T_SEC_USER</p><p>部门表: T_BD_DEPARTMENT</p><p>员工信息表: T_BD_STAFF</p><p>员工任职信息表: T_BD_STAFFPOSTINFO</p><p>业务员表: T_BD_OPERATOR</p><p>业务员分录表: T_BD_OPERATORENTRY</p><p>销售员表: V_BD_SALESMAN</p><p>销售员单据体表: V_BD_SALESMANENTRY</p><p>岗位信息表: T_ORG_POST\HR_ORG_HRPOST</p><p>岗位对应角色表: T_ORG_POSTROLE</p><p>辅助资料表：T_BAS_ASSISTANTDATAENTRY</p><p>辅助资料类别表：T_BAS_ASSISTANTDATA</p><p>基础资料分配表: T_ORG_BASEDATAALLOCATEENTRY</p><p>仓库：T_BD_Stock</p><p>供应商：t_BD_Supplier</p><p>六、 网控<br>网控对象表: T_BAS_NETWORKCTRLOBJECT</p><p>互斥对象表: T_BAS_NETWORKCTRLMUTEX</p><p>网络控制表: T_BAS_MUTEX</p><p>网控记录表: T_BAS_NETWORKCTRLRECORDS</p><p>七、参数<br>用户参数表: T_BAS_UserParameter</p><p>系统参数表: T_BAS_SysParameter</p><p>发布参数表: T_BAS_ReleaseParameter</p><p>单据参数表: t_BAS_BillGlobalParameter</p><p>用户界面参数：T_BAS_FormParameter</p><p>八、服务<br>表单服务表: T_MDL_FORMBUSINESS</p><p>操作服务表: T_MDL_FORMOPERATIONTYPE</p><p>校验器表:T_MDL_FORMVALIDATIONTYPE</p><p>九、日志记录<br>引出记录表: T_BAS_EXPORTRECORD</p><p>上机操作日志表: t_bas_operateLog</p><p>上机操作日志备份表: t_bas_operateLogBK</p><p>系统日志表: T_BAS_LOG</p><p>执行计划日志表：T_BAS_SCHEDULELOG</p><p>WebApi日志：T_BAS_WEBAPILOG</p><p>十、管理中心<br>数据中心表: T_BAS_DATACENTER</p><p>补丁日志表表: t_bos_installedpackagehis</p><p>十一、业务流程图<br>业务流程版本表: T_BF_DEFVERSION</p><p>业务流程发布表: t_BF_Publish</p><p>业务流程发布分录表: t_BF_PublishEntry（流程跟单据类型的关系）</p><p>业务流程定义单据检索表: T_BF_DEFVERSIONLOOKUP（流程跟表的关系）</p><p>业务流程定义表: T_BF_PROCDEF</p><p>数据中心表: T_BAS_DATACENTER</p><p>十二、反写<br>反写规则元数据表: t_bf_writebackrule</p><p>反写规则元数据扩展表:t_BF_WriteBackRuleCust</p><p>反写记录表:t_bf_instanceSnap</p><p>反写记录历史表:t_bf_instanceSnapHis</p><p>反写记录归档表:t_bf_SnapBackUp</p><p>反写日志表: T_BF_WBLOG</p><p>十三、业务流程实例<br>业务流程实例表: t_BF_Instance</p><p>业务流程节点表: t_BF_InstanceEntry</p><p>业务流程控制字段反写记录表: t_bf_instanceAmount</p><p>业务流程实例历史表: t_bf_instanceHis</p><p>业务流程节点历史表: t_bf_instanceEntryHis</p><p>业务流程控制字段反写记录历史表: t_bf_instanceAmountHis</p><p>业务流程实例归档表: t_bf_instBackUp</p><p>业务流程节点归档表: t_bf_instEntryBackUp</p><p>业务流程控制字段反写记录归档表: t_bf_instAmountBackUp</p><p>业务流程压缩文件日志表: t_bf_InstArchiveLog</p><p>业务流程压缩文件表: t_BF_ArchiveFiles</p><p>十四、过滤方案<br>过滤方案表: T_BAS_FILTERSCHEME</p><p>万能报表默认过滤：T_BOS_DEVREPORTDATASOURCE</p><p>十五、单据<br>销售订单表: T_SAL_ORDER</p><p>销售订单明细表: T_SAL_ORDERENTRY</p><p>销售出库单表: T_SAL_OUTSTOCK</p><p>销售出库单明细表: T_SAL_OUTSTOCKENTRY</p><p>应收单表: t_AR_receivable</p><p>应收单明细表: t_AR_receivableEntry</p><p>应付单表: T_AP_PAYABLE</p><p>应付单明细表: T_AP_PAYABLEENTRY</p><p>采购订单表: t_PUR_POOrder</p><p>采购订单明细表: t_PUR_POOrderEntry</p><p>生产订单表: PRD_MO、T_PRD_MO</p><p>工序计划表: T_SFC_OPERPLANNING</p><p>工序计划系列表: T_SFC_OPERPLANNINGSEQ</p><p>工序汇报表: T_SFC_OPTRPTENTRY</p><p>工序转移表: T_SFC_OPERATIONTRANSFER</p><p>生成入库单：PRD_INSTOCK 、T_PRD_INSTOCK</p><p>付款申请单：T_CN_PAYAPPLY</p><p>十六、附件和附件信息<br>附件信息：T_BAS_FileServerFileInfo</p><p>附件跟单据关系表：T_BAS_ATTACHMENT</p><p>十七、报表<br>关键字：T_MDL_RPTKEYWORDS</p><p>十八、工作流和审批流<br>流程定义：t_WF_ProcDef</p><p>版本：t_wf_DefVersion</p><p>流程类型：t_WF_ProcessType</p><p>流程模板：t_WF_Template</p><p>流程发起配置：t_wf_prclaunchconfig、T_WF_PRCLAUNCHCONFIG_L</p><p>流程实例和单据关系：t_WF_PiBiMap</p><p>流程实例：T_WF_PROCINST</p><p>流程节点实例：T_WF_ACTINST</p><p>流程任务：T_WF_ASSIGN</p><p>流程任务接收人：T_WF_RECEIVER</p><p>流程任务详情：T_WF_APPROVALASSIGN</p><p>流程任务处理记录：T_WF_APPROVALITEM</p><p>流程反馈信息表：T_WF_DISCUSS</p><p>十九、其他<br>临时表: T_BAS_TEMPORARYTABLENAME</p><p>单据类型：T_BAS_BILLTYPE</p><p>安装包：t_bos_installedpackage</p>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云星空 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应收应付</title>
      <link href="/2024/01/15Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E5%BA%94%E6%94%B6%E5%BA%94%E4%BB%98/11axs7px/"/>
      <url>/2024/01/15Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E5%BA%94%E6%94%B6%E5%BA%94%E4%BB%98/11axs7px/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>应收应付会计是大多数公司常设的财务岗位之一<br>应收会计：对外接触的是客户，对内是销售部。主要主要负责公司与客户账务的定期核对和清账，保证应收账自的清晰准确。<br>应付会计：对外接触的是供应商对内是采购部、仓储部。主要负责公司与供应商账务的定期核对和清账，保证应付账目的清晰准确。</p><h1 id="往来管理"><a href="#往来管理" class="headerlink" title="往来管理"></a>往来管理</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240116224111.png" alt="20240116224111"></p><h1 id="应收"><a href="#应收" class="headerlink" title="应收"></a>应收</h1><h2 id="应收整体应用流程"><a href="#应收整体应用流程" class="headerlink" title="应收整体应用流程"></a>应收整体应用流程</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240116224220.png" alt="20240116224220"></p><h2 id="应收账款的两种模式"><a href="#应收账款的两种模式" class="headerlink" title="应收账款的两种模式"></a>应收账款的两种模式</h2><blockquote><p>应收款管理通过立账类型区分为“业务应收”、“暂估应收”、“财务应收”，代表不同的业务模式，当采用业务应收模式时，则不区分暂估与财务；当采用暂估财务应收模式时，则立账类型可以选择“暂估应收”、“财务应收”。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240116224420.png" alt="20240116224420"></p><h3 id="业务应收"><a href="#业务应收" class="headerlink" title="业务应收"></a>业务应收</h3><p>根据出库后确认应收账款：货已发出，则确认应收账款，开票时，如果存在金额差异则生成差异应收单</p><p>业务应收模式：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240116224701.png" alt="20240116224701"></p><h3 id="暂估应收"><a href="#暂估应收" class="headerlink" title="暂估应收"></a>暂估应收</h3><p>根据发票确认应收账款：货发出后，如果没有到票，则确认为暂估应收；如果开票，则确认为应收账款，同时冲回暂估应收</p><p>暂估应收冲回模式：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240116224736.png" alt="20240116224736"></p><h2 id="基础设置"><a href="#基础设置" class="headerlink" title="基础设置"></a>基础设置</h2><h3 id="收款条件"><a href="#收款条件" class="headerlink" title="收款条件"></a>收款条件</h3><p>收款条件是比较重要的商务信息，一般会在合同谈判中确定</p><ol><li>设置预收比例</li><li>确定到期日计算日期，包括：订单日期、 出库日期、 应收单日期</li><li>按金额或者比例设置多到期日</li><li>支持三种收款方式（到期日设置标准支持按比例和按金额两种收款方式支持按到期日、订单收款、物料明细收款，三种）</li></ol><h3 id="应收收款核销方案"><a href="#应收收款核销方案" class="headerlink" title="应收收款核销方案"></a>应收收款核销方案</h3><p>应收收款核销方案用于应收收款匹配条件核销，在核销向导中用户需要选择核销方案，如果同时选择多个核销方案，系统会按照优先顺序执行多次核销</p><ol><li>设置核销关系</li><li>设置核销匹配项目</li><li>设置核销顺序（支持两种核销顺序：按到期日从前往后核销，按业务日期从前往后核销）</li><li>系统预置一个应收收款核销方案</li></ol><h3 id="应收开票核销方案"><a href="#应收开票核销方案" class="headerlink" title="应收开票核销方案"></a>应收开票核销方案</h3><p>应收开票核销方案用于应收开票匹配条件核销，在核销向导中用户需要选择核销方案，如果同时选择多个核销方案，系统会按照优先顺序执行多次核销</p><ol><li>设置核销关系</li><li>设置核销匹配项目</li><li>设置核销顺序</li><li>系统预置一个应收开票核销方案</li><li>支持应收单与销售发票、应收单(正) 与应收单 （负）进行开票核销</li></ol><h3 id="应收初始化"><a href="#应收初始化" class="headerlink" title="应收初始化"></a>应收初始化</h3><blockquote><p>大多数用户在使用本系统前已经发生了经营业务，因此会存在尚未结算完的应收款项。 这些应收款项需要统一录入系统</p></blockquote><ol><li>启用日期设置</li><li>反启用功能</li><li>初始数据录入</li><li>结束初始化</li></ol><h3 id="应收款确认（销售应收）"><a href="#应收款确认（销售应收）" class="headerlink" title="应收款确认（销售应收）"></a>应收款确认（销售应收）</h3><blockquote><p>与销售有关的所有应收都需要通过应收单确认。应收单是后期收款、报表查询的主要依据</p></blockquote><ul><li>通过应收单管理销售应收</li><li>彻底将应收单与发票相分离</li><li>出库单审核时自动生成应收单</li><li>实现一笔应收的多到期日管理</li><li>支持多方交易</li><li>查询应收单收款记录和开票记录</li><li>单据和列表上可以查看凭证信息</li></ul><h3 id="应收款确认（其他应收）"><a href="#应收款确认（其他应收）" class="headerlink" title="应收款确认（其他应收）"></a>应收款确认（其他应收）</h3><blockquote><p>除销售外的所有应收都需要通过其他应收单确认</p></blockquote><ul><li>通过其他应收单管理其他应收</li><li>提供按角色的新增、收款功能</li><li>查询其他应收单的收款情况</li><li>单据和列表上可以查看凭证信息</li></ul><h3 id="收款-退款"><a href="#收款-退款" class="headerlink" title="收款/退款"></a>收款/退款</h3><blockquote><ol><li>用户可以通过应收单或者其他应收单生成收款/退款单。也可以手工增加收款/ 退款单。</li><li>用户如果有预收场景， 可以在收款单中的收款用途选择为预收<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240121220845.png" alt="20240121220845"></li></ol></blockquote><ul><li>支持多张单据合并生成收款/退款单功能。</li><li>收款单支持现金折扣、手续费场景。退款单支持手续费场景。</li><li>支持预收。</li><li>支持三方交易</li></ul><h3 id="应收收款核销"><a href="#应收收款核销" class="headerlink" title="应收收款核销"></a>应收收款核销</h3><blockquote><p>应收收款核销是将应收单与收款单一一对应，这是准确提供账龄分析表、到期债权表等分析数据的前提</p></blockquote><ul><li>支持关联关系核销、 匹配条件核销，特殊业务核销</li><li>可以自定义核销方案</li><li>匹配条件核销为向导式，支持应收单与应付单、其他应收单与其他应付单的核销</li><li>特殊业务核销支持任意单据的核销</li><li>支持直接核销与定时核销</li></ul><h3 id="应收转销"><a href="#应收转销" class="headerlink" title="应收转销"></a>应收转销</h3><blockquote><p>由于某种原因，对客户A的应收需要转给客户B，后期对账和催款都针对客户 B进行，此时需要应收转销功能</p></blockquote><ul><li>支持按应收单、预收单、其他应收单的转销</li><li>支持部分转出</li><li>可以设置转入单据的业务日期和到期日</li><li>支持反转销</li><li>支持自定义字段转销</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240121222156.png" alt="20240121222156"></p><h3 id="内部应收清理"><a href="#内部应收清理" class="headerlink" title="内部应收清理"></a>内部应收清理</h3><blockquote><p>有些集团内部的往来不需要有实际的现金收支或者开具发票，一般是年未或者一段时间后直接清理掉</p></blockquote><ul><li>无需收款清理</li><li>无需开票清理</li></ul><h3 id="应收款成本确认（收入成本匹配）"><a href="#应收款成本确认（收入成本匹配）" class="headerlink" title="应收款成本确认（收入成本匹配）"></a>应收款成本确认（收入成本匹配）</h3><blockquote><p>满足客户销售商品时，一次出库，但是会分次开票，为了收入与成本四配，成本也需要分次确认</p></blockquote><ul><li>在应收单、销售发票中，提供获取成本的功能，以此实现收入成本匹配的业务场景</li></ul><h3 id="坏账计提与收回"><a href="#坏账计提与收回" class="headerlink" title="坏账计提与收回"></a>坏账计提与收回</h3><blockquote><ol><li>企业与客户进行信用交易产生应收帐款，按企业会计准则应当信用风险，计提坏账准备</li><li>当应收帐款无法收回管理上认定为坏账损失时，需进行坏账处理</li></ol></blockquote><ul><li>支持按账龄分析法计提坏账准备</li><li>支持按个别认定法计提坏账准备</li><li>自动生成坏账准备计提单</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240121222844.png" alt="20240121222844"></p><p>通过设定计提方案自动计提坏账准备，生成坏账准备计提单，用户可通过凭证模板配置生成总账的计提坏账准备凭证</p><h3 id="期末结账"><a href="#期末结账" class="headerlink" title="期末结账"></a>期末结账</h3><blockquote><p>应收款管理模块的结账是完全业务上的结账，不分期间，可以选择任意日期结账。结账后不可以对已结账单据进行新增删除、修改、审核等业务操作</p></blockquote><ul><li>支持任意日期的结账，结束日期默认为开始日期所在月份的最后一天。</li><li>结账之后可以反结账</li><li>根据参数设置，用户可以选择有未审核单据时是否允许结账</li></ul><h3 id="应收款明细表"><a href="#应收款明细表" class="headerlink" title="应收款明细表"></a>应收款明细表</h3><blockquote><p>应收款明细表主要是用来反映某段时旬内与往来单位的期初余额、 本期应收数本期实收数、期未余额等数据的明细信息。</p></blockquote><ul><li>支持按往来单位、 市别明细香询功能</li><li>提供核销功能</li><li>双击可以查看单据</li><li>支持按期间查询</li><li>支持已出库未应收的查询</li><li>支持暂估应收查询</li></ul><h3 id="应收款账龄分析表"><a href="#应收款账龄分析表" class="headerlink" title="应收款账龄分析表"></a>应收款账龄分析表</h3><blockquote><ol><li>应收款账龄分析表反映的是截止到某一时间点， 往来款项余额的时间分布</li><li>此报表的数据来源于应收收款核销未完毕的应收单</li></ol></blockquote><ul><li>支持按往来单位、 币别汇总香查询或者明细香询</li><li>支持自定义账龄分组设置</li><li>支持按到期日查询或者按业务日期查询</li><li>按单显示时，双击可以查看单据</li><li>支持按截止日期查询</li><li>支持暂估应收查询</li></ul><h3 id="已出库未应收发出商品明细表"><a href="#已出库未应收发出商品明细表" class="headerlink" title="已出库未应收发出商品明细表"></a>已出库未应收发出商品明细表</h3><blockquote><p>很多企业将应收单作为发票使用，出库单作为发出商品的转入，出库单下推应收单之后，应收单作为发出商品的转出。 从出库单出发，为统计已出库未应收的发出商品明细情况（价税合计、成本金额数量），新特性提供了一张报表 《已出库未应明细表》进行分析统计。</p></blockquote><ul><li>支持以出库单出发，查看已下推应收单的发出商品成本金额、数量</li><li>支持以出库单出发，查看已下推应收单的单据价税合计</li><li>支持不同利润中心下不同成本核算体系的已出库未应收发出商品明细表数据查询</li></ul><h2 id="应收系统参数"><a href="#应收系统参数" class="headerlink" title="应收系统参数"></a>应收系统参数</h2><blockquote><p>用户可以根据本企业的实际情况对参数进行设置</p></blockquote><ul><li>应收款管理提供多个不同的参数</li><li>支持业务应收和财务应收两种业务模式</li><li>支持启用计算已实现汇兑损益</li><li>支持单据下推携带汇率</li><li>支持自动生成应收单的不同场景</li></ul><h3 id="自动生成应收单验证权限"><a href="#自动生成应收单验证权限" class="headerlink" title="自动生成应收单验证权限"></a>自动生成应收单验证权限</h3><blockquote><p>对于库管人员和应收会计可以更好的进行数据隔离。</p></blockquote><ul><li>应收款管理参数中，增加“自动生成应收单验证权限”勾选项。</li><li>当勾选此选项，自动生成的应收单需要验证应付单权限</li><li>当不勾选此选项，自动生成的应收单不需要验证应收单权限</li></ul><h3 id="启用计算已实现汇兑损益"><a href="#启用计算已实现汇兑损益" class="headerlink" title="启用计算已实现汇兑损益"></a>启用计算已实现汇兑损益</h3><blockquote><p>满足企业应付款业务需要计算已实现汇兑损益时，可以勾选启用计算已实现汇兑损益参数。</p></blockquote><ul><li>在参数设置中增加了“启用计算已实现汇兑损益”的参数。</li><li>该参数为系统级参数。</li><li>勾选该参数后，则不能取消启用。</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240121230629.png" alt="20240121230629"></p><h3 id="应收调汇单"><a href="#应收调汇单" class="headerlink" title="应收调汇单"></a>应收调汇单</h3><blockquote><p>通过应收收款核销产生的应收调汇单，生成总账凭证，实现已实现汇兑损益的调汇。</p></blockquote><ul><li>应收收款核销如果本位币金额有差异，产生应收调汇单。</li><li>业务分类为已实现调汇。</li><li>通过应收调汇单生成凭证，影响总账汇兑损益和应付账款</li></ul><h1 id="应付"><a href="#应付" class="headerlink" title="应付"></a>应付</h1><h2 id="应付整体应用流程"><a href="#应付整体应用流程" class="headerlink" title="应付整体应用流程"></a>应付整体应用流程</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240121231124.png" alt="20240121231124"></p><h2 id="应付账款的两种模式"><a href="#应付账款的两种模式" class="headerlink" title="应付账款的两种模式"></a>应付账款的两种模式</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240121231348.png" alt="20240121231348"></p><h3 id="业务应付"><a href="#业务应付" class="headerlink" title="业务应付"></a>业务应付</h3><p>应付模式：根据入库后确认应付账款的方式，货已收到，则确认应付账款，到票后如果存在金额则生成差异应付单；</p><p>业务应付模式：单到补差<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240222220825.png" alt="20240222220825"></p><h3 id="暂估应付（推荐）"><a href="#暂估应付（推荐）" class="headerlink" title="暂估应付（推荐）"></a>暂估应付（推荐）</h3><p>暂估与财务应付模式：根据发票确认应付账款的方式，货已收到如果没有到票，则确认为暂估应付，如果到票，则确认为应付账款，同时冲回暂估应付；</p><p>暂估应付模式: 单到冲回<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240222221002.png" alt="20240222221002"></p><p>哲估应付模式：月未暂估，月初一次冲回：</p><blockquote><p>月初一次冲回是在当月期末未到发票的入库统一进行暂估，下月月初红单冲回。若在下月末发票仍未到，则再次进行暂估，下下月再进行自动冲回。如此反复，直到发票达到为止。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240222230232.png" alt="20240222230232"></p><h2 id="单据"><a href="#单据" class="headerlink" title="单据"></a>单据</h2><h3 id="应付未开票明细表"><a href="#应付未开票明细表" class="headerlink" title="应付未开票明细表"></a>应付未开票明细表</h3><p>应用介绍：</p><ul><li>提供应付未开票的明细报表。</li><li>支持按物料明细展示。</li><li>支持暂估应付的查询。</li><li>支持生成月末暂估单，实现月末暂古和月初一次冲回的功能。</li></ul><p>应用场景：<br>可以清晰的香询出供应商的本期期初暂估金额、 本期新增暂估应付、本期冲回的暂估应付、其 期未暂估应付金额等信息。</p><h3 id="在途物资业务"><a href="#在途物资业务" class="headerlink" title="在途物资业务"></a>在途物资业务</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240222231113.png" alt="20240222231113"></p><p>应用介绍：</p><ul><li>在暂估应付单和财务应付单支持先到票后入库的勾选录入。</li><li>在暂估应付单和财务应付单进行核销，必须按字段 “先到票后入库” 相同值进行核销。</li></ul><p>应用场景：<br>由于某种原因，采购存在先到票后入库的现象，按会计要求先到票需要确认应付账款，货物记为在途物质，当货物入库后，从在途物质转为原材料或存货科。</p><h3 id="应付款明细表"><a href="#应付款明细表" class="headerlink" title="应付款明细表"></a>应付款明细表</h3><p>应用介绍：</p><ul><li>支持按往来单位、币别明细香询功能</li><li>提供核销功能</li><li>双击可以查看单据</li><li>支持按期间香询</li><li>支持已入库未应付的查询</li><li>支持暂估应付香询</li></ul><p>应用场景:<br>应付款明细表主要是用来反映某段时间内与往来单位的期初余额、 本期应付数本期实付数、其 期未余额等数据的明细信息</p><h2 id="基础设置-1"><a href="#基础设置-1" class="headerlink" title="基础设置"></a>基础设置</h2><h3 id="付款条件"><a href="#付款条件" class="headerlink" title="付款条件"></a>付款条件</h3><h3 id="应付付款核销方案"><a href="#应付付款核销方案" class="headerlink" title="应付付款核销方案"></a>应付付款核销方案</h3><h3 id="应付开票核销方案"><a href="#应付开票核销方案" class="headerlink" title="应付开票核销方案"></a>应付开票核销方案</h3><h3 id="应付初始化"><a href="#应付初始化" class="headerlink" title="应付初始化"></a>应付初始化</h3><p>期初应付单<br>期初付款单</p>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云星空 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作流与审批流</title>
      <link href="/2024/01/12Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E5%B7%A5%E4%BD%9C%E6%B5%81/18axs7pz/"/>
      <url>/2024/01/12Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E5%B7%A5%E4%BD%9C%E6%B5%81/18axs7pz/</url>
      
        <content type="html"><![CDATA[<h1 id="工作流和审批流区别"><a href="#工作流和审批流区别" class="headerlink" title="工作流和审批流区别"></a>工作流和审批流区别</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240114001628.png" alt="20240114001628"></p><h1 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h1><blockquote><p>只有开始节点没有结束节点，引擎判断流程是否完成点，通过拖拽方式在流程中添加节点，节点中添加动作，再用连线连接不同节，点节点中可以添加多个动作，但是只能有一个人工动作，流程驳回到开始节点需要驳回连线，以审批项作为连线的流转条件</p></blockquote><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><h4 id="审批项"><a href="#审批项" class="headerlink" title="审批项"></a>审批项</h4><p>自定义审批项</p><p>审批项关联表单操作，待办任务审批项提交时，完成表单操作</p><p>支持状态转换类的表单操作以及空操作，例如：整单关闭、作废禁用等操作</p><p>审批项指定目标节点，则可在审批节点与目标节点间建立连线并以审批项为条件</p><p>默认审批项 会签投票时 不满足会签结果 流程按照默认审批项继续流转</p><p>提交时保存：默认勾选，勾选提交时保存，在任务处理选择相应的审批项时会自动调用保存操作，不勾选则只处理任务不调用单据的保存逻辑</p><p>允许撤销：勾选 “允许撤销”，则相应的审批项处理后允许撤销，调申核操作的审批项不充许撤销</p><p>撤销操作：任务撤销时会执行撤销操作关联的操作，作为撤销动作的补偿</p><p>撤销逻辑：1. 需要勾选允许撤销 2. 需要下一节点任务未处理</p><h2 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h2><h3 id="消息动作"><a href="#消息动作" class="headerlink" title="消息动作"></a>消息动作</h3><p>比起审批流，工作流消息动作支持发送3种消息：正常、异常、撤销</p><p>支持给外部邮箱和手机号发消息，邮件支持携带附件发送，附件以选择的套打模版格式取单据信息</p><h3 id="自动单据转换"><a href="#自动单据转换" class="headerlink" title="自动单据转换"></a>自动单据转换</h3><p>业务场景：仅适用于没有人工干预的单据转换， 且转换规则为一对一</p><p>自动单据转换是自动动作 （仅支持：分组策略为一对一转换）</p><p>运行时，自动完成下推操作 不弹出下游单据新增的交互界面，注意下游单据是否有必录字段</p><p>如果下推生成的自标单不能通过保存规则校验，可支持暂存</p><h3 id="自动单据提交"><a href="#自动单据提交" class="headerlink" title="自动单据提交"></a>自动单据提交</h3><p>单据提交动作一般置于自动单据转换动作之后，旨在提交单据转换目标单对应的工作流</p><p>需定义提交单据及其变量</p><p>日标单据提交人为上游单据流程的最后处理人</p><p>单据转换动作完成后，入口单据生成目标单据，通过单据提交动作自动提交自标单据的工作流从而将不同的流程串联起来</p><h2 id="连线"><a href="#连线" class="headerlink" title="连线"></a>连线</h2><h2 id="流程测试"><a href="#流程测试" class="headerlink" title="流程测试"></a>流程测试</h2><h1 id="审批流"><a href="#审批流" class="headerlink" title="审批流"></a>审批流</h1><h2 id="节点-1"><a href="#节点-1" class="headerlink" title="节点"></a>节点</h2><blockquote><p>开始节点、结束节点至少要有一个终审节点</p></blockquote><h3 id="节点属性-1"><a href="#节点属性-1" class="headerlink" title="节点属性"></a>节点属性</h3><h4 id="参与人"><a href="#参与人" class="headerlink" title="参与人"></a>参与人</h4><blockquote><p>节点上的处理人</p></blockquote><p>基础资料：</p><ul><li>单一维度参与人: 包括：用户、角色、岗位、汇报关系等，取单维度的并集</li><li>参与人方案：在同一节点设置多套参与人方案，按照方案优先级、方案条件解析参与人</li><li>汇报关系：与岗位体系紧密结合，可以选择汇报类型，汇报关系</li></ul><p>变量：</p><ul><li>参与人变量：参与人变量可以取单据、流程中的用户变量</li><li>参与人组合：可将不同维度参与人按照一定逻辑关系进行组合运算(or与and)</li><li>支持二开自定义参与人</li></ul><h4 id="审批项-1"><a href="#审批项-1" class="headerlink" title="审批项"></a>审批项</h4><p>审批项：审批同意、驳回重审，终止流程，不能新增、删除</p><ul><li>审批同意：流程流向满足条件的下游节点</li><li>驳回重审：驳回到已经运行过的上游节点<ul><li>[可选参数：]重新提交时跳回本节点（如果此单据上一级审批过了，再次提交则直接跳到驳回节点）</li></ul></li><li>终止流程：终止正在运行的流程实例状态变更为”终止”，单据状态为“重新审核”，且此审批项可以关联表单操作</li></ul><p>允许撤销：</p><ul><li>撤销操作：任务撤销时会执行撤销操作关联的操作，作为撤销动作的补偿</li><li>撤销逻辑：1. 需要勾选允许撤销 2. 需要下一节点任务未处理</li></ul><h4 id="高级选项"><a href="#高级选项" class="headerlink" title="高级选项"></a>高级选项</h4><p>转交：任务转交给参与人范围外的人员，不验权限，转发任务给其他人员支持邮件短信、和移动端通知功能</p><p>加签：1. 前加签：任务处理前添加加签人，加签后，当前处理人待办任务消失 2. 后加签：任务处理完后添加加签人，加签后，被加签人收到待办任务</p><ul><li>应用场景：任务处理时或任务处理后需要其他人协助提供信息进行决策，并在流程中记录<br>传阅：流程节点处理人将自己的待办任务信息发给其他人查看（支持多种方式传阅：消息、邮件、短信云、之家）</li></ul><p>批量处理：批量处理待办任务（单据列表选择多条单据进行批量审批，勾选，允许批量处理不勾选，不允许批量处理）</p><ul><li>前提：相同单据类型的相同的流程节点上任务可以批量处理，批量任务处理会将所选任务按流程节点进行分组</li></ul><p>追加、指定参与人：指定下一步处理人：支持选择局部参与人接收任务，在当前解析出来的下一节点参与的基础上，允许追加新的参与人</p><p>跳过、驳回：跳过不支持终审节点</p><h4 id="审批策略"><a href="#审批策略" class="headerlink" title="审批策略"></a>审批策略</h4><p>顺签（参与人组合）：同一节点解析出多个参与人时，有一个处理人处理完任务，流程就会运行到下一节点</p><p>会签：</p><ul><li>会签顺序：<ul><li>顺序会签：.参与人依次收到待办任务</li><li>无顺序会签：参与人同时收到待力任务</li></ul></li><li>会签类型:<ul><li>确定票数</li><li>比例票数（百分比用小数表示）</li><li>[Tip:] 会签不支持超时处理和超时提醒，会签不支持指定下一处理人和道加参与人</li></ul></li></ul><h4 id="前置、后置条件"><a href="#前置、后置条件" class="headerlink" title="前置、后置条件"></a>前置、后置条件</h4><p>前置条件：流程运行进入当前节点的条件<br>后置条件：流程流出该节点的条件</p><h4 id="出入模式"><a href="#出入模式" class="headerlink" title="出入模式"></a>出入模式</h4><blockquote><p>通过出入模式可以控制分支流程是并行还是串行</p></blockquote><p>并行模式：聚合节点的全部前置节点都处理完成后才激活聚合节点<br>串行模式：聚合节点的任意分支完成即激活此节点其余未处理的前置节点任务自动丢弃</p><h3 id="终审节点"><a href="#终审节点" class="headerlink" title="终审节点"></a>终审节点</h3><blockquote><p>审批业务的最后一个审核节点，完成业务审核，变更单据状态</p></blockquote><p>终审节点的下游节点可以添加消息节点<br>终审节点不支持选择跳过也不支持自动跳过和自动审批</p><h3 id="消息节点"><a href="#消息节点" class="headerlink" title="消息节点"></a>消息节点</h3><blockquote><p>消息的作用是知会， 与待处理任务的差别是：不支持用户通过消息进行流程处理</p></blockquote><p>点击 <code>&#123;&#125;</code> 调出动态文本设置消息标题、内容，支持取单据信息</p><p>消息接收人设置，包括系统内部用户和单据上的邮件变量和手机号变量，达到给系统用户外的邮箱和手机号发消息的效果</p><p>通知方式：收到消息后可以选择邮件、短信、云之家发送</p><h2 id="动作-1"><a href="#动作-1" class="headerlink" title="动作"></a>动作</h2><blockquote><p>每个节点上的审批动作已封装好</p></blockquote><h2 id="连线-1"><a href="#连线-1" class="headerlink" title="连线"></a>连线</h2><blockquote><p>审批流驳回无需连线，连线分支的条件设置</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20240114022606.png" alt="20240114022606"></p><ul><li>高级条件是基本条件的补充</li><li>连接线将不同节点连接起来</li><li>连接线上支持设置流转条件</li><li>流转条件可引用单据头字段流程信息、 流程变量设置条件</li><li>高级条件：python语句</li><li>支持二开自定义流程条件</li><li>【支持隐藏】选项： 可以与流程属性隐藏连线共同控制连线是否显示，以简化流程图的展示</li></ul><h2 id="流程设置"><a href="#流程设置" class="headerlink" title="流程设置"></a>流程设置</h2><p><a href="https://vip.kingdee.com/article/162134973430875648?productLineId=1&amp;isKnowledge=2">审批流设计界面双击鼠标弹出流程设置界面或点击工具图标</a></p><ul><li>修改流程名称</li><li>单据摘要：取单据头上的信息，显示在待办任务列表中</li><li>自动执行选项</li></ul><h2 id="流程测试-1"><a href="#流程测试-1" class="headerlink" title="流程测试"></a>流程测试</h2><p>流程正式发布前，可模拟运行流程，测试流程设计是否正确条件、参与人等解析是否正确<br>流程测试有三种结果： 完成、 挂起、条件不符，需重点关注挂起的测试用例，并根据错误原因进行及时修正</p><h1 id="流程委托"><a href="#流程委托" class="headerlink" title="流程委托"></a>流程委托</h1><blockquote><p>应用场景： 流程处理人不能及时处理流程任务，流程委托后待处理任务自动流转至受托人</p></blockquote><p>流程名称、委委托规则设置：托人、受托人、 委托期间、任务撤回</p><h1 id="流程管理中心"><a href="#流程管理中心" class="headerlink" title="流程管理中心"></a>流程管理中心</h1><p>恢复：因为解析不到参与人挂起的流程可以点恢复按钮进行恢复，弹出转发界面，转发给其他处理人</p><p>跳到下一节点： 当流程是（除解析不到参与人以外）其他问题导致挂起时可以通过该菜单恢复</p><p>终止且反审核：流程终止且反审核后提交时可重新进行审批</p><p>终止：该操作无法逆转，流程实例终正后，系统自动取消实例终止前产生的待处理任务，后续重新提交不会触发审批流； （单据撤销后重新提交才可触发流程启动</p><p>流程管理中心提供了流程日志记录流程运行过程中的错误信息，邮件发送的详细日志； 流程运行的过程记录</p><h1 id="流程报表"><a href="#流程报表" class="headerlink" title="流程报表"></a>流程报表</h1><p>流程报表提供对流程运行的情况、流程处理的效率进行统计</p><h1 id="信息中心"><a href="#信息中心" class="headerlink" title="信息中心"></a>信息中心</h1><p>信息中心以当前用户为核心，列示当前用户的任务、消息、流程，以工作流为驱动搭建的个人工作平台</p><p>通过任务、消息、流程的查询处理，实现系统驱动用户完成需要处理的事项，实现工作找人，提高工作效率</p><p>任务列表：列示登录用户接收到的工作流\审批流审批动作发送的待办任务，可以香查看任务对应流程的流程图</p><h1 id="流程参数设置"><a href="#流程参数设置" class="headerlink" title="流程参数设置"></a>流程参数设置</h1><p>工作流参数为数据中心级参数，必须 administrator 登录设置</p><h2 id="流程处理模式设置"><a href="#流程处理模式设置" class="headerlink" title="流程处理模式设置"></a>流程处理模式设置</h2><ul><li>同步：流程提交 任务提交时，流程实例任务同时被处理， 不依赖后台服务</li><li>消息队列：流程提交、任务提交后，流程实例任务在后台排队等待后台服务处理: 依赖服务：消息队列模式需要K3clouodMQ服务的正常运行</li></ul>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云星空 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶扬科技品质模块实施记录</title>
      <link href="/2023/12/15ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E6%99%B6%E6%89%AC%E7%A7%91%E6%8A%80%E5%93%81%E8%B4%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%96%BD%E8%AE%B0%E5%BD%95/79xlxapq/"/>
      <url>/2023/12/15ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E6%99%B6%E6%89%AC%E7%A7%91%E6%8A%80%E5%93%81%E8%B4%A8%E6%A8%A1%E5%9D%97%E5%AE%9E%E6%96%BD%E8%AE%B0%E5%BD%95/79xlxapq/</url>
      
        <content type="html"><![CDATA[<h1 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h1><ul><li>自动生成检验单</li><li>自动生成采购入库单及应付单</li><li>自动生成采购退料单</li><li>检验员一键审核单据</li></ul><h2 id="品质部"><a href="#品质部" class="headerlink" title="品质部"></a>品质部</h2><p>品质主管</p><ol><li>反审核、删除检验单</li></ol><p>检验员</p><ol><li>检验单提交审核，质检完成</li><li>可选权限<ol><li>自动入库及应付：采购入库单（新增-提交-审核）、应付单（创建）</li><li>自动生成采购退料单：采购退料单（创建）</li></ol></li></ol><h2 id="仓储部"><a href="#仓储部" class="headerlink" title="仓储部"></a>仓储部</h2><p>仓库主管</p><ol><li>删除应付单（不含反审核）</li><li>删除采购入库单</li></ol><p>仓库管理员</p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="可读性优化"><a href="#可读性优化" class="headerlink" title="可读性优化"></a>可读性优化</h2><p>收料通知单：</p><ol><li>【OK】采购订单号（送货单）</li><li>【OK】销售订单号</li><li>【OK】收料通知单套打设置</li><li>【OK】采购退料单打印单据加字段，区分：入库前退料还是入库后退料<ul><li>使用“源单类型”字段作区分，如果是入库前的退料则源单为：收料通知单，如果是入库后的退料则是：采购入库单</li></ul></li><li>【OK】默认展示字段<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20231219154252.png" alt="20231219154252"><ul><li>交货数量</li><li>检验数量</li><li>合格数量</li><li>判退数量</li><li>退料数量</li><li>入库数量</li><li>来料检验</li><li>行状态</li><li>源单单号</li><li>需求单据编号</li></ul></li></ol><p>检验单：</p><ol><li>【OK】采购订单号（送货单）</li><li>【OK】销售订单号</li><li>【OK】过滤方案<ul><li>未检</li></ul></li><li>检验单没有质检的状态设置为未检</li><li>【OK】检验单明细加备注</li><li>江门和深圳的检验数据隔离</li><li><a href="https://vip.kingdee.com/article/360921260718562560?productLineId=1&amp;isKnowledge=2">检验单绑定质检员</a>账号制单自动带出此账号的质检员</li></ol><h2 id="其他优化"><a href="#其他优化" class="headerlink" title="其他优化"></a>其他优化</h2><p>收料通知单：</p><ol><li>【OK】仓库字段必录</li><li>【OK】隐藏供应商交货数量</li></ol><p>自动生成单据：</p><ol><li>【OK】收料通知单审核自动生成检验单<ol><li>单据类型列表 —&gt; 收料通知单 —&gt; 勾选审核自动生成检验单</li></ol></li><li>检验单判退自动生成采购退料单</li><li>【OK】检验单审核自动生成采购入库单和应付单</li></ol><h1 id="待处理"><a href="#待处理" class="headerlink" title="待处理"></a>待处理</h1><ol><li>仓库催检，在系统里面有提醒</li><li>超时未检验明细颜色变化</li><li>即时库存显示待检数量</li><li>检验单未检验完成的单据如何处理？</li><li>MRB 评审单</li><li>收料通知单单据类型默认为委外</li></ol><h2 id="检验单未检验完成的单据如何处理？"><a href="#检验单未检验完成的单据如何处理？" class="headerlink" title="检验单未检验完成的单据如何处理？"></a>检验单未检验完成的单据如何处理？</h2><p>检验单明细中的检验结果字段选择“保留”，需要再次检验则直接重新推一个检验单</p><h2 id="在途物料查询"><a href="#在途物料查询" class="headerlink" title="在途物料查询"></a>在途物料查询</h2><p>查询采购申请执行汇总表，很清楚的显示申请数量、订单数量、收料数量、入库数量、应付数量等，可以引出过滤入库数量小于申请数量的行</p>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>计划管理</title>
      <link href="/2023/12/05Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E8%AE%A1%E5%88%92%E7%AE%A1%E7%90%86/18gxs7xz/"/>
      <url>/2023/12/05Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E8%AE%A1%E5%88%92%E7%AE%A1%E7%90%86/18gxs7xz/</url>
      
        <content type="html"><![CDATA[<h1 id="计划方案"><a href="#计划方案" class="headerlink" title="计划方案"></a>计划方案</h1><blockquote><p><a href="https://vip.kingdee.com/article/264040531175656192?productLineId=1&amp;isKnowledge=2#10">星空《计划管理》使用指南</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20231205103938.png" alt="20231205103938"></p><h2 id="运算模式"><a href="#运算模式" class="headerlink" title="运算模式"></a>运算模式</h2><h3 id="按物料范围"><a href="#按物料范围" class="headerlink" title="按物料范围"></a>按物料范围</h3><ol><li>先MPS再MRP</li><li>分层计划</li><li>分批计划</li><li>ROP计划</li></ol><h4 id="分批计划"><a href="#分批计划" class="headerlink" title="分批计划"></a>分批计划</h4><blockquote><p>应用场景：</p><ol><li>先生成长交期材料的采购需求。待产品结构定型及订单完成评审后，再生成短交期材料的采购需求</li><li>多名计划员分工协作，分别负责不同类型的材料，如：电子料、五金料、包装料等。计划员希望按自己负责的材料独立地进行物料需求计算</li></ol></blockquote><p>结合：<code>计划标识</code>使用</p><h4 id="ROP计划"><a href="#ROP计划" class="headerlink" title="ROP计划"></a>ROP计划</h4><blockquote><p>应用场景：</p><ol><li>低值易耗品（一旦存货量低于再订货点即补给订货）</li></ol></blockquote><p>计划方案勾选ROP计划，仅跑订货策略为ROP的物料（未勾选ROP计划，则排除ROP物料），计算供需平衡当预计库存低于再订货点时（判断从该日期往后推提前期这段时间的预计库存没有大于再订货点）：当最大库存为0时，则计划订单量=【向上取整（再订货点/经济订货批量】*经济订货批量），采购日期为当天，根据提前期计算到货日期；当最大库存大于0时，则计划订单量=最大库存-预计到货日的库存；计划订单量考虑批量调整；从当天到计划订单需求日期之间不再产生新的计划订单，第二个周期从计划订单的需求日期开始重新计算；</p><h3 id="特殊计划模式"><a href="#特殊计划模式" class="headerlink" title="特殊计划模式"></a>特殊计划模式</h3><ol><li>MTO运算</li></ol><h4 id="MTO运算"><a href="#MTO运算" class="headerlink" title="MTO运算"></a><a href="https://vip.kingdee.com/school/detail/235765701397778432?productLineId=1">MTO运算</a></h4><blockquote><p>应用场景：</p><ol><li>面向订单生产，用到的部分原料为本订单专用，需要与其他订单隔离。（将专用物料的计划模式设置为MTO，通过单据上的计划跟踪号串联订单的供需关系，并实现不同订单之间的数据隔离。</li></ol></blockquote><p>计划跟踪号</p><h3 id="按多组织计划策略"><a href="#按多组织计划策略" class="headerlink" title="按多组织计划策略"></a>按多组织计划策略</h3><ol><li>集中计划</li><li>协同计划</li></ol><h4 id="集中计划"><a href="#集中计划" class="headerlink" title="集中计划"></a>集中计划</h4><blockquote><p>应用场景：</p><ol><li>适用于多组织集中做计划，一个组织跑计划，系统根据BOM子项的供应组织、物料的供应来源跑出各组织的计划订单，各组织根据计划订单执行生产、采购、委外业务。</li></ol></blockquote><h2 id="运算范围"><a href="#运算范围" class="headerlink" title="运算范围"></a>运算范围</h2><h3 id="以单据做为需求源头"><a href="#以单据做为需求源头" class="headerlink" title="以单据做为需求源头"></a>以单据做为需求源头</h3><ol><li>预测单：对未来一段时间的销售预测，需要通过计划运算提前备料生产；</li><li>销售订单：当企业接到客户订单后，则以销售订单做为需求源头进行计划运算（预测和销售在某些时段会存在重复需求，可以通过“预测冲销”去除重复需求。）</li><li>预测冲销：预测单与销售订单之间重复需求的冲减，包括以下类型：<ol><li>预测冲销：成品销售订单与预测单之间的冲销</li><li>产品系列冲销：按产品系列预测关键半成品或原材料，产品系列预测单与产品销售订单之间的冲销</li><li>ATO：按部件预测计划，成品装配销售的业务模式，成品销售订单与半成品预测单之间的冲销</li></ol></li><li>计划订单：当企业计划运算模式为“先跑MPS再跑MRP“时，跑MRP的需求来源就是MPS计划订单；</li><li>生产/委外订单：根据生产/委外订单展开用料清单物料需求，看要满足生产还需哪些料；</li><li>组织间需求单：与运算模式中的“协同计划”一起使用。</li></ol><h3 id="按运算范围划分"><a href="#按运算范围划分" class="headerlink" title="按运算范围划分"></a>按运算范围划分</h3><h4 id="选单运算"><a href="#选单运算" class="headerlink" title="选单运算"></a>选单运算</h4><p>A：<a href="https://vip.kingdee.com/school/detail/604?productLineId=1&amp;isKnowledge=2">选单计划（不释放不抢占预留）</a></p><blockquote><p>应用场景：</p><ol><li>整体计划已经运算完成，接到一张新的销售订单，需要单独对新增的销售订单进行计算而又不想影响原有整体计划已经完成匹配的供需关系。</li><li>整体计划已经运算完成，针对部分销售订单，供给关系有变化，需要对这些有变动的单据进行小范围的供给关系重算，不想影响计算范围外的其它单据的供给关系。</li></ol></blockquote><p>进行选单计划，方案选择不释放预留，不进行优先级抢占。计算后，原先存在预留关系的供给关系不变，没有预留关系的自由可供给量参与所选需求单据的供给，自由供给不足时，跑出新的计划订单供给。</p><p>B: <a href="https://vip.kingdee.com/school/detail/605?productLineId=1&amp;isKnowledge=2">选单计划（按优先级抢占预留）</a></p><blockquote><p>应用场景：紧急销售订单，需要插单时，可以进行插单运算。(对这张紧急插单进行选单计算，当自由库存不足供给这张销售订单时，希望对于优先级高于插单的订单的供给关系保留不变，抢占比它优先级低的订单的供给，<strong>供给被抢占的订单根据抢占缺口，跑出新的计划订单供给</strong>。)</p></blockquote><p>进行选单计划，方案选择不释放预留，按照优先级抢占弱预留进行计算。</p><h4 id="全局运算"><a href="#全局运算" class="headerlink" title="全局运算"></a>全局运算</h4><p>如果长期只做选单运算，可能会导致虽然局部的供需是平衡的、但是整体供需是不平的，建议定期做全局运算，保证整体供需的平衡。<br>全局运算会比较耗时，建议设置调度运算计划，每晚自动执行；另外，由于实际业务中不可避免的存在超领、补料、退料等业务场景，会破坏之前MRP计算的供需平衡，也建议定期通过调度运算来修复因实际业务与计划不匹配造成的物料短缺。并且建议定期做预留数据检查与修复，以避免因预留数据错误造成计划运算数据不准。</p><p><a href="https://vip.kingdee.com/school/detail/249615209034514176?productLineId=1">计划调度运算</a></p><blockquote><p>由于MRP运算相对比较耗时，且在运算时会占用一定的系统资源，一般不建议随意频繁地进行MRP运算，尤其是运算范围大、耗时长的MRP运算。</p><ul><li>企业可考虑设置调度计划，每天晚上或按其他固定周期由系统自动执行MRP运算方案，以减少MRP运算对其他业务应用带来的影响。</li><li>另外，在企业实际运作的过程中，不可避免的存在超领、补料、退料等业务场景。这些业务会破坏之前MRP计算的供需平衡，如果每次均执行精确选单的MRP计划运算，之前已经计算过的需求单据出现的缺口将不能得到修复。<strong>建议设置一个不释放预留的计划方案，通过调度运算功能创建一个定时调度，自动修复因实际业务与计划不匹配造成的物料短缺。</strong></li></ul></blockquote><h2 id="运算参数"><a href="#运算参数" class="headerlink" title="运算参数"></a>运算参数</h2><ol><li><a href="https://vip.kingdee.com/school/251742954690730496">组织参数/运算范围/需求参数/供给参数</a></li><li><a href="https://vip.kingdee.com/school/251748910014594560">运算参数</a></li><li><a href="https://vip.kingdee.com/school/251749509783715584">运算参数-需求优先级</a></li><li><a href="https://vip.kingdee.com/school/251749713358028288">合并参数</a></li><li><a href="https://vip.kingdee.com/school/251750118997982976">投放参数/仓库参数/其他参数</a></li></ol><h3 id="组织参数-运算范围-需求参数-供给参数"><a href="#组织参数-运算范围-需求参数-供给参数" class="headerlink" title="组织参数/运算范围/需求参数/供给参数"></a>组织参数/运算范围/需求参数/供给参数</h3><p>计划展望期单位和计划展望期设置的是计划运算的时间范围，MRP 运算时所取的最大需求日期为系统时间+计划展望期长度</p><h4 id="运算范围-1"><a href="#运算范围-1" class="headerlink" title="运算范围"></a>运算范围</h4><blockquote><p>定义的是哪些单据作为运算的需求单据，可以具体单据的不同单据类型的范围定义，根据不同的计划模式：有冲销结果，MPS计划订单，生产订单/委外订单，销售订单/预测单/组织间需求单。可根据客户的实际场景进行配置设置。</p></blockquote><p>计划运算考虑需求时界和计划时界时，运算需求单据需要同时勾选销售订单加预测单，运算逻辑为：</p><ol><li>运算开始日期至需求时界时段内，需求单据取销售订单</li><li>需求时界至计划时界时段内，需求单据取销售订单与预测单之间的数量最大者</li><li>计划时界以后，需求单据取预测单</li></ol><h4 id="运算参数-1"><a href="#运算参数-1" class="headerlink" title="运算参数"></a>运算参数</h4><p>需求优先级</p><h4 id="合并参数"><a href="#合并参数" class="headerlink" title="合并参数"></a>合并参数</h4><p>计划运算的合并有三种</p><ol><li>按销售订单/预测单合并都可以分为整单合并，或者按分录合并，具体根据方案中的设置来确定；</li><li>POQ合并时按照订货间隔期合并需求，目前只支持第一笔净需求为周期开始日期合并；</li><li>不同需求来源的合并，要求物料中同时勾选MRP计算是否合并需求参数，勾选后，运算后会把同一天的需求进行合并。</li></ol><p>按单合并：物料计划控制页签合并参数勾选MRP计算是否按单合并，然后根据方案中的按整单或者按分录，同一个订单或者同一个分录下的相同物料需求进行合并</p><p>按需求日期合并：需求来源不同的相同物料，如果需求日期相同需要合并的，物料的合并控制参数需要勾选上MRP计算是否合并需求，同时运算方案上勾选对应的合并参数，计算运算后会合并需求日期同一天的所有需求</p><p>除了运算合并，计划订单列上上还可以进行手工合并，选择需要合并的计划订单，点业务操作中的合并，这时候会生成合并后的计划订单，原来的计划订单关闭</p><h4 id="投放参数-仓库参数-其他参数"><a href="#投放参数-仓库参数-其他参数" class="headerlink" title="投放参数/仓库参数/其他参数"></a>投放参数/仓库参数/其他参数</h4><p>投放参数：投放控制可以设置运算产生的计划订单是否直接投放，投放单据的默认值等</p><p>仓库参数：可以设置本次运算哪些仓库的库存参与运算，作为供应，同时可以设置仓库的供应优先级</p><h3 id="预留关系"><a href="#预留关系" class="headerlink" title="预留关系"></a>预留关系</h3><blockquote><p>基于预留关系可以实现订单进度跟踪、净改变运算、按单生产等功能</p></blockquote><p><a href="https://vip.kingdee.com/article/261883304041643520?productLineId=1&amp;isKnowledge=2">预留关系问题解答贴（更新）</a></p><ul><li>预留关系查询<ul><li>预留关系综合查询</li><li>预留关系追溯查询</li></ul></li><li>预留单</li></ul><h1 id="计划管理基础"><a href="#计划管理基础" class="headerlink" title="计划管理基础"></a>计划管理基础</h1><ol><li>预留</li><li>低位码运算</li><li>计划方案参</li><li>物料替代</li><li>安全库存等</li></ol><h2 id="预留"><a href="#预留" class="headerlink" title="预留"></a>预留</h2><h2 id="低位码运算"><a href="#低位码运算" class="headerlink" title="低位码运算"></a>低位码运算</h2><blockquote><p><a href="https://vip.kingdee.com/article/339005367219275264?productLineId=1&amp;isKnowledge=2">【低位码运算】和【低位码嵌套/BOM嵌套】简介</a></p></blockquote><h2 id="计划方案参"><a href="#计划方案参" class="headerlink" title="计划方案参"></a>计划方案参</h2><h2 id="物料替代"><a href="#物料替代" class="headerlink" title="物料替代"></a>物料替代</h2><h2 id="安全库存等"><a href="#安全库存等" class="headerlink" title="安全库存等"></a>安全库存等</h2><h1 id="单据测试"><a href="#单据测试" class="headerlink" title="单据测试"></a>单据测试</h1><h2 id="预留释放测试"><a href="#预留释放测试" class="headerlink" title="预留释放测试"></a>预留释放测试</h2><ul><li>弱预留：变更销售订单为另一个料号，会释放之前订单物料的预留关系</li></ul>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云星空 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习路线</title>
      <link href="/2023/11/09Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E8%B7%AF%E7%BA%BF/18axs7pz/"/>
      <url>/2023/11/09Kingdee%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/Kingdee_%E8%B7%AF%E7%BA%BF/18axs7pz/</url>
      
        <content type="html"><![CDATA[<h1 id="系统管理员"><a href="#系统管理员" class="headerlink" title="系统管理员"></a>系统管理员</h1><ul><li><a href="https://vip.kingdee.com/school/careerPath/20230001?productLineId=1">系统管理员专题</a></li></ul><h1 id="物控"><a href="#物控" class="headerlink" title="物控"></a>物控</h1><ul><li><a href="https://vip.kingdee.com/school/learnPath/379775552178917888?productLineId=1">金蝶云·星空【物控】学习路径</a></li><li><a href="https://vip.kingdee.com/article/264040531175656192?productLineId=1&amp;isKnowledge=2#10">星空《计划管理》使用指南</a></li></ul><h1 id="生产物料员"><a href="#生产物料员" class="headerlink" title="生产物料员"></a>生产物料员</h1><ul><li><a href="https://vip.kingdee.com/school/learnPath/379936394023427584?productLineId=1">金蝶云·星空【生产物料员】学习路径</a></li></ul><h1 id="PLM"><a href="#PLM" class="headerlink" title="PLM"></a>PLM</h1><ul><li><a href="https://vip.kingdee.com/school/learnPath/190778040081845248?productLineId=30">星空实施认证（初级）—PLM</a></li><li><a href="https://vip.kingdee.com/school/topic/500303978379229952?pathId=225565057483012352&amp;productLineId=36">星空PLM售前认证（中级）</a></li></ul><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 库存状态测试，状态默认值</li><li>[ ] 辅助属性</li><li>[ ] MPS/MRP计划与分层计划模式</li><li>[ ] 数据引入与覆盖测试</li></ul>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云星空 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单据测试记录</title>
      <link href="/2023/10/11ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E5%8D%95%E6%8D%AE%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95(20230711)/87jfxxpz/"/>
      <url>/2023/10/11ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E5%8D%95%E6%8D%AE%E6%B5%8B%E8%AF%95%E8%AE%B0%E5%BD%95(20230711)/87jfxxpz/</url>
      
        <content type="html"><![CDATA[<h1 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h1><h2 id="单据变更"><a href="#单据变更" class="headerlink" title="单据变更"></a>单据变更</h2><ul><li>[x] 销售合同变更</li><li>[x] 销售订单变更</li><li>[x] 采购订单变更</li><li>[ ] 委外订单（申请）变更</li><li>[ ] 采购订单(委外)变更</li><li>[ ] 委外用料清单变更</li><li>[ ] 生产订单变更</li><li>[ ] 生产用料清单变更</li><li>[x] 物料清单变更</li></ul><h2 id="退料流程"><a href="#退料流程" class="headerlink" title="退料流程"></a>退料流程</h2><ul><li>[x] 采购退料流程</li><li>[ ] 委外领料/退料流程/补料流程（超耗单）</li><li>[x] 生产领料/退料流程</li></ul><h1 id="财务部"><a href="#财务部" class="headerlink" title="财务部"></a>财务部</h1><h2 id="期初余额"><a href="#期初余额" class="headerlink" title="期初余额"></a>期初余额</h2><p>期初收款/付款单</p><ul><li>应收/应付 是期初应收单 / 期初应付单</li><li>预收/预付 是期初收款单 / 期初付款单</li></ul><h1 id="工程部"><a href="#工程部" class="headerlink" title="工程部"></a>工程部</h1><h2 id="物料变更"><a href="#物料变更" class="headerlink" title="物料变更"></a>物料变更</h2><h3 id="A手动分配为B料号，数据会同步吗？"><a href="#A手动分配为B料号，数据会同步吗？" class="headerlink" title="A手动分配为B料号，数据会同步吗？"></a>A手动分配为B料号，数据会同步吗？</h3><p>会同步：</p><ul><li>BOM 会同步为 B 料号</li><li>A 料号的库存也会转过去 </li></ul><h2 id="物料清单变更"><a href="#物料清单变更" class="headerlink" title="物料清单变更"></a>物料清单变更</h2><h3 id="变更项目"><a href="#变更项目" class="headerlink" title="变更项目"></a>变更项目</h3><blockquote><p>注意实际需求，物料生效日期的维护</p></blockquote><ol><li>点位：如果点位有变化，需要在物料中维护实际的点位，物料点位变化<code>自动同步到采购订单（委外）</code>中。</li><li>用量: 变更之后可以自动更新到用料清单的用量中。<ul><li>已领料：<ul><li>变更后大于应发数量则需要重新下推领料单（补领之前未领的数量）</li><li>变更后小于应发数量则需要删除领料单，重新下推实际数量</li></ul></li></ul></li><li>料号：<ul><li>增加物料<ul><li>会同步到用料清单（物料生效日期 &lt; 生产订单的计划完工日期）</li></ul></li><li>删除物料<ul><li>会同步到用料清单，应发数量会变成 0（已经领过料了，需要删除对应的领料单）</li></ul></li></ul></li></ol><h3 id="物料清单同步更新"><a href="#物料清单同步更新" class="headerlink" title="物料清单同步更新"></a>物料清单同步更新</h3><blockquote><p><a href="https://vip.kingdee.com/school/detail/165479567510585344?topicId=215869268972493824&amp;stageId=215870095619330304&amp;productLineId=31&amp;islogin=true">参考链接</a></p></blockquote><p>变更BOM之后如果需要同步到相关的用料清单，需要选中变更后的BOM点击：<code>业务操作</code> —&gt; <code>同步更新</code>，可以更新到：</p><blockquote><ol><li>计划订单列表</li><li>生产订单列表</li><li>委外订单列表</li></ol></blockquote><p>注意事项：</p><ul><li>增加物料并同步，注意维护增加的物料上面的<code>生效日期</code>。更新日期包含计划开工日期和单据日期，物料清单更新时，需根据子项物料的生效日期与参数设置的<code>计划开工日期</code>/<code>单据日期</code>对比，需满足生效日期不能再参数设置的日期之后。</li></ul><p>Todo</p><p>生产订单列表:</p><ul><li>[x] 生产订单在计划开工时间之前结案还会被同步更新吗？<ul><li>[x] 不会，结案后的订单不会在同步更新列表中展示<br>委外订单列表：</li></ul></li><li>[ ] 委外订单领料再同步更新过去可以吗？</li></ul><h3 id="用料清单已领ABC料，BOM修改删除ABC-再新增ABC-用料清单已领物料会被覆盖吗？"><a href="#用料清单已领ABC料，BOM修改删除ABC-再新增ABC-用料清单已领物料会被覆盖吗？" class="headerlink" title="用料清单已领ABC料，BOM修改删除ABC,再新增ABC,用料清单已领物料会被覆盖吗？"></a>用料清单已领ABC料，BOM修改删除ABC,再新增ABC,用料清单已领物料会被覆盖吗？</h3><h1 id="业务部"><a href="#业务部" class="headerlink" title="业务部"></a>业务部</h1><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ul><li>销售合同如何下查？</li><li>销售合同合并下推销售订单（只允许同一个客户）</li><li>销售合同推销售订单之后，如何判断此合同之前有没有跑过预测单？有跑过就不用下达采购订单了。</li><li>如何查看销售合同下推了多少销售订单<ul><li>通过<code>销售数量</code>和<code>累计销售数量（已经下推了销售订单的数量）</code>字段来判断</li></ul></li><li>如何查看销售订单下推了多少发货通知单？<ul><li>在销售订单中过滤出<code>累计发货通知数量</code>字段</li></ul></li><li>销售订单：过滤字段：<code>已计划运算</code> 可以查看此订单是否已经跑过计划</li></ul><h2 id="销售合同变更"><a href="#销售合同变更" class="headerlink" title="销售合同变更"></a>销售合同变更</h2><h3 id="变更销售合同的数量"><a href="#变更销售合同的数量" class="headerlink" title="变更销售合同的数量"></a>变更销售合同的数量</h3><ol><li>销售合同 —&gt; 预测单<ol><li>预测单跑出计划之后，变更销售合同的数量，跑出来的结果不会同步【需要重新来跑计划】</li></ol></li><li>销售合同 —&gt; 销售订单<ol><li>已经下推了的销售订单不会同步变更后的销售合同的数量和单价</li><li>重新从销售合同下推到销售订单，会同步更新单价数据</li><li>已经下推了下游单据，则数量不可以比下游单据数量少，只能比下游单据多，多出的数量在重新下推销售订单的时候会直接带出来<code>未下推的数量</code></li></ol></li></ol><h3 id="变更销售合同的BOM"><a href="#变更销售合同的BOM" class="headerlink" title="变更销售合同的BOM"></a>变更销售合同的BOM</h3><blockquote><p>变更BOM之后只能同步以下单据：</p><ol><li>计划订单列表</li><li>生产订单列表</li><li>委外订单列表</li></ol></blockquote><ol><li>销售合同 —&gt; 预测单<ul><li>跑出来之后的预测单不会因BOM的更新而更新。【变更BOM之后需要重新来跑计划】</li></ul></li></ol><h2 id="销售订单变更"><a href="#销售订单变更" class="headerlink" title="销售订单变更"></a>销售订单变更</h2><h3 id="变更销售订单的数量"><a href="#变更销售订单的数量" class="headerlink" title="变更销售订单的数量"></a>变更销售订单的数量</h3><ol><li>销售订单 —&gt; 预测单<ol><li>预测单跑出计划之后，变更销售订单的数量，跑出来的结果不会同步【需要重新来跑计划】</li></ol></li><li>销售订单 —&gt;发货通知单<ol><li>已经下推了下游单据，则数量不可以比下游单据数量少，只能比下游单据多，多出的数量在重新下推销售订单的时候会直接带出来<code>未下推的数量</code></li></ol></li><li>变更删除销售订单物料<ol><li>只能删除没有下游单据的订单物料，如果有下游单据需要先删除下游订单的单据，再执行变更删除物料的操作</li></ol></li></ol><h1 id="PMC"><a href="#PMC" class="headerlink" title="PMC"></a>PMC</h1><h2 id="常见问题-1"><a href="#常见问题-1" class="headerlink" title="常见问题"></a>常见问题</h2><h2 id="委外订单变更"><a href="#委外订单变更" class="headerlink" title="委外订单变更"></a>委外订单变更</h2><h2 id="委外订单拆分"><a href="#委外订单拆分" class="headerlink" title="委外订单拆分"></a>委外订单拆分</h2><blockquote><p><a href="https://vip.kingdee.com/article/383061643971574272?productLineId=1&amp;isKnowledge=2">委外订单拆分</a></p></blockquote><p>系统不支持委外订单同一行主产品多次下推采购订单,因此委外订单数量部分下推采购订单后,想要再次下推采购订单会提示不符合条件。</p><p>应用场景：</p><ul><li>把单个订单变更给多个供应商做<ul><li>当订单被<strong>关账后需要拆分</strong>，可以在<code>委外管理参数</code>中勾选<code>允许变更或拆分关账前下达的委外订单</code><ul><li><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230919095023.png" alt="20230919095023"></li></ul></li></ul></li></ul><h2 id="委外用料清单变更"><a href="#委外用料清单变更" class="headerlink" title="委外用料清单变更"></a>委外用料清单变更</h2><h2 id="采购订单（委外）变更"><a href="#采购订单（委外）变更" class="headerlink" title="采购订单（委外）变更"></a>采购订单（委外）变更</h2><h2 id="生产订单变更"><a href="#生产订单变更" class="headerlink" title="生产订单变更"></a>生产订单变更</h2><h2 id="生产用料清单变更"><a href="#生产用料清单变更" class="headerlink" title="生产用料清单变更"></a>生产用料清单变更</h2><h1 id="采购部"><a href="#采购部" class="headerlink" title="采购部"></a>采购部</h1><h2 id="采购订单变更"><a href="#采购订单变更" class="headerlink" title="采购订单变更"></a>采购订单变更</h2><p>采购订单变更（且有下游单据关联情况）：</p><ul><li>数量改小：订单数量大于入库数量：直接用采购订单新变更单，变更数量，审核采购订单新变更单即可生效（不用反审核采购订单）</li><li>数量改大：订单数量小于入库数量：先删除下游单据，用采购订单新变更单变更数量，审核采购订单新变更单即可生效（不用反审核采购订单），然后再下推下游单据</li></ul><h2 id="采购退料流程"><a href="#采购退料流程" class="headerlink" title="采购退料流程"></a>采购退料流程</h2><blockquote><p>所有的采购退料单都需要下推应付单，可以在<code>应付款管理参数</code>中勾选<code>退料单审核时自动生成应付单</code></p></blockquote><p>退料方式：</p><ul><li>退料补料</li><li>退料并扣款</li></ul><p><a href="https://vip.kingdee.com/article/382696832990103808?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">补料方式：</a></p><ol><li>按源单补料（采购订单下推收料通知单/采购入库单,后续进行采购退料,默认补料方式为“按源单补料”且灰色不可修改。）<ul><li>后续补料通过<code>采购订单重新下推</code>收料通知单/采购入库单处理</li></ul></li><li>创建补料单（手工创建的无源单采购退料单、收料通知单下推的采购入库单再下推采购退料单、采购入库单下推采购退料单,上述三种场景默认补料方式为<code>创建补料订单</code>,默认不可再修改补料方式）<ul><li>创建补料订单方式,可以根据采购退料单的补料数量下推采购订单-单据类型为<code>采购补料订单</code>,后续订单再进行收料入库。</li></ul></li></ol><h3 id="退料流程一"><a href="#退料流程一" class="headerlink" title="退料流程一"></a>退料流程一</h3><blockquote><p>现在流程采购没有走收料通知及检验单，所有整个采购及退料流程也简化了：</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230712200046.png" alt="微信图片_20230712200046"></p><h3 id="退料流程二"><a href="#退料流程二" class="headerlink" title="退料流程二"></a>退料流程二</h3><p>猜想：有收料通知单就不用入库，直接退料了。</p><h1 id="生产部"><a href="#生产部" class="headerlink" title="生产部"></a>生产部</h1><p>生产主管通过生产订单，需要生产哪一款产品，直接行执行<code>开工</code>，即可进行领料</p><h2 id="常见问题-2"><a href="#常见问题-2" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="生产-委外其他入库单（补单）"><a href="#生产-委外其他入库单（补单）" class="headerlink" title="生产/委外其他入库单（补单）"></a>生产/委外其他入库单（补单）</h3><p>老系统的生产/委外成品在新系统走<code>其他入库单</code>【其他入库单单据类型：<code>生产/委外其他入库单（补单）</code>】</p><h3 id="旧系统领了一半的料新系统领料流程"><a href="#旧系统领了一半的料新系统领料流程" class="headerlink" title="旧系统领了一半的料新系统领料流程"></a>旧系统领了一半的料新系统领料流程</h3><p>旧系统的订单，在旧系统已经领了一半的料了，然后盘到新系统了，在新系统领料流程：</p><ol><li>把旧系统整个订单补到新系统</li><li>自动生成用料清单</li><li>已经在旧系统领过料了，可以设置此物料为<code>不领料</code>,或者变更用料清单</li></ol><h3 id="相关单据对应销售订单号字段"><a href="#相关单据对应销售订单号字段" class="headerlink" title="相关单据对应销售订单号字段"></a>相关单据对应销售订单号字段</h3><ul><li>生产订单<ul><li>需求单据和备注（补单）</li></ul></li><li>生产用料清单<ul><li>需求单据</li></ul></li><li>生产领料单列表<ul><li>需求单据</li></ul></li><li>生产退料单<ul><li>需求单据</li></ul></li></ul><h3 id="生产用料清单列表字段说明"><a href="#生产用料清单列表字段说明" class="headerlink" title="生产用料清单列表字段说明"></a>生产用料清单列表字段说明</h3><p>超发控制方式:</p><ul><li><a href="https://vip.kingdee.com/article/385233483037141248?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E5%AE%98%E6%96%B9%E7%9F%A5%E8%AF%86&amp;productLineId=1&amp;isKnowledge=2">如何设置允许超用料清单数量进行领料</a></li></ul><p>生产订单状态：</p><ul><li><code>完工</code>，完工状态不允许再生产入库，可以生产领料，退料，补料</li><li><code>结案</code>，指业务关闭，生产订单不允许再入库，领料，退料，补料及汇报</li><li><code>计划确认</code>，不能领料，退料，补料，生产汇报，入库</li><li><code>下达</code>，可以领料，退料，补料</li><li><code>开工</code>，可以领料，退料，补料，汇报，入库</li></ul><h2 id="生产领料-退料流程"><a href="#生产领料-退料流程" class="headerlink" title="生产领料/退料流程"></a>生产领料/退料流程</h2><blockquote><p>退料操作必须要在生产订单入库之前执行</p></blockquote><ol><li>领料：从生产用料清单下推生产领料</li><li>入库：从生产汇报单下推生产入库</li><li>物料不良退仓：从<code>生产领料单</code>下推<code>生产退料单</code>（并注明退料到哪个仓库）</li><li>物料不良退仓后再次领料： 步骤3之后再从用料清单下推一个生产领料单（退料之后生产用料清单中<code>未领数量</code>字段会刷新，但是应发数量和已领数量数量不会有变化）</li></ol><p><a href="https://vip.kingdee.com/article/356094725989808384?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">生产退料单的退料类型：</a></p><ol><li><code>良品退料</code>（多发的物料通过<code>生产退料单</code>退回给仓库）</li><li><code>来料不良退料</code>（通过<code>生产领料单</code>继续领用）</li><li><code>作业不良退料</code>（通过<code>生产补料单</code>来补领）</li></ol><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 物料的属性，看下哪些属性是可以做子BOM的？</li></ul><p>UT03压铸超薄小圆隔离电源【过EMC】6W 5CCT（27/30/35/40/50K-PS）可控硅调光 无频闪 输入AC:108V-132V 输出DC:23-30V 185mA PF&gt;0.9 （灯板2B9C【小铁盒带LOGO“Amico”（4个敲落孔）料厚：0.5MM+裸铜地线+黑盒+公母扁线+公端尾卡（新开模）三芯线 图号：UL2464-24-B】从176订单开始，塑壳供应商提供</p>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶扬科技实施ERP面临问题及解决方案记录</title>
      <link href="/2023/09/21ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E6%99%B6%E6%89%AC%E7%A7%91%E6%8A%80%E9%9D%A2%E4%B8%B4%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/29xlxazz/"/>
      <url>/2023/09/21ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E6%99%B6%E6%89%AC%E7%A7%91%E6%8A%80%E9%9D%A2%E4%B8%B4%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/29xlxazz/</url>
      
        <content type="html"><![CDATA[<h1 id="损耗问题"><a href="#损耗问题" class="headerlink" title="损耗问题"></a>损耗问题</h1><p>目前我个人有个疑问：五金的材料损耗率在父级上统一都设置的 0.6%<br>如果在每个流程都损耗一部分，越往后，它的实际数量都是小于订单数量的，我比较好奇这个差异怎么解决</p><p>答：实际剩多少数量，就发多少数量</p><h1 id="物料镭雕问题"><a href="#物料镭雕问题" class="headerlink" title="物料镭雕问题"></a>物料镭雕问题</h1><p>场景描述：有一款通用物料A，用在BOM1和BOM2上，其中BOM1需要在厂内使用激光机打印客户logo，BOM2则不需要。目前直接把需要镭雕的描述写在A物料上，导致BOM2不需要镭雕也有这个描述，目前考虑将描述全部改到成品上。是否有其他的思路?</p><ol><li>建2个料号，</li><li>只有一个料号的情况下，用辅助属性来区分</li><li>在成品描述中描述是否镭雕，在领料单中将成品描述打印出来</li></ol><h1 id="物料描述修改，之前的单据不同步更新或留下记录"><a href="#物料描述修改，之前的单据不同步更新或留下记录" class="headerlink" title="物料描述修改，之前的单据不同步更新或留下记录"></a>物料描述修改，之前的单据不同步更新或留下记录</h1><p>如何实现？</p><p>方案1：添加一个文本框在物料详细页签，每次手动更改都把物料之前的规格手动复制到文本框中作为存档</p><h1 id="计划方案仓库筛选"><a href="#计划方案仓库筛选" class="headerlink" title="计划方案仓库筛选"></a>计划方案仓库筛选</h1><blockquote><p>问题描述：潘老师朱姐问你跑计划的时候可不可以单独考虑深圳或江门的库存和在途物料，不然他们一直在两地调料成本太高了</p></blockquote><p>使用多组织方案</p><h1 id="计划方案预留关系"><a href="#计划方案预留关系" class="headerlink" title="计划方案预留关系"></a>计划方案预留关系</h1><h1 id="防尘棉共模如何计数"><a href="#防尘棉共模如何计数" class="headerlink" title="防尘棉共模如何计数"></a>防尘棉共模如何计数</h1><blockquote><p>【待测试】生产-联副产品方案：<a href="https://vip.kingdee.com/article/371729385630008576?productLineId=1">https://vip.kingdee.com/article/371729385630008576?productLineId=1</a></p></blockquote><h1 id="计划运算BOM包材还未确认的问题"><a href="#计划运算BOM包材还未确认的问题" class="headerlink" title="计划运算BOM包材还未确认的问题"></a>计划运算BOM包材还未确认的问题</h1><blockquote><p>先推BOM中的结构件和电子件，然后再推包材，一般包材确认的比较晚，像重复利用(返单)的BOM,里面的包材先不跑BOM,但是又没有确认，又不想删除的情况</p></blockquote><h2 id="方案1：包材和结构电子分开"><a href="#方案1：包材和结构电子分开" class="headerlink" title="方案1：包材和结构电子分开"></a>方案1：包材和结构电子分开</h2><h2 id="方案2：删除包材跑MRP，包材确认再跑MRP"><a href="#方案2：删除包材跑MRP，包材确认再跑MRP" class="headerlink" title="方案2：删除包材跑MRP，包材确认再跑MRP"></a>方案2：删除包材跑MRP，包材确认再跑MRP</h2><h2 id="方案3-物料维护计划标识，计算时可以把包材排除在外，又可以单独计算包材"><a href="#方案3-物料维护计划标识，计算时可以把包材排除在外，又可以单独计算包材" class="headerlink" title="方案3: 物料维护计划标识，计算时可以把包材排除在外，又可以单独计算包材"></a>方案3: 物料维护<code>计划标识</code>，计算时可以把包材排除在外，又可以单独计算包材</h2><p>目前老师提供了另一种可以不频繁删除BOM中包材的方案：<br>在物料上做两种标识（如果确认用此方案具体的细节我会去做），一种标识是跑BOM中结构件和电子料的，另一种标识是专门用于跑BOM中包材的，从而达到不删除包材也可以跑准需求</p><h1 id="同一个料号发给不同供应商存在差异的情况如何解决？"><a href="#同一个料号发给不同供应商存在差异的情况如何解决？" class="headerlink" title="同一个料号发给不同供应商存在差异的情况如何解决？"></a>同一个料号发给不同供应商存在差异的情况如何解决？</h1><p>不同的供应商用不同的料号？</p><h1 id="BOM-中的电源有时做委外有时直接外购，如何丝滑切换？"><a href="#BOM-中的电源有时做委外有时直接外购，如何丝滑切换？" class="headerlink" title="BOM 中的电源有时做委外有时直接外购，如何丝滑切换？"></a>BOM 中的电源有时做委外有时直接外购，如何丝滑切换？</h1><p>统一建成委外的电源，如果需要外购再计划订单处转采购</p><h1 id="库存包材的问题，库存和需要买的包材版本有差异，但是料号一样。"><a href="#库存包材的问题，库存和需要买的包材版本有差异，但是料号一样。" class="headerlink" title="库存包材的问题，库存和需要买的包材版本有差异，但是料号一样。"></a>库存包材的问题，库存和需要买的包材版本有差异，但是料号一样。</h1><h1 id="江门五金部：自制壳体，在系统中的流程制定"><a href="#江门五金部：自制壳体，在系统中的流程制定" class="headerlink" title="江门五金部：自制壳体，在系统中的流程制定"></a>江门五金部：自制壳体，在系统中的流程制定</h1><p><a href="https://zhuanlan.zhihu.com/p/67442070">产品结构BOM的作用及规范</a></p><blockquote><p>江门现在成立了五金部，职责之一就是部分产品的壳体由外购变成自制了<br>大致流程：</p><blockquote><ol><li>跟订单数量和单号绑定，下订单之后对应的壳体需要买原材料</li><li>原材料买回之后，需自己冲压</li><li>冲压完成之后外发喷粉</li><li>壳体成品入库，发给产线组装成最终成品</li></ol><p>注意事项：</p><ol><li>订单量大的情况如果自己做不过来会考虑直接外购</li><li>自制的情况下可以计算成本</li></ol></blockquote></blockquote><h2 id="方案1：把外壳做成委外的形式嵌套在原BOM中"><a href="#方案1：把外壳做成委外的形式嵌套在原BOM中" class="headerlink" title="方案1：把外壳做成委外的形式嵌套在原BOM中"></a>方案1：把外壳做成委外的形式嵌套在原BOM中</h2><p>假设 BOM1 中的外壳 A 需要原材料 B 去压铸成 C，再外发 A 出去喷粉，在系统中的流程：</p><ol><li>把外壳 A 做成委外BOM的形式，里面有 B 和 C 并嵌套在BOM1中。（其中 A,B,C 为不同料号）</li><li>计划运算，会算出需要外发 A，采购 B，生产 C，</li><li>生产 C 领用 B，并入库 C（压铸过程）</li><li>外发 A 领用 B，并入库 A（外发喷粉）<br>最后A和其他物料生产组装成 BOM1 的最终成品</li></ol><h2 id="方案2：工序-工序委外"><a href="#方案2：工序-工序委外" class="headerlink" title="方案2：工序/工序委外"></a>方案2：工序/工序委外</h2><h2 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h2><ul><li>[x] 订单量大的情况如果自己做不过来会考虑直接外购，可以一半自制一半外购吗？【拆分】</li><li>[ ] <a href="https://vip.kingdee.com/article/504822002989752576?productLineId=1&amp;isKnowledge=2">物料清单正查能否添加显示即时库存</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TodoList 2023</title>
      <link href="/2023/09/092022%20%E5%BD%92%E6%A1%A3/%E9%9A%8F%E7%AC%94/Todo/TodoList%202023-10/84193xx4/"/>
      <url>/2023/09/092022%20%E5%BD%92%E6%A1%A3/%E9%9A%8F%E7%AC%94/Todo/TodoList%202023-10/84193xx4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="bed5f6789f891931b968f5a572bb58e6f9a91f47486db88d1452fd9c68a6b380"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶扬科技 BOM 业务</title>
      <link href="/2023/08/21ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E6%99%B6%E6%89%AC%E7%A7%91%E6%8A%80BOM%E4%B8%9A%E5%8A%A1/29xlxapx/"/>
      <url>/2023/08/21ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E6%99%B6%E6%89%AC%E7%A7%91%E6%8A%80BOM%E4%B8%9A%E5%8A%A1/29xlxapx/</url>
      
        <content type="html"><![CDATA[<h1 id="专业术语"><a href="#专业术语" class="headerlink" title="专业术语"></a>专业术语</h1><h2 id="灯具安装方式"><a href="#灯具安装方式" class="headerlink" title="灯具安装方式"></a>灯具安装方式</h2><div class="table-container"><table><thead><tr><th style="text-align:center">灯具安装方式</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">吸顶式</td><td style="text-align:center">搭配安装板安装</td></tr><tr><td style="text-align:center">嵌入式</td><td style="text-align:center">自己打孔（灯：弹片）</td></tr><tr><td style="text-align:center">替换式</td><td style="text-align:center">搭配桶安装（灯：弹簧）</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">场景</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">新品</td><td style="text-align:center">根据工程师提供的信息新建料号和BOM</td></tr><tr><td style="text-align:center">返单</td><td style="text-align:center">原 BOM (基本不改动)</td></tr><tr><td style="text-align:center">老产品</td><td style="text-align:center">结构/电子件不变，一般包装方式改变</td></tr></tbody></table></div><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><div class="table-container"><table><thead><tr><th style="text-align:center">Keyword</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">CRI/RA；显指</td><td style="text-align:center">显指最大值：100，越接近100越接近自然光的颜色</td></tr><tr><td style="text-align:center">PF；功率因数</td><td style="text-align:center">真实功率(P) 与视在功率(S) 之比，为-1 到1 或-100% 到100% 之间的一个数字</td></tr><tr><td style="text-align:center">K；色温</td><td style="text-align:center">1000K~12000K 由红到蓝</td></tr><tr><td style="text-align:center">Φ；直径</td><td style="text-align:center">圆的直径(读作fai)</td></tr><tr><td style="text-align:center">nlm/w；光效</td><td style="text-align:center">每消耗1W 的电能所放出的光通量</td></tr><tr><td style="text-align:center">DOB</td><td style="text-align:center">“去”电源化，去除传统AC/DC转换，把LED驱动电路和LED灯串电路融合到一起。</td></tr><tr><td style="text-align:center">【27K/30K/35K/40K/50K-PS】</td><td style="text-align:center">“-PS” 指的是导光板</td></tr></tbody></table></div><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>返单之外的BOM需要结构电子确认签字</li><li>收到业务的生产订单记录收单日期</li><li>分体商照不按尺寸来建BOM，按规格书（尺寸是商照外壳的尺寸，灯体零件都是通用的）<ul><li>如果商照外壳的尺寸不一样，则防尘棉则要变动</li></ul></li><li>UT 和 PT 都是小圆，PT 是带台阶</li><li><strong>电源都改成委外的</strong></li><li>360 调角度 retrofit BOM 中弹垫删除，机牙螺丝中带弹垫</li><li>“FoundWell” 背板Logo是沈阳的订单</li><li>吸顶灯配件包只有 8 寸的额外需要安装支架（3101040021）和两颗螺丝（7102010022）</li><li>PORTOR INDUSTRY INC 客户的订单 <code>404A款深筒外壳（嵌入式）有台阶，配金属弹簧扣</code> 确认是否需要额外2个水晶头（7301000011）</li><li>安全绳 7400010025 只有 11 和 13 寸吸顶灯才有</li><li>移到新系统的BOM是否正确，迁移过后这段时间老系统是否有改动</li><li>物料清单正查，看下有没有没有审核的 BOM</li><li>disklight 颜色</li><li>电源功率、色温、PF值、RA(CRI)、lm</li><li>电源盖印刷：UV 印刷</li><li>安装方式</li><li>开孔方式：传统开孔方式（螺丝打上去）/ 流星孔（旋）</li><li>委外半成品<ul><li>老产品优先选少灯珠的（降本）</li><li>点位</li><li>损耗</li><li>用量</li><li>位置号</li></ul></li><li>防尘棉注意共模情况</li><li>返单注意 IC 4105000020 停产</li><li>弹簧老款：塑胶套（橙色）新款：热缩套管（橙色）</li><li>半成品 7.25mm 用 6.5mm 双面胶</li><li>电源内壳供应商来买：BOM 中含<strong>小铁盒的，删除电源内壳，描述加在电源成品中</strong></li><li>FT4线材的电源盒是<strong>公母圆线</strong></li><li>结构件+灯条板+铝基板 物料描述：名称+尺寸+材质+辅助类描述</li><li>注意拉钉的用量，统一使用 0.008的用量</li><li>电源默认使用大铁盒</li><li>UT 款从老系统返单都需要电子确认</li><li>404 406 外置电源的外壳不支持覆膜</li></ul>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>企业微信邮件被退回解决</title>
      <link href="/2023/06/162022%20%E5%BD%92%E6%A1%A3/Diary/2023/230616/433fef40/"/>
      <url>/2023/06/162022%20%E5%BD%92%E6%A1%A3/Diary/2023/230616/433fef40/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="8641d82196b3f0fb87067425947c0bdb64534f927d5e8743824ee9b1248cc9d3">176af5f71c6ac5419ca35683f9a93d1d91c2387b6b4684e00bb41dcafc260e4e5e76478b48aa70d313cbce110b6e446b4e5a9e41f23957924a8a1811bbbf0805073abb668410e7bbfc23d44d8b7284f0704941fc718904ed2307ee29a0e27dff4d8107b7052d45d2b6600999208cf4f1811217d6d4e44096a85253236a27f7885f33a070518bb4eb4a0c6eb7f96bb8b9f6f30a5d84e59333b7be9bca517bd040b64e416594dc815b3e2c1dede7f482badca3532829709535c627d2b488f9f977563e2d26fa450c285e147e60b778daa335d46c722c48a041fb4cb84d833e5123bc7c4563da3ca2888ab6b4376c3f6cca29c5a86ac93e642a973702f228e6f1da4985ce5e5957ca83913b724743e3931e38b995d1f35408938d2c28facdf5c069cfe8594b5ca27b206b7e3976024278a825ed0e53997493f16a112a6f0508235a930d753cda01089d2e54d3059fc5919c26d8eaa638a3f838dc86eeb1c2be988cce3bf7991cc3dd29bd3a13239b6b1aef67f46f1785dde97650379185c943603be1fd76be537de231084b5ede641a57ef71a71acd20d54df2261114dd73656b7438c9e73b1f63b5e8573784782ca9bb690f01563ed7f8422c557ddf9e2ae973815ba3b204a234c0456d6c11a15a95b08f633ef3c3d42d207ec487d8bcf8efd5da2c82d5f2fc1f0ee7fd0121ed6d3a5662ef380cbcc7811e19f40a451c4e7503e2766e444f1db2494b56567f3530eca5292816eefb1a3e0a0935a708cae91f1ccea1633e2f668b048d4d4c26928649c89920c4d39776129331334c73bdea03111b8fbcff0898d6c71e07d3ebde3f7d8d9c48700d593b4b47f6e22022af0c59798cf28b9823c03f081a43a790ef4c62c06822f76812a87fabd116d03d3323a45efcb52571a84c5cefd2c90f5637dc33fd155f266e0051456d87830b9d4a557a1f16b08264c3e95a5d5818e6201d2fed84f12a349073f5f6ac40f635efef7d22e7a950b2d065b61dce9d0383c42808d7f922142c7bb48ba06c7460b8dbf6738962da4cf7e27cbb4afd919087a2f94330d5189dd601cb7daf5f5d3a42eb1f89cfad6145f35faaf94511f046eec1f13791c92963b9af950d98a52e39cde2b69f33f3e2f3dab870ae96d21e8badc94ef6e47a54cb18b261f47cdff06c9fb58c6538432b7089adaef00e5456a93e870e4286bffaefa3867f4be869cd16b23d0c6f08a275f4cf4dbe1f85da610f2709b688e2f41ba0f724a7b96ff986b8be239a6c70139d73c4852f779c60d7be45c7678a4eea62d271fb087ff81f62d276e0dca4f3848db4c1a05acb3232a49712db01ff04738cbb26f2f7e211c30ce5f44ecf69f4f334</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EXCEL函数应用记录</title>
      <link href="/2023/06/132022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_EXCEL_EXCEL%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8%E8%AE%B0%E5%BD%95/bfa31c7a/"/>
      <url>/2023/06/132022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_EXCEL_EXCEL%E5%87%BD%E6%95%B0%E5%BA%94%E7%94%A8%E8%AE%B0%E5%BD%95/bfa31c7a/</url>
      
        <content type="html"><![CDATA[<h1 id="office-激活"><a href="#office-激活" class="headerlink" title="office 激活"></a>office 激活</h1><h2 id="Office2021安装文件下载和KMS激活（不需要工具）"><a href="#Office2021安装文件下载和KMS激活（不需要工具）" class="headerlink" title="Office2021安装文件下载和KMS激活（不需要工具）"></a>Office2021安装文件下载和KMS激活（不需要工具）</h2><blockquote><p><a href="https://www.orcy.net.cn/1854.html">https://www.orcy.net.cn/1854.html</a></p></blockquote><h2 id="office-2016-激活"><a href="#office-2016-激活" class="headerlink" title="office 2016 激活"></a>office 2016 激活</h2><blockquote><p><a href="https://www.xitongcheng.com/jiaocheng/dnrj_article_44900.html">https://www.xitongcheng.com/jiaocheng/dnrj_article_44900.html</a></p></blockquote><h1 id="取消打印预览图上显示的分割线（打印线）"><a href="#取消打印预览图上显示的分割线（打印线）" class="headerlink" title="取消打印预览图上显示的分割线（打印线）"></a>取消打印预览图上显示的分割线（打印线）</h1><ol><li>点击WPS表格左上角的【WPS表格】菜单按钮，找到【选项】按钮;</li><li>通过【选项】按钮打开【选项】窗口后，在左侧的菜单中选择【视图】，然后去掉【自动分页符】的勾选，点【确定】</li><li>去掉【自动分页符】的勾选并点击确定后，表格单元格区域中的【自动分页符】就不再显示了。</li></ol><h1 id="Excel修改单元格式后批量生效"><a href="#Excel修改单元格式后批量生效" class="headerlink" title="Excel修改单元格式后批量生效"></a>Excel修改单元格式后批量生效</h1><p>Excel修改单元格式后批量生效：<a href="https://blog.csdn.net/qq_43400993/article/details/118193251">https://blog.csdn.net/qq_43400993/article/details/118193251</a></p><h1 id="Excel-卡顿"><a href="#Excel-卡顿" class="headerlink" title="Excel 卡顿"></a>Excel 卡顿</h1><p><code>Ctrl + G</code> 选中表格中所有的对象，<code>delete</code> 删除</p><h1 id="excel-中-A、B-两列，计算-B-列中的值是否在A列中出现"><a href="#excel-中-A、B-两列，计算-B-列中的值是否在A列中出现" class="headerlink" title="excel 中 A、B 两列，计算 B 列中的值是否在A列中出现"></a>excel 中 A、B 两列，计算 B 列中的值是否在A列中出现</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=IF(ISNUMBER(MATCH(B2,A:A,0)),&quot;出现&quot;,&quot;未出现&quot;)</span><br></pre></td></tr></table></figure><h1 id="excel-中-A、B、C-三列，在C列中返回A或B列中不为0的列"><a href="#excel-中-A、B、C-三列，在C列中返回A或B列中不为0的列" class="headerlink" title="excel 中 A、B、C 三列，在C列中返回A或B列中不为0的列"></a>excel 中 A、B、C 三列，在C列中返回A或B列中不为0的列</h1><p>可以使用Excel中的IF函数和OR函数来实现。具体步骤如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在C1单元格中输入以下公式：=IF(OR(A1&lt;&gt;0,B1&lt;&gt;0),IF(A1&lt;&gt;0,A1,B1),&quot;&quot;)</span><br><span class="line">2. 将公式拖动或复制到C2，C3，C4等单元格中，以填充整个C列。</span><br></pre></td></tr></table></figure><p>解释一下上述公式的含义：</p><p>IF函数中的第一个条件使用OR函数来检查A1和B1单元格中是否有一个不等于0，如果有，则继续执行IF函数，否则返回空字符串””。</p><p>IF函数中的第二个条件检查A1单元格的值是否不为0，如果是，则将A1单元格的值返回到C列。如果A1单元格的值为0，则返回B1单元格的值。</p><p>如果A1和B1单元格的值都为0，则IF函数返回空字符串。</p><p>注意，此公式假定A列和B列中的数据都是数字。如果数据不是数字，则需要在公式中使用适当的条件，例如A1&lt;&gt;””或A1&lt;&gt;”NA”，以检查单元格是否为空或包含非数字值。</p><h1 id="excel-数值下拉不递增"><a href="#excel-数值下拉不递增" class="headerlink" title="excel 数值下拉不递增"></a>excel 数值下拉不递增</h1><p>去掉本列的筛选条件再重新加上，即可。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> EXCEL </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>流程图语法</title>
      <link href="/2023/06/082022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%B5%81%E7%A8%8B%E5%9B%BE_%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%AD%E6%B3%95/efa31b7a/"/>
      <url>/2023/06/082022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%B5%81%E7%A8%8B%E5%9B%BE_%E6%B5%81%E7%A8%8B%E5%9B%BE%E8%AF%AD%E6%B3%95/efa31b7a/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230608095646.png" alt="20230608095646"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 流程图 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>金蝶云星空常见配置操作【实践】</title>
      <link href="/2023/05/23ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E9%87%91%E8%9D%B6%E4%BA%91%E6%98%9F%E7%A9%BA%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/78jfs7pz/"/>
      <url>/2023/05/23ERP%EF%BC%88%E5%AE%9E%E8%B7%B5%EF%BC%89/ERP_%E9%87%91%E8%9D%B6%E4%BA%91%E6%98%9F%E7%A9%BA%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/78jfs7pz/</url>
      
        <content type="html"><![CDATA[<h1 id="——-常见配置操作一-——"><a href="#——-常见配置操作一-——" class="headerlink" title="—— 常见配置操作一 ——"></a>—— 常见配置操作一 ——</h1><h1 id="编码规则"><a href="#编码规则" class="headerlink" title="编码规则"></a>编码规则</h1><h2 id="物料编码"><a href="#物料编码" class="headerlink" title="物料编码"></a>物料编码</h2><p>物料编码一般是按照“大类-中类-小类-流水号”的形式进行编码</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230418095507.png" alt="20230418095507"></p><ul><li>图中的大类为 1 位，表示物料的大类，例如：成品类、半成品类、原材料类、辅助料类、客供件、办公用品和其他类。</li><li>图中的中类为 2 位，可以采用2位数字以流水号的形式表示物料大类下的再一级分类。</li><li>图中的小类为 5 位，也可以为4位或6位或其他位数，主要用于表示细分类别及规格。</li><li>图中的流水号为 3 位。</li></ul><p>KOK 物料编码规则设计：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230420142034.png" alt="第一版：固定长度"></p><h1 id="服务器备份与还原操作"><a href="#服务器备份与还原操作" class="headerlink" title="服务器备份与还原操作"></a>服务器备份与还原操作</h1><ol><li>在服务器按以下步骤进行备份：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230524120101.png" alt="20230524120101"></li><li>恢复备份文件操作（恢复会创建一个新的帐套）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230524120319.png" alt="20230524120319"></li></ol><h1 id="金蝶云星空服务器IP固定"><a href="#金蝶云星空服务器IP固定" class="headerlink" title="金蝶云星空服务器IP固定"></a>金蝶云星空服务器IP固定</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230422090324.png" alt="服务器IP固定"></p><h1 id="物料中的字段审核过后可编辑修改"><a href="#物料中的字段审核过后可编辑修改" class="headerlink" title="物料中的字段审核过后可编辑修改"></a>物料中的字段审核过后可编辑修改</h1><blockquote><p>如编辑物料的采购页签<code>最小包装量</code>审核后可修改（不用工程那边反审核），其他单据都是一样的操作</p></blockquote><ol><li>BOS 中打开业务对象，选择对应子对象<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230525162053.png" alt="20230525162053"></li><li>菜单栏选择编辑 -&gt; 批量编辑字段属性</li><li>选择已审核取消勾选需要被编辑的字段<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230525171641.png" alt="20230525171641"></li></ol><h1 id="设置字段为过滤筛选条件"><a href="#设置字段为过滤筛选条件" class="headerlink" title="设置字段为过滤筛选条件"></a>设置字段为过滤筛选条件</h1><blockquote><p>如设置物料<code>已使用</code>字段作为筛选条件</p></blockquote><ol><li>选择物料业务对象</li><li>菜单栏选择编辑 -&gt; 批量编辑字段属性</li><li>选择对应字段，设置可见性，列表可见性中的选项勾选：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230525184815.png" alt="20230525184815"></li></ol><h1 id="批量批改字段自定义"><a href="#批量批改字段自定义" class="headerlink" title="批量批改字段自定义"></a>批量批改字段自定义</h1><p>在对应模块选择需要被批改的字段，选择：功能控制 —&gt; 允许委外<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230610122307.png" alt="20230610122307"></p><h1 id="设置点位累计添加方法"><a href="#设置点位累计添加方法" class="headerlink" title="设置点位累计添加方法"></a>设置点位累计添加方法</h1><blockquote><p>新增行和删除行都会触发汇总计算</p></blockquote><ol><li>BOS 中打开业务对象，选择对应子对象</li><li>添加<code>小数</code>字段（勾选<code>隐藏尾零</code>选项可在文本框没有获得焦点时不显示0）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230525172706.png" alt="20230525172706"></li><li>菜单栏选择编辑 -&gt; 批量编辑字段属性 -&gt; 子项明细 -&gt; 点位</li><li>汇总至上级子段（第二步添加的小数字段）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230525173024.png" alt="20230525173024"></li></ol><h1 id="点击父级分类显示子级内容"><a href="#点击父级分类显示子级内容" class="headerlink" title="点击父级分类显示子级内容"></a>点击父级分类显示子级内容</h1><p>默认只能点击到最后一级分类才显示分类中的内容，取消勾选此选项即可点击父级分类显示子级分类内容<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230525173440.png" alt="20230525173440"></p><h1 id="添加旧订单编号字段并可关联下推至下游单据"><a href="#添加旧订单编号字段并可关联下推至下游单据" class="headerlink" title="添加旧订单编号字段并可关联下推至下游单据"></a>添加旧订单编号字段并可关联下推至下游单据</h1><p>实现从老系统没有结束迁移补单过来的单据，需要补充老系统的旧订单号</p><p>以：采购订单 —&gt; 采购入库 下推旧订单号自动从采购订单到采购入库 为例：</p><ol><li>采购订单和采购入库都添加<code>文本</code>字段修改标题为旧订单号（必须都添加，不然下面<code>字段映射关系</code>中找不到）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527101852.png" alt="20230527101852"></li><li>选择单据转换，选择<code>采购订单 --&gt; 采购入库</code><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527101951.png" alt="20230527101951"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527102255.png" alt="20230527102255"></li><li>选择拓展（停用）选择<code>字段映射关系</code>，给单据都绑定上<code>旧订单号</code>字段<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527105838.png" alt="20230527105838"></li></ol><h1 id="给单据添加旧物料编码字段（给任意单据添加系统没有内置的字段）"><a href="#给单据添加旧物料编码字段（给任意单据添加系统没有内置的字段）" class="headerlink" title="给单据添加旧物料编码字段（给任意单据添加系统没有内置的字段）"></a>给单据添加旧物料编码字段（给任意单据添加系统没有内置的字段）</h1><p>如：给物料清单的父项和子项添加上<code>旧物料编码字段</code></p><ol><li>在BOS中选择物料清单单据</li><li>给单据头加上<code>文本</code>字段并修改名称和标题为父项旧物料编码，给子项明细中添加<code>基础资料属性</code>字段并修改名称和标题为子项旧物料编码<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527114025.png" alt="20230527114025"></li><li>菜单栏选择编辑 -&gt; 批量编辑字段属性</li><li>设置物料编码的<code>引用属性</code><ul><li>父项：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527114509.png" alt="20230527114509"></li><li>子项：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527115116.png" alt="20230527115116"></li></ul></li><li>将<code>旧物料编码字段</code>与基础资料字段名关联<ul><li>父项：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527114833.png" alt="20230527114833"></li><li>子项：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230527115250.png" alt="20230527115250"></li></ul></li></ol><h1 id="业务员设置"><a href="#业务员设置" class="headerlink" title="业务员设置"></a>业务员设置</h1><blockquote><p><a href="https://vip.kingdee.com/article/162203171404715776?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">自动创建业务员</a><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230606115526.png" alt="维护了员工任岗信息后系统自动生成业务员"></p></blockquote><ol><li>员工</li><li>部门</li><li>员工任岗信息</li><li>新增业务员</li></ol><h1 id="修改单据默认编码规则"><a href="#修改单据默认编码规则" class="headerlink" title="修改单据默认编码规则"></a>修改单据默认编码规则</h1><ol><li>在编码规则列表中自定义需要的编码规则，设置成默认<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230614100248.png" alt="20230614100248"></li><li>在单据类型列表中指定单据的编码规则<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230614100345.png" alt="20230614100345"></li></ol><h1 id="新增单据时单据编号字段可编辑"><a href="#新增单据时单据编号字段可编辑" class="headerlink" title="新增单据时单据编号字段可编辑"></a>新增单据时单据编号字段可编辑</h1><ol><li>【不确定需不需要操作第一步】<br>在BOS平台中选中对应单据，设置单据编号字段的锁定性<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230616193058.png" alt="20230616193058"></li><li>使用Administrator用户登陆客户端，在<code>单据参数配置</code>中取消勾选此选项<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230617095956.png" alt="20230617095956"></li><li>在对应单据的编码规则中，勾选手动补号和自动补号<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230617100109.png" alt="20230617100109"></li></ol><h1 id="单据增加打印次数字段"><a href="#单据增加打印次数字段" class="headerlink" title="单据增加打印次数字段"></a>单据增加打印次数字段</h1><p>参考链接：<a href="https://vip.kingdee.com/questions/15342/answers/20648?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">单据增加打印次数字段</a></p><blockquote><p>添加字段之后，设置字段的列表可见性，然后退出客户端，重新进去即可。</p></blockquote><h1 id="选单操作时目标单据过滤不出物料字段属性"><a href="#选单操作时目标单据过滤不出物料字段属性" class="headerlink" title="选单操作时目标单据过滤不出物料字段属性"></a>选单操作时目标单据过滤不出物料字段属性</h1><p>在BOS中选择目标单据，点击批量编辑字段属性，选择对应的字段，设置其可见性，设置为<code>选单列表可见</code></p><h1 id="设置单据中的字段必录"><a href="#设置单据中的字段必录" class="headerlink" title="设置单据中的字段必录"></a>设置单据中的字段必录</h1><p>在单据类型列表中选中对应的单据，并设置对应的字段必录：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/Snipaste_2023-07-13_17-08-04.png" alt="Snipaste_2023-07-13_17-08-04"></p><h1 id="——-常见配置操作二-——"><a href="#——-常见配置操作二-——" class="headerlink" title="—— 常见配置操作二 ——"></a>—— 常见配置操作二 ——</h1><h1 id="委外领料相关步骤"><a href="#委外领料相关步骤" class="headerlink" title="委外领料相关步骤"></a>委外领料相关步骤</h1><ol><li>先打印单据，给委外供应商，实际发多少后面再做调拨到委外仓</li><li>调拨到委外仓之后再审核领料单，扣料</li></ol><h1 id="取消单据体不能使用块粘贴"><a href="#取消单据体不能使用块粘贴" class="headerlink" title="取消单据体不能使用块粘贴"></a>取消单据体不能使用块粘贴</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230705155123.png" alt="微信图片_20230705155123"></p><h1 id="生产-委外变更用料清单"><a href="#生产-委外变更用料清单" class="headerlink" title="生产/委外变更用料清单"></a>生产/委外变更用料清单</h1><ol><li>打开<code>生产/委外用料清单变更单</code>新增，然后点击单据体中的<code>变更</code>或<code>替换</code>按钮，选择对应的用料清单中的物料。</li><li>返回数据，填写需要变更的物料即可（被替换的物料不会被删除，而是应发数量变成了<code>0</code>）</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230707104437.png" alt="微信图片_20230707104437"></p><p>场景1：生产领料领了一半需要变更另一款物料</p><blockquote><p>生产领料领了一半需要变更另一款物料，另一款物料的数量等于第一款物料未领的数量</p></blockquote><ol><li>新增生产用料清单变更单，替换，选择对应的用料清单，选择需要替换的物料</li><li>默认替换的新物料应发数量等于被替换物料的应发数量，通过调整被替换的新物料的<code>分子</code>来控制应发数量。<code>分子 = 未领数量 / 应发数量</code></li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230708121048.png" alt="微信图片_20230708121048"></p><h1 id="委外订单领料后变更供应商"><a href="#委外订单领料后变更供应商" class="headerlink" title="委外订单领料后变更供应商"></a>委外订单领料后变更供应商</h1><ol><li>委外订单对应的用料清单</li><li>委外订单对应的采购订单</li><li>委外订单对应的委外领料单</li></ol><h1 id="委外超耗单应用场景"><a href="#委外超耗单应用场景" class="headerlink" title="委外超耗单应用场景"></a>委外超耗单应用场景</h1><blockquote><p><a href="https://vip.kingdee.com/school/196231836295886592?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=31">在委托供应商加工的过程中，可能会存在由于供应商加工原因导致部分原材料损坏，这部分因供应商责任造成消耗的材料超出工艺定额，我们需要将损耗材料重新发给供应商并收取材料款，此种业务可以通过委外超耗单处理。</a></p></blockquote><ul><li><code>超耗单 =  领料单 + 应付单（负数）</code></li></ul><ul><li>直接打印超耗单发料给供应商</li><li>超耗单审核过后需要下推应收单，填写原材料单价</li><li>下推应收单必须选择对应的客户，且需要在客户选择中维护对应的供应商（加工商）</li></ul><h1 id="委外订单中的备注（字段）同步到委外用料清单【待处理】"><a href="#委外订单中的备注（字段）同步到委外用料清单【待处理】" class="headerlink" title="委外订单中的备注（字段）同步到委外用料清单【待处理】"></a>委外订单中的备注（字段）同步到委外用料清单【待处理】</h1><p>方案一：在委外订单中查看对应的备注，复制委外订单的<code>单据编号</code>，在用料清单中按<code>委外订单编号</code>字段筛选</p><h1 id="委外订单申请中查看是否下推采购订单（委外）"><a href="#委外订单申请中查看是否下推采购订单（委外）" class="headerlink" title="委外订单申请中查看是否下推采购订单（委外）"></a>委外订单申请中查看是否下推采购订单（委外）</h1><p>在委外订单申请中过滤出 <code>采购订单</code> 字段，下推过的采购订单会自动带出来是哪个采购订单。</p><h1 id="委外订单申请领料一半需要终止"><a href="#委外订单申请领料一半需要终止" class="headerlink" title="委外订单申请领料一半需要终止"></a>委外订单申请领料一半需要终止</h1><ol><li>变更采购订单（委外）的数量</li><li>变更委外订单申请的数量（使用委外订单变更单去变更）</li></ol><p>变更单生效之后委外订单申请对应的委外用料清单会自动更新</p><h1 id="委外订单变更物料"><a href="#委外订单变更物料" class="headerlink" title="委外订单变更物料"></a>委外订单变更物料</h1><blockquote><p>BOM 中的委外物料 A 改成 B，但是 A 已经跑完计划下推了委外和采购了</p></blockquote><ol><li>使用委外订单变更单把A变更成B</li><li>使用采购订单新变更单删除A新增B并补充需求单据编号</li></ol><h1 id="采购价目表阶梯价格"><a href="#采购价目表阶梯价格" class="headerlink" title="采购价目表阶梯价格"></a>采购价目表阶梯价格</h1><p><a href="https://vip.kingdee.com/article/39664?productLineId=1">采购价目表阶梯价格</a></p><p>注意事项：</p><ol><li><code>左开右闭</code>规则。有效区间为大于从字段，小于等于至字段。<ol><li>如果【从】字段全部为 0 的话，跟以前没有从字段一样的效果。【如果需要包含从的值，可以去掉从字段的值，只设置至字段的区间】</li><li>如果只设置 1000 以上才取价目表的话则只设置从的值为<code>999</code>即可</li></ol></li><li>采购价目表通过<code>采购调价表</code>来修改价格和新增物料价格</li><li>被采购订单引用了可以删除吗？【可以禁用】</li><li>采购价目表的<code>生效日期之前的单据</code>不会取到价格</li></ol><p>拓展：</p><ol><li>可以通过 <code>货源清单</code> 设置物料只允许通过哪些供应商来采购</li><li>可以在物料中设置默认的供应商（通过采购申请下推采购订单自动带出来供应商）</li><li>采购订单中可以<code>业务查询</code>：<ol><li>价格查询</li><li>历史价格</li></ol></li><li>强制以采购价目表的价格为准：<ul><li>在<code>采购管理系统参数</code> 价格管理中设置采购订单的条件：<code>FBusinessType  =&#39;CG&#39;</code> 为 <code>强制价目表定价</code></li><li><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/Snipaste_2023-07-14_08-45-27.png" alt="Snipaste_2023-07-14_08-45-27"></li></ul></li><li>可以添加相同物料相同供应商的价目表，但是生效日期不能一样，后生效的会覆盖之前生效的价目表</li></ol><p>待测试：</p><ul><li>[x] 价目表不设置供应商会有什么效果？<ul><li>[x] 不设置供应商，在采购订单不填写供应商，只填写物料和数量即可带出价格，相当于是一个公共价目表</li></ul></li><li>[x] 价目表和供应商都设置价目表，供应商的价目表权重大于公共价目表</li><li>[x] 供应商设置公共价目表为默认价目表，与供应商的价目表权重谁大？<ul><li>[x] 供应商的价目表权重大</li></ul></li><li>[x] 先不录入阶梯价，后续再维护可不可行？<ul><li>[x] 可以，直接选中对应的行，然后插入行</li></ul></li><li>[x] 采购限价控制强度设置禁止交易后，公共价目表和供应商价目表的的价格都可以取吗？<ul><li>[x] 公共价目表和供应商价目表都存在时，只能取供应商价目表的价格，不能取公共价目表价格</li><li>[x] 只有公共价目表时，可以取公共价目表价格</li></ul></li><li>[x] 采购价目表调价？调价后之前的历史价格如何呈现？<ul><li>[x] 可以呈现，呈现的过程调价的这个动作，每次调价都会有调价后的价格</li></ul></li></ul><h1 id="采购订单只能从上游单据下推"><a href="#采购订单只能从上游单据下推" class="headerlink" title="采购订单只能从上游单据下推"></a>采购订单只能从上游单据下推</h1><p>在单据类型中设置源单编号<code>必录</code>即可（必须有上游单据）</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230713115837.png" alt="微信图片_20230713115837"></p><h1 id="单据作废的应用场景"><a href="#单据作废的应用场景" class="headerlink" title="单据作废的应用场景"></a>单据作废的应用场景</h1><p>某张单据可能由于操作错误或者下单重复等原因需要重新做单据,此时可以在列表直接点击删除,删除之后这张单据后不会再在系统中体现。</p><p>而作废的操作的意义是,企业对制单要求比较严格,不允许对单据进行随意删除,即使单据错误不需要再继续进行也需要在系统中有记录等情况时,可以使用作废;</p><p>单据是创建或者重新审核的状态下才可以作废,系统控制了作废状态的单据是不允许删除的,<strong>作废的意义是切断该单据的关联性,保留单据数据用来记录,不会在其他报表中体现,也没有其他影响。</strong></p><h1 id="删除作废的单据"><a href="#删除作废的单据" class="headerlink" title="删除作废的单据"></a>删除作废的单据</h1><p>在BOS中临时取消删除限制控制：</p><p><a href="https://vip.kingdee.com/school/967?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">删除作废的单据</a></p><h1 id="库存初始化之后添加仓库"><a href="#库存初始化之后添加仓库" class="headerlink" title="库存初始化之后添加仓库"></a>库存初始化之后添加仓库</h1><p>添加仓库（新）就得操作一次核算范围</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230711150830.png" alt="微信图片_20230711150830"></p><h1 id="物料清单成本查询"><a href="#物料清单成本查询" class="headerlink" title="物料清单成本查询"></a>物料清单成本查询</h1><ol><li>在<code>工程数据参数</code>设置成本的匹配条件<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/Snipaste_2023-07-18_13-37-04.png" alt="Snipaste_2023-07-18_13-37-04"></li><li>在<code>物料清单成本</code>模块中按成品料号查询</li></ol><p>如果一个物料有多家供应商如何计算成本？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">金蝶云星空是一款企业资源规划（ERP）软件，提供了全面的业务管理解决方案，包括库存管理、供应链管理、财务管理等。物料清单(BOM)成本查询是其中的一个功能，可以帮助企业了解其产品的生产成本。</span><br><span class="line"></span><br><span class="line">在一个物料有多家供应商的情况下，计算成本的方法会依赖于你的企业的具体策略和金蝶云星空的配置。以下是一些可能的计算方式：</span><br><span class="line">1. **平均成本法：** 这种方式将所有供应商的物料价格相加，然后除以供应商数量，得到一个平均值。这是一种简单的方式，但可能会忽视价格波动和供应商的不同。</span><br><span class="line">2. **加权平均成本法：** 在这种方式中，每个供应商的价格都会乘以对应的供应比例（例如，如果一个供应商提供了你80%的物料，那么他的价格就会乘以0.8）。这种方式能更好地反映每个供应商的影响。</span><br><span class="line">3. **最低成本法：** 这种方式只考虑最低价格的供应商。这种方式的优点是可以最大化利润，但是如果低价供应商不能提供足够的物料，可能会导致生产中断。</span><br><span class="line">4. **最高成本法：** 这种方式只考虑最高价格的供应商。这种方式可以作为一种保守的策略，以预计最坏的情况。</span><br><span class="line">5. **特定供应商法：** 如果你的企业有一个首选的供应商，你可能会选择只考虑他们的价格。这可能基于质量、交货时间或其他因素。</span><br><span class="line"></span><br><span class="line">这些都是可能的策略，你的企业需要根据自己的具体情况和策略来决定。在实际操作中，金蝶云星空应该能够配置为使用你选择的策略。如果你需要更具体的帮助，建议联系金蝶云星空的客户支持或咨询你的ERP实施顾问。</span><br></pre></td></tr></table></figure><h1 id="既是供应商又是客户"><a href="#既是供应商又是客户" class="headerlink" title="既是供应商又是客户"></a>既是供应商又是客户</h1><p>既是供应商又是客户：新增客户的时候要在基本信息-&gt;相关-&gt;<code>选择对应供应商</code>，最后结算的时候会在财务会计<code>应收转销</code>模块中进行冲销结算。</p><h1 id="部分领料入不了库"><a href="#部分领料入不了库" class="headerlink" title="部分领料入不了库"></a>部分领料入不了库</h1><p>有<strong>部分领料</strong>的情况，入库入不了情况：<br>方式1. 在<code>单据类型中</code>选择生产订单，关闭<code>生产入库材料领用控制</code>的严格控制<br>方式2. 在用料清单中单独控制某款物料</p><h1 id="过滤中设置字段可见"><a href="#过滤中设置字段可见" class="headerlink" title="过滤中设置字段可见"></a>过滤中设置字段可见</h1><p>当在单据中过滤不出来字段的时候，可以去BOS中点击批量编辑字段属性，查看这个字段有没有设置<code>可见性</code> </p><h1 id="单据关闭状态和业务关闭"><a href="#单据关闭状态和业务关闭" class="headerlink" title="单据关闭状态和业务关闭"></a>单据关闭状态和业务关闭</h1><p><a href="https://vip.kingdee.com/questions/5107/answers/7908?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1">单据关闭状态和业务关闭</a></p><ol><li>关闭状态：已关闭（单据关闭）所有行关闭则单据自动关闭</li><li>业务关闭：已关闭（行关闭）下游单据数量大于上游数量则自动关闭</li></ol><h1 id="字段选中不跳出代码"><a href="#字段选中不跳出代码" class="headerlink" title="字段选中不跳出代码"></a>字段选中不跳出代码</h1><p>BOS中设置<code>关联检索字段</code>设置为名称</p><h1 id="物料修改人等于创建人才可以修改"><a href="#物料修改人等于创建人才可以修改" class="headerlink" title="物料修改人等于创建人才可以修改"></a>物料修改人等于创建人才可以修改</h1><ol><li>使用 administrator 账户登录客户端</li><li>进入：<code>单据参数配置</code></li><li>选择物料，勾选：<code>修改人与创建人一致（工作流不校验）</code></li></ol><h1 id="——-常见配置操作三-——"><a href="#——-常见配置操作三-——" class="headerlink" title="—— 常见配置操作三 ——"></a>—— 常见配置操作三 ——</h1><h1 id="物料附件上传"><a href="#物料附件上传" class="headerlink" title="物料附件上传"></a>物料附件上传</h1><p>前端单据：</p><ul><li>采购订单</li><li>检验单</li></ul><h1 id="物料启用批号管理"><a href="#物料启用批号管理" class="headerlink" title="物料启用批号管理"></a>物料启用批号管理</h1><p>相关套打设置：</p><ol><li>采购入库单</li><li>生产领料单</li></ol><p>批号可见性：</p><ul><li>[x] 采购入库单</li><li>[x] 采购退料单【上游单据下推自动带出】</li><li>[ ] 收料通知单</li><li>[ ] 生产领料单/退料单/补料单</li><li>[x] 其他入库单/其他出库单</li><li>[x] 直接调拨单</li><li>[x] 分步式调出单/分步式调入单【上游单据下推自动带出】</li></ul><p>说明：</p><ol><li>之前爱在物料清单上<code>已使用</code>的物料无法开启批号</li><li>计划采购正常下单</li><li>是否有同一个订单有多个批号的情况？</li></ol><h1 id="供应商客户名称不能重复"><a href="#供应商客户名称不能重复" class="headerlink" title="供应商客户名称不能重复"></a>供应商客户名称不能重复</h1><blockquote><p><a href="https://vip.kingdee.com/questions/236848079276554240/answers/236852877191621376?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1">参考链接</a></p></blockquote><p>在BOS中设置保存检验规则，名称重复直接报错终止。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230724103104.png" alt="微信图片_20230724103104"></p><blockquote><p>补充：如果是单组织需要取消勾选<code>使用组织</code>字段</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230805174333.png" alt="20230805174333"></p><h1 id="预测单预测结束日期延后N天"><a href="#预测单预测结束日期延后N天" class="headerlink" title="预测单预测结束日期延后N天"></a>预测单预测结束日期延后N天</h1><blockquote><p><a href="https://vip.kingdee.com/questions/93583/answers/98639?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">参考链接</a></p></blockquote><ul><li>创建日期不为空：<code>FDate &lt;&gt; null</code></li><li>预测结束日期+N天：<code>FEndDate =@currentshortdate.AddDays(1)</code></li></ul><h1 id="生产订单已经结案了，发现少了物料"><a href="#生产订单已经结案了，发现少了物料" class="headerlink" title="生产订单已经结案了，发现少了物料"></a>生产订单已经结案了，发现少了物料</h1><p>反结案生产订单（不反结案同步不了），在物料清单中同步更新至生产用料清单，然后再下推领料，领完料之后再结案生产订单</p><h1 id="上下查界面增加删除按钮"><a href="#上下查界面增加删除按钮" class="headerlink" title="上下查界面增加删除按钮"></a>上下查界面增加删除按钮</h1><blockquote><p><a href="https://vip.kingdee.com/school/detail/2090?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">上下查界面增加删除按钮</a></p></blockquote><p>很多单据上的操作按钮默认是隐藏的，可以在BOS平台对应单据<code>列表菜单</code>中设置按钮的可见性</p><h1 id="单据列表字段合计-汇总"><a href="#单据列表字段合计-汇总" class="headerlink" title="单据列表字段合计/汇总"></a>单据列表字段合计/汇总</h1><blockquote><p><a href="https://vip.kingdee.com/school/detail/2027?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">BOS IDE_分组与合计</a></p></blockquote><p>有的列表单据数值列默认没有合计，可以在BOS中设置相关字段的<code>列表字段汇总类型</code>为<code>合计</code></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/Snipaste_2023-07-26_17-52-49.png" alt="Snipaste_2023-07-26_17-52-49"></p><h1 id="已下达下游单据需要变更BOM"><a href="#已下达下游单据需要变更BOM" class="headerlink" title="已下达下游单据需要变更BOM"></a>已下达下游单据需要变更BOM</h1><p>问：BOM变更，删除一款物料A并添加一款物料B，采购订单新变更单中删除A新增B,B物料的需求单据编号如何关联销售订单号？<br>答：</p><ul><li>不需要关联销售单号：采购订单上，把 A 变更为 B</li><li>需要关联销售单号：只有让PMC  重新跑一次计划，然后再把 B 料，投放，其他多余的料删除</li></ul><h1 id="提前期计算逻辑"><a href="#提前期计算逻辑" class="headerlink" title="提前期计算逻辑"></a>提前期计算逻辑</h1><blockquote><p><a href="https://vip.kingdee.com/school/detail/179547229118328576?productLineId=31">提前期计算逻辑</a></p></blockquote><p>计算公式：</p><p>成品： </p><ul><li>确认到货日期/计划完工日期=销售订单要货日期/预测单预测开始日期 -检验提前期（物料上维护） </li><li>确认采购日期/计划开工日期=确认到货日期-提前期</li><li>提前期=固定提前期+【向上取整（需求数量/变动提前期批量）】*变动提前期（物料上维护）</li></ul><p>子件：</p><ul><li>确认到货日期=成品的确认采购日期+提前期偏置(BOM中设置，可录入正负数)-检验提前期（物料上维护）</li><li>确认采购日期=子件的确认到货日期-提前期</li></ul><h1 id="采购对账"><a href="#采购对账" class="headerlink" title="采购对账"></a>采购对账</h1><p>统一使用应付单对账，</p><h1 id="物料附件上传-1"><a href="#物料附件上传-1" class="headerlink" title="物料附件上传"></a>物料附件上传</h1><p><a href="https://vip.kingdee.com/article/215901910018873856?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1">参考链接</a></p><h1 id="单据审核后通知制单人和相关人员"><a href="#单据审核后通知制单人和相关人员" class="headerlink" title="单据审核后通知制单人和相关人员"></a>单据审核后通知制单人和相关人员</h1><p>规范：</p><p>标题：<code>您的采购订单：&#123;单据编号&#125; 已经被审批，请注意查收。</code></p><p>内容：<code>采购订单：&#123;单据编号&#125;  ，销售订单号：&#123;明细信息.需求单据编号&#125;</code></p><p>完成状态：</p><ul><li>[x] 单据审批流中，审核完通知制单员【消息节点】<ul><li>[x] 采购订单</li><li>[x] 物料清单</li><li>[x] 销售订单</li></ul></li></ul><h1 id="一个物料存在多个bom版本"><a href="#一个物料存在多个bom版本" class="headerlink" title="一个物料存在多个bom版本"></a>一个物料存在多个bom版本</h1><blockquote><p><a href="https://vip.kingdee.com/article/360923436069552640?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">计划运算时如果指定了BOM版本则按照指定的BOM版本运算,如果<code>没有指定</code>则系统会自动取这个物料已审核未禁用的<code>最高BOM版本</code>运算,预测单跟销售订单的运算逻辑是一样的。</a></p></blockquote><ol><li>手工新增销售订单/预测单系统默认会自动携带这个物料已审核未禁用的最高BOM版本(例如物料已审核未禁用的BOM版本有1.0、2.0,系统会自动携带2.0的BOM版本)。</li><li>销售订单/预测单上有BOM版本,则计划运算向导选择对应单据会携带单据上的BOM版本到计划运算向导界面;如果销售订单/预测单上的BOM版本为空,那么计划运算向导选择单据后计划运算向导上的BOM版本也是空的,系统会自动取这个物料已审核未禁用的最高BOM版本运算。</li><li>计划运算向导中可以手工修改BOM版本,修改了BOM版本会反写更新单据上的BOM版本,计划运算按照修改后的BOM版本运算。</li><li>新增销售订单如果不想自动携带BOM版本可以在BOS-销售订单-物料编码的值更新上勾选清空代码设置的BOM版本字段默认值</li></ol><h1 id="生产订单拆分用料清单更新问题"><a href="#生产订单拆分用料清单更新问题" class="headerlink" title="生产订单拆分用料清单更新问题"></a>生产订单拆分用料清单更新问题</h1><blockquote><p><a href="https://vip.kingdee.com/article/358539253132646912?productLineId=1&amp;isKnowledge=2">参考链接</a></p></blockquote><p>生产订单拆分测试项目：BOM 删除物料A替换为B</p><p>行拆分：</p><ol><li>拆分的生产订单计划开工时间<strong>小于B物料的生效日期</strong>：默认生产用料清单会带出物料A，如点击同步更新到用料清单，则物料A会被删除，物料B不会被同步</li><li>拆分的生产订单计划开工时间<strong>大于B物料的生效日期</strong>：默认生产用料清单会带出物料A，如点击同步更新到用料清单，则物料A会被删除，物料B会被同步<br>总结：拆分的时候注意BOM中物料的生效日期，和拆分订单时的计划开工时间<br>注意：同步的时候不要同步错了，通过行拆分的生产订单，单据编号都是一样的，同步更新的时候通过行参数来区分</li></ol><p>生产订单拆分：</p><ul><li>[ ] 继承原用料清单参数</li></ul><h1 id="变更流程通知步骤"><a href="#变更流程通知步骤" class="headerlink" title="变更流程通知步骤"></a>变更流程通知步骤</h1><ol><li>出联络函给主管签字</li><li>通知到各个部门并让各个部门签字</li><li>复印出被签字的文档给到各个部门</li><li>正式生效</li></ol><h1 id="ETO、MTO、ATO、MTS-的不同生产策略区别"><a href="#ETO、MTO、ATO、MTS-的不同生产策略区别" class="headerlink" title="ETO、MTO、ATO、MTS 的不同生产策略区别"></a>ETO、MTO、ATO、MTS 的不同生产策略区别</h1><p><a href="https://zhuanlan.zhihu.com/p/452058702">参考链接</a></p><ul><li>按单设计（Engineer To Order，ETO）<ul><li>产品的生产批量较小，但是设计工作和最终产品往往非常复杂。</li></ul></li><li>按单生产（Make To Order，MTO）</li><li>按单装配（Assemble To Order，ATO）</li><li>库存生产（Make To Stock，MTS）</li></ul><p>ETO 杨总科普：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230822141021.png" alt="微信图片_20230822141021"></p><h1 id="汇报单审核自动下推生成生产入库单"><a href="#汇报单审核自动下推生成生产入库单" class="headerlink" title="汇报单审核自动下推生成生产入库单"></a>汇报单审核自动下推生成生产入库单</h1><blockquote><p><a href="https://vip.kingdee.com/questions/393805668778095360/answers/393814104747336448?productLineId=1">汇报单审核自动生成生产入库单</a></p></blockquote><ol><li>生成的生产入库单单据是暂存状态，因为入库需要填写仓库</li><li>生产入库单单据生成之后还可以反审核删除汇报入库单</li></ol><h1 id="物料清单批量维护"><a href="#物料清单批量维护" class="headerlink" title="物料清单批量维护"></a>物料清单批量维护</h1><blockquote><p><a href="https://vip.kingdee.com/school/detail/165769074008186112?productLineId=31&amp;islogin=true">物料清单批量维护</a></p></blockquote><h1 id="作废的单据如何反作废和删除"><a href="#作废的单据如何反作废和删除" class="headerlink" title="作废的单据如何反作废和删除"></a>作废的单据如何反作废和删除</h1><blockquote><p><a href="https://vip.kingdee.com/article/306723543591500544?productLineId=1&amp;isKnowledge=2">作废的单据如何反作废和删除</a></p></blockquote><p>注意：使用情况三：如何取消删除操作做作废状态单据的校验，直接删除单据，需要<code>重新启动客户端</code>之后再删除，删除之后恢复单据的校验</p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[x] 单据过滤方案标准化</li><li>[x] 拆单<ul><li>[x] 生产订单拆分 / 生产订单行拆分</li></ul></li><li>[x] 内部联络单<ol><li>方便管理，少出错，即日起，<strong>只有 disklight 系列</strong>(包含经济款和感应款)<strong>默认喷粉颜色为<code>常规哑白色</code></strong></li><li>客户PT和迪美是正白色,工程新编独立料号。(46.8时)</li><li>其他所有客户返单和新订单统一喷粉哑白色。</li><li>如有正白色库存的优先小订单消耗掉。</li></ol></li><li>[x] 生产工时，<strong>物料-罗工</strong>，生产汇报单-生产主管（江门&amp;深圳）</li><li>[x] 0824 会议记录表</li><li>[x] 变更单审批的工作给财务罗情，卢梦晓后面不审核变更单</li><li>[x] 财务新建一个帐套（在老系统）【设置<code>K3ERP\DBFILE&gt;文件夹</code>的完全控制权限】</li><li>[x] 测试BOM用量+<ul><li>[x] 分子：原材料的用量</li><li>[x] 分母：用在多少个成品上</li></ul></li><li>[x] 委外订单自动结案条件是什么</li><li>[x] 仓库委外的领不了料<ul><li>[x] WW0000025 1202010003 已手动结案并关闭对应的采购订单（EO0000060）</li><li>[x] WW0000024 1202010002 已手动结案并关闭对应的采购订单（EO0000060）</li><li>[x] WW0000064 1202010003 已下采购订单并入库，没有委外订单，委外订单 WW0000064 是手动新增的，为了扣料，已手动结案并关闭对应的采购订单（EO0000076）</li></ul></li><li>[x] 8.15 后面的BOM都启用新算法</li><li>[x] 其他出库模块里设置一个报废出库单模板</li><li>[x] WW567 2103010092 单价 ¥0.19 入库单单价，¥0.15<ul><li>[x] 因为在入库之后采购订单又做了变更，通知PMC在变更订单之后要在变更单页面点击<a href="https://vip.kingdee.com/article/296229257175281152?productLineId=1&amp;isKnowledge=2"><code>同步价格下游单据</code></a></li></ul></li><li>[x] 采购订单源单编号</li><li>[x] 自动生成应付/应收：应付款/应收款管理参数 模块</li><li>[x] SEORD001413 老系统订单补单，订单已入库，为了扣料创建此订单，不再入库，故关闭。</li><li>[x] 生产订单拆分后的用料清单是用的哪个物料清单，更新前的还是更新后的？</li><li>[x] 杨总让计划去管控物料的数量，不让采购去控制数量，采购只管下单。</li><li>[x] 仓库把之前订单的料领完，然后手动结案相关生产订单</li><li>[x] 包材小数问题解决：BOM 使用分母方案，切换方案前跟各个部门开会讨论下或者出个ECN,<ul><li>[x] BOM 中用量不要出现小数，灵活运用分子和分母进行用量计算</li><li>[x] 生产拆单要拆的单数要为箱数的整数倍</li></ul></li><li>[x] 生产订单审核后不自动下达</li><li>[x] 共享主机，文件迁移测试，个人电脑共享文件统一放到对应部门的文件夹<ul><li>[x] 采购玉婷的文件共享到主机</li></ul></li><li>[x] 开启审批流的单据审核后通知制单人和相关人员</li><li>[x] <a href="https://vip.kingdee.com/article/360923436069552640?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">BOM 版本</a></li><li>[x] 批号的问题汇总（录音）<br>仓库主管和计划主管反对使用批号：<ol><li>仓库表示：共用料调料不好调</li><li>仓库表示：可不可以让批号自动带出来（销售订单号）</li><li>仓库表示：一张销售订单拆成很多张单，批号怎么填写</li><li>仓库表示：一个物料存在多个批号盘点不好盘</li><li>计划表示：一个物料存在多个批次跑计划怎么跑？要求一物一码</li></ol></li><li>[x] 批号追溯</li><li>[x] 共享盘权限问题【工程成本分析业务是否能看见】<ul><li>[x] 问：物料上面的这个标准工时到时候统计会作为参照和汇报单上的工时进行对比吗？<ul><li>[x] 答：会，列表中到时一拉出来，就知道 标准是多少，实际是多少</li></ul></li></ul></li><li>[x] 协助采购把之前的采购申请单关闭</li><li>[x] 物料关键件，非关键件设置<ul><li>包材、辅料、自制成品为非关键件其他的都是关键件【8.9号设置】</li></ul></li><li>[x] 刘工 BOM 审核问题<ul><li>[x] 线下确认好，然后再终审，放弃使用ECN方案</li></ul></li><li>[x] 应付单没有生成的单据编号，下推入库单之后再保存</li><li>[x] 跟江门和深圳的生产经理讲一下工时的问题</li><li>[x] ！！！！！包材物料的批号管理，测试，培训！写一个文档出来！【周六】</li><li>[x] 汇率体系每个月都要维护，这个月业务对账手动下推销售出库单到应收单</li><li>[x] 计划订单跑出来之后自动排序</li><li>[x] 会议室无线网信号差<br>会议室WIFI：<br>名称： KOK-BGS-会议室<br>密码：kok123456</li><li>[x] 委外用料清单添加位置号。设置位置号的可见性即可</li><li>[x] <a href="https://vip.kingdee.com/school/172038839131945216?productLineId=31">物料清单成本查询</a>，测试半成品成本，一个物料有多家供应商成本怎么算。<ul><li>[x] 取最新的采购订单</li></ul></li><li>[x] PMC<ul><li>[x] 计划方案MPS考虑库存，在途状态的物料</li><li>[x] 采购申请单，采购订单没有买的记录删除，是否是行终止，终止后的行还会参与计算吗？</li><li>[x] 计划维护什么参数，报表取数才正确？</li></ul></li><li>[x] 物料清单同步的问题。解决方案：  <ul><li>[x] 需求：生产订单下达后不会被同步更新，下达之前可以</li></ul></li><li>[x] 王芳电脑打印机，和PDF软件问题</li><li>[x] 包材价目表导入之后设置<code>强制以采购价目表的价格为准</code></li><li>[x] 采购订单补单的单据都弄完之后把采购订单源单字段设置为必录</li><li>[x] 生产订单中的行执行的几种方式跟计划讲一下，并确定是谁来执行，计划执行还是生产部门执行？</li><li>[x] 预测单销售订单单据编号规范化</li><li>[x] 昨天发现有俩问题要调整，<ol><li>物料列表中， 成品类属性应该是自制，发现有其他属性， </li><li>委外半成品也是，各种属性在里面，</li><li>采购录的期初应付单，是财务应付，不是暂估应付，</li></ol></li><li>[x] 仓管的委外订单查看权限</li><li>[x] <a href="https://vip.kingdee.com/article/360925650259372544?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">其他入库单上的库存方向如何使用?</a><br>生产用料清单里面没有同步更新物料：</li><li>[x] 1102000077</li><li>[x] 1102000076</li><li>[x] 1103020069</li><li>[x] 1103020068</li><li>[x] 1102000230</li><li>[x] 1102000229</li><li>[x] 1104020010</li><li>[x] 1102000225</li><li>[x] 1102000226</li><li>[x] 1103020070</li><li>[x] <a href="https://vip.kingdee.com/article/383783939426933760?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">强制价目表定价如何使用</a></li><li>[x] 看下采购订单列表是否可以带出<code>物料仓位</code>【计划需求】</li><li>[x] 采购退料单已作废的单据删除</li><li>[x] <a href="https://vip.kingdee.com/article/381609671087833600?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">单据产生变更之后如何删除</a></li><li>[x] 第一阶段结完帐之后，把采购订单到应付单的反写规则启用</li><li>[x] 自动生成的应付单没有应付单号，是因为超采购订单数量做了入库。<ul><li>可以在采购订单 —&gt; 交货安排 —&gt; 勾选<code>控制交货数量</code></li></ul></li><li>[x] BOM增加包材，没有同时更新到生产用料清单【单据测试记录(20230711)详解】</li><li>[x] 添加即时库存功能<ul><li>[x] 其他出库单</li><li>[x] 直接调拨单增加调出库存的即时库存【江门杨涛需求】：<a href="https://vip.kingdee.com/article/159316090211313920?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">调拨单中可以查询库存</a><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16889700901103.png" alt="企业微信截图_16889700901103"></li></ul></li><li>[x] 采购退料流程跟采购部讲一下</li><li>[x] 应收/应付，原材料成本催她们落实</li><li>[x] 期初收款/付款单跟财务和业务讲一下</li><li>[x] 单据设置默认套打模板</li><li>[x] 成品半成品成本录入</li><li>[x] 加旧物料编码字段<ol><li>生产领料（OK） / 生产退料单（OK）</li><li>委外领料（OK） / 退料</li><li>采购入库（OK） / 退料（OK）</li></ol></li><li>[x] 设置A4版本的套打模板：生产领料/委外领料单【单据的线条细一点】</li><li>[x] 生产/委外领料单据设置一个模板：A4版本，不需要单据头</li><li>[x] <a href="https://vip.kingdee.com/article/395380317772800768?channel_level=%E9%87%91%E8%9D%B6%E4%BA%91%E7%A4%BE%E5%8C%BA%7C%E6%90%9C%E7%B4%A2%7C%E7%BB%BC%E5%90%88&amp;productLineId=1&amp;isKnowledge=2">删除系统内置的银行</a></li><li>[x] 6301KK0007  7A.KGK0007（中性4寸） 物料从金蝶云星空删除【目前已禁用】（BOM已经更新为 6301KK0029）</li><li>[x] 生产领料单套打跟仓库确认需要哪些字段。</li><li>[x] 去掉合计字段：<ul><li>[x] 采购入库单</li></ul></li><li>[x] 采购订单套打审核后才有章，没有审核的单据不会签负责人的名字，打印时章会卡BUG的问题</li></ul>]]></content>
      
      
      <categories>
          
          <category> ERP </category>
          
          <category> 金蝶云 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kingdee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>共享盘权限分配明细记录</title>
      <link href="/2023/04/212022%20%E5%BD%92%E6%A1%A3/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C_%E5%85%B1%E4%BA%AB%E7%9B%98%E6%9D%83%E9%99%90%E5%88%86%E9%85%8D%E6%98%8E%E7%BB%86/9qxci9hv/"/>
      <url>/2023/04/212022%20%E5%BD%92%E6%A1%A3/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C_%E5%85%B1%E4%BA%AB%E7%9B%98%E6%9D%83%E9%99%90%E5%88%86%E9%85%8D%E6%98%8E%E7%BB%86/9qxci9hv/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Windows Server 安装：<a href="https://post.smzdm.com/p/aekepwom/">https://post.smzdm.com/p/aekepwom/</a></p></blockquote><h1 id="共享盘账号"><a href="#共享盘账号" class="headerlink" title="共享盘账号"></a>共享盘账号</h1><blockquote><p>凭证添加或重置：控制面板\用户帐户\凭据管理器\添加 Windows 凭据</p></blockquote><h2 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h2><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">账号</th><th style="text-align:center">密码</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">工程</td><td style="text-align:center">gc</td><td style="text-align:center">gc123456-</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">研发</td><td style="text-align:center">yf</td><td style="text-align:center">yf123456.</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">文控中心</td><td style="text-align:center">wkzx</td><td style="text-align:center">wk123456+</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">公用</td><td style="text-align:center">gy</td><td style="text-align:center">gy123456*</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">王总</td><td style="text-align:center">wz</td><td style="text-align:center">wz123456.</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">行政</td><td style="text-align:center">xz</td><td style="text-align:center">xz123456-</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">业务</td><td style="text-align:center">yw</td><td style="text-align:center">yw123456+</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">财务</td><td style="text-align:center">cw</td><td style="text-align:center">cw123456!</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">PMC</td><td style="text-align:center">mc</td><td style="text-align:center">mc123456@</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">生产</td><td style="text-align:center">sc</td><td style="text-align:center">sc123456#</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">生产2</td><td style="text-align:center">sc2</td><td style="text-align:center">sc123456$</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">品质</td><td style="text-align:center">pz</td><td style="text-align:center">pz123456-</td><td style="text-align:center">深圳二厂</td></tr><tr><td style="text-align:center">采购部</td><td style="text-align:center">cg</td><td style="text-align:center">cg123456/</td><td style="text-align:center">深圳二厂</td></tr></tbody></table></div><h2 id="江门"><a href="#江门" class="headerlink" title="江门"></a>江门</h2><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">账号</th><th style="text-align:center">密码</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">江门公用</td><td style="text-align:center">jmgy</td><td style="text-align:center">gy12321.</td><td style="text-align:center">江门厂</td></tr></tbody></table></div><h1 id="账号用户"><a href="#账号用户" class="headerlink" title="账号用户"></a>账号用户</h1><h2 id="gc-工程用户表"><a href="#gc-工程用户表" class="headerlink" title="gc 工程用户表"></a>gc 工程用户表</h2><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">张善松</td></tr></tbody></table></div><h2 id="yf-研发用户表"><a href="#yf-研发用户表" class="headerlink" title="yf 研发用户表"></a>yf 研发用户表</h2><blockquote><p>备注：此账号包含<code>工程gc</code>的所有权限</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">吕玉婷</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">刘金科</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">魏永鹏</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">张桂春</td></tr></tbody></table></div><h2 id="xz-行政用户表"><a href="#xz-行政用户表" class="headerlink" title="xz 行政用户表"></a>xz 行政用户表</h2><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">黄娜</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">杨慧</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">陈思思</td></tr></tbody></table></div><h2 id="yw-业务用户表"><a href="#yw-业务用户表" class="headerlink" title="yw 业务用户表"></a>yw 业务用户表</h2><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">刘媛玲</td></tr></tbody></table></div><h2 id="pz-品质用户表"><a href="#pz-品质用户表" class="headerlink" title="pz 品质用户表"></a>pz 品质用户表</h2><div class="table-container"><table><thead><tr><th style="text-align:center">用户名</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">魏刚</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">王本帅</td></tr></tbody></table></div><h1 id="账号权限明细"><a href="#账号权限明细" class="headerlink" title="账号权限明细"></a>账号权限明细</h1><p>所有共享文件夹</p><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">NETLOGON</td><td style="text-align:center">N\A</td></tr><tr><td style="text-align:center">PMC</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">SYSVOL</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">业务</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">会议共享盘</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">公共文件</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">品质</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">工程</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">总经办</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">成本</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">文控中心</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">生产</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">生产2</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发yf</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">行政1</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">行政2</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">财务</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">采购部</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发成本分析</td></tr></tbody></table></div><h2 id="工程【gc】"><a href="#工程【gc】" class="headerlink" title="工程【gc】"></a>工程【gc】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">工程</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发yf</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">业务</td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="研发【yf】"><a href="#研发【yf】" class="headerlink" title="研发【yf】"></a>研发【yf】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">工程</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">成本</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发yf</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发成本分析</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">会议共享盘</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">行政1</td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="文控中心【wkzx】"><a href="#文控中心【wkzx】" class="headerlink" title="文控中心【wkzx】"></a>文控中心【wkzx】</h2><h2 id="公用【gy】"><a href="#公用【gy】" class="headerlink" title="公用【gy】"></a>公用【gy】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">品质</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✔</td></tr></tbody></table></div><h2 id="王总【wz】"><a href="#王总【wz】" class="headerlink" title="王总【wz】"></a>王总【wz】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">NETLOGON</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">PMC</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">SYSVOL</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">业务</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">会议共享盘</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">公共文件</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">品质</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">工程</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">总经办</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">成本</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">文控中心</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">生产</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">生产2</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发yf</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">行政1</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">行政2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✔</td></tr><tr><td style="text-align:center">财务</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">采购部</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">研发成本分析</td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="行政【xz】"><a href="#行政【xz】" class="headerlink" title="行政【xz】"></a>行政【xz】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">行政2</td><td style="text-align:center">✔</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">会议共享盘</td><td style="text-align:center"></td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">文控中心</td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="业务【yw】"><a href="#业务【yw】" class="headerlink" title="业务【yw】"></a>业务【yw】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">研发yf</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">✔</td></tr></tbody></table></div><h2 id="财务【cw】"><a href="#财务【cw】" class="headerlink" title="财务【cw】"></a>财务【cw】</h2><h2 id="PMC【mc】"><a href="#PMC【mc】" class="headerlink" title="PMC【mc】"></a>PMC【mc】</h2><h2 id="生产【sc】"><a href="#生产【sc】" class="headerlink" title="生产【sc】"></a>生产【sc】</h2><h2 id="生产2【sc2】"><a href="#生产2【sc2】" class="headerlink" title="生产2【sc2】"></a>生产2【sc2】</h2><h2 id="采购部【cg】"><a href="#采购部【cg】" class="headerlink" title="采购部【cg】"></a>采购部【cg】</h2><div class="table-container"><table><thead><tr><th style="text-align:center">文件夹</th><th style="text-align:center">完全控制</th><th style="text-align:center">更改</th><th style="text-align:center">读取</th></tr></thead><tbody><tr><td style="text-align:center">采购部</td><td style="text-align:center">✔</td><td style="text-align:center"></td></tr></tbody></table></div><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] C:\Windows\SYSVOL 文件夹暂停共享</li><li>[ ] G:\财务 文件夹暂停共享</li><li>[ ] G:\生产2 文件夹暂停共享</li></ul>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>路由器 VPN 异地组网共享</title>
      <link href="/2023/04/062022%20%E5%BD%92%E6%A1%A3/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C_%E8%B7%AF%E7%94%B1%E5%99%A8VPN%E5%BC%82%E5%9C%B0%E5%85%B1%E4%BA%AB/91xci9hv/"/>
      <url>/2023/04/062022%20%E5%BD%92%E6%A1%A3/%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C_%E8%B7%AF%E7%94%B1%E5%99%A8VPN%E5%BC%82%E5%9C%B0%E5%85%B1%E4%BA%AB/91xci9hv/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="2c418f1fb851212221fdad221973a54787426d6cf2b22bc3e359f3b2e9122d68"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2023/03/182022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF_TypeScript/916229ad/"/>
      <url>/2023/03/182022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF_TypeScript/916229ad/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript-简介与环境搭建"><a href="#TypeScript-简介与环境搭建" class="headerlink" title="TypeScript 简介与环境搭建"></a>TypeScript 简介与环境搭建</h1><p>简介：</p><ul><li>TypeScript是JavaScript的<code>超集</code>。</li><li>它对JS进行了扩展，向JS中引入了<code>类型</code>的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器<code>编译为JS</code>，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了<code>静态类型</code>，更加严格的语法，更强大的功能；TS可以在代码执行前就完成<code>代码的检查</code>，减小了运行时异常的出现的几率；TS代码可以<code>编译为任意版本的JS代码</code>，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/d83a638fbbe7537803cbc5c10baf859.jpg" alt="d83a638fbbe7537803cbc5c10baf859"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230320144004.png" alt="20230320144004"></p><p>环境搭建：</p><ol><li>下载安装 Node.js</li><li>使用npm全局安装 typescript<ul><li>进入命令行</li><li>输入：<code>npm i -g typescript</code></li></ul></li><li>创建一个ts文件</li><li>使用 tsc 命令对 ts文件 进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：tsc xxx.ts</li></ul></li></ol><h1 id="TypeScript-编译选项"><a href="#TypeScript-编译选项" class="headerlink" title="TypeScript 编译选项"></a>TypeScript 编译选项</h1><h2 id="自动编译单个文件"><a href="#自动编译单个文件" class="headerlink" title="自动编译单个文件"></a>自动编译单个文件</h2><p>编译文件时，使用 <code>-w</code> 指令后，TS编译器会<code>自动监视文件的变化</code>，并在文件发生变化时对文件进行<code>重新编译</code>。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts <span class="literal">-w</span></span><br></pre></td></tr></table></figure><h2 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h2><p>配置直接使用tsc指令，自动将当前项目下的所有 ts 文件编译为 js 文件。</p><ol><li>项目根目录下创建一个ts的配置文件 <code>tsconfig.json</code></li><li>tsconfig.json 是一个 <code>JSON 文件</code>，添加配置文件后，只需只需 <code>tsc</code> 或 <code>tsc -w</code> 命令即可完成对整个项目的编译或监视</li><li>配置选项</li></ol><div class="table-container"><table><thead><tr><th style="text-align:center">配置</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center"><strong>include</strong></td><td style="text-align:center">定义希望被编译文件所在的目录</td></tr><tr><td style="text-align:center">exclude</td><td style="text-align:center">定义需要排除在外的目录</td></tr><tr><td style="text-align:center">extends</td><td style="text-align:center">定义被继承的配置文件</td></tr><tr><td style="text-align:center">files</td><td style="text-align:center">指定被编译文件的列表，只有需要编译的文件少时才会用到</td></tr><tr><td style="text-align:center"><strong>compilerOptions</strong></td><td style="text-align:center">编译选项</td></tr></tbody></table></div><p>补充：</p><ul><li>路径：<ul><li><code>**</code> 表示任意目录</li><li><code>*</code>  表示任意文件</li></ul></li></ul><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><p>描述：定义希望被编译文件所在的目录<br>默认值：<code>[&quot;**/*&quot;]</code><br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 所有src目录和tests目录下的文件都会被编译</span></span><br><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></p><h3 id="exclude【可选】"><a href="#exclude【可选】" class="headerlink" title="exclude【可选】"></a>exclude【可选】</h3><p>描述：定义需要排除在外的目录<br>默认值：<code>[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</code><br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src下 hello目录下的文件都不会被编译</span></span><br><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></p><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>描述：定义被继承的配置文件<br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前配置文件中会自动包含 config 目录下 base.json 中的所有配置信息</span></span><br><span class="line"><span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure></p><h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><p>描述：指定被编译文件的列表，只有需要编译的文件少时才会用到<br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表中的文件都会被TS编译器所编译</span></span><br><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure></p><h3 id="compilerOptions"><a href="#compilerOptions" class="headerlink" title="compilerOptions"></a>compilerOptions</h3><p>编译选项是配置文件中非常重要也比较复杂的配置选项<br>在 compilerOptions 中包含多个子选项，用来完成对编译的配置</p><div class="table-container"><table><thead><tr><th style="text-align:center">compilerOptions 子选项</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">target</td><td style="text-align:center">设置ts代码编译的目标版本</td></tr><tr><td style="text-align:center">module</td><td style="text-align:center">设置编译后代码使用的模块化系统</td></tr><tr><td style="text-align:center">lib</td><td style="text-align:center">指定代码运行时所包含的库（宿主环境）</td></tr><tr><td style="text-align:center">outDir</td><td style="text-align:center">指定编译后文件的所在目录</td></tr><tr><td style="text-align:center">rootDir</td><td style="text-align:center">指定代码的根目录</td></tr><tr><td style="text-align:center">outFile</td><td style="text-align:center">将所有的文件编译为一个js文件</td></tr><tr><td style="text-align:center">allowJs</td><td style="text-align:center">是否对js文件编译【默认false】</td></tr><tr><td style="text-align:center">checkJs</td><td style="text-align:center">是否对js文件进行语法检查【默认false】</td></tr><tr><td style="text-align:center">removeComments</td><td style="text-align:center">是否删除注释【默认false】</td></tr><tr><td style="text-align:center">noEmit</td><td style="text-align:center">不对代码进行编译【默认false】</td></tr><tr><td style="text-align:center">noEmitOnError</td><td style="text-align:center">语法错误时不对代码进行编译【默认false】</td></tr><tr><td style="text-align:center">sourceMap</td><td style="text-align:center">是否生成sourceMap【默认false】</td></tr><tr><td style="text-align:center">语法检查</td><td style="text-align:center">语法检查相关配置</td></tr></tbody></table></div><h4 id="target"><a href="#target" class="headerlink" title="target"></a>target</h4><p>描述：设置ts代码编译的目标版本<br>可选值：<code>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext（最新版本）</code><br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 所编写的ts代码将会被编译为ES6版本的js代码</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="module"><a href="#module" class="headerlink" title="module"></a>module</h4><p>描述：设置编译后代码使用的模块化系统<br>可选值：<code>CommonJS、UMD、AMD、System、ES2020、ESNext、None</code><br>示例：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h4><p>描述：指定代码运行时所包含的库（宿主环境）【默认不用改动，除非重新配置运行环境】<br>默认值：浏览器的运行环境<br>可选值：<code>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ......</code><br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="outDir"><a href="#outDir" class="headerlink" title="outDir"></a>outDir</h4><p>描述：指定编译后文件的所在目录，默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置<br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置后编译后的js文件将会生成到dist目录</span></span><br><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="rootDir"><a href="#rootDir" class="headerlink" title="rootDir"></a>rootDir</h4><p>描述：指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录<br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="outFile"><a href="#outFile" class="headerlink" title="outFile"></a>outFile</h4><p>描述：将所有的文件编译为一个js文件，默认会将<code>所有的编写在全局作用域中的代码合并为一个js文件</code>，如果 module 指定了 <code>None、System</code> 或 <code>AMD</code> 则会将模块一起合并到文件之中<br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="allowJs"><a href="#allowJs" class="headerlink" title="allowJs"></a>allowJs</h4><p>描述：是否对js文件编译</p><h4 id="checkJs"><a href="#checkJs" class="headerlink" title="checkJs"></a>checkJs</h4><p>描述：是否对js文件进行语法检查<br>示例：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="removeComments"><a href="#removeComments" class="headerlink" title="removeComments"></a>removeComments</h4><p>描述：是否删除注释<br>默认值：false</p><h4 id="noEmit"><a href="#noEmit" class="headerlink" title="noEmit"></a>noEmit</h4><p>描述：不对代码进行编译<br>默认值：false</p><h4 id="noEmitOnError"><a href="#noEmitOnError" class="headerlink" title="noEmitOnError"></a>noEmitOnError</h4><p>描述：语法错误时不对代码进行编译<br>默认值：false</p><h4 id="sourceMap"><a href="#sourceMap" class="headerlink" title="sourceMap"></a>sourceMap</h4><p>描述：是否生成sourceMap<br>默认值：false</p><h4 id="语法检查"><a href="#语法检查" class="headerlink" title="语法检查"></a>语法检查</h4><div class="table-container"><table><thead><tr><th style="text-align:center">语法检查配置项</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">strict</td><td style="text-align:center">启用所有的严格检查【默认true】，相当于开启了所有的严格检查</td></tr><tr><td style="text-align:center">alwaysStrict</td><td style="text-align:center">总是以严格模式对代码进行编译</td></tr><tr><td style="text-align:center">noImplicitAny</td><td style="text-align:center">禁止隐式的any类型</td></tr><tr><td style="text-align:center">noImplicitThis</td><td style="text-align:center">禁止类型不明确的this</td></tr><tr><td style="text-align:center">strictBindCallApply</td><td style="text-align:center">严格检查bind、call和apply的参数列表</td></tr><tr><td style="text-align:center">strictFunctionTypes</td><td style="text-align:center">严格检查函数的类型</td></tr><tr><td style="text-align:center">strictNullChecks</td><td style="text-align:center">严格的空值检查</td></tr><tr><td style="text-align:center">strictPropertyInitialization</td><td style="text-align:center">严格检查属性是否初始化</td></tr><tr><td style="text-align:center">allowUnreachableCode</td><td style="text-align:center">检查不可达代码</td></tr><tr><td style="text-align:center">noEmitOnError</td><td style="text-align:center">有错误的情况下不进行编译【默认值false】</td></tr></tbody></table></div><h2 id="webpack-打包-TS"><a href="#webpack-打包-TS" class="headerlink" title="webpack 打包 TS"></a>webpack 打包 TS</h2><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，webpack可以结合构建工具使用TS</p><p>配置步骤：</p><ol><li>初始化项目：进入项目根目录，执行命令 <code>npm init -y</code> 创建package.json文件</li><li>下载构建工具 <code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code> 共安装了7个包：<ol><li>webpack</li><li>webpack-cli（webpack的命令行工具）</li><li>webpack-dev-server（webpack的开发服务器，自动热重载）</li><li>typescript（ts编译器）</li><li>ts-loader（ts加载器，用于在webpack中编译ts文件）</li><li>html-webpack-plugin（webpack中html插件，用来自动生成html文件，并自动引入相关资源）</li><li>clean-webpack-plugin（webpack中的清除插件，每次构建都会先清除dist目录）</li></ol></li><li>根目录下创建 webpack 的配置文件 <code>webpack.config.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 用来自动生成html文件，并自动引入相关资源</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>:&#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指定入口文件</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指定打包文件所在目录</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 将 webpack 打包生成最外层的立即执行箭头函数变为普通函数【可选】</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 用来设置引用模块</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 指定webpack打包要使用的模块</span></span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 匹配 ts 文件</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, </span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="comment">// html-webpack-plugin 插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;TS测试&#x27;</span> <span class="comment">// 自定义 html title</span></span><br><span class="line">            <span class="comment">// template: &#x27;./src/index.html&#x27;, // 打包生成的 html 文件依据这个模板基础创建</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>根目录下创建 <code>tsconfig.json</code>，配置可以根据自己需要<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>修改package.json添加如下脚本配置<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// webpack-dev-server 插件配置项</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</li></ol><h2 id="Babel-低版本兼容"><a href="#Babel-低版本兼容" class="headerlink" title="Babel 低版本兼容"></a>Babel 低版本兼容</h2><p>经过一系列的配置，使得 TS 和 webpack 已经结合到了一起，除了webpack，开发中还经常需要<code>结合 babel 来对代码进行转换以使其可以兼容到更多的浏览器</code>，在上述步骤的基础上，通过以下步骤再将 babel 引入到项目中。</p><ol><li>安装依赖包：<code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code>共安装了4个包，分别是：<ol><li>@babel/core（babel的核心工具）</li><li>@babel/preset-env（babel的预定义环境）</li><li>@babel-loader（babel在webpack中的加载器）</li><li>core-js（core-js用来使老版本的浏览器支持新版ES语法）</li></ol></li><li>修改 webpack.config.js 配置文件<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: /\.ts$/,</span><br><span class="line"><span class="addition">+            use: [</span></span><br><span class="line"><span class="addition">+                &#123;</span></span><br><span class="line"><span class="addition">+                    loader: &quot;babel-loader&quot;,</span></span><br><span class="line"><span class="addition">+                    options:&#123;</span></span><br><span class="line"><span class="addition">+                        presets: [</span></span><br><span class="line"><span class="addition">+                            [</span></span><br><span class="line"><span class="addition">+                                &quot;@babel/preset-env&quot;,</span></span><br><span class="line"><span class="addition">+                                &#123;</span></span><br><span class="line"><span class="addition">+                                    &quot;targets&quot;:&#123;</span></span><br><span class="line"><span class="addition">+                                        &quot;chrome&quot;: &quot;58&quot;,</span></span><br><span class="line"><span class="addition">+                                        &quot;ie&quot;: &quot;11&quot;</span></span><br><span class="line"><span class="addition">+                                    &#125;,</span></span><br><span class="line"><span class="addition">+                                    &quot;corejs&quot;:&quot;3&quot;, // 指定 corejs 版本</span></span><br><span class="line"><span class="addition">+                                    &quot;useBuiltIns&quot;: &quot;usage&quot; // 按需加载</span></span><br><span class="line"><span class="addition">+                                &#125;</span></span><br><span class="line"><span class="addition">+                            ]</span></span><br><span class="line"><span class="addition">+                        ]</span></span><br><span class="line"><span class="addition">+                    &#125;</span></span><br><span class="line"><span class="addition">+                &#125;,</span></span><br><span class="line">                &#123;</span><br><span class="line">                    loader: &quot;ts-loader&quot;,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            exclude: /node_modules/</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的<code>targets</code>中指定要兼容的浏览器版本。</li></ol><h1 id="TypeScript-类型声明"><a href="#TypeScript-类型声明" class="headerlink" title="TypeScript 类型声明"></a>TypeScript 类型声明</h1><p>通过类型声明可以指定TS中变量（参数、形参）的类型<br>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型; <span class="comment">// 声明变量及类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值; <span class="comment">// 声明变量及类型并赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> 变量 = 值; <span class="comment">// 声明变量及类型并赋值（ts 会自动类型判断，自动设置变量的类型）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置函数的参数类型以及返回值类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h2><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时<code>同时进行</code>的，<code>可以省略掉类型声明</code></li></ul><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">例子</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">number</td><td style="text-align:center">1, -33, 2.5</td><td style="text-align:center">任意数字</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">‘hi’, “hi”, <code>hi</code></td><td style="text-align:center">任意字符串</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">true、false</td><td style="text-align:center">布尔值true或false</td></tr><tr><td style="text-align:center">字面量</td><td style="text-align:center">其本身</td><td style="text-align:center">限制变量的值就是该字面量的值</td></tr><tr><td style="text-align:center">any</td><td style="text-align:center">*</td><td style="text-align:center">任意类型</td></tr><tr><td style="text-align:center">unknown</td><td style="text-align:center">*</td><td style="text-align:center">类型安全的any</td></tr><tr><td style="text-align:center">void</td><td style="text-align:center">空值（undefined）</td><td style="text-align:center">没有值（或undefined）</td></tr><tr><td style="text-align:center">never</td><td style="text-align:center">没有值</td><td style="text-align:center">不能是任何值</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">{name:’孙悟空’}</td><td style="text-align:center">任意的JS对象</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">[1,2,3]</td><td style="text-align:center">任意JS数组</td></tr><tr><td style="text-align:center">tuple</td><td style="text-align:center">[4,5]</td><td style="text-align:center">元组，TS新增类型，固定长度数组</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">enum{A, B}</td><td style="text-align:center">枚举，TS中新增类型</td></tr></tbody></table></div><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>: <span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>可以使用字面量去指定变量的类型，通过字面量可以确定变量的<code>取值范围</code>（联合类型）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>; <span class="comment">// color 变量只能是字符串 red blue black 三个中的其中一个</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>; <span class="comment">// num 只能是数字 1~5</span></span><br></pre></td></tr></table></figure><p>拓展：</p><ul><li>&amp; 操作符<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 表示 obj 对象必须满足 name 属性（string类型） 和 age 属性（number类型）</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: &#123;<span class="attr">name</span>: <span class="built_in">string</span>&#125; &amp; &#123;<span class="attr">age</span>: <span class="built_in">number</span>&#125;</span><br><span class="line">obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;frank&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure></li><li>类型的别名<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前：</span></span><br><span class="line"><span class="comment">// let a = 1 | 2 | 3 | 4 | 5;</span></span><br><span class="line"><span class="comment">// let b = 1 | 2 | 3 | 4 | 5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后：</span></span><br><span class="line"><span class="keyword">type</span> myType = <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> a = myType;</span><br><span class="line"><span class="keyword">let</span> b = myType;</span><br></pre></td></tr></table></figure></li></ul><h3 id="any-推荐使用unknown代替"><a href="#any-推荐使用unknown代替" class="headerlink" title="any (推荐使用unknown代替)"></a>any (推荐使用unknown代替)</h3><p>相当于对该变量关闭了 TS 类型检测</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>补充：</p><ul><li>声明变量如果不指定类型，则 TS解析器会自动判断变量的类型为 any (如 <code>let a;</code>)</li><li>any 类型可以赋值给任意变量</li></ul><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">unknown</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure><p>补充：</p><ul><li>unknown 和 any 的区别：unknown 类型的变量不可以直接赋值给其他类型的变量</li><li>如果想把 unknown 类型的变量赋值给其他变量：<ul><li>类型判断</li><li>类型断言</li></ul></li></ul><p>类型判断举例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">// b = a; 【这样写会报错】</span></span><br><span class="line"><span class="comment">// 如果非要赋值可以使用类型判断：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> a === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">  b = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类型断言举例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">unknown</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">// b = a; 【这样写会报错】</span></span><br><span class="line"><span class="comment">// 如果非要赋值可以使用类型断言：</span></span><br><span class="line"><span class="comment">// 类型断言写法 1：</span></span><br><span class="line"><span class="comment">// b = a as string;</span></span><br><span class="line"><span class="comment">// 类型断言写法 2：</span></span><br><span class="line">b = &lt;<span class="built_in">string</span>&gt;a;</span><br></pre></td></tr></table></figure><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;&#125; <span class="comment">// 表示没有返回值的函数</span></span><br></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>never 表示永远都不会返回一个结果</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = &#123;&#125;; <span class="comment">// 这样写没啥用</span></span><br></pre></td></tr></table></figure><h4 id="限制对象属性"><a href="#限制对象属性" class="headerlink" title="限制对象属性"></a>限制对象属性</h4><p>对象一般是<code>限制它包含哪些属性</code>; 【常见用法】</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法：&#123;属性名: 属性值,[属性名?: 属性值],[[propName: string]: any]&#125; </span></span><br><span class="line"><span class="comment">1. 在属性名后面加上 ? 表示属性是可选的</span></span><br><span class="line"><span class="comment">2. [propName: string]: any 表示任意个任意类型的属性</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, age?: <span class="built_in">number</span> &#125;;</span><br><span class="line">a = &#123; <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span> &#125;</span><br><span class="line">a = &#123; <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>, [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;;</span><br><span class="line">b = &#123; <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">gender</span>: <span class="string">&#x27;male&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h4 id="设置函数类型声明"><a href="#设置函数类型声明" class="headerlink" title="设置函数类型声明"></a>设置函数类型声明</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法：(形参：类型,形参：类型,...) =&gt; 函数返回值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fn</span>: <span class="function">(<span class="params">a:<span class="built_in">number</span>,b:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span>;</span><br><span class="line">fn = <span class="keyword">function</span>(<span class="params">n1:<span class="built_in">number</span>,n2:<span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">number[] 表示数值数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>tuple：元组，<code>固定长度</code>数组（效率较好 ）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">语法：[类型,类型,类型,类型...]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">enum 允许我们定义一组命名的常量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure><h1 id="TypeScript-面向对象"><a href="#TypeScript-面向对象" class="headerlink" title="TypeScript 面向对象"></a>TypeScript 面向对象</h1><p>面向对象简而言之就是程序之中所有的操作都需要通过对象来完成。在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。</p><p>举例来说：</p><ul><li>操作浏览器要使用<code>window</code>对象</li><li>操作网页要使用<code>document</code>对象</li><li>操作控制台要使用<code>console</code>对象</li></ul><h2 id="类（class）"><a href="#类（class）" class="headerlink" title="类（class）"></a>类（class）</h2><p>要想面向对象，操作对象，首先便要拥有对象，要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象。<br>举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><p>语法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  1. 直接定义的是实例属性【常用】</span></span><br><span class="line"><span class="comment">  2. 在属性前使用 static 关键字可以定义类属性（静态属性）</span></span><br><span class="line"><span class="comment">  3. 在属性前使用 readonly 关键字可以定义只读属性</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">[<span class="keyword">static</span>|<span class="keyword">readonly</span>] 属性名: 类型;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造函数</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">参数: 类型</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.属性名 = 参数; <span class="comment">// this 表示当前的实例</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法名()&#123;</span><br><span class="line">.... <span class="comment">// 方法中的 this 表示当前实例对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Frank&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><h2 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装。</p><h4 id="属性封装"><a href="#属性封装" class="headerlink" title="属性封装"></a>属性封装</h4><p>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在 TS 中可以对<code>属性的权限进行设置</code></p><p>TS 中属性具有三种修饰符：</p><div class="table-container"><table><thead><tr><th style="text-align:center">修饰符</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">public</td><td style="text-align:center">【默认】可以在类、子类和实例对象中修改</td></tr><tr><td style="text-align:center">private</td><td style="text-align:center">只能在类内部修改（一般通过内部方法修改(setter)/读取(getter)私有属性）</td></tr><tr><td style="text-align:center">protected</td><td style="text-align:center">只能在类、子类中访问/修改</td></tr></tbody></table></div><p>public：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是 public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure><p>private：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一般通过内部方法修改/读取私有属性</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">value: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">age</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">age</span>(<span class="params">value: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(age &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = value;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 默认不设置 get 和 set 子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 默认不设置 get 和 set 不能修改</span></span><br></pre></td></tr></table></figure><p>protected：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 实例对象不能修改</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>通过<code>extends</code>继承关键字可以将其他类中的<code>属性</code>和<code>方法</code>引入到当前类中，可以在不修改类的情况下完成对类的扩展</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><h4 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h4><p>发生继承时，子类中的同名方法方法会<code>替换掉父类中的同名方法</code>，这就称为方法的重写</p><p>示例：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>(); <span class="comment">// 子类中的run方法，会重写父类中的run方法！</span></span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>在子类中可以使用 <code>super</code> 来完成对父类的引用</p><p>应用场景：调用父类的构造函数</p><blockquote><p>默认情况下类在创建实例时会<code>自动调用构造函数</code>，子类继承父类通过子类创建实例父类构造函数不会调用，此时需要使用 super 关键字进行手动调用</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name); <span class="comment">// 如果在子类中写了构造函数，在子类构造函数中必须对父类的构造函数进行调用</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在类的方法中 super 就表示当前类的父类</span></span><br><span class="line">        <span class="comment">//super.sayHello();</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪汪汪汪！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">3</span>);</span><br><span class="line">dog.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure><h4 id="抽象类-abstract"><a href="#抽象类-abstract" class="headerlink" title="抽象类(abstract)"></a>抽象类(abstract)</h4><p>抽象类：是<code>专门用来被其他类所继承的类</code>，它只能被其他类所继承<code>不能用来创建实例</code><br>抽象方法：没有方法体<code>只能定义在抽象类中</code>，<code>继承抽象类时抽象方法必须要实现</code></p><p>代码演示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">// abstract 抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>&#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口-interface"><a href="#接口-interface" class="headerlink" title="接口(interface)"></a>接口(interface)</h4><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是<code>没有实值</code>的，<code>接口中的所有方法都是抽象方法</code>。<br>接口主要负责<code>定义一个类的结构</code>，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><p>代码演示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">per: Person</span>) &#123;</span><br><span class="line">    per.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure><p>代码演示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 interface 关键字定义接口，使用 implements 关键字实现接口。</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="泛型-Generic"><a href="#泛型-Generic" class="headerlink" title="泛型(Generic)"></a>泛型(Generic)</h2><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（<code>返回值、参数、属性的类型</code>不能确定），此时可以使用泛型。</p><h3 id="函数中的泛型"><a href="#函数中的泛型" class="headerlink" title="函数中的泛型"></a>函数中的泛型</h3><blockquote><p>函数中的泛型只有在函数执行时才能确定类型</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">这里的`&lt;T&gt;`就是泛型，T 是我们给这个类型起的名字（不一定非叫T）。</span></span><br><span class="line"><span class="comment">设置泛型后即可在函数中使用 T 来表示该类型。所以泛型就表示某个类型。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> test&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式一（直接使用）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="number">10</span>) <span class="comment">// 使用时可以直接传递参数使用，类型会由 TS 自动推断出来</span></span><br></pre></td></tr></table></figure><p>方式二（指定类型）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>也可以在函数后手动指定多个泛型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以同时指定多个泛型，泛型间使用逗号隔开：</span></span><br><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): K&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用泛型时，完全可以将泛型当成是一个普通的类去使用</p><h3 id="类中的泛型"><a href="#类中的泛型" class="headerlink" title="类中的泛型"></a>类中的泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">prop</span>: T;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">prop: T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">prop</span> = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，也可以对泛型的范围进行约束</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> test&lt;T <span class="keyword">extends</span> <span class="title class_">MyInter</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>T extends MyInter</code> 表示泛型 T 必须是 MyInter 的子类，不一定非要使用接口类和抽象类同样适用。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node</title>
      <link href="/2023/03/142022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF_Node/976189ad/"/>
      <url>/2023/03/142022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF_Node/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-js-简介"><a href="#Node-js-简介" class="headerlink" title="Node.js 简介"></a>Node.js 简介</h1><p>Node.js是一个基于ChromeV8引擎的 <strong>JavaScript 运行环境</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220825135418.png" alt="20220825135418"></p><h2 id="Node-js-可以做什么"><a href="#Node-js-可以做什么" class="headerlink" title="Node.js 可以做什么"></a>Node.js 可以做什么</h2><p>Node.js作为一个JavaScript的运行环境，仅仅提供了基础的功能和APl。<br>基于Node.js提供的这些基础能，很多强大的<a href="http://nodejs.cn/learn/introduction-to-nodejs/#nodejs-%E6%A1%86%E6%9E%B6%E5%92%8C%E5%B7%A5%E5%85%B7">框架和工具</a>如雨后春笋，层出不穷：</p><ol><li>基于Express框架（<a href="http://www.expressjs.com.cn/),可以快速构建Web应用">http://www.expressjs.com.cn/),可以快速构建Web应用</a></li><li>基于Electron框架（<a href="https://electronjs.org/),可以构建跨平台的桌面应用">https://electronjs.org/),可以构建跨平台的桌面应用</a></li><li>基于restify框架（<a href="http://restify.com/),可以快速构建API接口项目">http://restify.com/),可以快速构建API接口项目</a></li><li>读写和操作数据库、创建实用的命令行工具辅助前端开发、etc…</li></ol><h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><h2 id="Buffer-类"><a href="#Buffer-类" class="headerlink" title="Buffer 类"></a>Buffer 类</h2><h3 id="创建-Buffer"><a href="#创建-Buffer" class="headerlink" title="创建 Buffer"></a>创建 Buffer</h3><p>Buffer.alloc(size[, fill[, encoding]])<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></p><p>Buffer.allocUnsafe(size)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>Buffer.from(array)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">0x62</span>, <span class="number">0x75</span>, <span class="number">0x66</span>, <span class="number">0x66</span>, <span class="number">0x65</span>, <span class="number">0x72</span>]);</span><br></pre></td></tr></table></figure></p><h1 id="fs-文件系统"><a href="#fs-文件系统" class="headerlink" title="fs 文件系统"></a>fs 文件系统</h1><blockquote><p>fs模块可以实现与硬盘的交互。例如文件的创建、删除、重命名、移动，还有文件内容的写入、读取，以及文件夹的相关操作</p></blockquote><h2 id="引入模式"><a href="#引入模式" class="headerlink" title="引入模式"></a>引入模式</h2><p><code>所有文件系统操作都具有同步、回调和基于 promise 的形式</code>（默认是异步），并且可以使用 CommonJS 语法和 ES6 模块进行访问。</p><h2 id="fs-类"><a href="#fs-类" class="headerlink" title="fs 类"></a>fs 类</h2><h3 id="文件写入"><a href="#文件写入" class="headerlink" title="文件写入"></a>文件写入</h3><p>写入文件的场景:</p><ul><li>下载文件</li><li>安装软件</li><li>保存程序日志，如 Git</li><li>编辑器保存文件</li><li>视频录制</li></ul><h4 id="创建并写入"><a href="#创建并写入" class="headerlink" title="创建并写入"></a>创建并写入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">writeFile</span>(file, data[, options], callback)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316140436.png" alt="20230316140436"></p><h4 id="追加写入"><a href="#追加写入" class="headerlink" title="追加写入"></a>追加写入</h4><blockquote><p>应用场景：写入日志</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">appendFile</span>(path, data[, options], callback)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; appendFile &#125; <span class="keyword">from</span> <span class="string">&#x27;node:fs&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">appendFile</span>(<span class="string">&#x27;message.txt&#x27;</span>, <span class="string">&#x27;data to append&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The &quot;data to append&quot; was appended to file!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>补充：</p><ul><li>如果需要在写入的文件中插入换行可以使用 <code>\r\n</code></li><li>fs.writeFile 也可以实现追加写入：在第三个配置项添加：<code>&#123;flag: &#39;a&#39;&#125;</code></li></ul><h4 id="流式写入"><a href="#流式写入" class="headerlink" title="流式写入"></a>流式写入</h4><blockquote><p>程序打开一个文件是需要消耗资源的 ，流式写入可以减少打开关闭文件的次数。<br>应用场景：流式写入方式适用于<code>大文件写入或者频繁写入</code>的场景, writeFile 适合于 写入频率较低的场景</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">createWriteStream</span>(path[, options])</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316143652.png" alt="20230316143652"></p><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><p>读取文件应用场景：</p><ul><li>电脑开机</li><li>程序运行</li><li>编辑器打开文件</li><li>查看图片</li><li>播放视频</li><li>播放音乐</li><li>Git查看日志</li><li>上传文件</li><li>查看聊天记录</li></ul><h4 id="读取文件-一次性读取"><a href="#读取文件-一次性读取" class="headerlink" title="读取文件(一次性读取)"></a>读取文件(一次性读取)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readFile</span>(path[, options], callback)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316144510.png" alt="20230316144510"></p><h4 id="流式读取-效率高占用空间小"><a href="#流式读取-效率高占用空间小" class="headerlink" title="流式读取(效率高占用空间小)"></a>流式读取(效率高占用空间小)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">createReadStream</span>(path[, options])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建读取流对象</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./观书有感.txt&#x27;</span>);</span><br><span class="line"><span class="comment">//每次取出 64k 数据后执行一次 data 回调</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">length</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//读取完毕后, 执行 end 回调</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取完成&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文件移动与重命名"><a href="#文件移动与重命名" class="headerlink" title="文件移动与重命名"></a>文件移动与重命名</h3><blockquote><p>可以使用 <code>rename</code> 或 <code>renameSync</code> 来移动或重命名 文件或文件夹</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(oldPath, newPath, callback)</span><br><span class="line">fs.<span class="title function_">renameSync</span>(oldPath, newPath)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;./观书有感.txt&#x27;</span>, <span class="string">&#x27;./论语/观书有感.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动完成&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;./论语/我的座右铭.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><blockquote><p>可以使用 unlink 或 unlinkSync 来删除文件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">unlink</span>(path, callback)</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(path)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&#x27;./test.txt&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">fs.<span class="title function_">unlinkSync</span>(<span class="string">&#x27;./test2.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><p>补充：<code>fs.rm</code> 方法也可以实现删除的操作</p><h3 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h3><blockquote><p>可以对文件夹进行创建、读取、删除等操作</p></blockquote><h4 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">mkdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步创建文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./page&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;创建成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//递归异步创建</span></span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&#x27;./1/2/3&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归创建成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//递归同步创建文件夹</span></span><br><span class="line">fs.<span class="title function_">mkdirSync</span>(<span class="string">&#x27;./x/y/z&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;);</span><br></pre></td></tr></table></figure><h4 id="读取文件夹"><a href="#读取文件夹" class="headerlink" title="读取文件夹"></a>读取文件夹</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">readdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">readdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步读取</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./论语&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步读取</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;./论语&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h4 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title="删除文件夹"></a>删除文件夹</h4><blockquote><p>更推荐使用 <code>fs.rm</code> 方法来删除文件/文件夹</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rmdir</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(path[, options])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./page&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//异步递归删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./1&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归删除&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步递归删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(<span class="string">&#x27;./x&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="查看资源状态"><a href="#查看资源状态" class="headerlink" title="查看资源状态"></a>查看资源状态</h3><p>可以使用 <code>stat</code> 或 <code>statSync</code> 来查看资源的详细信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">stat</span>(path[, options], callback)</span><br><span class="line">fs.<span class="title function_">statSync</span>(path[, options])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步获取状态</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步获取状态</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./data.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><p>结果值对象结构：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Stats <span class="punctuation">&#123;</span></span><br><span class="line">  dev<span class="punctuation">:</span> <span class="number">742588151</span><span class="punctuation">,</span>       </span><br><span class="line">  mode<span class="punctuation">:</span> <span class="number">33206</span><span class="punctuation">,</span></span><br><span class="line">  nlink<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  uid<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  gid<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  rdev<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  blksize<span class="punctuation">:</span> <span class="number">4096</span><span class="punctuation">,</span>        </span><br><span class="line">  ino<span class="punctuation">:</span> <span class="number">1125899906844979</span><span class="punctuation">,</span></span><br><span class="line">  size<span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  blocks<span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  atimeMs<span class="punctuation">:</span> <span class="number">1678952805634.295</span><span class="punctuation">,</span></span><br><span class="line">  mtimeMs<span class="punctuation">:</span> <span class="number">1661441206451.9998</span><span class="punctuation">,</span></span><br><span class="line">  ctimeMs<span class="punctuation">:</span> <span class="number">1661441206451.6675</span><span class="punctuation">,</span></span><br><span class="line">  birthtimeMs<span class="punctuation">:</span> <span class="number">1661441170990.5757</span><span class="punctuation">,</span></span><br><span class="line">  atime<span class="punctuation">:</span> <span class="number">2023</span><span class="number">-03</span><span class="number">-16</span>T07<span class="punctuation">:</span><span class="number">46</span><span class="punctuation">:</span><span class="number">45.634</span>Z<span class="punctuation">,</span></span><br><span class="line">  mtime<span class="punctuation">:</span> <span class="number">2022</span><span class="number">-08</span><span class="number">-25</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">46.452</span>Z<span class="punctuation">,</span></span><br><span class="line">  ctime<span class="punctuation">:</span> <span class="number">2022</span><span class="number">-08</span><span class="number">-25</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">46.452</span>Z<span class="punctuation">,</span></span><br><span class="line">  birthtime<span class="punctuation">:</span> <span class="number">2022</span><span class="number">-08</span><span class="number">-25</span>T15<span class="punctuation">:</span><span class="number">26</span><span class="punctuation">:</span><span class="number">10.991</span>Z</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>fs 模块对资源进行操作时，路径的写法有两种：</p><ul><li>相对路径<ul><li>./座右铭.txt 当前目录下的座右铭.txt</li><li>座右铭.txt 等效于上面的写法</li><li>../座右铭.txt 当前目录的上一级目录中的座右铭.txt</li></ul></li><li>绝对路径<ul><li>D:/Program Files windows 系统下的绝对路径</li><li>/usr/bin Linux 系统下的绝对路径</li></ul></li></ul><blockquote><p>相对路径中所谓的 <code>当前目录</code> ，指的是 <code>命令行的工作目录</code> ，而并非是文件的所在目录<br>所以当命令行的工作目录与文件所在目录不一致时，会出现一些 BUG</p></blockquote><h3 id="dirname"><a href="#dirname" class="headerlink" title="__dirname"></a>__dirname</h3><blockquote><p><strong>dirname 与 require 类似，都是 Node.js 环境中的’全局’变量</strong>dirname 保存着 当前文件所在目录的绝对路径 ，可以使用 __dirname 与文件名拼接成绝对路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/data.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><blockquote><p>使用 fs 模块的时候，尽量使用 __dirname 将路径转化为绝对路径，这样可以避免相对路径产生的Bug</p></blockquote><h1 id="path-路径模块"><a href="#path-路径模块" class="headerlink" title="path 路径模块"></a>path 路径模块</h1><div class="table-container"><table><thead><tr><th>API</th><th>Description</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径【常用】</td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table></div><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//获取路径分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>);</span><br><span class="line"><span class="comment">//拼接绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"><span class="comment">//解析路径</span></span><br><span class="line"><span class="keyword">let</span> pathname = <span class="string">&#x27;D:/program file/nodejs/node.exe&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(pathname));</span><br><span class="line"><span class="comment">//获取路径基础名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(pathname))</span><br><span class="line"><span class="comment">//获取路径的目录名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(pathname));</span><br><span class="line"><span class="comment">//获取路径的扩展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(pathname));</span><br></pre></td></tr></table></figure><h1 id="http-模块"><a href="#http-模块" class="headerlink" title="http 模块"></a>http 模块</h1><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>HTTP（hypertext transport protocol）协议；中文叫超文本传输协议，是一种基于TCP/IP的应用层通信协议，这个协议详细规定了 浏览器 和万维网 服务器 之间互相通信的规则。</p><p>协议中主要规定了两个方面的内容</p><ul><li>客户端：用来向服务器发送数据，可以被称之为<code>请求报文</code></li><li>服务端：向客户端返回数据，可以被称之为<code>响应报文</code></li></ul><h3 id="请求报文的组成"><a href="#请求报文的组成" class="headerlink" title="请求报文的组成"></a>请求报文的组成</h3><ol><li>请求行</li><li>请求头</li><li>空行</li><li>请求体</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316212141.png" alt="20230316212141"></p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求行包含：</p><ol><li>请求方法</li><li>URL</li><li>HTTP版本号</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316212629.png" alt="20230316212629"></p><p>常见请求方法：</p><div class="table-container"><table><thead><tr><th>方法</th><th>Description</th></tr></thead><tbody><tr><td>GET</td><td>主要用于获取数据</td></tr><tr><td>POST</td><td>主要用于新增数据</td></tr><tr><td>PUT/PATCH</td><td>主要用于更新数据</td></tr><tr><td>DELETE</td><td>主要用于删除数据</td></tr><tr><td>HEAD/OPTIONS/CONNECT/TRACE</td><td>使用相对较少</td></tr></tbody></table></div><p>URL 的构成：</p><ol><li>协议名</li><li>主机名</li><li>端口号</li><li>路径</li><li>查询字符串</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316213122.png" alt="20230316213122"></p><p>HTTP版本号：</p><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>1.0</td><td>1996年</td></tr><tr><td>1.1</td><td>1999年</td></tr><tr><td>2</td><td>2015年</td></tr><tr><td>3</td><td>2018年</td></tr></tbody></table></div><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><blockquote><p>MDN 参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p></blockquote><div class="table-container"><table><thead><tr><th>请求头</th><th>Description</th></tr></thead><tbody><tr><td>Host</td><td>主机名</td></tr><tr><td>Connection</td><td>连接的设置 keep-alive（保持连接）；close（关闭连接）</td></tr><tr><td>Cache-Control</td><td>缓存控制 max-age = 0 （没有缓存）</td></tr><tr><td>Upgrade-Insecure-Requests</td><td>将网页中的http请求转化为https请求（很少用）老网站升级</td></tr><tr><td>User-Agent</td><td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端 ，一般在PC端和手机端的区分</td></tr><tr><td>Accept</td><td>设置浏览器接收的数据类型</td></tr><tr><td>Accept-Encoding</td><td>设置接收的压缩方式</td></tr><tr><td>Accept-Language</td><td>设置接收的语言 q=0.7 为喜好系数，满分为1</td></tr><tr><td>Cookie</td></tr></tbody></table></div><h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体"></a>请求体</h4><p>请求体内容的格式是非常灵活的，可以是空（GET）,也可以是字符串，还可以是JSON（POST）</p><p>例如：</p><ul><li>字符串：keywords=手机&amp;price=2000</li><li>JSON：{“keywords”:”手机”,”price”:2000}</li></ul><h3 id="响应报文的组成"><a href="#响应报文的组成" class="headerlink" title="响应报文的组成"></a>响应报文的组成</h3><ol><li>响应行</li><li>响应头</li><li>空行</li><li>响应体</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316214638.png" alt="20230316214638"></p><h4 id="响应行"><a href="#响应行" class="headerlink" title="响应行"></a>响应行</h4><p>响应行包含：</p><ol><li>HTTP版本号</li><li>响应状态码</li><li>响应状态的描述</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316214839.png" alt="20230316214839"></p><p>常见状态码：</p><div class="table-container"><table><thead><tr><th>状态码</th><th>Description</th></tr></thead><tbody><tr><td>200</td><td>请求成功</td></tr><tr><td>403</td><td>禁止请求</td></tr><tr><td>404</td><td>找不到资源</td></tr><tr><td>500</td><td>服务器内部错误</td></tr></tbody></table></div><p>状态码分类：</p><div class="table-container"><table><thead><tr><th>状态码分类</th><th>Description</th></tr></thead><tbody><tr><td>1xx</td><td>信息响应</td></tr><tr><td>2xx</td><td>成功响应</td></tr><tr><td>3xx</td><td>重定向消息</td></tr><tr><td>4xx</td><td>客户端错误响应</td></tr><tr><td>5xx</td><td>服务端错误响应</td></tr></tbody></table></div><p>常见响应状态的描述：</p><blockquote><p>MDN 参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></p></blockquote><div class="table-container"><table><thead><tr><th>Syntax</th><th>Description</th></tr></thead><tbody><tr><td>200</td><td>OK</td></tr><tr><td>403</td><td>Forbidden</td></tr><tr><td>404</td><td>Not Found</td></tr><tr><td>500</td><td>Internal Server Error</td></tr></tbody></table></div><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>常见响应头的结构：</p><ol><li>Cache-Control:缓存控制 private 私有的，只允许客户端缓存数据</li><li>Connection 链接设置</li><li>Content-Type:text/html;charset=utf-8 设置响应体的数据类型以及字符集,响应体为html，字符集utf-8</li><li>Content-Length:响应体的长度，单位为字节</li></ol><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><p>常见响应体的构成：</p><ol><li>HTML</li><li>CSS</li><li>JavaScript</li><li>图片</li><li>视频</li><li>JSON</li></ol><h2 id="创建基本服务"><a href="#创建基本服务" class="headerlink" title="创建基本服务"></a>创建基本服务</h2><ol><li>导入http模块</li><li>创建web服务器实例</li><li>为服务器实例绑定request事件，监听客户端的请求</li><li>启动服务器</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">// 2. 创建服务对象 create 创建 server 服务</span></span><br><span class="line"><span class="comment">// request 意为请求. 是对请求报文的封装对象, 通过 request 对象可以获得请求报文的数据</span></span><br><span class="line"><span class="comment">// response 意为响应. 是对响应报文的封装对象, 通过 response 对象可以设置响应报文</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3. 为服务器实例绑定 request 事件，监听客户端的请求</span></span><br><span class="line">server.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Someone visit our web server.&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 4. 监听端口，启动服务器</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;server running at http://127.0.0.1:8080&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>http.createServer 里的回调函数的执行时机： 当接收到 HTTP 请求的时候，就会执行</p></blockquote><h3 id="request-对象"><a href="#request-对象" class="headerlink" title="request 对象"></a>request 对象</h3><p>createServer 方法的回调函数的第一个参数是一个request对象，拥有以下属性：</p><ol><li><code>url</code> : 发出请求的网址。</li><li><code>method</code> : HTTP请求的方法。</li><li><code>headers</code> : HTTP请求的所有HTTP头信息。</li></ol><h3 id="response-对象"><a href="#response-对象" class="headerlink" title="response 对象"></a>response 对象</h3><p>createServer 方法的回调函数的第二个参数是一个response对象，常用方法：</p><ol><li>response.end() 方法用来写入HTTP回应的具体内容，以及回应完成后关闭本次对话</li></ol><p>补充：</p><p>当调用 response.end() 方法，向客户端发送中文内容的时候，会<strong>出现乱码</strong>问题，此时，需要手动设置内容的编码格式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>命令行 ctrl + c 停止服务</li><li>当服务启动后，更新代码必须重启服务才能生效</li><li>端口号被占用<ol><li>关闭当前正在运行监听端口的服务 （ 使用较多 ）</li><li>修改其他端口号</li></ol></li><li>HTTP 协议默认端口是 80 。HTTPS 协议的默认端口是 443, HTTP 服务开发常用端口有 3000，<br>8080，8090，9000 等</li></ol><blockquote><p>如果端口被其他程序占用，可以使用<code>资源监视器</code>找到占用端口的程序的<code>PID</code>，然后使用<code>任务管理器</code>关闭对应的<code>PID</code>程序</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317161208.png" alt="20230317161208"></p><h2 id="浏览器查看-HTTP-报文"><a href="#浏览器查看-HTTP-报文" class="headerlink" title="浏览器查看 HTTP 报文"></a>浏览器查看 HTTP 报文</h2><h3 id="查看请求行与请求头"><a href="#查看请求行与请求头" class="headerlink" title="查看请求行与请求头"></a>查看请求行与请求头</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317164258.png" alt="20230317164258"></p><h3 id="查看请求体"><a href="#查看请求体" class="headerlink" title="查看请求体"></a>查看请求体</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317164337.png" alt="20230317164337"></p><h3 id="查看-URL-查询字符串"><a href="#查看-URL-查询字符串" class="headerlink" title="查看 URL 查询字符串"></a>查看 URL 查询字符串</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317164841.png" alt="20230317164841"></p><h3 id="查看响应行与响应头"><a href="#查看响应行与响应头" class="headerlink" title="查看响应行与响应头"></a>查看响应行与响应头</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317164916.png" alt="20230317164916"></p><h3 id="查看响应体"><a href="#查看响应体" class="headerlink" title="查看响应体"></a>查看响应体</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317164944.png" alt="20230317164944"></p><h2 id="获取-HTTP-请求报文"><a href="#获取-HTTP-请求报文" class="headerlink" title="获取 HTTP 请求报文"></a>获取 HTTP 请求报文</h2><p>想要获取请求的数据，需要通过 <code>request</code> 对象</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317170712.png" alt="20230317170712"></p><p>注意事项：</p><ol><li>request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li>request.headers 将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 / 』</li><li>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</li></ol><h3 id="提取HTTP报文"><a href="#提取HTTP报文" class="headerlink" title="提取HTTP报文"></a>提取HTTP报文</h3><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取请求的方法</span></span><br><span class="line">  <span class="comment">// console.log(request.method);</span></span><br><span class="line">  <span class="comment">//获取请求的 url</span></span><br><span class="line">  <span class="comment">// console.log(request.url);// 只包含 url 中的路径与查询字符串</span></span><br><span class="line">  <span class="comment">//获取 HTTP 协议的版本号</span></span><br><span class="line">  <span class="comment">// console.log(request.httpVersion);</span></span><br><span class="line">  <span class="comment">//获取 HTTP 的请求头</span></span><br><span class="line">  <span class="comment">// console.log(request.headers.host);</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;http&#x27;</span>); <span class="comment">//设置响应体</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="提取HTTP报文的请求体"><a href="#提取HTTP报文的请求体" class="headerlink" title="提取HTTP报文的请求体"></a>提取HTTP报文的请求体</h3><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. 声明一个变量</span></span><br><span class="line">  <span class="keyword">let</span> body = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="comment">//2. 绑定 data 事件</span></span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">    body += chunk;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">//3. 绑定 end 事件</span></span><br><span class="line">  request.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(body);</span><br><span class="line">    <span class="comment">//响应</span></span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="提取HTTP报文中URL的路径与查询字符串"><a href="#提取HTTP报文中URL的路径与查询字符串" class="headerlink" title="提取HTTP报文中URL的路径与查询字符串"></a>提取HTTP报文中URL的路径与查询字符串</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="comment">//1. 导入 url 模块</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//2. 解析 request.url </span></span><br><span class="line">  <span class="comment">// console.log(request.url);</span></span><br><span class="line">  <span class="keyword">let</span> res = url.<span class="title function_">parse</span>(request.<span class="property">url</span>, <span class="literal">true</span>);</span><br><span class="line">  <span class="comment">//路径</span></span><br><span class="line">  <span class="keyword">let</span> pathname = res.<span class="property">pathname</span>;</span><br><span class="line">  <span class="comment">//查询字符串</span></span><br><span class="line">  <span class="keyword">let</span> keyword = res.<span class="property">query</span>.<span class="property">keyword</span>;</span><br><span class="line"></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="方式二（推荐）"><a href="#方式二（推荐）" class="headerlink" title="方式二（推荐）"></a>方式二（推荐）</h4><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//实例化 URL 的对象</span></span><br><span class="line">  <span class="comment">// let url = new URL(&#x27;/search?a=100&amp;b=200&#x27;, &#x27;http://127.0.0.1:9000&#x27;);</span></span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">  <span class="comment">//输出路径</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">pathname</span>);</span><br><span class="line">  <span class="comment">//输出 keyword 查询字符串【注意此处使用 get 方法获取】</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">searchParams</span>.<span class="title function_">get</span>(<span class="string">&#x27;keyword&#x27;</span>));</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;url new&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="设置-HTTP-响应报文"><a href="#设置-HTTP-响应报文" class="headerlink" title="设置 HTTP 响应报文"></a>设置 HTTP 响应报文</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317174357.png" alt="20230317174357"></p><p>代码演示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. 设置响应状态码</span></span><br><span class="line">  <span class="comment">// response.statusCode = 203;</span></span><br><span class="line">  <span class="comment">// response.statusCode = 404;</span></span><br><span class="line">  <span class="comment">//2. 响应状态的描述【用的少】</span></span><br><span class="line">  <span class="comment">// response.statusMessage = &#x27;iloveyou&#x27;;</span></span><br><span class="line">  <span class="comment">//3. 响应头</span></span><br><span class="line">  <span class="comment">// response.setHeader(&#x27;content-type&#x27;, &#x27;text/html;charset=utf-8&#x27;);</span></span><br><span class="line">  <span class="comment">// response.setHeader(&#x27;Server&#x27;, &#x27;Node.js&#x27;);</span></span><br><span class="line">  <span class="comment">// response.setHeader(&#x27;myHeader&#x27;, &#x27;test test test&#x27;);</span></span><br><span class="line">  <span class="comment">// response.setHeader(&#x27;test&#x27;, [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]);</span></span><br><span class="line">  <span class="comment">//4. 响应体的设置【write 和 end 方法都可以用于设置响应体】</span></span><br><span class="line">  <span class="comment">//4.1 write 和 end 的结合使用 响应体相对分散</span></span><br><span class="line">  <span class="comment">// response.write(&#x27;love&#x27;);</span></span><br><span class="line">  <span class="comment">// response.write(&#x27;love&#x27;);</span></span><br><span class="line">  <span class="comment">// response.write(&#x27;love&#x27;); </span></span><br><span class="line">  <span class="comment">// response.end(); //每一个请求，在处理的时候必须要执行 end 方法的</span></span><br><span class="line">  <span class="comment">//4.2 单独使用 end 方法 响应体相对集中</span></span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="网页资源的基本加载过程"><a href="#网页资源的基本加载过程" class="headerlink" title="网页资源的基本加载过程"></a>网页资源的基本加载过程</h2><p>网页资源的加载都是<code>循序渐进</code>的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等。</p><h2 id="静态资源服务"><a href="#静态资源服务" class="headerlink" title="静态资源服务"></a>静态资源服务</h2><blockquote><p>静态资源是指 <code>内容长时间不发生改变的资源</code> ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文件等。<br>动态资源是指 <code>内容经常更新的资源</code> ，例如百度首页，网易首页，京东搜索列表页面等。</p></blockquote><h3 id="搭建静态资源服务小案例"><a href="#搭建静态资源服务小案例" class="headerlink" title="搭建静态资源服务小案例"></a>搭建静态资源服务小案例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">需求：</span><br><span class="line"></span><br><span class="line">创建一个 HTTP 服务，端口为 9000，满足如下需求：</span><br><span class="line"></span><br><span class="line">- GET  /index.html        响应  page/index.html 的文件内容</span><br><span class="line">- GET  /css/app.css       响应  page/css/app.css 的文件内容</span><br><span class="line">- GET  /images/logo.png   响应  page/images/logo.png 的文件内容</span><br></pre></td></tr></table></figure><p>代码目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── page</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── app.css</span><br><span class="line">│   ├── images</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── js</span><br><span class="line">│       ├── abc.js</span><br><span class="line">│       └── app.js</span><br><span class="line">└── server.js</span><br></pre></td></tr></table></figure><p>server.js 核心代码：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230317215717.png" alt="20230317215717"></p><h3 id="网站根目录或静态资源目录"><a href="#网站根目录或静态资源目录" class="headerlink" title="网站根目录或静态资源目录"></a>网站根目录或静态资源目录</h3><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 <code>静态资源目录</code> ，也称之为 <code>网站根目录</code></p><h2 id="网页中的-URL"><a href="#网页中的-URL" class="headerlink" title="网页中的 URL"></a>网页中的 URL</h2><p>网页中的 URL 主要分为两大类：相对路径与绝对路径</p><h3 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h3><p>绝对路径<code>可靠性强</code>，而且相对容易理解，<code>在项目中运用较多</code></p><div class="table-container"><table><thead><tr><th>形式</th><th>Description</th></tr></thead><tbody><tr><td><a href="http://xxx.com/web">http://xxx.com/web</a></td><td>直接向目标资源发送请求，容易理解。网站的<code>外链</code>会用到此形式</td></tr><tr><td>/web</td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr><tr><td>//xxx/web</td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr></tbody></table></div><h3 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h3><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 计算 ，得到完整 URL 后，再发送请求，主要是学习阶<br>段用的较多【不可靠】</p><p>例如当前网页 url 为 <a href="http://www.xxx.com/course/h5.html">http://www.xxx.com/course/h5.html</a></p><div class="table-container"><table><thead><tr><th>形式</th><th>Description</th></tr></thead><tbody><tr><td>./css/app.css</td><td><a href="http://www.xxx.com/course/css/app.css">http://www.xxx.com/course/css/app.css</a></td></tr><tr><td>js/app.js</td><td><a href="http://www.xxx.com/course/js/app.js">http://www.xxx.com/course/js/app.js</a></td></tr><tr><td>../img/logo.png</td><td><a href="http://www.xxx.com/img/logo.png">http://www.xxx.com/img/logo.png</a></td></tr><tr><td>../../mp4/show.mp4</td><td><a href="http://www.xxx.com/mp4/show.mp4">http://www.xxx.com/mp4/show.mp4</a></td></tr></tbody></table></div><p>网页中使用 URL 的场景小结：（包括但不限于如下场景）</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 src</li><li>video audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><h2 id="设置资源类型（mime类型）"><a href="#设置资源类型（mime类型）" class="headerlink" title="设置资源类型（mime类型）"></a>设置资源类型（mime类型）</h2><p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型 ）是一种标准，用来表示文档、<br>文件或字节流的性质和格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mime 类型结构： [type]/[subType]</span><br><span class="line">例如： text/html text/css image/jpeg image/png application/json</span><br></pre></td></tr></table></figure><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理<br>资源</p><p>下面是常见文件对应的 mime 类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">html: &#x27;text/html&#x27;,</span><br><span class="line">css: &#x27;text/css&#x27;,</span><br><span class="line">js: &#x27;text/javascript&#x27;,</span><br><span class="line">png: &#x27;image/png&#x27;,</span><br><span class="line">jpg: &#x27;image/jpeg&#x27;,</span><br><span class="line">gif: &#x27;image/gif&#x27;,</span><br><span class="line">mp4: &#x27;video/mp4&#x27;,</span><br><span class="line">mp3: &#x27;audio/mpeg&#x27;,</span><br><span class="line">json: &#x27;application/json&#x27;</span><br></pre></td></tr></table></figure><blockquote><p>对于未知的资源类型，可以选择 <code>application/octet-stream</code> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <code>下载</code> 效果</p></blockquote><p>响应资源中文乱码问题：</p><p>解决方案：在响应头中拼接上 <code>charset=utf-8</code> 即可，不过一般不会对此进行处理，响应回来的资源文件会根据 html 文件中设置的字符集来进行适配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,type +<span class="string">&#x27;;charset=utf-8&#x27;</span>);</span><br></pre></td></tr></table></figure><p>响应头中设置的字符集<code>权重要大于 html文件中设置的字符集</code></p><h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><blockquote><p>官方文档：<a href="https://nodejs.cn/api/errors.html">https://nodejs.cn/api/errors.html</a></p></blockquote><p>代码演示案例：（使用switch语句来捕获错误）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个 HTTP 服务，端口为 9000，满足如下需求</span></span><br><span class="line"><span class="comment"> * GET  /index.html        响应  page/index.html 的文件内容</span></span><br><span class="line"><span class="comment"> * GET  /css/app.css       响应  page/css/app.css 的文件内容</span></span><br><span class="line"><span class="comment"> * GET  /images/logo.png   响应  page/images/logo.png 的文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//声明一个变量</span></span><br><span class="line"><span class="keyword">let</span> mimes = &#123;</span><br><span class="line">  <span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">  <span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">  <span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">  <span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line">  <span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line">  <span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(request.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>)&#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">405</span>;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;405 Method Not Allowed&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取请求url的路径</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">  <span class="comment">//声明一个变量</span></span><br><span class="line">  <span class="keyword">let</span> root = __dirname + <span class="string">&#x27;/page&#x27;</span>;</span><br><span class="line">  <span class="comment">// let root = __dirname + &#x27;/../&#x27;;</span></span><br><span class="line">  <span class="comment">//拼接文件路径</span></span><br><span class="line">  <span class="keyword">let</span> filePath = root + pathname;</span><br><span class="line">  <span class="comment">//读取文件 fs 异步 API</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">      <span class="comment">//设置字符集</span></span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">      <span class="comment">//判断错误的代号</span></span><br><span class="line">      <span class="keyword">switch</span>(err.<span class="property">code</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ENOENT&#x27;</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;EPERM&#x27;</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">403</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">500</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;Internal Server Error&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    <span class="keyword">let</span> ext = path.<span class="title function_">extname</span>(filePath).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取对应的类型</span></span><br><span class="line">    <span class="keyword">let</span> type = mimes[ext];</span><br><span class="line">    <span class="keyword">if</span>(type)&#123;</span><br><span class="line">      <span class="comment">//匹配到了                          text/html;charset=utf-8</span></span><br><span class="line">      <span class="keyword">if</span>(ext === <span class="string">&#x27;html&#x27;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type + <span class="string">&#x27;;charset=utf-8&#x27;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//没有匹配到</span></span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应文件内容</span></span><br><span class="line">    response.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="GET-和-POST-请求场景及区别"><a href="#GET-和-POST-请求场景及区别" class="headerlink" title="GET 和 POST 请求场景及区别"></a>GET 和 POST 请求场景及区别</h2><h3 id="请求场景"><a href="#请求场景" class="headerlink" title="请求场景"></a>请求场景</h3><p>GET 请求的情况：</p><ul><li>在地址栏直接输入 url 访问</li><li>点击 a 链接</li><li>link 标签引入 css</li><li>script 标签引入 js</li><li>img 标签引入图片</li><li>form 标签中的 method 为 get （不区分大小写）</li><li>ajax 中的 get 请求</li></ul><p>POST 请求的情况：</p><ul><li>form 标签中的 method 为 post（不区分大小写）</li><li>AJAX 的 post 请求</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>GET 主要用来获取数据，POST 主要用来提交数据</li><li>GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求，POST 带参数请求是将参数放到请求体中</li><li>POST 请求 <code>相对</code> GET 安全一些，因为在浏览器中参数会暴露在地址栏</li><li>GET 请求大小有限制，一般为 2K，而 POST 请求则没有大小限制</li></ul><h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>概念：模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，<strong>模块是可组合、分解和更换的单元</strong>。</p><p>编程领域中的模块化，就是遵守固定的规则，把<strong>一个大文件拆成独立并互相依赖的多个小模块</strong>。</p><ol><li>提高了代码的复用性</li><li>提高了代码的可维护性</li><li>可以实现按需加载</li></ol><p>模块化规范的好处：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p><h2 id="Node-js-中的模块"><a href="#Node-js-中的模块" class="headerlink" title="Node.js 中的模块"></a>Node.js 中的模块</h2><p>Node.js遵循了CommonJS模块化规范，CommonJS规定了模块的特性和各模块之间如何相互依赖。<br>CommonJS规定：</p><ol><li>每个模块内部，module变量代表当前模块。</li><li>module变量是一个对象，它的exports属性（即module.exports)是对外的接口。</li><li>加载某个模块，其实是加载该模块的module.exports属性。require()方法用于加载模块。</li></ol><p>Node.js中根据模块来源的不同，将模块分为了3大类，分别是：</p><ol><li>内置模块<br>内置模块是由Node.js官方提供的。（例如: fs、path、http等）</li><li>自定义模块<br>用户创建的每个<code>.js</code>文件，都是自定义模块</li><li>第三方模块<br>由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载（npm）</li></ol><h2 id="加载模块"><a href="#加载模块" class="headerlink" title="加载模块"></a>加载模块</h2><p>使用<code>require()</code>方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。<br><code>require()</code>方法加载其它模块时，会执行被加载模块中的代码。</p><h3 id="模块的加载机制"><a href="#模块的加载机制" class="headerlink" title="模块的加载机制"></a>模块的加载机制</h3><h4 id="优先从缓存中加载"><a href="#优先从缓存中加载" class="headerlink" title="优先从缓存中加载"></a>优先从缓存中加载</h4><p>模块在第一次加载后会被缓存，这也意味着多次调用 <code>require()</code> 不会导致模块的代码被执行多次。<br>不论是内置模块、用户自定义模块、还是第三方模块，它们<strong>都会优先从缓存中加载</strong>，从而提高模块的加载效率。</p><h4 id="内置模块的加载机制"><a href="#内置模块的加载机制" class="headerlink" title="内置模块的加载机制"></a>内置模块的加载机制</h4><p>内置模块是由Node.js官方提供的模块，<strong>内置模块的加载优先级最高</strong>。</p><h4 id="自定义模块的加载机制"><a href="#自定义模块的加载机制" class="headerlink" title="自定义模块的加载机制"></a>自定义模块的加载机制</h4><p>使用require()加载自定义模块时，必须指定以<code>./</code>或<code>../</code>开头的路径标识符。<br>在加载自定义模块时，如果没有指定<code>./</code>或<code>../</code>这样的路径标识符，则node会把它当作<strong>内置模块</strong>或<strong>第三方模块</strong>进行加载。</p><p>使用require()导入自定义模块时，如果<strong>省略了文件的扩展名</strong>，则Node.js会按顺序分别尝试加载以下的文件：</p><ol><li>按照<code>确切的文件名</code>进行加载</li><li>补全<code>.js</code>扩展名进行加载</li><li>补全<code>.json</code>扩展名进行加载</li><li>补全<code>.node</code>扩展名进行加载</li><li>加载失败，<code>终端报错</code></li></ol><h4 id="第三方模块的加载机制"><a href="#第三方模块的加载机制" class="headerlink" title="第三方模块的加载机制"></a>第三方模块的加载机制</h4><p>如果传递给require()的模块标识符不是一个内置模块，也没有以<code>./</code>或<code>../</code>开头，则Node.js 会从当前模块的父目录开始，尝试从<code>/node_modules</code>文件夹中加载第三方模块。<br>如果没有找到对应的第三方模块，则<code>移动到再上一层父目录中</code>，进行加载，直到文件系统的<code>根目录</code>。</p><h4 id="目录作为模块"><a href="#目录作为模块" class="headerlink" title="目录作为模块"></a>目录作为模块</h4><p>当把目录作为模块标识符，传递给require()进行加载的时候，有三种加载方式：</p><ol><li>在被加载的目录下查找一个叫做<code>package.json</code>的文件，并寻找<code>main</code>属性，作为require()加载的入口</li><li>如果目录里没有package.json文件，或者main入口不存在或无法解析，则Node.js将会试图<strong>加载目录下的</strong><code>index.js</code>文件</li><li>如果以上两步都失败了，则Node.js会在终端打印错误消息，报告模块的缺失：<code>Error:Cannot find module&#39;xxx&#39;</code></li></ol><h2 id="模块作用域"><a href="#模块作用域" class="headerlink" title="模块作用域"></a>模块作用域</h2><p>在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。作用：<strong>防止了全局变量污染的问题</strong>。</p><h2 id="共享模块"><a href="#共享模块" class="headerlink" title="共享模块"></a>共享模块</h2><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><p>每个<code>.js</code>自定义模块中都有一个module对象，它里面<strong>存储了和当前模块有关的信息：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Module</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;.&#x27;</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;E:\\FrontEnd\\05-Node\\00-Temp&#x27;</span>,</span><br><span class="line">  <span class="comment">// 默认是一个空对象</span></span><br><span class="line">  <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">parent</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&#x27;E:\\FrontEnd\\05-Node\\00-Temp\\01-module.js&#x27;</span>,</span><br><span class="line">  <span class="attr">loaded</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">children</span>: [],</span><br><span class="line">  <span class="attr">paths</span>: [</span><br><span class="line">    <span class="string">&#x27;E:\\FrontEnd\\05-Node\\00-Temp\\node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:\\FrontEnd\\05-Node\\node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:\\FrontEnd\\node_modules&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E:\\node_modules&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="module-exports"><a href="#module-exports" class="headerlink" title="module.exports"></a>module.exports</h3><p>自定义模块中，可以使用<code>module.exports</code>对象，将模块内的成员<strong>共享</strong>出去，供外界使用。<br>外界用<code>require()</code>方法导入自定义模块时，得到的就是module.exports所指向的对象。</p><p>注意：使用require()方法导入模块时，导入的结果永远以module.exports<strong>指向的对象为准</strong>（注意 module.exports 覆盖问题）</p><h3 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h3><p>由于module.exports单词写起来比较复杂，为了<strong>简化</strong>向外共享成员的代码，Node提供了exports对象。<br>默认情况下，<strong>exports和module.exports指向同一个对象</strong>。最终共享的结果，还是以module.exports指向的对象为准。</p><h2 id="npm-包"><a href="#npm-包" class="headerlink" title="npm 包"></a>npm 包</h2><p>Node.js中的第三方模块又叫做包。包是由第三方个人或团队开发出来的，免费供所有人使用。<br>包是<strong>基于内置模块封装出来的</strong>，提供了更高级、更方便的API，极大的提高了开发效率。</p><h3 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h3><p>Node Package Manager(简称npm包管理工具）,这个包管理工具集成在 Node.js 中</p><p><a href="https://www.npmjs.com">https://www.npmjs.com</a><br><a href="https://registry.npmjs.org">https://registry.npmjs.org</a></p><p>下载命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install/[i] pakageName</span><br></pre></td></tr></table></figure><p>补充：</p><ol><li>安装指定版本的包：可以在包名之后，通过 <code>@符号</code> 指定具体的版本。（默认自动安装最新版本的包）</li><li>包的语义化版本规范<ol><li>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如2.24.0</li><li>第1位数字：大版本；第2位数字：功能版本；第3位数字：Bug修复版本</li><li>版本号提升的规则则：只要前面的版本号增长了，则后面的版本号归零</li></ol></li></ol><p>初次装包完成后，在项目文件夹下多一个<code>node_modules</code>的文件夹和<code>package-lock.json</code>的配置文件。<br>不要手动修改 node_modules或package-lock.json文件中的任何代码，<strong>npm包管理工具会自动维护它们</strong>。</p><h4 id="NPM-镜像服务器"><a href="#NPM-镜像服务器" class="headerlink" title="NPM 镜像服务器"></a>NPM 镜像服务器</h4><p>淘宝在国内搭建了一个服务器，专门把国外官方服务器上的包<strong>同步</strong>到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看当前的下包镜像源</span></span><br><span class="line">npm config get registry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将下包的镜像源切换为淘宝镜像源</span></span><br><span class="line">npm config <span class="built_in">set</span> registry=https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h4 id="nrm"><a href="#nrm" class="headerlink" title="nrm"></a>nrm</h4><p>nrm 工具，可以更方便的<strong>切换下包的镜像源</strong>。利用nrm提供的终端命令，可以快速查看和切换下包的镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过npm包管理器，将nrm安装为全局可用的工具</span></span><br><span class="line">npm i nrm -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有可用的镜像源</span></span><br><span class="line">nrm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将下包的镜像源切换为指定镜像</span></span><br><span class="line">nrm use 镜像名</span><br></pre></td></tr></table></figure><h4 id="i5ting-toc"><a href="#i5ting-toc" class="headerlink" title="i5ting_toc"></a>i5ting_toc</h4><p>i5ting_toc 是一个可以把 <strong>md文档 转为 html页面</strong> 的小工具</p><h4 id="包的分类"><a href="#包的分类" class="headerlink" title="包的分类"></a>包的分类</h4><ol><li>项目包<br>安装到项目 <code>node_modules</code> 目录中的包，都是项目包</li><li>全局包<br>执行npm install命令时，添加 <code>-g</code> 参数，会把包安装为全局包<br>全局包会被安装到：<code>C:\Users\用户名\AppData\Roaming\npm\node_modules</code> 目录<br>只有<strong>工具性质的包</strong>，才有全局安装的必要性。因为它们提供了好用的终端命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i 包名 -g <span class="comment"># 全局安装指定的包</span></span><br><span class="line"></span><br><span class="line">npm uninstall 包名 -g <span class="comment"># 卸载安装指定的包</span></span><br></pre></td></tr></table></figure><h3 id="卸载包"><a href="#卸载包" class="headerlink" title="卸载包"></a>卸载包</h3><p>运行 <code>npm uninstall</code> 命令，来卸载指定的包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall pakageName</span><br></pre></td></tr></table></figure><h3 id="node-modules"><a href="#node-modules" class="headerlink" title="node_modules"></a>node_modules</h3><p>node_modules 文件夹用来存放所有已安装到项目中的包。require()导入第三方包时，就是从这个目录中查找并加载包。</p><h4 id="忽略方案"><a href="#忽略方案" class="headerlink" title="忽略方案"></a>忽略方案</h4><p>第三方包的体积过大，不方便团队成员之间共享项目源代码。</p><p>解决方案：</p><ul><li>共享时剔除node_modules，在项目根目录中，把 node_modules文件夹，添加到 <code>.gitignore</code> 忽略文件中。</li><li>创建一个叫做package.json的配置文件，即可用来记录项目中安装了哪些包。</li></ul><h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p>package-lock.json 配置文件用来记录<strong>node_modules目录下的每一个包的下载信息</strong>，例如包的名字、版本号、下载地址等。</p><h3 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h3><p>npm规定，在<strong>项目根目录</strong>中，必须提供一个叫做 <code>package.json</code> 的包管理配置文件。用来记录与项目有关的一些配置信息。例如：</p><ol><li>项目的名称、版本号、描述等</li><li>项目中都用到了哪些包</li><li>哪些包只在开发期间会用到</li><li>那些包在开发和部署时都需要用到</li></ol><h4 id="快速创建-package-json"><a href="#快速创建-package-json" class="headerlink" title="快速创建 package.json"></a>快速创建 package.json</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li><code>npm init -y</code>命令只能在英文的目录下成功运行！不要使用中文，不能出现空格。</li><li>运行npm install命令安装包的时候，npm包管理工具会<strong>自动把包的名称和版本号，记录到package.json中</strong>。</li></ol><h4 id="dependencies-节点"><a href="#dependencies-节点" class="headerlink" title="dependencies 节点"></a>dependencies 节点</h4><p>package.json文件中，有一个dependencies节点，专门用来记录您使用npm install命令安装了哪些包。</p><h4 id="一次性安装所有的包"><a href="#一次性安装所有的包" class="headerlink" title="一次性安装所有的包"></a>一次性安装所有的包</h4><p>执行 <code>npm install</code> 命令时，npm 包管理工具会<strong>先读取 package.json 中的 dependencies 节点</strong>，读取到记录的所有依赖包名称和版本号之后，npm包管理工具会把这些包一次性下载到项目中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h4 id="devDependencies-节点"><a href="#devDependencies-节点" class="headerlink" title="devDependencies 节点"></a>devDependencies 节点</h4><p>包只在项目<strong>开发阶段会用到，在项目上线之后不会用到</strong>，则建议把这些包记录到 <code>devDependencies</code> 节点中。<br>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 <code>dependencies</code> 节点中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装指定的包，并记录到 devDependencies 节点中</span></span><br><span class="line">npm install 包名 --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面命令的简写：</span></span><br><span class="line">npm i 包名 -D</span><br></pre></td></tr></table></figure><h4 id="规范的包结构"><a href="#规范的包结构" class="headerlink" title="规范的包结构"></a>规范的包结构</h4><p>一个规范的包，它的组成结构，必须符合以下3点要求：</p><ol><li>包必须以<strong>单独的目录</strong>而存在</li><li>包的顶级目录下要必须包含 <code>package.json</code> 这个包管理配置文件</li><li>package.json中必须包含 <code>name</code>,<code>version</code>,<code>main</code> 这三个属性，分别代表包的<strong>名字、版本号、包的入口</strong>。</li></ol><h3 id="npm-包开发"><a href="#npm-包开发" class="headerlink" title="npm 包开发"></a>npm 包开发</h3><h4 id="包的基本结构"><a href="#包的基本结构" class="headerlink" title="包的基本结构"></a>包的基本结构</h4><ol><li>创建文件夹作为包的<strong>根目录</strong></li><li>在文件夹中，新建如下三个文件：<ol><li>package.json(包管理配置文件）</li><li>index.js (包的入口文件）</li><li>README.md(包的说明文档）</li></ol></li><li>初始化 package.json <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;PakageName&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">,</span><span class="string">&quot;xxx&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h4><ol><li>访问 <code>https://www.npmjs.com/</code> 网站注册账号</li><li>登录账号<ol><li>npm 账号注册完成后，可以在终端中执行 <code>npm login</code> 命令，依次输入用户名、密码、邮箱后，即可登录成功</li><li>注意：在运行 <code>npm login</code> 命令之前，必须先把下包的服务器地址切换为 <strong>npm的官方服务器</strong>。否则会导致发布包失败！</li></ol></li><li>将终端切换到包的<strong>根目录</strong>，运行 <code>npm publish</code> 命令，即可将包发布到 npm上（注意：<strong>包名不能雷同</strong>）。</li></ol><h4 id="删除包"><a href="#删除包" class="headerlink" title="删除包"></a>删除包</h4><p>运行 <code>npm unpublish 包名--force</code> 命令，即可从 npm 删除已发布的包。</p><p>注意：</p><ol><li>npm unpublish 命令只能删除72小时以内发布的包</li><li>npm unpublish 删除的包，在24小时内不允许重复发布</li></ol><h1 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h1><h2 id="初识-Express"><a href="#初识-Express" class="headerlink" title="初识 Express"></a>初识 Express</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>官方文档：<a href="https://expressjs.com/zh-cn/">https://expressjs.com/zh-cn/</a></p><p>Express 的作用和 Node.js内置的http模块类似，<strong>是基于内置的http模块进一步封装出来的</strong>，专门用来创建Web服务器，能够极大的提高开发效率。<br>Express 的本质：就是一个npm上的第三方包，提供了快速创建Web服务器的便捷方法。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express@4.17.1</span><br></pre></td></tr></table></figure><h3 id="创建基本的Web服务器"><a href="#创建基本的Web服务器" class="headerlink" title="创建基本的Web服务器"></a>创建基本的Web服务器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Hello World!&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Example app listening on port <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="监听-GET-请求"><a href="#监听-GET-请求" class="headerlink" title="监听 GET 请求"></a>监听 GET 请求</h4><p>通过 <code>app.get()</code> 方法，可以监听客户端的GET请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">参数1:客户端请求的URL地址</span></span><br><span class="line"><span class="comment">参数2:请求对应的处理函数</span></span><br><span class="line"><span class="comment">req:请求对象（包含了与请求相关的属性与方法）</span></span><br><span class="line"><span class="comment">res:响应对象（包含了与响应相关的属性与方法） </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="监听POST请求"><a href="#监听POST请求" class="headerlink" title="监听POST请求"></a>监听POST请求</h4><p>通过 <code>app.post()</code> 方法，可以监听客户端的POST请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">参数1:客户端请求的URL地址</span></span><br><span class="line"><span class="comment">参数2:请求对应的处理函数</span></span><br><span class="line"><span class="comment">req:请求对象（包含了与请求相关的属性与方法）</span></span><br><span class="line"><span class="comment">res:响应对象（包含了与响应相关的属性与方法） </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;请求URL&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="响应客户端"><a href="#响应客户端" class="headerlink" title="响应客户端"></a>响应客户端</h4><p>通过 <code>response.send()</code> 方法，可以把处理好的内容，发送给客户端</p><h4 id="获取-URL-中携带的查询参数"><a href="#获取-URL-中携带的查询参数" class="headerlink" title="获取 URL 中携带的查询参数"></a>获取 URL 中携带的查询参数</h4><p>通过 <code>request.query</code> 对象，可以访问到客户端通过<strong>查询字符串</strong>的形式，发送到服务器的参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">  <span class="comment">// request.query 默认是一个空对象</span></span><br><span class="line">  request.<span class="property">query</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="获取-URL-中的动态参数"><a href="#获取-URL-中的动态参数" class="headerlink" title="获取 URL 中的动态参数"></a>获取 URL 中的动态参数</h4><p>通过 <code>request.params</code> 对象，可以访问到URL中，通过 <code>:</code> 匹配到的动态参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;请求URL:动态参数&#x27;</span>, <span class="keyword">function</span>(<span class="params">request, response</span>) &#123;</span><br><span class="line">  <span class="comment">// request.params 默认是一个空对象</span></span><br><span class="line">  request.<span class="property">params</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="express-static"><a href="#express-static" class="headerlink" title="express.static()"></a>express.static()</h4><p><code>express.static()</code> 可以非常方便地创建一个静态资源服务器</p><p>Express 在指定的静态目录中查找文件，并对外提供资源的访问路径。<strong>存放静态文件的目录名不会出现在URL中</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 dir 目录下的文件对外开放访问</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;dir&#x27;</span>));</span><br></pre></td></tr></table></figure><p>挂载路径前缀：</p><p>如果希望在托管的静态资源访问路径之前，挂载路径前缀，则可以使用如下的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问方式： http://xxxx/public/dir/..</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/public&#x27;</span>,express.<span class="title function_">static</span>(<span class="string">&#x27;dir&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="nodemoon"><a href="#nodemoon" class="headerlink" title="nodemoon"></a>nodemoon</h3><p><a href="https://www.npmjs.com/package/nodemon">nodemoon</a> 能够监听项目文件的变动，<strong>当代码被修改后，nodemon会自动帮我们重启项目</strong>，极大方便了开发和调试。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>将 <code>node</code> 命令替换为 <code>nodemon</code> 命令，使用 <code>nodemon xxx.js</code> 来启动项目</p><h2 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h2><blockquote><p>官方文档</p><ul><li>基本路由：<a href="https://expressjs.com/zh-cn/starter/basic-routing.html">https://expressjs.com/zh-cn/starter/basic-routing.html</a></li><li>路由指南：<a href="https://expressjs.com/zh-cn/guide/routing.html">https://expressjs.com/zh-cn/guide/routing.html</a></li></ul></blockquote><p>Express中，路由指的是<strong>客户端的请求</strong>与<strong>服务器处理函数</strong>之间的映射关系。</p><h3 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h3><p>Express中的路由分3部分组成，分别是<code>请求的类型</code>、<code>请求的URL地址</code>、<code>处理函数</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">app 是 express 的实例。</span></span><br><span class="line"><span class="comment">METHOD 是 HTTP 请求方法。</span></span><br><span class="line"><span class="comment">PATH 是服务器上的路径。</span></span><br><span class="line"><span class="comment">HANDLER 是在路由匹配时执行的函数。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">METHOD</span>(<span class="variable constant_">PATH</span>, <span class="variable constant_">HANDLER</span>)</span><br></pre></td></tr></table></figure><h3 id="路由匹配"><a href="#路由匹配" class="headerlink" title="路由匹配"></a>路由匹配</h3><p>请求到达服务器之后，需要先经过路由的匹配，匹配时，会按照路由的<strong>先后顺序进行匹配</strong>，如果<strong>请求类型</strong>和<strong>请求的URL同时匹配成功</strong>，才会调用对应的处理函数。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208261618948.png" alt="路由匹配"></p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GET method route</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;GET request to the homepage&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST method route</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;POST request to the homepage&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="模块化路由"><a href="#模块化路由" class="headerlink" title="模块化路由"></a>模块化路由</h3><p>为了方便对路由进行模块化的管理，Express不建议将路由直接挂载到<code>app</code>上，而是推荐<strong>将路由抽离为单独的模块</strong>。</p><p>抽离步骤：</p><ol><li>创建路由模块对应的<code>.js</code>文件</li><li>调用 <code>express.Router()</code> 函数创建路由对象</li><li>向路由对象上挂载具体的路由</li><li>使用 <code>module.exports</code> 向外共享路由对象</li><li>使用 <code>app.use()</code> 函数<strong>注册</strong>路由模块<ol><li>app.use() 函数作用：用来注册全局中间件</li></ol></li></ol><p>定义路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建路由对象</span></span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向路由对象上挂载具体的路由</span></span><br><span class="line">router.<span class="title function_">use</span>(<span class="keyword">function</span> <span class="title function_">timeLog</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Time: &#x27;</span>, <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义 the home page route</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;Birds home page&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义 the about route</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/about&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;About birds&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向外共享路由对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><p>使用路由：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// server.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 导入路由模块</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用app.use()注册路由模块。并添加统一的访问前缀/api【可选】</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/api&#x27;</span>,userRouter);</span><br></pre></td></tr></table></figure><h2 id="Express-中间件"><a href="#Express-中间件" class="headerlink" title="Express 中间件"></a>Express 中间件</h2><blockquote><p>官方文档</p><ul><li>编写中间件：<a href="https://expressjs.com/zh-cn/guide/writing-middleware.html">https://expressjs.com/zh-cn/guide/writing-middleware.html</a></li><li>使用中间件：<a href="https://expressjs.com/zh-cn/guide/using-middleware.html">https://expressjs.com/zh-cn/guide/using-middleware.html</a></li></ul></blockquote><p>中间件（Middleware） 特指业务流程的中间处理环节。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>当一个请求到达Express的服务器之后，可以连续调用多个中间件，从而对这次请求进行<strong>预处理</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220826170212.png" alt="20220826170212"></p><p>Express 的中间件，本质上就是一个 <code>function 处理函数</code>，<strong>中间件函数的形参列表中，必须包含 <code>next</code> 参数</strong></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220826170744.png" alt="20220826170744"></p><p>next 函数</p><p>next 函数是实现多个中间件<strong>连续调用</strong>的关键，它表示把流转关系<strong>转交给下一个中间件或路由</strong>。</p><h3 id="中间件函数"><a href="#中间件函数" class="headerlink" title="中间件函数"></a>中间件函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mw = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;这是一个最简单的中间件函数&#x27;</span>);</span><br><span class="line">  <span class="comment">// next() 方法将流转关系转交给下一个中间件或路由</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="中间件的作用"><a href="#中间件的作用" class="headerlink" title="中间件的作用"></a>中间件的作用</h3><p>多个中间件之间，<strong>共享同一份 req 和 res 。</strong><br>基于这样的特性，我们可以在<strong>上游</strong>的中间件中，统一为 req 或 res 对象添加<strong>自定义的属性或方法</strong>，供<strong>下游</strong>的中间件或路由进行使用。</p><h3 id="全局生效的中间件"><a href="#全局生效的中间件" class="headerlink" title="全局生效的中间件"></a>全局生效的中间件</h3><p>客户端发起的任何请求，到达服务器之后，<strong>都会触发的中间件</strong>，叫做全局生效的中间件。<br>通过调用 <code>app.use(中间件函数)</code> ，即可定义一个全局生效的中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局生效的中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(中间件函数)</span><br></pre></td></tr></table></figure><p>补充：可以使用 <code>app.use()</code> <strong>连续定义多个全局中间件</strong>。客户端请求到达服务器之后，会按照中间件定义的先后顺序依次进行调用。</p><h3 id="局部生效的中间件"><a href="#局部生效的中间件" class="headerlink" title="局部生效的中间件"></a>局部生效的中间件</h3><p>定义在路由参数中的中间是局部中间件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mw = <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;局部中间件演示&#x27;</span>);</span><br><span class="line">  <span class="comment">// next() 方法将流转关系转交给下一个中间件或路由</span></span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mw,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>补充：可以在路由中，通过如下两种等价的方式，使用多个局部中间件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,mw1,nw2,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,[mw1,nw2],<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;HOME&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="中间件注意事项"><a href="#中间件注意事项" class="headerlink" title="中间件注意事项"></a>中间件注意事项</h3><ol><li>一定要在<strong>路由之前</strong>注册中间件</li><li>客户端发送过来的请求，可以连续调用多个中间件进行处理</li><li>执行完中间件的业务代码之后，<strong>必须调用next()函数</strong></li><li>为了防止代码逻辑混乱，调用next()函数后<strong>不要再写额外的代码</strong></li><li>连续调用多个中间件时，多个中间件之间，<strong>共享</strong>req和res对象</li></ol><h3 id="中间件分类"><a href="#中间件分类" class="headerlink" title="中间件分类"></a>中间件分类</h3><p>Express 官方把常见的中间件用法，分成 5大类</p><ol><li>应用级别的中间件</li><li>路由级别的中间件</li><li>错误级别的中间件</li><li>Express 内置的中间件</li><li>第三方的中间件</li></ol><h4 id="应用级别的中间件"><a href="#应用级别的中间件" class="headerlink" title="应用级别的中间件"></a>应用级别的中间件</h4><p>通过 <code>app.use()</code> 或 <code>app.get()</code> 或 <code>app.post()</code> <strong>绑定到app实例上</strong>的中间件，叫做应用级别的中间</p><h4 id="路由级别的中间件"><a href="#路由级别的中间件" class="headerlink" title="路由级别的中间件"></a>路由级别的中间件</h4><p>绑定到 <code>express.Router()</code> 实例上的中间件，叫做路由级别的中间件，路由级别中间件<strong>绑定到router实例上</strong></p><h4 id="错误级别的中间件"><a href="#错误级别的中间件" class="headerlink" title="错误级别的中间件"></a>错误级别的中间件</h4><p>错误级别中间件的作用：专门用来捕获整个项目中发生的异常错误，从而防止项目异常崩溃的问题</p><p>格式：错误级别中间件的 function 处理函数中，必须有4个形参，形参顺序从前到后，分别是（<strong>err,req,res,next</strong>）</p><p>注意：错误级别的中间件，<strong>必须注册在所有路由之后！</strong></p><h4 id="Express-内置的中间件"><a href="#Express-内置的中间件" class="headerlink" title="Express 内置的中间件"></a>Express 内置的中间件</h4><p>Express 内置了3个常用的中间件，极大的提高了Express项目的开发效率和体验：</p><ol><li>express.static 快速托管 <code>静态资源</code> 的内置中间件</li><li>express.json 解析 <code>JSON</code> 格式的请求体数据</li><li>express.urlencoded 解析 <code>URL-encoded</code> 格式的请求体数据</li></ol><h4 id="第三方的中间件"><a href="#第三方的中间件" class="headerlink" title="第三方的中间件"></a>第三方的中间件</h4><p>非 Express 官方内置的，而是由<strong>第三方开发出来的中间件</strong>，叫做第三方中间件。<br>可以按需下载并配置第三方中间件，从而提高项目的<strong>开发效率</strong>。</p><p>使用第三方中间件：</p><ol><li>运行 <code>npm install 中间件名称</code> 安装中间件</li><li>使用 <code>require</code> 导入中间件</li><li>调用 <code>app.use()</code> 注册并使用中间件</li></ol><h2 id="Express-写接口"><a href="#Express-写接口" class="headerlink" title="Express 写接口"></a>Express 写接口</h2><h3 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h3><p>解决接口跨域问题的方案主要有两种：</p><ol><li>CORS（推荐）</li><li>JSONP（只支持GET请习）</li></ol><h4 id="CORS-响应头"><a href="#CORS-响应头" class="headerlink" title="CORS 响应头"></a>CORS 响应头</h4><h5 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">origin 参数的值指定了允许访问该资源的外域URL</span></span><br><span class="line"><span class="comment">通配符 * 表示允许来自任何域的请求 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="title class_">Access</span>-<span class="title class_">Control</span>-<span class="title class_">Allow</span>-<span class="title class_">Origin</span>: &lt;origin&gt; | *</span><br></pre></td></tr></table></figure><h5 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h5><p>默认情况下，CORS仅支持客户端向服务器发送如下的9个请求头：</p><ol><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>DPR</li><li>Downlink</li><li>Save-Data</li><li>Viewport-Width</li><li>Width</li><li>Content-Type</li></ol><p>如果客户端向服务器发送了额外的请求头信息则需要在服务器端，通过 <code>Access-Control-Allow-Headers</code> <strong>对额外的请求头进行声明</strong>，否则这次请求会失败！</p><h5 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h5><p>默认情况下，CORS仅支持客户端发起 GET、POST、HEAD 请求。</p><p>如果客户端希望通过 <code>PUT</code>、<code>DELETE</code> 等方式请求服务器的资源，则需要在服务器端，通过 <code>Access-Control-Alow-Methods</code> 来指明实际请求所允许使用的HTTP方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只允许 POST、GET、DELETE、HEAD请求方法</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="string">&quot;POST,GET,DELETE,HEAD&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//允许所有的HTTP请求方法</span></span><br><span class="line">res.<span class="title function_">setHeader</span>(<span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="CORS-请求分类"><a href="#CORS-请求分类" class="headerlink" title="CORS 请求分类"></a>CORS 请求分类</h4><p>根据请求方式和请求头的不同，可以将CORS的请求分为两大类，分别是：简单请求和预检请求</p><p>简单请求和预检请求的区别：</p><ul><li>简单请求的特点：客户端与服务器之间只会发生一次请求。</li><li>预检请求的特点：客户端与服务器之间会发生两次请求，OPTION预检请求成功之后，才会发起真正的请求。</li></ul><h5 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h5><ol><li>请求方式：GET、POST、HEAD三者之一</li><li>HTTP 头部信息不超过以下几种字段：<strong>无自定义头部字段</strong>、Accept、Accept-Language、Content-Language、DPR、Downlink、Save-Data、Viewport-Width、Width、Content-Type</li></ol><h5 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h5><ol><li>请求方式为GET、POST、HEAD之外的请求 Method 类型</li><li>请求头中包含自定义头部字段</li><li>向服务器发送了 <code>application/json</code> 格式的数据</li></ol><p>在浏览器与服务器正式通信之前，浏览器会先发送<code>OPTION请求</code>进行预检，以获知服务器是否允许该实际请求，所以这一次的OPTION请求称为“预检请求”。<br><strong>服务器成功响应预检请求后，才会发送真正的请求，并且携带真实数据。</strong></p><h4 id="cors中间件解决跨域"><a href="#cors中间件解决跨域" class="headerlink" title="cors中间件解决跨域"></a>cors中间件解决跨域</h4><p>浏览器的同源安全策略默认会阻止网页<code>跨域</code>获取资源。但如果<strong>接口服务器配置了CORS相关的HTTP响应头</strong>，就可以<strong>解除</strong>浏览器端的跨域访问限制。（CORS主要在服务器端进行配置。客户端浏览器无须做任何额外的配置。）</p><p>cors 是 Express 的一个第三方中间件。通过安装和配置cors中间件，可以很方便地解决跨域问题。</p><p>使用步骤：</p><ol><li>运行 <code>npm install cors</code> 安装中间件</li><li>使用 <code>const cors = require(&#39;cors&#39;)</code> 导入中间件</li><li>在路由之前调用 <code>app.use(cors())</code> 配置中间件</li></ol><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>JSONP 概念：</p><p>浏览器端通过<code>&lt;script&gt;</code>标签的<code>src</code>属性，请求服务器上的数据，同时，<strong>服务器返回一个函数的调用</strong>。这种请求数据的方式叫做JSONP。</p><p>特点：</p><ol><li>JSONP 不属于真正的Ajax请求，因为它没有使用<code>XMLHttpRequest</code>这个对象。</li><li>JSONP 仅支持GET请求，不支持 POST、PUT、DELETE 等请求。</li></ol><p>注意事项：</p><p>如果项目中已经配置了CORS跨域资源共享，为了防止冲突，必须在配置CORS中间件之前声明JSONP的接口</p><h1 id="数据库与身份验证"><a href="#数据库与身份验证" class="headerlink" title="数据库与身份验证"></a>数据库与身份验证</h1><h2 id="数据库的基本概念"><a href="#数据库的基本概念" class="headerlink" title="数据库的基本概念"></a>数据库的基本概念</h2><h3 id="数据库的数据组织结构"><a href="#数据库的数据组织结构" class="headerlink" title="数据库的数据组织结构"></a>数据库的数据组织结构</h3><p>在传统型数据库中，数据的组织结构分为：</p><ol><li>数据库（database)</li><li>数据表（table)</li><li>数据行（row)</li><li>字段（field）</li></ol><h2 id="安装并配置-MySQL"><a href="#安装并配置-MySQL" class="headerlink" title="安装并配置 MySQL"></a>安装并配置 MySQL</h2><h3 id="MySQL-相关软件"><a href="#MySQL-相关软件" class="headerlink" title="MySQL 相关软件"></a>MySQL 相关软件</h3><ol><li>MySQL Server: 专门用来提供数据存储和服务的软件</li><li>MySQL Workbench: 可视化的MySQL管理工具</li></ol><h2 id="MySQL的基本使用"><a href="#MySQL的基本使用" class="headerlink" title="MySQL的基本使用"></a>MySQL的基本使用</h2><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><p>DataType 数据类型：</p><ol><li>int 整数</li><li>varchar(len)字符串</li><li>tinyint(1)布尔值</li></ol><p>字段的特殊标识：</p><ol><li>PK(Primary Key) 主键、唯一标识</li><li>NN(Not Null) 值不允许为空</li><li>UQ(Unique) 值唯一</li><li>AI(Auto Increment) 值自动增长</li></ol><h3 id="SQL-介绍"><a href="#SQL-介绍" class="headerlink" title="SQL 介绍"></a>SQL 介绍</h3><p>SQL(英文全称：Structured Query Language)是结构化查询语言，专门用来访问和处理数据库的编程语言。能够让我们以编程的形式，操作数据库里面的数据。</p><ol><li>SQL是一门数据库编程语言（SQL语句中的关键字<strong>对大小写不敏感</strong>。）</li><li>使用SQL语言编写出来的代码，叫做SQL语句</li><li>SQL语言只能在关系型数据库中使用（例如MySQL、Oracle、SQL Server)。非关系型数据库（例如 Mongodb)不支持SQL语言。</li></ol><h3 id="SQL-语句"><a href="#SQL-语句" class="headerlink" title="SQL 语句"></a>SQL 语句</h3><ol><li>查询数据（select)</li><li>插入数据（insert into)</li><li>更新数据（update)</li><li>删除数据（delete)</li></ol><p>where条件、and和or运算符、orderby排序、count(*)函数</p><h4 id="SELECT"><a href="#SELECT" class="headerlink" title="SELECT"></a>SELECT</h4><p>SELECT 语句用于从表中查询数据。执行的结果被存储在一个结果表中（称为结果集）</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从 FROM 指定的【表中】，查询出【所有的】数据。*表示【所有列】</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名称</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从 FROM 指定的【表中】，查询出指定列名称（字段）的数据。</span></span><br><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure><h4 id="INSERT-INTO"><a href="#INSERT-INTO" class="headerlink" title="INSERT INTO"></a>INSERT INTO</h4><p>INSERT INTO 语句用于向数据表中插入新的数据行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 列和值要一一对应，多个列和多个值之间，使用英文的逗号分隔</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (列<span class="number">1</span>,列<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值<span class="number">1</span>,值<span class="number">2</span>,...)</span><br></pre></td></tr></table></figure><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><p>UPDATE 语句用于修改表中的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用 UPDATE 指定要更新哪个表中的数据 用 SET 指定列对应的新值 用 WHERE 指定更新的条件</span></span><br><span class="line"><span class="keyword">UPDATE</span> 表名称 <span class="keyword">SET</span> 列名称 <span class="operator">=</span> 新值 <span class="keyword">WHERE</span> 列名称 <span class="operator">=</span> 某值</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>DELETE 语句用于删除表中的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从指定的表中，根据 WHERE 条件，删除对应的数据行</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 <span class="operator">=</span> 值</span><br></pre></td></tr></table></figure><h4 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h4><p>WHERE 子句用于<strong>限定</strong>选择的标准。在 SELECT、UPDATE、DELETE 语句中，皆可使用WHERE子句来限定选择的标准。 </p><h4 id="AND-和-OR-运算符"><a href="#AND-和-OR-运算符" class="headerlink" title="AND 和 OR 运算符"></a>AND 和 OR 运算符</h4><p>AND 和 OR 可在 WHERE 子语句中<strong>把两个或多个条件结合起来</strong>。AND 表示必须同时满足多个条件，OR 表示只要满足任意一个条件即可。</p><h4 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h4><p>ORDER BY 语句用于根据指定的列对结果集进行排序。</p><ul><li>ORDER BY 语句默认按照升序（<code>ASC</code>）对记录进行排序。</li><li>可以使用 <code>DESC</code> 关键字按照降序对记录进行排序。</li><li>多重排序</li></ul><h4 id="COUNT-函数"><a href="#COUNT-函数" class="headerlink" title="COUNT(*) 函数"></a>COUNT(*) 函数</h4><p>COUNT(*) 函数 用于返回查询结果的总数据条数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> 表名称</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 如果希望给查询出来的列名称设置别名，可以使用AS关键字</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">As</span> Total <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure><h2 id="Express-中操作-MySQL"><a href="#Express-中操作-MySQL" class="headerlink" title="Express 中操作 MySQL"></a>Express 中操作 MySQL</h2><h3 id="安装与配置mysql模块"><a href="#安装与配置mysql模块" class="headerlink" title="安装与配置mysql模块"></a>安装与配置mysql模块</h3><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;</span><br><span class="line">  host : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  user : <span class="string">&#x27;me&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;secret&#x27;</span>,</span><br><span class="line">  database : <span class="string">&#x27;my_db&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">connect</span>();</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">query</span>(<span class="string">&#x27;SELECT 1 + 1 AS solution&#x27;</span>, <span class="keyword">function</span> (<span class="params">error, results, fields</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The solution is: &#x27;</span>, results[<span class="number">0</span>].<span class="property">solution</span>);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><h2 id="前后端的身份认证"><a href="#前后端的身份认证" class="headerlink" title="前后端的身份认证"></a>前后端的身份认证</h2><h3 id="Web-开发模式"><a href="#Web-开发模式" class="headerlink" title="Web 开发模式"></a>Web 开发模式</h3><h4 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h4><p>服务端渲染的概念：服务器发送给客户端的HTML页面，是在服务器通过字符串的拼接，动态生成的</p><p>优点：</p><ol><li>前端耗时少。因为服务器端负责动态生成HTML内容，浏览器只需要直接渲染页面即可。尤其是移动端，更省电。</li><li>有利于SEO。因为服务器端响应的是完整的HTML页面内容，所以爬虫更容易爬取获得信息，更有利于SEO。</li></ol><p>缺点：</p><ol><li>占用服务器端资源。即服务器端完成HTML页面内容的拼接，如果请求较多，会对服务器造成一定的访问压力。</li><li>不利于前后端分离，开发效率低。使用服务器端渲染，则无法进行分工合作，尤其对于前端复杂度高的项目，不利于项目高效开发。</li></ol><h4 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h4><p>前后端分离的概念：前后端分离的开发模式，依赖于Ajax技术的广泛应用。简而言之，前后端分离的Web开发模式，就是后端只负责提供API接口，前端使用Ajax调用接口的开发模式。</p><p>优点：</p><ol><li>开发体验好。前端专注于UI页面的开发，后端专注于api的开发，且前端有更多的选择性。</li><li>用户体验好。Ajax技术的广泛应用，极大的提高了用户的体验，可以轻松实现页面的局部刷新。</li><li>减轻了服务器端的渲染压力。因为页面最终是在每个用户的浏览器中生成的。</li></ol><p>缺点：</p><ol><li>不利于SEO。因为完整的HTML页面需要在客户端动态拼接完成，所以爬虫对无法爬取页面的有效信息。(解决方案：利用Vue、React等前端框架的 <code>SSR</code> (server side render)技术能够很好的解决SEO问题！)</li></ol><h3 id="身份认证"><a href="#身份认证" class="headerlink" title="身份认证"></a>身份认证</h3><p>不同开发模式下的身份认证：</p><p>对于<code>服务端渲染</code>和<code>前后端分离</code>这两种开发模式来说，分别有着不同的身份认证方案：</p><ol><li>服务端渲染推荐使用 <code>Session 认证机制</code></li><li>前后端分离推荐使用 <code>JWT 认证机制</code></li></ol><h4 id="Session-认证机制"><a href="#Session-认证机制" class="headerlink" title="Session 认证机制"></a>Session 认证机制</h4><h5 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a>HTTP协议的无状态性</h5><p>HTTP协议的无状态性，指的是客户端的每次HTTP请求都是<strong>独立</strong>的，连续多个请求之间没有直接的关系，服务器<strong>不会主动保留每次HTTP请求的状态</strong>。</p><h5 id="解决-HTTP-无状态的限制"><a href="#解决-HTTP-无状态的限制" class="headerlink" title="解决 HTTP 无状态的限制"></a>解决 HTTP 无状态的限制</h5><p>客户端第一次请求服务器的时候，服务器通过<strong>响应头的形式</strong>，向客户端发送一个身份认证的Cookie,客户端会自动将Cookie保存在浏览器中。随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的Cookie,通过请求头的形式发送给服务器，服务器即可验明客户端的身份。</p><h5 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h5><p>Cookie 是<strong>存储在用户浏览器中的一段不超过4KB的字符串</strong>。它由一个<strong>名称</strong>（Name)、一个<strong>值</strong>（Value)和其它几个用于控制 Cookie 有效期、安全性、使用范围 的可选属性组成。<br>不同域名下的 Cookie <strong>各自独立</strong>，每当客户端发起请求时，会<strong>自动</strong>把当前域名下所有未过期的 Cookie 一同发送到服务器。</p><h5 id="Cookie-特性"><a href="#Cookie-特性" class="headerlink" title="Cookie 特性"></a>Cookie 特性</h5><ol><li>自动发送</li><li>域名独立</li><li>过期时限</li><li>4KB限制</li></ol><h5 id="Cookie-安全性"><a href="#Cookie-安全性" class="headerlink" title="Cookie 安全性"></a>Cookie 安全性</h5><p>由于Cookie是存储在浏览器中的，而且浏览器也提供了读写Cookie的API,因此Cookie很容易被伪造，不具有安全性。因此不建议服务器将重要的隐私数据，通过Cookie的形式发送给浏览器。<br>注意：千万不要使用Cookie存储重要且隐私的数据！比如用户的身份信息、密码等。</p><h5 id="Session-的工作原理"><a href="#Session-的工作原理" class="headerlink" title="Session 的工作原理"></a>Session 的工作原理</h5><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/Session.jpg" alt="Session"></p><h5 id="Session-认证的局限性"><a href="#Session-认证的局限性" class="headerlink" title="Session 认证的局限性"></a>Session 认证的局限性</h5><p>Session认证机制需要配合Cookie才能实现。由于Cookie默认不支持跨域访问，所以，当涉及到前端跨域请求后端接口的时候，需要做很多额外的配置，才能实现跨域Session认证。</p><p>注意：</p><ol><li>当前端请求后端接口<strong>不存在跨域问题</strong>的时候，推荐使用Session身份认证机制。</li><li>当前端需要跨域请求后端接口的时候，不推荐使用Session身份认证机制，推荐使用<code>JWT</code>认证机制。</li></ol><h5 id="Express-中使用-Session-认证"><a href="#Express-中使用-Session-认证" class="headerlink" title="Express 中使用 Session 认证"></a>Express 中使用 Session 认证</h5><p>express-session：<a href="https://www.npmjs.com/package/express-session">https://www.npmjs.com/package/express-session</a></p><h4 id="JWT-认证机制"><a href="#JWT-认证机制" class="headerlink" title="JWT 认证机制"></a>JWT 认证机制</h4><p>JWT (英文全称：JSON Web Token) 是目前最流行的跨域认证解决方案。</p><h5 id="JWT-工作原理"><a href="#JWT-工作原理" class="headerlink" title="JWT 工作原理"></a>JWT 工作原理</h5><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220827155819.png" alt="20220827155819"></p><p>原理：用户的信息通过Token字符串的形式，保存在客户端浏览器中。服务器通过还原Token字符串的形式来认证用户的身份。</p><h5 id="JWT-组成部分"><a href="#JWT-组成部分" class="headerlink" title="JWT 组成部分"></a>JWT 组成部分</h5><p>JWT 通常由三部分组成，分别是 <code>Header（头部）</code>、<code>Payload（有效荷载）</code>、<code>Signature（签名）</code>。三者之间使用英文的 <code>.</code> 分隔</p><p>Payload 部分才是真正的用户信息，它是用户信息经过加密之后生成的字符串。<br>Header 和 Signature 是安全性相关的部分，只是为了保证 Token 的安全性。</p><h5 id="JWT-使用方式"><a href="#JWT-使用方式" class="headerlink" title="JWT 使用方式"></a>JWT 使用方式</h5><p>客户端收到服务器返回的 JWT 之后，通常会将它储存在 localStorage 或 sessionStorage 中。<br>此后，客户端每次与服务器通信，都要带上这个JWT的字符串，从而进行身份认证。推荐的做法是把 JWT 放在 HTTP请求头的 <code>Authorization</code> 字段中，格式如下：</p><h5 id="Express-中使用-JWT"><a href="#Express-中使用-JWT" class="headerlink" title="Express 中使用 JWT"></a>Express 中使用 JWT</h5><p>jsonwebtoken：<a href="https://www.npmjs.com/package/jsonwebtoken">https://www.npmjs.com/package/jsonwebtoken</a><br>express-jwt：<a href="https://www.npmjs.com/package/express-jwt">https://www.npmjs.com/package/express-jwt</a></p><p>jsonwebtoken 用于<strong>生成</strong>JWT字符串<br>express-jwt 用于将JWT字符串解析<strong>还原</strong>成JSON对象</p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><div class='checkbox green'><input type="checkbox" />            <p>大事件API接口项目 文档：<a href="http://www.escook.cn:8088/#/">http://www.escook.cn:8088/#/</a> 教程：<a href="https://www.bilibili.com/video/BV1a34y167AZ?p=77&amp;vd_source=3ed70d49b47a074637711a68e7f42b04">https://www.bilibili.com/video/BV1a34y167AZ?p=77&amp;vd_source=3ed70d49b47a074637711a68e7f42b04</a></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SEO 基础</title>
      <link href="/2023/03/092022%20%E5%BD%92%E6%A1%A3/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/SEO/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_SEO%E4%BC%98%E5%8C%96/f75ax2e6/"/>
      <url>/2023/03/092022%20%E5%BD%92%E6%A1%A3/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/SEO/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_SEO%E4%BC%98%E5%8C%96/f75ax2e6/</url>
      
        <content type="html"><![CDATA[<h1 id="START"><a href="#START" class="headerlink" title="START"></a>START</h1><h2 id="系统学习-SEO"><a href="#系统学习-SEO" class="headerlink" title="系统学习 SEO"></a>系统学习 SEO</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315003440.png" alt="20230315003440"></p><ol><li>学习SEO基础知识：了解SEO的基本概念和术语，如搜索引擎、关键字、排名等等。可以通过搜索引擎或者在线教程学习。值得推荐的书籍包括《The Art of SEO》和《SEO Fitness Workbook》</li><li>熟悉搜索引擎算法：了解不同搜索引擎的算法，了解如何根据搜索引擎的算法来进行优化。</li><li>了解网站结构：了解网站的结构对SEO的影响，如网站的页面结构、网站的链接结构、网站的内容结构等等。</li><li>优化网站内容：了解如何撰写高质量的内容，如何进行关键字的优化，如何提高内容的可读性。</li><li>优化网站结构：了解如何优化网站的结构，如优化页面标题、描述和关键字等，如何优化网站的URL结构，如何优化网站的内部链接等。</li><li>了解外部链接的影响：了解外部链接对网站排名的影响，如如何进行外部链接的优化、如何建立高质量的外部链接等。</li><li>持续学习和实践：SEO优化是一个不断变化的过程，持续学习和实践可以让你不断提高自己的SEO技能。可以通过参加课程、参与社群、阅读博客等途径学习。</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>semrush/ahrefs</li><li>pagespeed</li><li>SEOquake</li><li>Google Analytics</li><li>Google Search Console</li><li>Moz</li><li>SEMRush</li></ol><h1 id="SEO-概念及工作内容"><a href="#SEO-概念及工作内容" class="headerlink" title="SEO 概念及工作内容"></a>SEO 概念及工作内容</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315002954.png" alt="20230315002954"></p><h1 id="网站关键词排名的流程"><a href="#网站关键词排名的流程" class="headerlink" title="网站关键词排名的流程"></a>网站关键词排名的流程</h1><p>线性流程</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315002608.png" alt="20230315002608"></p><h1 id="搜索引擎爬虫"><a href="#搜索引擎爬虫" class="headerlink" title="搜索引擎爬虫"></a>搜索引擎爬虫</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315004127.png" alt="20230315004127"></p><h1 id="网站爬虫的管理规则"><a href="#网站爬虫的管理规则" class="headerlink" title="网站爬虫的管理规则"></a>网站爬虫的管理规则</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315004708.png" alt="20230315004708"></p><h1 id="SEO的核心数据计算"><a href="#SEO的核心数据计算" class="headerlink" title="SEO的核心数据计算"></a>SEO的核心数据计算</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315010612.png" alt="20230315010612"></p><h1 id="关键词选择技巧"><a href="#关键词选择技巧" class="headerlink" title="关键词选择技巧"></a>关键词选择技巧</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315011130.png" alt="20230315011130"></p><h1 id="网站-TDK"><a href="#网站-TDK" class="headerlink" title="网站 TDK"></a>网站 TDK</h1><blockquote><p>TDK：</p><ul><li>title</li><li>description</li><li>keywords</li></ul></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315011452.png" alt="20230315011452"></p><h2 id="D（描述的书写规则）"><a href="#D（描述的书写规则）" class="headerlink" title="D（描述的书写规则）"></a>D（描述的书写规则）</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315012221.png" alt="20230315012221"></p><h1 id="网站栏目（导航栏）"><a href="#网站栏目（导航栏）" class="headerlink" title="网站栏目（导航栏）"></a>网站栏目（导航栏）</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315012759.png" alt="20230315012759"></p><h1 id="锚文本"><a href="#锚文本" class="headerlink" title="锚文本"></a>锚文本</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315013223.png" alt="20230315013223"></p><h1 id="网站的文章的书写技巧"><a href="#网站的文章的书写技巧" class="headerlink" title="网站的文章的书写技巧"></a>网站的文章的书写技巧</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315013912.png" alt="20230315013912"></p><h1 id="SEO-外链算法"><a href="#SEO-外链算法" class="headerlink" title="SEO 外链算法"></a>SEO 外链算法</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315014016.png" alt="20230315014016"></p><h2 id="外链发布技巧"><a href="#外链发布技巧" class="headerlink" title="外链发布技巧"></a>外链发布技巧</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315014354.png" alt="20230315014354"></p><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315014858.png" alt="20230315014858"></p><h1 id="闪电算法"><a href="#闪电算法" class="headerlink" title="闪电算法"></a>闪电算法</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315015323.png" alt="20230315015323"></p><h1 id="第一印象原则"><a href="#第一印象原则" class="headerlink" title="第一印象原则"></a>第一印象原则</h1><p>搜索引擎也有第一印象，所以要先优化好网站再上线</p><h1 id="F形网站布局"><a href="#F形网站布局" class="headerlink" title="F形网站布局"></a>F形网站布局</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315213748.png" alt="20230315213748"></p><h1 id="H-标签（h1-h6）"><a href="#H-标签（h1-h6）" class="headerlink" title="H 标签（h1-h6）"></a>H 标签（h1-h6）</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315214005.png" alt="20230315214005"></p><h1 id="nofollow"><a href="#nofollow" class="headerlink" title="nofollow"></a>nofollow</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315214344.png" alt="20230315214344"></p><h1 id="图片alt属性优化"><a href="#图片alt属性优化" class="headerlink" title="图片alt属性优化"></a>图片alt属性优化</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315214627.png" alt="20230315214627"></p><h1 id="网站SEO优化方案"><a href="#网站SEO优化方案" class="headerlink" title="网站SEO优化方案"></a>网站SEO优化方案</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230315215333.png" alt="20230315215333"></p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] W3C SEO <a href="https://www.w3cschool.cn/kfm2f1">https://www.w3cschool.cn/kfm2f1</a></li><li>[ ] 站长工具（网站）<ul><li>[ ] 域名（服务器）全国测速</li></ul></li><li>[ ] 百度指数（网站）</li><li>[ ] TDK 查看（插件）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
          <category> SEO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> seo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InterView</title>
      <link href="/2023/03/032022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF_%E9%9D%A2%E8%AF%95%E9%A2%98/f75e92e6/"/>
      <url>/2023/03/032022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF_%E9%9D%A2%E8%AF%95%E9%A2%98/f75e92e6/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="Vue-生命周期"><a href="#Vue-生命周期" class="headerlink" title="Vue 生命周期"></a>Vue 生命周期</h2><p>Vue实例有以下8个生命周期钩子函数，它们分别在实例化时按顺序被调用：</p><ol><li>beforeCreate：实例被创建前调用，此时组件的选项、属性等还未初始化。</li><li>created：实例创建完成后调用，可以在这里进行数据的初始化、依赖注入等操作。</li><li>beforeMount：在挂载开始之前被调用，此时模板已经编译完成，但尚未渲染到真实的DOM中。</li><li>mounted：在挂载完成后调用，此时组件已经被渲染到真实的DOM中，可以在这里进行DOM操作和异步请求等操作。</li><li>beforeUpdate：在数据更新之前调用，此时数据已经被更新但DOM尚未重新渲染。</li><li>updated：在数据更新之后调用，此时组件已经被重新渲染，可以在这里进行DOM操作和异步请求等操作。</li><li>beforeDestroy：在实例销毁之前调用，此时组件实例还未销毁，可以在这里进行清理操作。</li><li>destroyed：在实例销毁之后调用，此时组件实例已经被销毁，可以在这里进行清理操作。</li></ol><p>这些生命周期钩子函数可以用于控制Vue实例的行为，进行组件的初始化、数据更新、DOM操作、事件监听等等。需要注意的是，不建议在beforeCreate和created钩子函数中进行DOM操作，因为此时组件的模板还未编译完成，DOM节点还未生成。在mounted钩子函数中进行DOM操作是最佳实践。</p><h2 id="Vue-组件通信"><a href="#Vue-组件通信" class="headerlink" title="Vue 组件通信"></a>Vue 组件通信</h2><ol><li>父子组件通信：父组件通过 props 向子组件传递数据，子组件通过 $emit 触发事件并传递数据给父组件。</li><li>子父组件通信：子组件通过 this.$parent 访问父组件的属性或方法，或者通过 $emit 触发事件并传递数据给父组件。</li><li>兄弟组件通信：可以通过一个共同的父组件来进行兄弟组件之间的通信。也可以使用一个空的 Vue 实例作为事件总线，所有需要通信的组件都通过它来进行通信。</li><li>跨级组件通信：可以使用 provide/inject API 来实现跨级组件通信。父组件通过 provide 提供数据，子孙组件通过 inject 来注入数据。</li><li>Vuex 状态管理：Vuex 是 Vue.js 官方提供的状态管理库，通过将组件的共享状态抽取出来，以集中的方式进行管理，从而实现组件之间的通信。</li></ol><h2 id="Vue-双向数据绑定原理"><a href="#Vue-双向数据绑定原理" class="headerlink" title="Vue 双向数据绑定原理"></a>Vue 双向数据绑定原理</h2><blockquote><p>参考链接：</p><ul><li><a href="https://juejin.cn/post/7080562890628923423#heading-0">https://juejin.cn/post/7080562890628923423#heading-0</a></li></ul></blockquote><p>Vue 数据双向绑定原理是通过 数据劫持 + 发布者-订阅者模式 的方式来实现的。<br>首先是通过 ES5 提供的 Object. defineProperty() 方法来劫持（监听）各属性的getter、setter，并在当监听的属性发生变动时通知订阅者，是否需要更新，若更新就会执行对应的更新函数。</p><h2 id="Vue-路由实现方式是什么？如何实现路由懒加载？"><a href="#Vue-路由实现方式是什么？如何实现路由懒加载？" class="headerlink" title="Vue 路由实现方式是什么？如何实现路由懒加载？"></a>Vue 路由实现方式是什么？如何实现路由懒加载？</h2><p>实现原理：</p><p>SPA(single page application):单一页面应用程序，只有一个完整的页面；它在加载页面时，不会加载整个页面，而是只更新某个指定的容器中内容。</p><p>vue-router 使用 path-to-regexp 作为路径匹配引擎，用来匹配path和params</p><p>单页面应用(SPA)的核心之一是:</p><ol><li>更新视图而不重新请求页面</li><li>vue-router在实现单页面前端路由时，提供了三种方式：Hash模式和History模式；根据mode参数以及运行环境决定采用哪一种方式。</li></ol><p>路由懒加载：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 将</span><br><span class="line">// import UserDetails from &#x27;./views/UserDetails.vue&#x27;</span><br><span class="line">// 替换成</span><br><span class="line">const UserDetails = () =&gt; import(&#x27;./views/UserDetails.vue&#x27;)</span><br><span class="line"></span><br><span class="line">const router = createRouter(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  routes: [&#123; path: &#x27;/users/:id&#x27;, component: UserDetails &#125;],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Vue-父子组件的生命周期执行顺序是什么？"><a href="#Vue-父子组件的生命周期执行顺序是什么？" class="headerlink" title="Vue 父子组件的生命周期执行顺序是什么？"></a>Vue 父子组件的生命周期执行顺序是什么？</h2><p>加载渲染过程：</p><ol><li>父组件 beforeCreate</li><li>父组件 created</li><li>父组件 beforeMount</li><li>子组件 beforeCreate</li><li>子组件 created</li><li>子组件 beforeMount</li><li>子组件 mounted</li><li>父组件 mounted</li></ol><p>更新过程：</p><ol><li>父组件 beforeUpdate</li><li>子组件 beforeUpdate</li><li>子组件 updated</li><li>父组件 updated</li></ol><p>销毁过程：</p><ol><li>父组件 beforeDestroy</li><li>子组件 beforeDestroy</li><li>子组件 destroyed</li><li>父组件 destoryed</li></ol><h2 id="Vue-computed-和-watch-的区别是什么？"><a href="#Vue-computed-和-watch-的区别是什么？" class="headerlink" title="Vue computed 和 watch 的区别是什么？"></a>Vue computed 和 watch 的区别是什么？</h2><p>Vue.js 中的 computed 和 watch 都是用于监听数据变化的功能，但它们的实现方式和使用场景略有不同。</p><p>computed</p><p>computed 是计算属性，是一种声明式的依赖关系，当依赖的数据发生变化时，会自动重新计算该属性的值。computed 的值会被缓存，只有依赖的数据变化时才会重新计算。<br>使用 computed 可以避免在模板中写复杂的逻辑，将逻辑和模板分离开来，使代码更加清晰简洁。computed 适用于一些需要经常被调用且计算量比较大的场景。</p><p>watch</p><p>watch 是观察一个数据的变化，当数据发生变化时会执行相应的回调函数。watch 可以监听一个数据的变化，也可以监听一个对象的某个属性的变化。<br>使用 watch 可以做一些比较复杂的业务逻辑，比如当用户输入完毕后请求接口获取数据等。watch 适用于一些需要在数据变化时执行异步或较为复杂的操作的场景。</p><p>综上所述，computed 适用于计算属性，而 watch 适用于监听数据的变化并执行一些复杂的操作。</p><h2 id="Vue-v-if和v-show的区别是什么？在什么情况下应该使用它们？"><a href="#Vue-v-if和v-show的区别是什么？在什么情况下应该使用它们？" class="headerlink" title="Vue v-if和v-show的区别是什么？在什么情况下应该使用它们？"></a>Vue v-if和v-show的区别是什么？在什么情况下应该使用它们？</h2><p>Vue.js 中的 v-if 和 v-show 都是用于控制元素的显示和隐藏，但它们的实现方式和使用场景略有不同。</p><p>v-if<br>v-if 是根据条件来判断是否渲染元素的指令，如果条件为真，则渲染元素，如果条件为假，则不渲染元素。当条件发生变化时，会销毁或创建元素。</p><p>使用 v-if 可以节省性能，因为在条件为假时，元素不会被渲染到 DOM 树中。但在频繁切换条件时，会造成不必要的性能开销，因为需要频繁创建和销毁元素。</p><p>v-show<br>v-show 是根据条件来判断元素是否显示的指令，如果条件为真，则显示元素，如果条件为假，则隐藏元素。当条件发生变化时，不会销毁或创建元素，只是修改元素的 CSS 样式。</p><p>使用 v-show 可以在元素显示和隐藏之间切换，但不会造成不必要的性能开销。但在元素首次渲染时，需要将元素渲染到 DOM 树中，可能会造成一些不必要的开销。</p><p>综上所述，当需要频繁切换元素显示和隐藏时，应该使用 v-show；当需要节省性能时，应该使用 v-if。同时，在使用 v-if 和 v-show 时，需要根据实际场景进行选择。如果需要对元素进行频繁操作，建议使用 v-show，如果元素较为复杂且需要频繁切换，建议使用 v-if。</p><h2 id="Vue-mixins是什么？如何使用它？"><a href="#Vue-mixins是什么？如何使用它？" class="headerlink" title="Vue mixins是什么？如何使用它？"></a>Vue mixins是什么？如何使用它？</h2><h2 id="Vue-keep-alive有什么作用？"><a href="#Vue-keep-alive有什么作用？" class="headerlink" title="Vue keep-alive有什么作用？"></a>Vue keep-alive有什么作用？</h2><h2 id="Vue-v-for如何避免重复渲染？"><a href="#Vue-v-for如何避免重复渲染？" class="headerlink" title="Vue v-for如何避免重复渲染？"></a>Vue v-for如何避免重复渲染？</h2><h2 id="Vue-key属性有什么作用？如何使用它？"><a href="#Vue-key属性有什么作用？如何使用它？" class="headerlink" title="Vue key属性有什么作用？如何使用它？"></a>Vue key属性有什么作用？如何使用它？</h2><h2 id="Vue-slot是什么？如何使用它？"><a href="#Vue-slot是什么？如何使用它？" class="headerlink" title="Vue slot是什么？如何使用它？"></a>Vue slot是什么？如何使用它？</h2><h2 id="Vue-provide和inject有什么作用？如何使用它们？"><a href="#Vue-provide和inject有什么作用？如何使用它们？" class="headerlink" title="Vue provide和inject有什么作用？如何使用它们？"></a>Vue provide和inject有什么作用？如何使用它们？</h2><h2 id="Vue-nextTick是什么？如何使用它？"><a href="#Vue-nextTick是什么？如何使用它？" class="headerlink" title="Vue nextTick是什么？如何使用它？"></a>Vue nextTick是什么？如何使用它？</h2><h2 id="Vue-v-model实现原理是什么？如何自定义v-model？"><a href="#Vue-v-model实现原理是什么？如何自定义v-model？" class="headerlink" title="Vue v-model实现原理是什么？如何自定义v-model？"></a>Vue v-model实现原理是什么？如何自定义v-model？</h2><h2 id="Vue-中的指令和组件，并提供一个示例。"><a href="#Vue-中的指令和组件，并提供一个示例。" class="headerlink" title="Vue 中的指令和组件，并提供一个示例。"></a>Vue 中的指令和组件，并提供一个示例。</h2><h2 id="Vue-中的虚拟-DOM，以及它的优缺点。"><a href="#Vue-中的虚拟-DOM，以及它的优缺点。" class="headerlink" title="Vue 中的虚拟 DOM，以及它的优缺点。"></a>Vue 中的虚拟 DOM，以及它的优缺点。</h2><h2 id="Vue-中的计算属性和侦听器，以及它们之间的区别。"><a href="#Vue-中的计算属性和侦听器，以及它们之间的区别。" class="headerlink" title="Vue 中的计算属性和侦听器，以及它们之间的区别。"></a>Vue 中的计算属性和侦听器，以及它们之间的区别。</h2><h2 id="Vue-中的路由和导航，以及如何实现动态路由。"><a href="#Vue-中的路由和导航，以及如何实现动态路由。" class="headerlink" title="Vue 中的路由和导航，以及如何实现动态路由。"></a>Vue 中的路由和导航，以及如何实现动态路由。</h2><h2 id="Vue-中的-Vuex-状态管理模式，包括状态管理的基本概念和核心概念。"><a href="#Vue-中的-Vuex-状态管理模式，包括状态管理的基本概念和核心概念。" class="headerlink" title="Vue 中的 Vuex 状态管理模式，包括状态管理的基本概念和核心概念。"></a>Vue 中的 Vuex 状态管理模式，包括状态管理的基本概念和核心概念。</h2><h2 id="Vue-中的过滤器和插件，以及它们的作用和使用场景。"><a href="#Vue-中的过滤器和插件，以及它们的作用和使用场景。" class="headerlink" title="Vue 中的过滤器和插件，以及它们的作用和使用场景。"></a>Vue 中的过滤器和插件，以及它们的作用和使用场景。</h2><h2 id="Vue-中的异步组件和懒加载，以及它们的作用和使用场景。"><a href="#Vue-中的异步组件和懒加载，以及它们的作用和使用场景。" class="headerlink" title="Vue 中的异步组件和懒加载，以及它们的作用和使用场景。"></a>Vue 中的异步组件和懒加载，以及它们的作用和使用场景。</h2><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><h2 id="什么是SQL"><a href="#什么是SQL" class="headerlink" title="什么是SQL?"></a>什么是SQL?</h2><h2 id="SQL-的全称是什么"><a href="#SQL-的全称是什么" class="headerlink" title="SQL 的全称是什么?"></a>SQL 的全称是什么?</h2><h2 id="SQL-是用来做什么的"><a href="#SQL-是用来做什么的" class="headerlink" title="SQL 是用来做什么的?"></a>SQL 是用来做什么的?</h2><h2 id="SQL-有哪些基本命令"><a href="#SQL-有哪些基本命令" class="headerlink" title="SQL 有哪些基本命令?"></a>SQL 有哪些基本命令?</h2><h2 id="什么是-SELECT-命令"><a href="#什么是-SELECT-命令" class="headerlink" title="什么是 SELECT 命令?"></a>什么是 SELECT 命令?</h2><h2 id="SELECT-命令有哪些常用选项"><a href="#SELECT-命令有哪些常用选项" class="headerlink" title="SELECT 命令有哪些常用选项?"></a>SELECT 命令有哪些常用选项?</h2><h2 id="什么是-WHERE-子句"><a href="#什么是-WHERE-子句" class="headerlink" title="什么是 WHERE 子句?"></a>什么是 WHERE 子句?</h2><h2 id="WHERE-子句的作用是什么"><a href="#WHERE-子句的作用是什么" class="headerlink" title="WHERE 子句的作用是什么?"></a>WHERE 子句的作用是什么?</h2><h2 id="WHERE-子句有哪些常见操作符"><a href="#WHERE-子句有哪些常见操作符" class="headerlink" title="WHERE 子句有哪些常见操作符?"></a>WHERE 子句有哪些常见操作符?</h2><h2 id="什么是-ORDER-BY-子句"><a href="#什么是-ORDER-BY-子句" class="headerlink" title="什么是 ORDER BY 子句?"></a>什么是 ORDER BY 子句?</h2><h2 id="ORDER-BY-子句的作用是什么"><a href="#ORDER-BY-子句的作用是什么" class="headerlink" title="ORDER BY 子句的作用是什么?"></a>ORDER BY 子句的作用是什么?</h2><h2 id="ORDER-BY-子句有哪些常见选项"><a href="#ORDER-BY-子句有哪些常见选项" class="headerlink" title="ORDER BY 子句有哪些常见选项?"></a>ORDER BY 子句有哪些常见选项?</h2><h2 id="什么是-GROUP-BY-子句"><a href="#什么是-GROUP-BY-子句" class="headerlink" title="什么是 GROUP BY 子句?"></a>什么是 GROUP BY 子句?</h2><h2 id="GROUP-BY-子句的作用是什么"><a href="#GROUP-BY-子句的作用是什么" class="headerlink" title="GROUP BY 子句的作用是什么?"></a>GROUP BY 子句的作用是什么?</h2><h2 id="GROUP-BY-子句有哪些常见选项"><a href="#GROUP-BY-子句有哪些常见选项" class="headerlink" title="GROUP BY 子句有哪些常见选项?"></a>GROUP BY 子句有哪些常见选项?</h2><h2 id="什么是-HAVING-子句"><a href="#什么是-HAVING-子句" class="headerlink" title="什么是 HAVING 子句?"></a>什么是 HAVING 子句?</h2><h2 id="HAVING-子句的作用是什么"><a href="#HAVING-子句的作用是什么" class="headerlink" title="HAVING 子句的作用是什么?"></a>HAVING 子句的作用是什么?</h2><h2 id="HAVING-子句与-WHERE-子句有什么区别"><a href="#HAVING-子句与-WHERE-子句有什么区别" class="headerlink" title="HAVING 子句与 WHERE 子句有什么区别?"></a>HAVING 子句与 WHERE 子句有什么区别?</h2><h2 id="什么是聚合函数"><a href="#什么是聚合函数" class="headerlink" title="什么是聚合函数?"></a>什么是聚合函数?</h2><h2 id="SQL-中有哪些常用的聚合函数"><a href="#SQL-中有哪些常用的聚合函数" class="headerlink" title="SQL 中有哪些常用的聚合函数?"></a>SQL 中有哪些常用的聚合函数?</h2><h2 id="什么是-JOIN"><a href="#什么是-JOIN" class="headerlink" title="什么是 JOIN?"></a>什么是 JOIN?</h2><h2 id="JOIN-有哪些常见类型"><a href="#JOIN-有哪些常见类型" class="headerlink" title="JOIN 有哪些常见类型?"></a>JOIN 有哪些常见类型?</h2><h2 id="什么是-INNER-JOIN"><a href="#什么是-INNER-JOIN" class="headerlink" title="什么是 INNER JOIN?"></a>什么是 INNER JOIN?</h2><h2 id="什么是-LEFT-JOIN"><a href="#什么是-LEFT-JOIN" class="headerlink" title="什么是 LEFT JOIN?"></a>什么是 LEFT JOIN?</h2><h2 id="什么是-RIGHT-JOIN"><a href="#什么是-RIGHT-JOIN" class="headerlink" title="什么是 RIGHT JOIN?"></a>什么是 RIGHT JOIN?</h2><h2 id="什么是-FULL-OUTER-JOIN"><a href="#什么是-FULL-OUTER-JOIN" class="headerlink" title="什么是 FULL OUTER JOIN?"></a>什么是 FULL OUTER JOIN?</h2><h2 id="什么是-UNION"><a href="#什么是-UNION" class="headerlink" title="什么是 UNION?"></a>什么是 UNION?</h2><h2 id="UNION-与-UNION-ALL-有什么区别"><a href="#UNION-与-UNION-ALL-有什么区别" class="headerlink" title="UNION 与 UNION ALL 有什么区别?"></a>UNION 与 UNION ALL 有什么区别?</h2><h2 id="什么是子查询"><a href="#什么是子查询" class="headerlink" title="什么是子查询?"></a>什么是子查询?</h2><h2 id="子查询有哪些常见类型"><a href="#子查询有哪些常见类型" class="headerlink" title="子查询有哪些常见类型?"></a>子查询有哪些常见类型?</h2><h2 id="什么是视图"><a href="#什么是视图" class="headerlink" title="什么是视图?"></a>什么是视图?</h2><h2 id="视图的作用是什么"><a href="#视图的作用是什么" class="headerlink" title="视图的作用是什么?"></a>视图的作用是什么?</h2><h2 id="如何创建一个视图"><a href="#如何创建一个视图" class="headerlink" title="如何创建一个视图?"></a>如何创建一个视图?</h2><h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引?"></a>什么是索引?</h2><h2 id="索引的作用是什么"><a href="#索引的作用是什么" class="headerlink" title="索引的作用是什么?"></a>索引的作用是什么?</h2><h2 id="索引有哪些常见类型"><a href="#索引有哪些常见类型" class="headerlink" title="索引有哪些常见类型?"></a>索引有哪些常见类型?</h2><h2 id="如何创建一个索引"><a href="#如何创建一个索引" class="headerlink" title="如何创建一个索引?"></a>如何创建一个索引?</h2><h2 id="如何删除一个索引"><a href="#如何删除一个索引" class="headerlink" title="如何删除一个索引?"></a>如何删除一个索引?</h2><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务?"></a>什么是事务?</h2><h2 id="事务的特性是什么"><a href="#事务的特性是什么" class="headerlink" title="事务的特性是什么?"></a>事务的特性是什么?</h2><h2 id="什么是锁"><a href="#什么是锁" class="headerlink" title="什么是锁?"></a>什么是锁?</h2><h2 id="锁有哪些常见类型"><a href="#锁有哪些常见类型" class="headerlink" title="锁有哪些常见类型?"></a>锁有哪些常见类型?</h2><h2 id="什么是死锁"><a href="#什么是死锁" class="headerlink" title="什么是死锁?"></a>什么是死锁?</h2><h2 id="如何避免死锁"><a href="#如何避免死锁" class="headerlink" title="如何避免死锁?"></a>如何避免死锁?</h2><h2 id="什么是数据完整性"><a href="#什么是数据完整性" class="headerlink" title="什么是数据完整性?"></a>什么是数据完整性?</h2><h2 id="数据完整性有哪些常见类型"><a href="#数据完整性有哪些常见类型" class="headerlink" title="数据完整性有哪些常见类型?"></a>数据完整性有哪些常见类型?</h2><h2 id="如何保证数据完整性"><a href="#如何保证数据完整性" class="headerlink" title="如何保证数据完整性?"></a>如何保证数据完整性?</h2><h2 id="什么是数据库范式"><a href="#什么是数据库范式" class="headerlink" title="什么是数据库范式?"></a>什么是数据库范式?</h2><h2 id="数据库范式有哪些常见类型"><a href="#数据库范式有哪些常见类型" class="headerlink" title="数据库范式有哪些常见类型?"></a>数据库范式有哪些常见类型?</h2><h2 id="如何设计一个符合范式的数据库"><a href="#如何设计一个符合范式的数据库" class="headerlink" title="如何设计一个符合范式的数据库?"></a>如何设计一个符合范式的数据库?</h2><h2 id="什么是触发器"><a href="#什么是触发器" class="headerlink" title="什么是触发器?"></a>什么是触发器?</h2><h2 id="触发器的作用是什么"><a href="#触发器的作用是什么" class="headerlink" title="触发器的作用是什么?"></a>触发器的作用是什么?</h2><h2 id="触发器有哪些常见类型"><a href="#触发器有哪些常见类型" class="headerlink" title="触发器有哪些常见类型?"></a>触发器有哪些常见类型?</h2><h2 id="如何创建一个触发器"><a href="#如何创建一个触发器" class="headerlink" title="如何创建一个触发器?"></a>如何创建一个触发器?</h2><h2 id="如何删除一个触发器"><a href="#如何删除一个触发器" class="headerlink" title="如何删除一个触发器?"></a>如何删除一个触发器?</h2><h2 id="什么是存储过程"><a href="#什么是存储过程" class="headerlink" title="什么是存储过程?"></a>什么是存储过程?</h2><h2 id="存储过程的作用是什么"><a href="#存储过程的作用是什么" class="headerlink" title="存储过程的作用是什么?"></a>存储过程的作用是什么?</h2><h2 id="存储过程有哪些常见类型"><a href="#存储过程有哪些常见类型" class="headerlink" title="存储过程有哪些常见类型?"></a>存储过程有哪些常见类型?</h2><h2 id="如何创建一个存储过程"><a href="#如何创建一个存储过程" class="headerlink" title="如何创建一个存储过程?"></a>如何创建一个存储过程?</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HM-SHOP 商城项目(uni-app)</title>
      <link href="/2023/02/242022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2023/%E5%89%8D%E7%AB%AF_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/479989ax/"/>
      <url>/2023/02/242022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2023/%E5%89%8D%E7%AB%AF_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/479989ax/</url>
      
        <content type="html"><![CDATA[<h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><h2 id="项目相关"><a href="#项目相关" class="headerlink" title="项目相关"></a>项目相关</h2><p>开发文档地址：<a href="https://www.escook.cn/docs-uni-shop/">https://www.escook.cn/docs-uni-shop/</a></p><p>最新项目接口：<a href="https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata">https://api-hmugo-web.itheima.net/api/public/v1/home/swiperdata</a></p><p>旧版接口：<a href="https://www.uinav.com">https://www.uinav.com</a></p><h2 id="安装-scss-sass-编译"><a href="#安装-scss-sass-编译" class="headerlink" title="安装 scss/sass 编译"></a>安装 scss/sass 编译</h2><p>插件下载地址：<a href="https://ext.dcloud.net.cn/plugin?name=compile-node-sass">https://ext.dcloud.net.cn/plugin?name=compile-node-sass</a></p><h2 id="创建-uni-app-项目"><a href="#创建-uni-app-项目" class="headerlink" title="创建 uni-app 项目"></a>创建 uni-app 项目</h2><ol><li>文件 -&gt; 新建 -&gt; 项目</li><li>填写项目基本信息<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230224201957.png" alt="20230224201957"></li></ol><h2 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">┌─components            uni-app组件目录</span><br><span class="line">│  └─comp-a.vue         可复用的a组件</span><br><span class="line">├─pages                 业务页面文件存放的目录</span><br><span class="line">│  ├─index</span><br><span class="line">│  │  └─index.vue       index页面</span><br><span class="line">│  └─list</span><br><span class="line">│     └─list.vue        list页面</span><br><span class="line">├─static                存放应用引用静态资源（如图片、视频等）的目录，注意：静态资源只能存放于此</span><br><span class="line">├─main.js               Vue初始化入口文件</span><br><span class="line">├─App.vue               应用配置，用来配置小程序的全局样式、生命周期函数等</span><br><span class="line">├─manifest.json         配置应用名称、appid、logo、版本等打包信息</span><br><span class="line">└─pages.json            配置页面路径、页面窗口样式、tabBar、navigationBar 等页面类信息</span><br></pre></td></tr></table></figure><h2 id="项目运行到微信开发者工具"><a href="#项目运行到微信开发者工具" class="headerlink" title="项目运行到微信开发者工具"></a>项目运行到微信开发者工具</h2><p>配置步骤：</p><ol><li>填写自己的微信小程序的 AppID：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230224202833.png" alt="20230224202833"></li><li>在 HBuilderX 中，配置“微信开发者工具”的安装路径</li><li>在微信开发者工具中，通过 设置 -&gt; 安全设置 面板，开启“微信开发者工具”的服务端口</li><li>在 HBuilderX 中，点击菜单栏中的 运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具，将当前 uni-app 项目编译之后，自动运行到微信开发者工具中，从而方便查看项目效果与调试</li></ol><h2 id="取消微信开发者工具-sitemap-警告"><a href="#取消微信开发者工具-sitemap-警告" class="headerlink" title="取消微信开发者工具 sitemap 警告"></a>取消微信开发者工具 sitemap 警告</h2><p>在 Uniapp manifest.json 文件 mp-weixin —&gt; setting 节点中添加：<code>&quot;checkSiteMap&quot;: false</code> 配置</p><h2 id="使用-Git-管理项目"><a href="#使用-Git-管理项目" class="headerlink" title="使用 Git 管理项目"></a>使用 Git 管理项目</h2><ol><li>在项目根目录中新建 <code>.gitignore</code> 忽略文件，并配置如下：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/node_modules</span><br><span class="line">/unpackage/dist</span><br><span class="line"># 注意：由于我们忽略了 unpackage 目录中仅有的 dist 目录，因此默认情况下， unpackage 目录不会被 Git 追踪</span><br><span class="line"># 此时，为了让 Git 能够正常追踪 unpackage 目录，按照惯例，我们可以在 unpackage 目录下创建一个叫做 `.gitkeep` 的文件进行占位</span><br></pre></td></tr></table></figure></li><li>打开终端，切换到项目根目录中，运行 <code>git init</code> 命令，初始化本地 Git 仓库</li><li>将所有文件都加入到暂存区：<code>git add .</code></li><li>本地提交更新：<code>git commit -m &quot;init project&quot;</code></li></ol><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><h2 id="配置网络请求"><a href="#配置网络请求" class="headerlink" title="配置网络请求"></a>配置网络请求</h2><blockquote><p>由于平台的限制，小程序项目中不支持 axios，而且原生的 wx.request() API 功能较为简单，不支持拦截器等全局定制的功能。因此，建议在 uni-app 项目中使用 <code>@escook/request-miniprogram</code> 第三方包发起网络数据请求。<a href="https://www.npmjs.com/package/@escook/request-miniprogram">@escook/request-miniprogram 官方文档</a></p></blockquote><ol><li>如果项目中没有 package.json 文件，需要使用 <code>npm init -y</code> 命令初始化一个</li><li>在命令行输入：<code>@escook/request-miniprogram</code> 安装</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; $http &#125; <span class="keyword">from</span> <span class="string">&#x27;@escook/request-miniprogram&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置请求根路径</span></span><br><span class="line">$http.<span class="property">baseUrl</span> = <span class="string">&#x27;https://xxx.com&#x27;</span></span><br><span class="line"></span><br><span class="line">uni.<span class="property">$http</span> = $http</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求开始之前做一些事情（请求拦截器）</span></span><br><span class="line">$http.<span class="property">beforeRequest</span> = <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;数据加载中...&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求完成之后做一些事情（响应拦截器）</span></span><br><span class="line">$http.<span class="property">afterRequest</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  uni.<span class="title function_">hideLoading</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置小程序分包"><a href="#配置小程序分包" class="headerlink" title="配置小程序分包"></a>配置小程序分包</h2><blockquote><p>分包可以减少小程序首次启动时的加载时间，我们在项目中，把 tabBar 相关的 4 个页面放到主包中，其它页面（例如：商品详情页、商品列表页）放到分包中。在 uni-app 项目中，配置分包的步骤如下：</p></blockquote><ol><li>在项目根目录中，创建分包的根目录，命名为 subpkg</li><li>在 pages.json 中，和 pages 节点平级的位置声明 <code>subPackages</code> 节点，用来定义分包相关的结构：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;subPackages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;root&quot;</span><span class="punctuation">:</span> <span class="string">&quot;subpkg&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure></li><li>在 subpkg 目录上鼠标右键，点击 新建页面 选项，并填写页面的相关信息：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230225003050.png" alt="20230225003050"></li></ol><h2 id="封装-uni-showMsg-方法"><a href="#封装-uni-showMsg-方法" class="headerlink" title="封装 uni.$showMsg() 方法"></a>封装 uni.$showMsg() 方法</h2><blockquote><p>当数据请求失败之后，经常需要调用 uni.showToast({ /<em> 配置对象 </em>/ }) 方法来提示用户。此时，可以在全局封装一个 uni.$showMsg() 方法，来简化 uni.showToast() 方法的调用。具体的改造步骤如下：</p></blockquote><ol><li>在 main.js 中，为 uni 对象挂载自定义的 $showMsg() 方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装的展示消息提示的方法</span></span><br><span class="line"><span class="comment">// 默认值：title = &#x27;数据加载失败！&#x27;, duration = 1500</span></span><br><span class="line">uni.<span class="property">$showMsg</span> = <span class="keyword">function</span> (<span class="params">title = <span class="string">&#x27;数据加载失败！&#x27;</span>, duration = <span class="number">1500</span></span>) &#123;</span><br><span class="line">  uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    title,</span><br><span class="line">    duration,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>今后，在需要提示消息的时候，直接调用 uni.$showMsg() 方法即可：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getSwiperList</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/public/v1/home/swiperdata&#x27;</span>)</span><br><span class="line">   <span class="keyword">if</span> (res.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg()</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">swiperList</span> = res.<span class="property">message</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="TabBar-配置"><a href="#TabBar-配置" class="headerlink" title="TabBar 配置"></a>TabBar 配置</h1><h2 id="创建-tabBar-页面"><a href="#创建-tabBar-页面" class="headerlink" title="创建 tabBar 页面"></a>创建 tabBar 页面</h2><p>在 HBuilderX 中，可以通过如下的两个步骤，快速新建页面：</p><ol><li>在 pages 目录上鼠标右键，选择新建页面</li><li>在弹出的窗口中，填写页面的名称、勾选 scss 模板之后，点击创建按钮。<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230224210402.png" alt="20230224210402"></li></ol><h2 id="配置-tabBar-图标效果"><a href="#配置-tabBar-图标效果" class="headerlink" title="配置 tabBar 图标效果"></a>配置 tabBar 图标效果</h2><ol><li>将图标放在根目录下的 static 文件夹</li><li>修改项目根目录中的 pages.json 配置文件，新增 tabBar 的配置节点：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;tabBar&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;selectedColor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;#C00000&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/home/home&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;首页&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/home.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/home-active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/cate/cate&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;分类&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cate.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cate-active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/cart/cart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;购物车&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cart.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/cart-active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pagePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pages/my/my&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我的&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/my.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;selectedIconPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;static/tab_icons/my-active.png&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="删除默认的-index-首页"><a href="#删除默认的-index-首页" class="headerlink" title="删除默认的 index 首页"></a>删除默认的 index 首页</h2><ol><li>在 HBuilderX 中，把 pages 目录下的 index首页文件夹 删除掉</li><li>同时，把 page.json 中记录的 index 首页 路径删除掉</li><li>为了防止小程序运行失败，在微信开发者工具中，手动删除 pages 目录下的 index 首页文件夹</li><li>同时，把 components 目录下的 uni-link 组件文件夹 删除掉</li></ol><h1 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h1><h2 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h2><h3 id="请求并渲染轮播图的数据"><a href="#请求并渲染轮播图的数据" class="headerlink" title="请求并渲染轮播图的数据"></a>请求并渲染轮播图的数据</h3><p>实现步骤：</p><ol><li>在 data 中定义轮播图的数组</li><li>在 onLoad 生命周期函数中调用获取轮播图数据的方法</li><li>在 methods 中定义获取轮播图数据的方法</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;</span><br><span class="line">    &lt;swiper :indicator-dots=&quot;true&quot; :autoplay=&quot;true&quot; :interval=&quot;3000&quot; :duration=&quot;1000&quot; :circular=&quot;true&quot;&gt;</span><br><span class="line">      &lt;swiper-item v-for=&quot;(item,index) in swiperList&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">        &lt;view class=&quot;swiper-item&quot;&gt;</span><br><span class="line">          &lt;image :src=&quot;item.image_src&quot;&gt;&lt;/image&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">      &lt;/swiper-item&gt;</span><br><span class="line">    &lt;/swiper&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        // 1. 轮播图的数据列表，默认为空数组</span><br><span class="line">        swiperList: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    onLoad() &#123;</span><br><span class="line">      // 2. 在小程序页面刚加载的时候，调用获取轮播图数据的方法</span><br><span class="line">      this.getSwiperList()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // 3. 获取轮播图数据的方法</span><br><span class="line">      async getSwiperList() &#123;</span><br><span class="line">        // 3.1 发起请求</span><br><span class="line">        const &#123;</span><br><span class="line">          data: res</span><br><span class="line">        &#125; = await uni.$http.get(&#x27;/api/public/v1/home/swiperdata&#x27;)</span><br><span class="line">        console.log(res);</span><br><span class="line">        // 3.2 请求失败</span><br><span class="line">        if (res.meta.status !== 200) &#123;</span><br><span class="line">          return uni.showToast(&#123;</span><br><span class="line">            title: &#x27;数据请求失败！&#x27;,</span><br><span class="line">            duration: 1500,</span><br><span class="line">            icon: &#x27;none&#x27;,</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        // 3.3 请求成功，为 data 中的数据赋值</span><br><span class="line">        this.swiperList = res.message</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">  swiper &#123;</span><br><span class="line">    height: 330rpx;</span><br><span class="line">    .swiper-item,</span><br><span class="line">    image &#123;</span><br><span class="line">      width: 100%;</span><br><span class="line">      height: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="点击轮播图跳转到商品详情页面"><a href="#点击轮播图跳转到商品详情页面" class="headerlink" title="点击轮播图跳转到商品详情页面"></a>点击轮播图跳转到商品详情页面</h3><p>将 <code>&lt;swiper-item&gt;&lt;/swiper-item&gt;</code> 节点内的 <code>view</code> 组件，改造为 <code>navigator</code> 导航组件，并动态绑定 url 属性 的值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in swiperList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">navigator</span> <span class="attr">class</span>=<span class="string">&quot;swiper-item&quot;</span> <span class="attr">:url</span>=<span class="string">&quot;`/subpkg/goods_detail/goods_detail?goods_id=$&#123;item.goods_id&#125;`&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item.image_src&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">navigator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>传递的 goods_id 参数：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230225004354.png" alt="20230225004354"></p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="获取分类导航的数据"><a href="#获取分类导航的数据" class="headerlink" title="获取分类导航的数据"></a>获取分类导航的数据</h3><p>实现思路：</p><ol><li>定义 data 数据</li><li>在 onLoad 中调用获取数据的方法</li><li>在 methods 中定义获取数据的方法</li></ol><h3 id="点击分类图标切换到分类页面"><a href="#点击分类图标切换到分类页面" class="headerlink" title="点击分类图标切换到分类页面"></a>点击分类图标切换到分类页面</h3><p>实现思路：</p><ol><li>为 nav-item 绑定点击事件处理函数<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分类导航区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;nav-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;nav-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in navList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;navClickHandler(item)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item.image_src&quot;</span> <span class="attr">class</span>=<span class="string">&quot;nav-img&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>定义 navClickHandler 事件处理函数并判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nav-item 项被点击时候的事件处理函数</span></span><br><span class="line"><span class="title function_">navClickHandler</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断点击的是哪个 nav</span></span><br><span class="line">  <span class="keyword">if</span> (item.<span class="property">name</span> === <span class="string">&#x27;分类&#x27;</span>) &#123;</span><br><span class="line">    uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/pages/cate/cate&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="楼层区域"><a href="#楼层区域" class="headerlink" title="楼层区域"></a>楼层区域</h3><h4 id="获取楼层数据"><a href="#获取楼层数据" class="headerlink" title="获取楼层数据"></a>获取楼层数据</h4><p>实现思路：</p><ol><li>定义 data 数据</li><li>在 onLoad 中调用获取数据的方法</li><li>在 methods 中定义获取数据的方法</li></ol><h4 id="渲染楼层的标题"><a href="#渲染楼层的标题" class="headerlink" title="渲染楼层的标题"></a>渲染楼层的标题</h4><ol><li>UI 结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 楼层区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;floor-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 楼层 item 项 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;floor-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in floorList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 楼层标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item.floor_title.image_src&quot;</span> <span class="attr">class</span>=<span class="string">&quot;floor-title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化楼层标题的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.floor-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60</span>rpx;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="渲染楼层里的图片"><a href="#渲染楼层里的图片" class="headerlink" title="渲染楼层里的图片"></a>渲染楼层里的图片</h4><ol><li>定义楼层图片区域的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 楼层图片区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;floor-img-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 左侧大图片的盒子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-img-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item.product_list[0].image_src&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width: item.product_list[0].image_width + &#x27;rpx&#x27;&#125;&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 右侧 4 个小图片的盒子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right-img-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;right-img-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item2, i2) in item.product_list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i2&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;i2 !== 0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item2.image_src&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;widthFix&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;width: item2.image_width + &#x27;rpx&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化楼层图片区域的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.right-img-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.floor-img-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10</span>rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="点击楼层图片跳转到商品列表页"><a href="#点击楼层图片跳转到商品列表页" class="headerlink" title="点击楼层图片跳转到商品列表页"></a>点击楼层图片跳转到商品列表页</h4><ol><li>在 subpkg 分包中，新建 goods_list 页面</li><li>楼层数据请求成功之后，通过双层 forEach 循环，处理 URL 地址：</li><li>把图片外层的 view 组件，改造为 navigator 组件，并动态绑定 url 属性 的值：</li></ol><h1 id="分类-1"><a href="#分类-1" class="headerlink" title="分类"></a>分类</h1><h2 id="渲染分类页面的基本结构"><a href="#渲染分类页面的基本结构" class="headerlink" title="渲染分类页面的基本结构"></a>渲染分类页面的基本结构</h2><ol><li>使用 <code>scroll-view</code> 组件，设置 scroll-y 纵向滚动<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;scroll-view-container&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 左侧的滚动视图区域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view&quot;</span> <span class="attr">scroll-y</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: wh + &#x27;px&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item active&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>多复制一些节点，演示纵向滚动效果...<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 右侧的滚动视图区域 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;right-scroll-view&quot;</span> <span class="attr">scroll-y</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: wh + &#x27;px&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;left-scroll-view-item&quot;</span>&gt;</span>多复制一些节点，演示纵向滚动效果<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>通过 <code>getSystemInfoSync API</code> 动态获取的窗口剩余高度：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 窗口的可用高度 = 屏幕高度 - navigationBar高度 - tabBar 高度</span></span><br><span class="line">        <span class="attr">wh</span>: <span class="number">0</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 获取当前系统的信息</span></span><br><span class="line">      <span class="keyword">const</span> sysInfo = uni.<span class="title function_">getSystemInfoSync</span>()</span><br><span class="line">      <span class="comment">// 为 wh 窗口可用高度动态赋值</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">wh</span> = sysInfo.<span class="property">windowHeight</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>设置页面样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.scroll-view-container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.left-scroll-view</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.left-scroll-view-item</span> &#123;</span><br><span class="line">      <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f7f7f7</span>;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"></span><br><span class="line">      // 激活项的样式</span><br><span class="line">      &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">        // 渲染激活项左侧的红色指示边线</span><br><span class="line">        &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">          <span class="attribute">display</span>: block;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">3px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#c00000</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50%</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="获取分类数据"><a href="#获取分类数据" class="headerlink" title="获取分类数据"></a>获取分类数据</h2><ol><li>在 data 中定义分类数据节点：</li><li>调用获取分类列表数据的方法：</li><li>定义获取分类列表数据的方法：</li></ol><h2 id="动态渲染左侧的一级分类列表"><a href="#动态渲染左侧的一级分类列表" class="headerlink" title="动态渲染左侧的一级分类列表"></a>动态渲染左侧的一级分类列表</h2><ol><li>循环渲染列表结构：</li><li>在 data 中定义默认选中项的索引：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 当前选中项的索引，默认让第一项被选中</span></span><br><span class="line">    <span class="attr">active</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环渲染结构时，为选中项动态添加 .active 类名：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in cateList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">view</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;left-scroll-view-item&#x27;, i === active ? &#x27;active&#x27; : &#x27;&#x27;]&quot;</span>&gt;</span>&#123;&#123;item.cat_name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>为一级分类的 Item 项绑定点击事件处理函数 activeChanged：</li><li>定义 activeChanged 事件处理函数，动态修改选中项的索引：</li></ol><h2 id="动态渲染右侧的二级分类列表"><a href="#动态渲染右侧的二级分类列表" class="headerlink" title="动态渲染右侧的二级分类列表"></a>动态渲染右侧的二级分类列表</h2><ol><li>在 data 中定义二级分类列表的数据节点：<code>cateLevel2: []</code></li><li>修改 getCateList 方法，在请求到数据之后，为二级分类列表数据赋值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">getCateList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/public/v1/categories&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg()</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cateList</span> = res.<span class="property">message</span></span><br><span class="line">  <span class="comment">// 为二级分类赋值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cateLevel2</span> = res.<span class="property">message</span>[<span class="number">0</span>].<span class="property">children</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 activeChanged 方法，在一级分类选中项改变之后，为二级分类列表数据重新赋值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">activeChanged</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">active</span> = i</span><br><span class="line">  <span class="comment">// 为二级分类列表重新赋值</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cateLevel2</span> = <span class="variable language_">this</span>.<span class="property">cateList</span>[i].<span class="property">children</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>循环渲染右侧二级分类列表的 UI 结构：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 右侧的滚动视图区域 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;right-scroll-view&quot;</span> <span class="attr">scroll-y</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: wh + &#x27;px&#x27;&#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cate-lv2&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item2, i2) in cateLevel2&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cate-lv2-title&quot;</span>&gt;</span>/ &#123;&#123;item2.cat_name&#125;&#125; /<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>美化二级分类的标题样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cate-lv2-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="动态渲染右侧的三级分类列表"><a href="#动态渲染右侧的三级分类列表" class="headerlink" title="动态渲染右侧的三级分类列表"></a>动态渲染右侧的三级分类列表</h2><ol><li>在二级分类的 <view> 组件中，循环渲染三级分类的列表结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 右侧的滚动视图区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;right-scroll-view&quot;</span> <span class="attr">scroll-y</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: wh + &#x27;px&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cate-lv2&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item2, i2) in cateLevel2&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cate-lv2-title&quot;</span>&gt;</span>/ &#123;&#123;item2.cat_name&#125;&#125; /<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 动态渲染三级分类的列表数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cate-lv3-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 三级分类 Item 项 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cate-lv3-item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item3, i3) in item2.children&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i3&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item3.cat_icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 文本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;item3.cat_name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化三级分类的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cate-lv3-list</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.cate-lv3-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">33.33%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">    image &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    text &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="切换分类重置滚动条"><a href="#切换分类重置滚动条" class="headerlink" title="切换分类重置滚动条"></a>切换分类重置滚动条</h2><ol><li>在 data 中定义 滚动条距离顶部的距离：<code>scrollTop: 0</code></li><li>动态为右侧的 <scroll-view> 组件绑定 scroll-top 属性的值：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 右侧的滚动视图区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">&quot;right-scroll-view&quot;</span> <span class="attr">scroll-y</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;height: wh + &#x27;px&#x27;&#125;&quot;</span> <span class="attr">:scroll-top</span>=<span class="string">&quot;scrollTop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>切换一级分类时，动态设置 scrollTop 的值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选中项改变的事件处理函数</span></span><br><span class="line"><span class="title function_">activeChanged</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">active</span> = i</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">cateLevel2</span> = <span class="variable language_">this</span>.<span class="property">cateList</span>[i].<span class="property">children</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 让 scrollTop 的值在 0 与 1 之间切换（因为如果值相同的情况会导致赋值失败）</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">scrollTop</span> = <span class="variable language_">this</span>.<span class="property">scrollTop</span> === <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以简化为如下的代码：</span></span><br><span class="line">  <span class="comment">// this.scrollTop = this.scrollTop ? 0 : 1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="点击三级分类跳转到商品列表页面"><a href="#点击三级分类跳转到商品列表页面" class="headerlink" title="点击三级分类跳转到商品列表页面"></a>点击三级分类跳转到商品列表页面</h2><ol><li>为三级分类的 Item 项绑定点击事件处理函数</li><li>在事件处理函数中跳转并携带 id<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击三级分类项跳转到商品列表页面</span></span><br><span class="line"><span class="title function_">gotoGoodsList</span>(<span class="params">item3</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/subpkg/goods_list/goods_list?cid=&#x27;</span> + item3.<span class="property">cat_id</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><h2 id="自定义搜索组件"><a href="#自定义搜索组件" class="headerlink" title="自定义搜索组件"></a>自定义搜索组件</h2><ol><li>在项目根目录的 components 目录上，鼠标右键，选择 新建组件，填写组件信息后，最后点击 创建 按钮：</li><li>在需要使用组件的 UI 结构中，直接以标签的形式使用 my-search 自定义组件：</li><li>定义 my-search 组件的 UI 结构如下：(注意：在当前组件中，我们使用 view 组件模拟 input 输入框的效果；并不会在页面上渲染真正的 input 输入框)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-search-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用 view 组件模拟 input 输入框的样式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-search-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;17&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化自定义 search 组件的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-search-container</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c00000</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.my-search-box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">36px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>由于自定义的 my-search 组件高度为 50px，因此，需要重新计算分类页面窗口的可用高度：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> sysInfo = uni.<span class="title function_">getSystemInfoSync</span>()</span><br><span class="line">  <span class="comment">// 可用高度 = 屏幕高度 - navigationBar高度 - tabBar高度 - 自定义的search组件高度</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">wh</span> = sysInfo.<span class="property">windowHeight</span> - <span class="number">50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="通过自定义属性增强组件的通用性"><a href="#通过自定义属性增强组件的通用性" class="headerlink" title="通过自定义属性增强组件的通用性"></a>通过自定义属性增强组件的通用性</h3><blockquote><p>为了增强组件的通用性，我们允许使用者自定义搜索组件的 背景颜色 和 圆角尺寸</p></blockquote><ol><li>通过 props 定义 bgcolor 和 radius 两个属性，并指定值类型和属性默认值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和 data 节点平级</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="comment">// 背景颜色</span></span><br><span class="line">  <span class="attr">bgcolor</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;#C00000&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 圆角尺寸</span></span><br><span class="line">  <span class="attr">radius</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="comment">// 单位是 px</span></span><br><span class="line">    <span class="attr">default</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过属性绑定的形式，为 .my-search-container 盒子和 .my-search-box 盒子动态绑定 style 属性：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-search-container&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;background-color&#x27;: bgcolor&#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-search-box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;border-radius&#x27;: radius + &#x27;px&#x27;&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;17&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>移除对应 scss 样式中的 背景颜色 和 圆角尺寸（指定了默认值）</li></ol><h3 id="为自定义组件封装-click-事件"><a href="#为自定义组件封装-click-事件" class="headerlink" title="为自定义组件封装 click 事件"></a>为自定义组件封装 click 事件</h3><blockquote><p>自定义组件不能直接绑定原生的事件，可以通过绑定自定义事件的方式在组件内部通过<code>$emit(&quot;自定义事件名称&quot;)</code>调用</p></blockquote><ol><li>在 my-search 自定义组件内部，给类名为 .my-search-box 的 view 绑定 click 事件处理函数：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-search-box&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;&#x27;border-radius&#x27;: radius + &#x27;px&#x27;&#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;searchBoxHandler&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">size</span>=<span class="string">&quot;17&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 my-search 自定义组件的 methods 节点中，通过<code>$emit(&quot;自定义事件名称&quot;)</code>调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 点击了模拟的 input 输入框</span></span><br><span class="line">  <span class="title function_">searchBoxHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 触发外界通过 @click 绑定的 click 事件处理函数</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;click&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在分类页面中使用 my-search 自定义组件时，即可通过 @click 为其绑定点击事件处理函数：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用自定义的搜索组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-search</span> @<span class="attr">click</span>=<span class="string">&quot;gotoSearch&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-search</span>&gt;</span></span><br></pre></td></tr></table></figure>同时在分类页面中，定义 gotoSearch 事件处理函数如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="comment">// 跳转到分包中的搜索页面</span></span><br><span class="line">   <span class="title function_">gotoSearch</span>(<span class="params"></span>) &#123;</span><br><span class="line">     uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">       <span class="attr">url</span>: <span class="string">&#x27;/subpkg/search/search&#x27;</span></span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现首页搜索组件的吸顶效果"><a href="#实现首页搜索组件的吸顶效果" class="headerlink" title="实现首页搜索组件的吸顶效果"></a>实现首页搜索组件的吸顶效果</h3><ol><li>在首页引入自定义search 组件，并嵌套在 类名为：search-box 的 view 标签中</li><li>实现首页搜索组件的吸顶效果：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.search-box</span> &#123;</span><br><span class="line">  // 设置定位效果为“吸顶”</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  // 吸顶的“位置”</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  // 提高层级，防止被轮播图覆盖</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="搜索建议"><a href="#搜索建议" class="headerlink" title="搜索建议"></a>搜索建议</h2><h3 id="渲染搜索页面的基本结构"><a href="#渲染搜索页面的基本结构" class="headerlink" title="渲染搜索页面的基本结构"></a>渲染搜索页面的基本结构</h3><blockquote><p>uni-search-bar官方文档：<a href="https://zh.uniapp.dcloud.io/component/uniui/uni-search-bar">https://zh.uniapp.dcloud.io/component/uniui/uni-search-bar</a></p></blockquote><ol><li>UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;search-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 uni-ui 提供的搜索组件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-search-bar</span> @<span class="attr">input</span>=<span class="string">&quot;input&quot;</span> <span class="attr">:radius</span>=<span class="string">&quot;100&quot;</span> <span class="attr">cancelButton</span>=<span class="string">&quot;none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-search-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改 components -&gt; uni-search-bar -&gt; uni-search-bar.vue 组件，将默认的白色搜索背景改为 #C00000 的红色背景：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.uni-searchbar</span> &#123;</span><br><span class="line">  <span class="comment">/* #ifndef APP-NVUE */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="comment">/* #endif */</span></span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">16</span>rpx;</span><br><span class="line">  <span class="comment">/* 将默认的 #FFFFFF 改为 #C00000 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c00000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>吸顶效果</li><li>绑定输入事件</li></ol><p>实现效果：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230228145022.png" alt="20230228145022"></p><h3 id="实现搜索框自动获取焦点"><a href="#实现搜索框自动获取焦点" class="headerlink" title="实现搜索框自动获取焦点"></a>实现搜索框自动获取焦点</h3><ol><li>修改 components -&gt; uni-search-bar -&gt; uni-search-bar.vue 组件，把 data 数据中的 show 和 showSync 的值，从默认的 false 改为 true 即可：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">showSync</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">searchVal</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索框的防抖处理"><a href="#搜索框的防抖处理" class="headerlink" title="搜索框的防抖处理"></a>搜索框的防抖处理</h3><ol><li>在 data 中定义防抖的延时器 timerId 如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 延时器的 timerId</span></span><br><span class="line">    <span class="attr">timer</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="comment">// 搜索关键词</span></span><br><span class="line">    <span class="attr">kw</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 input 事件处理函数如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">input</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// 清除 timer 对应的延时器</span></span><br><span class="line">  <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">  <span class="comment">// 重新启动一个延时器，并把 timerId 赋值给 this.timer</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果 500 毫秒内，没有触发新的输入事件，则为搜索关键词赋值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">kw</span> = e</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">kw</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="根据关键词查询搜索建议列表"><a href="#根据关键词查询搜索建议列表" class="headerlink" title="根据关键词查询搜索建议列表"></a>根据关键词查询搜索建议列表</h3><ol><li>在 data 中定义 <code>searchResults: []</code> 数据节点，用来存放搜索建议的列表数据</li><li>在防抖的 setTimeout 中，调用 getSearchList 方法获取搜索建议列表：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意此处的 setTimeout 要写成箭头函数，不然内部的 this 访问不到 getSearchList 方法</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">kw</span> = e.<span class="property">value</span></span><br><span class="line">  <span class="comment">// 根据关键词，查询搜索建议列表</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getSearchList</span>()</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染搜索建议列表"><a href="#渲染搜索建议列表" class="headerlink" title="渲染搜索建议列表"></a>渲染搜索建议列表</h3><ol><li>定义 UI 结构<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 搜索建议列表 --&gt;</span><br><span class="line">&lt;view class=&quot;sugg-list&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;sugg-item&quot; v-for=&quot;(item, <span class="selector-tag">i</span>) in searchResults&quot; :key=<span class="string">&quot;i&quot;</span> @click=<span class="string">&quot;gotoDetail(item.goods_id)&quot;</span>&gt;</span><br><span class="line">    &lt;view class=<span class="string">&quot;goods-name&quot;</span>&gt;&#123;&#123;item<span class="selector-class">.goods_name</span>&#125;&#125;&lt;/view&gt;</span><br><span class="line">    &lt;uni-icons type=&quot;arrowright&quot; size=&quot;<span class="number">16</span>&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>美化搜索建议列表：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">sugg</span>-list &#123;</span><br><span class="line">  <span class="attr">padding</span>: <span class="number">0</span> 5px;</span><br><span class="line"></span><br><span class="line">  .<span class="property">sugg</span>-item &#123;</span><br><span class="line">    font-<span class="attr">size</span>: 12px;</span><br><span class="line">    <span class="attr">padding</span>: 13px <span class="number">0</span>;</span><br><span class="line">    border-<span class="attr">bottom</span>: 1px solid #efefef;</span><br><span class="line">    <span class="attr">display</span>: flex;</span><br><span class="line">    align-<span class="attr">items</span>: center;</span><br><span class="line">    justify-<span class="attr">content</span>: space-between;</span><br><span class="line"></span><br><span class="line">    .<span class="property">goods</span>-name &#123;</span><br><span class="line">      <span class="comment">// 文字不允许换行（单行文本）</span></span><br><span class="line">      white-<span class="attr">space</span>: nowrap;</span><br><span class="line">      <span class="comment">// 溢出部分隐藏</span></span><br><span class="line">      <span class="attr">overflow</span>: hidden;</span><br><span class="line">      <span class="comment">// 文本溢出后，使用 ... 代替</span></span><br><span class="line">      text-<span class="attr">overflow</span>: ellipsis;</span><br><span class="line">      margin-<span class="attr">right</span>: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>点击搜索建议的 Item 项，跳转到商品详情页面：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">gotoDetail</span>(<span class="params">goods_id</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="comment">// 指定详情页面的 URL 地址，并传递 goods_id 参数</span></span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/subpkg/goods_detail/goods_detail?goods_id=&#x27;</span> + goods_id</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="搜索历史"><a href="#搜索历史" class="headerlink" title="搜索历史"></a>搜索历史</h2><h3 id="渲染搜索历史记录的基本结构"><a href="#渲染搜索历史记录的基本结构" class="headerlink" title="渲染搜索历史记录的基本结构"></a>渲染搜索历史记录的基本结构</h3><ol><li>在 data 中定义搜索历史的假数据：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 搜索关键词的历史记录</span></span><br><span class="line">    <span class="attr">historyList</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;apple&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>渲染搜索历史区域的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索历史 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;history-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 标题区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;history-title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>搜索历史<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;trash&quot;</span> <span class="attr">size</span>=<span class="string">&quot;17&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 列表区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;history-list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-tag</span> <span class="attr">:text</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in historyList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-tag</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化搜索历史区域的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.history-box</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.history-title</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.history-list</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.uni-tag</span> &#123;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span><br><span class="line">      <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="搜索建议和搜索历史的按需展示"><a href="#搜索建议和搜索历史的按需展示" class="headerlink" title="搜索建议和搜索历史的按需展示"></a>搜索建议和搜索历史的按需展示</h3><ol><li>当搜索结果列表的长度不为 0的时候（searchResults.length !== 0），需要展示搜索建议区域，隐藏搜索历史区域</li><li>当搜索结果列表的长度等于 0的时候（searchResults.length === 0），需要隐藏搜索建议区域，展示搜索历史区域</li><li>使用 v-if 和 v-else 控制这两个区域的显示和隐藏，示例代码如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 搜索建议列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;sugg-list&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;searchResults.length !== 0&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省略其它代码... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 搜索历史 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;history-box&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 省略其它代码... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="将搜索关键词存入-historyList"><a href="#将搜索关键词存入-historyList" class="headerlink" title="将搜索关键词存入 historyList"></a>将搜索关键词存入 historyList</h3><ol><li>直接将搜索关键词 push 到 historyList 数组中即可<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 根据搜索关键词，搜索商品建议列表</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getSearchList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 省略其它不必要的代码...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 查询到搜索建议之后，调用 saveSearchHistory() 方法保存搜索关键词</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">saveSearchHistory</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 2. 保存搜索关键词的方法</span></span><br><span class="line">  <span class="title function_">saveSearchHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 2.1 直接把搜索关键词 push 到 historyList 数组中</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">historyList</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">kw</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>上述实现思路存在的问题：<ol><li>关键词前后顺序的问题（可以调用数组的 reverse() 方法对数组进行反转）</li><li>关键词重复的问题（可以使用 Set 对象进行去重操作）</li></ol></li></ol><h3 id="解决关键字前后顺序的问题"><a href="#解决关键字前后顺序的问题" class="headerlink" title="解决关键字前后顺序的问题"></a>解决关键字前后顺序的问题</h3><ol><li>data 中的 historyList 不做任何修改，依然使用 push 进行末尾追加</li><li>定义一个计算属性 historys，将 historyList 数组 reverse 反转之后，就是此计算属性的值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="title function_">historys</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 注意：由于数组是引用类型，所以不要直接基于原数组调用 reverse 方法，以免修改原数组中元素的顺序</span></span><br><span class="line">    <span class="comment">// 而是应该新建一个内存无关的数组，再进行 reverse 反转</span></span><br><span class="line">    <span class="keyword">return</span> [...<span class="variable language_">this</span>.<span class="property">historyList</span>].<span class="title function_">reverse</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>页面中渲染搜索关键词的时候，不再使用 data 中的 historyList，而是使用计算属性 historys：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;history-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-tag</span> <span class="attr">:text</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in historys&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="解决关键词重复的问题"><a href="#解决关键词重复的问题" class="headerlink" title="解决关键词重复的问题"></a>解决关键词重复的问题</h3><ol><li>修改 saveSearchHistory 方法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存搜索关键词为历史记录</span></span><br><span class="line"><span class="title function_">saveSearchHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// this.historyList.push(this.kw)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 1. 将 Array 数组转化为 Set 对象</span></span><br><span class="line">  <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">historyList</span>)</span><br><span class="line">  <span class="comment">// 2. 调用 Set 对象的 delete 方法，移除对应的元素</span></span><br><span class="line">  set.<span class="title function_">delete</span>(<span class="variable language_">this</span>.<span class="property">kw</span>)</span><br><span class="line">  <span class="comment">// 3. 调用 Set 对象的 add 方法，向 Set 中添加元素</span></span><br><span class="line">  set.<span class="title function_">add</span>(<span class="variable language_">this</span>.<span class="property">kw</span>)</span><br><span class="line">  <span class="comment">// 4. 将 Set 对象转化为 Array 数组</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">historyList</span> = <span class="title class_">Array</span>.<span class="title function_">from</span>(set)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将搜索历史记录持久化存储到本地"><a href="#将搜索历史记录持久化存储到本地" class="headerlink" title="将搜索历史记录持久化存储到本地"></a>将搜索历史记录持久化存储到本地</h3><ol><li>修改 saveSearchHistory 方法如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 保存搜索关键词为历史记录</span><br><span class="line">saveSearchHistory() &#123;</span><br><span class="line">  const set = new Set(this.historyList)</span><br><span class="line">  set.delete(this.kw)</span><br><span class="line">  set.add(this.kw)</span><br><span class="line">  this.historyList = Array.from(set)</span><br><span class="line">  // 调用 uni.setStorageSync(key, value) 将搜索历史记录持久化存储到本地</span><br><span class="line"><span class="addition">+  uni.setStorageSync(&#x27;kw&#x27;, JSON.stringify(this.historyList))</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 onLoad 生命周期函数中，加载本地存储的搜索历史记录：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">historyList</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(uni.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;kw&#x27;</span>) || <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="清空搜索历史记录"><a href="#清空搜索历史记录" class="headerlink" title="清空搜索历史记录"></a>清空搜索历史记录</h3><ol><li>为清空的图标按钮绑定 click 事件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;trash&quot;</span> <span class="attr">size</span>=<span class="string">&quot;17&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;cleanHistory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 methods 中定义 cleanHistory 处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空搜索历史记录</span></span><br><span class="line"><span class="title function_">cleanHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 清空 data 中保存的搜索历史</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">historyList</span> = []</span><br><span class="line">  <span class="comment">// 清空本地存储中记录的搜索历史</span></span><br><span class="line">  uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;kw&#x27;</span>, <span class="string">&#x27;[]&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="点击搜索历史跳转到商品列表页面"><a href="#点击搜索历史跳转到商品列表页面" class="headerlink" title="点击搜索历史跳转到商品列表页面"></a>点击搜索历史跳转到商品列表页面</h3><ol><li>为搜索历史的 Item 项绑定 click 事件处理函数：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uni-tag</span> <span class="attr">:text</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in historys&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;gotoGoodsList(item)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-tag</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 methods 中定义 gotoGoodsList 处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击跳转到商品列表页面</span></span><br><span class="line"><span class="title function_">gotoGoodsList</span>(<span class="params">kw</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/subpkg/goods_list/goods_list?query=&#x27;</span> + kw</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="商品列表"><a href="#商品列表" class="headerlink" title="商品列表"></a>商品列表</h1><h2 id="定义请求参数对象"><a href="#定义请求参数对象" class="headerlink" title="定义请求参数对象"></a>定义请求参数对象</h2><ol><li>为了方便发起请求获取商品列表的数据，我们要根据接口的要求，事先定义一个请求参数对象：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 请求参数对象</span></span><br><span class="line">    <span class="attr">queryObj</span>: &#123;</span><br><span class="line">      <span class="comment">// 查询关键词</span></span><br><span class="line">      <span class="attr">query</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="comment">// 商品分类Id</span></span><br><span class="line">      <span class="attr">cid</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      <span class="comment">// 页码值</span></span><br><span class="line">      <span class="attr">pagenum</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="comment">// 每页显示多少条数据</span></span><br><span class="line">      <span class="attr">pagesize</span>: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将页面跳转时携带的参数，转存到 queryObj 对象中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">// 将页面参数转存到 this.queryObj 对象中</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">queryObj</span>.<span class="property">query</span> = options.<span class="property">query</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">queryObj</span>.<span class="property">cid</span> = options.<span class="property">cid</span> || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为了方便开发商品分类页面，建议大家通过微信开发者工具，新建商品列表页面的编译模式：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230301004837.png" alt="20230301004837"></li></ol><h2 id="获取商品列表数据"><a href="#获取商品列表数据" class="headerlink" title="获取商品列表数据"></a>获取商品列表数据</h2><ol><li>在 data 中新增如下的数据节点：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 商品列表的数据</span></span><br><span class="line">    <span class="attr">goodsList</span>: [],</span><br><span class="line">    <span class="comment">// 总数量，用来实现分页</span></span><br><span class="line">    <span class="attr">total</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 onLoad 生命周期函数中，调用 getGoodsList 方法获取商品列表数据：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用获取商品列表数据的方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getGoodsList</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 methods 节点中，声明 getGoodsList 方法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 获取商品列表数据的方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getGoodsList</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 发起请求</span></span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/public/v1/goods/search&#x27;</span>, <span class="variable language_">this</span>.<span class="property">queryObj</span>)</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg()</span><br><span class="line">    <span class="comment">// 为数据赋值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goodsList</span> = res.<span class="property">message</span>.<span class="property">goods</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">message</span>.<span class="property">total</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="渲染商品列表结构"><a href="#渲染商品列表结构" class="headerlink" title="渲染商品列表结构"></a>渲染商品列表结构</h2><ol><li>在页面中，通过 v-for 指令，循环渲染出商品的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">v-for</span>=<span class="string">&quot;(goods, i) in goodsList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-item&quot;</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 商品左侧图片区域 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-item-left&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;goods.goods_small_logo || defaultPic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;goods-pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 商品右侧信息区域 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-item-right&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 商品标题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-name&quot;</span>&gt;</span>&#123;&#123;goods.goods_name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-info-box&quot;</span>&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 商品价格 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-price&quot;</span>&gt;</span>￥&#123;&#123;goods.goods_price&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>为了防止某些商品的图片不存在，需要在 data 中定义一个默认的图片：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 默认的空图片</span></span><br><span class="line">    <span class="attr">defaultPic</span>: <span class="string">&#x27;https://img3.doubanio.com/f/movie/8dd0c794499fe925ae2ae89ee30cd225750457b4/pics/movie/celebrity-default-medium.png&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>在页面渲染时按需使用：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;goods.goods_small_logo || defaultPic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;goods-pic&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化商品列表的 UI 结构：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.goods-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#f0f0f0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.goods-item-left</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.goods-pic</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.goods-item-right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.goods-name</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.goods-price</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">color</span>: <span class="number">#c00000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="把商品-item-项封装为自定义组件"><a href="#把商品-item-项封装为自定义组件" class="headerlink" title="把商品 item 项封装为自定义组件"></a>把商品 item 项封装为自定义组件</h2><ol><li>在 components 目录上鼠标右键，选择 新建组件</li><li>将 goods_list 页面中，关于商品 item 项相关的 UI 结构、样式、data 数据，封装到 my-goods 组件中：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;goods-item&quot;&gt;</span><br><span class="line">    &lt;!-- 商品左侧图片区域 --&gt;</span><br><span class="line">    &lt;view class=&quot;goods-item-left&quot;&gt;</span><br><span class="line">      &lt;image :src=&quot;goods.goods_small_logo || defaultPic&quot; class=&quot;goods-pic&quot;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;!-- 商品右侧信息区域 --&gt;</span><br><span class="line">    &lt;view class=&quot;goods-item-right&quot;&gt;</span><br><span class="line">      &lt;!-- 商品标题 --&gt;</span><br><span class="line">      &lt;view class=&quot;goods-name&quot;&gt;&#123;&#123;goods.goods_name&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;view class=&quot;goods-info-box&quot;&gt;</span><br><span class="line">        &lt;!-- 商品价格 --&gt;</span><br><span class="line">        &lt;view class=&quot;goods-price&quot;&gt;￥&#123;&#123;goods.goods_price&#125;&#125;&lt;/view&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    // 定义 props 属性，用来接收外界传递到当前组件的数据</span><br><span class="line">    props: &#123;</span><br><span class="line">      // 商品的信息对象</span><br><span class="line">      goods: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        defaul: &#123;&#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        // 默认的空图片</span><br><span class="line">        defaultPic: &#x27;https://img3.doubanio.com/f/movie/8dd0c794499fe925ae2ae89ee30cd225750457b4/pics/movie/celebrity-default-medium.png&#x27;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">  .goods-item &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding: 10px 5px;</span><br><span class="line">    border-bottom: 1px solid #f0f0f0;</span><br><span class="line"></span><br><span class="line">    .goods-item-left &#123;</span><br><span class="line">      margin-right: 5px;</span><br><span class="line"></span><br><span class="line">      .goods-pic &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        display: block;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .goods-item-right &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-direction: column;</span><br><span class="line">      justify-content: space-between;</span><br><span class="line"></span><br><span class="line">      .goods-name &#123;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .goods-price &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #c00000;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li>在 goods_list 组件中，循环渲染 my-goods 组件即可<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;goods-list&quot;&gt;</span><br><span class="line">  &lt;block v-for=&quot;(item, i) in goodsList&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">    &lt;!-- 为 my-goods 组件动态绑定 goods 属性的值 --&gt;</span><br><span class="line"><span class="addition">+    &lt;my-goods :goods=&quot;item&quot;&gt;&lt;/my-goods&gt;</span></span><br><span class="line">  &lt;/block&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用过滤器处理价格"><a href="#使用过滤器处理价格" class="headerlink" title="使用过滤器处理价格"></a>使用过滤器处理价格</h2><ol><li>在 my-goods 组件中，和 data 节点平级，声明 filters 过滤器节点如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filters</span>: &#123;</span><br><span class="line">  <span class="comment">// 把数字处理为带两位小数点的数字</span></span><br><span class="line">  <span class="title function_">tofixed</span>(<span class="params">num</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(num).<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在渲染商品价格的时候，通过管道符 | 调用过滤器：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 商品价格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-price&quot;</span>&gt;</span>￥&#123;&#123;goods.goods_price | tofixed&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="上拉加载更多"><a href="#上拉加载更多" class="headerlink" title="上拉加载更多"></a>上拉加载更多</h2><h3 id="初步实现上拉加载更多"><a href="#初步实现上拉加载更多" class="headerlink" title="初步实现上拉加载更多"></a>初步实现上拉加载更多</h3><ol><li>打开项目根目录中的 pages.json 配置文件，为 subPackages 分包中的 goods_list 页面配置上拉触底的距离：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> &quot;subPackages&quot;: [</span><br><span class="line">   &#123;</span><br><span class="line">     &quot;root&quot;: &quot;subpkg&quot;,</span><br><span class="line">     &quot;pages&quot;: [</span><br><span class="line">       &#123;</span><br><span class="line">         &quot;path&quot;: &quot;goods_detail/goods_detail&quot;,</span><br><span class="line">         &quot;style&quot;: &#123;&#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         &quot;path&quot;: &quot;goods_list/goods_list&quot;,</span><br><span class="line">         &quot;style&quot;: &#123;</span><br><span class="line"><span class="addition">+           &quot;onReachBottomDistance&quot;: 150</span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       &#123;</span><br><span class="line">         &quot;path&quot;: &quot;search/search&quot;,</span><br><span class="line">         &quot;style&quot;: &#123;&#125;</span><br><span class="line">       &#125;</span><br><span class="line">     ]</span><br><span class="line">   &#125;</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure></li><li>在 goods_list 页面中，和 methods 节点平级，声明 onReachBottom 事件处理函数，用来监听页面的上拉触底行为：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触底的事件</span></span><br><span class="line"><span class="title function_">onReachBottom</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 让页码值自增 +1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">queryObj</span>.<span class="property">pagenum</span> += <span class="number">1</span></span><br><span class="line">  <span class="comment">// 重新获取列表数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getGoodsList</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>改造 methods 中的 getGoodsList 函数，当列表数据请求成功之后，进行新旧数据的拼接处理：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取商品列表数据的方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getGoodsList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 发起请求</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/public/v1/goods/search&#x27;</span>, <span class="variable language_">this</span>.<span class="property">queryObj</span>)</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 为数据赋值：通过展开运算符的形式，进行新旧数据的拼接</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">goodsList</span> = [...<span class="variable language_">this</span>.<span class="property">goodsList</span>, ...res.<span class="property">message</span>.<span class="property">goods</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">message</span>.<span class="property">total</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="通过节流阀防止发起额外的请求"><a href="#通过节流阀防止发起额外的请求" class="headerlink" title="通过节流阀防止发起额外的请求"></a>通过节流阀防止发起额外的请求</h3><ol><li>在 data 中定义 isloading 节流阀如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    // 是否正在请求数据</span><br><span class="line"><span class="addition">+    isloading: false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 getGoodsList 方法，在请求数据前后，分别打开和关闭节流阀：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 获取商品列表数据的方法</span><br><span class="line">async getGoodsList() &#123;</span><br><span class="line">  // ** 打开节流阀</span><br><span class="line"><span class="addition">+  this.isloading = true</span></span><br><span class="line">  // 发起请求</span><br><span class="line">  const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/goods/search&#x27;, this.queryObj)</span><br><span class="line">  // ** 关闭节流阀</span><br><span class="line"><span class="addition">+  this.isloading = false</span></span><br><span class="line"></span><br><span class="line">  // 省略其它代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 onReachBottom 触底事件处理函数中，根据节流阀的状态，来决定是否发起请求：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 触底的事件</span><br><span class="line">onReachBottom() &#123;</span><br><span class="line">  // 判断是否正在请求其它数据，如果是，则不发起额外的请求</span><br><span class="line"><span class="addition">+  if (this.isloading) return</span></span><br><span class="line"></span><br><span class="line">  this.queryObj.pagenum += 1</span><br><span class="line">  this.getGoodsList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="判断数据是否加载完毕"><a href="#判断数据是否加载完毕" class="headerlink" title="判断数据是否加载完毕"></a>判断数据是否加载完毕</h3><ol><li>如果下面的公式成立，则证明没有下一页数据了：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当前的页码值 * 每页显示多少条数据 &gt;= 总数条数</span><br><span class="line">pagenum * pagesize &gt;= total</span><br></pre></td></tr></table></figure></li><li>修改 onReachBottom 事件处理函数如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 触底的事件</span><br><span class="line">onReachBottom() &#123;</span><br><span class="line">  // 判断是否还有下一页数据</span><br><span class="line"><span class="addition">+  if (this.queryObj.pagenum * this.queryObj.pagesize &gt;= this.total) return uni.$showMsg(&#x27;数据加载完毕！&#x27;)</span></span><br><span class="line"></span><br><span class="line">  // 判断是否正在请求其它数据，如果是，则不发起额外的请求</span><br><span class="line">  if (this.isloading) return</span><br><span class="line"></span><br><span class="line">  this.queryObj.pagenum += 1</span><br><span class="line">  this.getGoodsList()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="下拉刷新"><a href="#下拉刷新" class="headerlink" title="下拉刷新"></a>下拉刷新</h2><ol><li>在 pages.json 配置文件中，为当前的 goods_list 页面单独开启下拉刷新效果：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&quot;subPackages&quot;: [&#123;</span><br><span class="line">  &quot;root&quot;: &quot;subpkg&quot;,</span><br><span class="line">  &quot;pages&quot;: [&#123;</span><br><span class="line">    &quot;path&quot;: &quot;goods_detail/goods_detail&quot;,</span><br><span class="line">    &quot;style&quot;: &#123;&#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;path&quot;: &quot;goods_list/goods_list&quot;,</span><br><span class="line">    &quot;style&quot;: &#123;</span><br><span class="line">      &quot;onReachBottomDistance&quot;: 150,</span><br><span class="line"><span class="addition">+      &quot;enablePullDownRefresh&quot;: true,</span></span><br><span class="line"><span class="addition">+      &quot;backgroundColor&quot;: &quot;#F8F8F8&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    &quot;path&quot;: &quot;search/search&quot;,</span><br><span class="line">    &quot;style&quot;: &#123;&#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li>监听页面的 onPullDownRefresh 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下拉刷新的事件</span></span><br><span class="line"><span class="title function_">onPullDownRefresh</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 重置关键数据</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">queryObj</span>.<span class="property">pagenum</span> = <span class="number">1</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">total</span> = <span class="number">0</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isloading</span> = <span class="literal">false</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">goodsList</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 重新发起请求</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getGoodsList</span>(<span class="function">() =&gt;</span> uni.<span class="title function_">stopPullDownRefresh</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 getGoodsList 函数，接收 cb 回调函数并按需进行调用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 获取商品列表数据的方法</span><br><span class="line"><span class="addition">+async getGoodsList(cb) &#123;</span></span><br><span class="line">  this.isloading = true</span><br><span class="line">  const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/goods/search&#x27;, this.queryObj)</span><br><span class="line">  this.isloading = false</span><br><span class="line">  // 只要数据请求完毕，就立即按需调用 cb 回调函数</span><br><span class="line"><span class="addition">+  cb &amp;&amp; cb()</span></span><br><span class="line"></span><br><span class="line">  if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line">  this.goodsList = [...this.goodsList, ...res.message.goods]</span><br><span class="line">  this.total = res.message.total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="点击商品-item-项跳转到详情页面"><a href="#点击商品-item-项跳转到详情页面" class="headerlink" title="点击商品 item 项跳转到详情页面"></a>点击商品 item 项跳转到详情页面</h2><ol><li>将循环时的 block 组件修改为 view 组件，并绑定 click 点击事件处理函数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;goods-list&quot;&gt;</span><br><span class="line"><span class="addition">+  &lt;view v-for=&quot;(item, i) in goodsList&quot; :key=&quot;i&quot; @click=&quot;gotoDetail(item)&quot;&gt;</span></span><br><span class="line">    &lt;!-- 为 my-goods 组件动态绑定 goods 属性的值 --&gt;</span><br><span class="line">    &lt;my-goods :goods=&quot;item&quot;&gt;&lt;/my-goods&gt;</span><br><span class="line"><span class="addition">+  &lt;/view&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 methods 节点中，定义 gotoDetail 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击跳转到商品详情页面</span></span><br><span class="line"><span class="title function_">gotoDetail</span>(<span class="params">item</span>) &#123;</span><br><span class="line">  uni.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/subpkg/goods_detail/goods_detail?goods_id=&#x27;</span> + item.<span class="property">goods_id</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="商品详情"><a href="#商品详情" class="headerlink" title="商品详情"></a>商品详情</h1><h2 id="获取商品详情数据"><a href="#获取商品详情数据" class="headerlink" title="获取商品详情数据"></a>获取商品详情数据</h2><ol><li>在 data 中定义商品详情的数据节点：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// 商品详情对象</span></span><br><span class="line">    <span class="attr">goods_info</span>: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 onLoad 中获取商品的 Id，并调用请求商品详情的方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onLoad</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取商品 Id</span></span><br><span class="line">  <span class="keyword">const</span> goods_id = options.<span class="property">goods_id</span></span><br><span class="line">  <span class="comment">// 调用请求商品详情数据的方法</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getGoodsDetail</span>(goods_id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 methods 中声明 getGoodsDetail 方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 定义请求商品详情数据的方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getGoodsDetail</span>(<span class="params">goods_id</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> uni.<span class="property">$http</span>.<span class="title function_">get</span>(<span class="string">&#x27;/api/public/v1/goods/detail&#x27;</span>, &#123; goods_id &#125;)</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">meta</span>.<span class="property">status</span> !== <span class="number">200</span>) <span class="keyword">return</span> uni.$showMsg()</span><br><span class="line">    <span class="comment">// 为 data 中的数据赋值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goods_info</span> = res.<span class="property">message</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="渲染商品详情页的-UI-结构"><a href="#渲染商品详情页的-UI-结构" class="headerlink" title="渲染商品详情页的 UI 结构"></a>渲染商品详情页的 UI 结构</h2><h3 id="渲染轮播图区域"><a href="#渲染轮播图区域" class="headerlink" title="渲染轮播图区域"></a>渲染轮播图区域</h3><ol><li>使用 v-for 指令，循环渲染如下的轮播图 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 轮播图区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">swiper</span> <span class="attr">:indicator-dots</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:autoplay</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:interval</span>=<span class="string">&quot;3000&quot;</span> <span class="attr">:duration</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">:circular</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in goods_info.pics&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;item.pics_big&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化轮播图的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">swiper &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">750</span>rpx;</span><br><span class="line"></span><br><span class="line">  image &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现轮播图预览效果"><a href="#实现轮播图预览效果" class="headerlink" title="实现轮播图预览效果"></a>实现轮播图预览效果</h3><ol><li>为轮播图中的 image 图片绑定 click 事件处理函数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper-item v-for=&quot;(item, i) in goods_info.pics&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">  &lt;!-- 把当前点击的图片的索引，传递到 preview() 处理函数中 --&gt;</span><br><span class="line"><span class="addition">+  &lt;image :src=&quot;item.pics_big&quot; @click=&quot;preview(i)&quot;&gt;&lt;/image&gt;</span></span><br><span class="line">&lt;/swiper-item&gt;</span><br></pre></td></tr></table></figure></li><li>在 methods 中定义 preview 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实现轮播图的预览效果</span></span><br><span class="line"><span class="title function_">preview</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用 uni.previewImage() 方法预览图片</span></span><br><span class="line">  uni.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">    <span class="comment">// 预览时，默认显示图片的索引</span></span><br><span class="line">    <span class="attr">current</span>: i,</span><br><span class="line">    <span class="comment">// 所有图片 url 地址的数组</span></span><br><span class="line">    <span class="attr">urls</span>: <span class="variable language_">this</span>.<span class="property">goods_info</span>.<span class="property">pics</span>.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">pics_big</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染商品信息区域"><a href="#渲染商品信息区域" class="headerlink" title="渲染商品信息区域"></a>渲染商品信息区域</h3><ol><li>定义商品信息区域的 UI 结构如下：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 商品信息区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-info-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 商品价格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>￥&#123;&#123;goods_info.goods_price&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 信息主体区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-info-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 商品名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods-name&quot;</span>&gt;</span>&#123;&#123;goods_info.goods_name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 收藏 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;favi&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;star&quot;</span> <span class="attr">size</span>=<span class="string">&quot;18&quot;</span> <span class="attr">color</span>=<span class="string">&quot;gray&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 运费 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;yf&quot;</span>&gt;</span>快递：免运费<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化商品信息区域的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// 商品信息区域的样式</span><br><span class="line"><span class="selector-class">.goods-info-box</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.price</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c00000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.goods-info-body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.goods-name</span> &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">      <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    // 收藏区域</span><br><span class="line">    <span class="selector-class">.favi</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">      <span class="attribute">color</span>: gray;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 运费</span><br><span class="line">  <span class="selector-class">.yf</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染商品详情信息-rich-text"><a href="#渲染商品详情信息-rich-text" class="headerlink" title="渲染商品详情信息(rich-text)"></a>渲染商品详情信息(rich-text)</h3><ol><li>在页面结构中，使用 rich-text 组件，将带有 HTML 标签的内容，渲染为小程序的页面结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 商品详情信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rich-text</span> <span class="attr">:nodes</span>=<span class="string">&quot;goods_info.goods_introduce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rich-text</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>修改 getGoodsDetail 方法，从而解决图片底部 空白间隙 的问题：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义请求商品详情数据的方法</span><br><span class="line">async getGoodsDetail(goods_id) &#123;</span><br><span class="line">  const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/goods/detail&#x27;, &#123; goods_id &#125;)</span><br><span class="line">  if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line"></span><br><span class="line">  // 使用字符串的 replace() 方法，为 img 标签添加行内的 style 样式，从而解决图片底部空白间隙的问题</span><br><span class="line"><span class="addition">+  res.message.goods_introduce = res.message.goods_introduce.replace(/&lt;img /g, &#x27;&lt;img style=&quot;display:block;&quot; &#x27;)</span></span><br><span class="line">  this.goods_info = res.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>解决 .webp 格式图片在 ios 设备上无法正常显示的问题：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 定义请求商品详情数据的方法</span><br><span class="line">async getGoodsDetail(goods_id) &#123;</span><br><span class="line">  const &#123; data: res &#125; = await uni.$http.get(&#x27;/api/public/v1/goods/detail&#x27;, &#123; goods_id &#125;)</span><br><span class="line">  if (res.meta.status !== 200) return uni.$showMsg()</span><br><span class="line"></span><br><span class="line">  // 使用字符串的 replace() 方法，将 webp 的后缀名替换为 jpg 的后缀名</span><br><span class="line"><span class="addition">+  res.message.goods_introduce = res.message.goods_introduce.replace(/&lt;img /g, &#x27;&lt;img style=&quot;display:block;&quot; &#x27;).replace(/webp/g, &#x27;jpg&#x27;)</span></span><br><span class="line">  this.goods_info = res.message</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解决商品价格闪烁的问题"><a href="#解决商品价格闪烁的问题" class="headerlink" title="解决商品价格闪烁的问题"></a>解决商品价格闪烁的问题</h3><blockquote><p>导致问题的原因：在商品详情数据请求回来之前，data 中 goods_info 的值为 {}，因此初次渲染页面时，会导致 商品价格、商品名称 等闪烁的问题。</p></blockquote><p>解决方案：</p><p>判断 goods_info.goods_name 属性的值是否存在，从而使用 v-if 指令控制页面的显示与隐藏：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="addition">+  &lt;view v-if=&quot;goods_info.goods_name&quot;&gt;</span></span><br><span class="line">   &lt;!-- 省略其它代码 --&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="渲染详情页底部的商品导航区域"><a href="#渲染详情页底部的商品导航区域" class="headerlink" title="渲染详情页底部的商品导航区域"></a>渲染详情页底部的商品导航区域</h2><blockquote><p>bug: GoodsNav 组件不显示：<br>解决方案：把商品导航组件的代码放到轮播图的代码块的上面 style 区域的样式也是一样</p></blockquote><h3 id="渲染商品导航区域的-UI-结构"><a href="#渲染商品导航区域的-UI-结构" class="headerlink" title="渲染商品导航区域的 UI 结构"></a>渲染商品导航区域的 UI 结构</h3><blockquote><p>基于 uni-ui 提供的 GoodsNav 组件来实现商品导航区域的效果</p></blockquote><ol><li>在 data 中，通过 options 和 buttonGroup 两个数组，来声明商品导航组件的按钮配置对象：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    // 商品详情对象</span><br><span class="line">    goods_info: &#123;&#125;,</span><br><span class="line">    // 左侧按钮组的配置对象</span><br><span class="line"><span class="addition">+    options: [&#123;</span></span><br><span class="line"><span class="addition">+      icon: &#x27;shop&#x27;,</span></span><br><span class="line"><span class="addition">+      text: &#x27;店铺&#x27;</span></span><br><span class="line"><span class="addition">+    &#125;, &#123;</span></span><br><span class="line"><span class="addition">+      icon: &#x27;cart&#x27;,</span></span><br><span class="line"><span class="addition">+      text: &#x27;购物车&#x27;,</span></span><br><span class="line"><span class="addition">+      info: 2</span></span><br><span class="line"><span class="addition">+    &#125;],</span></span><br><span class="line"><span class="addition">+    // 右侧按钮组的配置对象</span></span><br><span class="line"><span class="addition">+    buttonGroup: [&#123;</span></span><br><span class="line"><span class="addition">+        text: &#x27;加入购物车&#x27;,</span></span><br><span class="line"><span class="addition">+        backgroundColor: &#x27;#ff0000&#x27;,</span></span><br><span class="line"><span class="addition">+        color: &#x27;#fff&#x27;</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        text: &#x27;立即购买&#x27;,</span></span><br><span class="line"><span class="addition">+        backgroundColor: &#x27;#ffa200&#x27;,</span></span><br><span class="line"><span class="addition">+        color: &#x27;#fff&#x27;</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在页面中使用 uni-goods-nav 商品导航组件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 商品导航组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;goods_nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- fill 控制右侧按钮的样式 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- options 左侧按钮的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- buttonGroup 右侧按钮的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- click 左侧按钮的点击事件处理函数 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- buttonClick 右侧按钮的点击事件处理函数 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-goods-nav</span> <span class="attr">:fill</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;options&quot;</span> <span class="attr">:buttonGroup</span>=<span class="string">&quot;buttonGroup&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span> @<span class="attr">buttonClick</span>=<span class="string">&quot;buttonClick&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化商品导航组件，使之固定在页面最底部：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.goods-detail-container</span> &#123;</span><br><span class="line">  // 给页面外层的容器，添加 <span class="number">50px</span> 的内<span class="attribute">padding</span>，</span><br><span class="line">  // 防止页面内容被底部的商品导航组件遮盖</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.goods_nav</span> &#123;</span><br><span class="line">  // 为商品导航组件添加固定定位</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="点击跳转到购物车页面"><a href="#点击跳转到购物车页面" class="headerlink" title="点击跳转到购物车页面"></a>点击跳转到购物车页面</h3><ol><li>点击商品导航组件左侧的按钮，会触发 uni-goods-nav 的 @click 事件处理函数，事件对象 e 中会包含当前点击的按钮相关的信息：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 左侧按钮的点击事件处理函数</span><br><span class="line">onClick(e) &#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>打印的按钮信息对象如下:<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230302174118.png" alt="20230302174118"></li><li>根据 e.content.text 的值，来决定进一步的操作：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 左侧按钮的点击事件处理函数</span><br><span class="line">onClick(e) &#123;</span><br><span class="line"><span class="addition">+  if (e.content.text === &#x27;购物车&#x27;) &#123;</span></span><br><span class="line">    // 切换到购物车页面</span><br><span class="line">    uni.switchTab(&#123;</span><br><span class="line">      url: &#x27;/pages/cart/cart&#x27;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="加入购物车功能"><a href="#加入购物车功能" class="headerlink" title="加入购物车功能"></a>加入购物车功能</h1><h2 id="配置-vuex"><a href="#配置-vuex" class="headerlink" title="配置 vuex"></a>配置 vuex</h2><ol><li>在项目根目录中创建 store 文件夹，专门用来存放 vuex 相关的模块</li><li>在 store 目录上鼠标右键，选择 新建 -&gt; js文件，新建 store.js 文件</li><li>在 store.js 中按照如下 4 个步骤初始化 Store 的实例对象：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 Vue 和 Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将 Vuex 安装为 Vue 的插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 创建 Store 的实例对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="comment">// TODO：挂载 store 模块</span></span><br><span class="line">  <span class="attr">modules</span>: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 向外共享 Store 的实例对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure></li><li>在 main.js 中导入 store 实例对象并挂载到 Vue 的实例上：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 1. 导入 store 的实例对象</span><br><span class="line"><span class="addition">+import store from &#x27;./store/store.js&#x27;</span></span><br><span class="line"></span><br><span class="line">// 省略其它代码...</span><br><span class="line"></span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">  ...App,</span><br><span class="line">  // 2. 将 store 挂载到 Vue 实例上</span><br><span class="line"><span class="addition">+  store,</span></span><br><span class="line">&#125;)</span><br><span class="line">app.$mount()</span><br></pre></td></tr></table></figure></li></ol><h2 id="创建购物车的-store-模块"><a href="#创建购物车的-store-模块" class="headerlink" title="创建购物车的 store 模块"></a>创建购物车的 store 模块</h2><ol><li>在 store 目录上鼠标右键，选择 新建 -&gt; js文件，创建购物车的 store 模块，命名为 cart.js</li><li>在 cart.js 中，初始化如下的 vuex 模块：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 为当前模块开启命名空间</span></span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块的 state 数据</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 购物车的数组，用来存储购物车中每个商品的信息对象</span></span><br><span class="line">    <span class="comment">// 每个商品的信息对象，都包含如下 6 个属性：</span></span><br><span class="line">    <span class="comment">// &#123; goods_id, goods_name, goods_price, goods_count, goods_small_logo, goods_state &#125;</span></span><br><span class="line">    <span class="attr">cart</span>: [],</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块的 mutations 方法</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模块的 getters 属性</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 store/store.js 模块中，导入并挂载购物车的 vuex 模块，示例代码如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">// 1. 导入购物车的 vuex 模块</span><br><span class="line"><span class="addition">+import moduleCart from &#x27;./cart.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  // TODO：挂载 store 模块</span><br><span class="line">  modules: &#123;</span><br><span class="line">    // 2. 挂载购物车的 vuex 模块，模块内成员的访问路径被调整为 m_cart，例如：</span><br><span class="line">    //    购物车模块中 cart 数组的访问路径是 m_cart/cart</span><br><span class="line"><span class="addition">+    m_cart: moduleCart,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">export default store</span><br></pre></td></tr></table></figure></li></ol><h2 id="在商品详情页中使用-Store-中的数据"><a href="#在商品详情页中使用-Store-中的数据" class="headerlink" title="在商品详情页中使用 Store 中的数据"></a>在商品详情页中使用 Store 中的数据</h2><ol><li>在 goods_detail.vue 页面中，修改 <code>&lt;script&gt;&lt;/script&gt;</code> 标签中的代码如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 从 vuex 中按需导出 mapState 辅助方法</span><br><span class="line"><span class="addition">+import &#123; mapState &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"><span class="addition">+  computed: &#123;</span></span><br><span class="line"><span class="addition">+    // 调用 mapState 方法，把 m_cart 模块中的 cart 数组映射到当前页面中，作为计算属性来使用</span></span><br><span class="line"><span class="addition">+    // ...mapState(&#x27;模块的名称&#x27;, [&#x27;要映射的数据名称1&#x27;, &#x27;要映射的数据名称2&#x27;])</span></span><br><span class="line"><span class="addition">+    ...mapState(&#x27;m_cart&#x27;, [&#x27;cart&#x27;]),</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  // 省略其它代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在页面渲染时，可以直接使用映射过来的数据，例如：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 运费 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;yf&quot;</span>&gt;</span>快递：免运费 -- &#123;&#123;cart.length&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="实现加入购物车的功能"><a href="#实现加入购物车的功能" class="headerlink" title="实现加入购物车的功能"></a>实现加入购物车的功能</h2><ol><li>在 store 目录下的 cart.js 模块中，封装一个将商品信息加入购物车的 mutations 方法，命名为 addToCart。示例代码如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // 为当前模块开启命名空间</span><br><span class="line">  namespaced: true,</span><br><span class="line"></span><br><span class="line">  // 模块的 state 数据</span><br><span class="line">  state: () =&gt; (&#123;</span><br><span class="line">    // 购物车的数组，用来存储购物车中每个商品的信息对象</span><br><span class="line">    // 每个商品的信息对象，都包含如下 6 个属性：</span><br><span class="line">    // &#123; goods_id, goods_name, goods_price, goods_count, goods_small_logo, goods_state &#125;</span><br><span class="line">    cart: [],</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  // 模块的 mutations 方法</span><br><span class="line">  mutations: &#123;</span><br><span class="line"><span class="addition">+    addToCart(state, goods) &#123;</span></span><br><span class="line"><span class="addition">+      // 根据提交的商品的Id，查询购物车中是否存在这件商品</span></span><br><span class="line"><span class="addition">+      // 如果不存在，则 findResult 为 undefined；否则，为查找到的商品信息对象</span></span><br><span class="line"><span class="addition">+      const findResult = state.cart.find((x) =&gt; x.goods_id === goods.goods_id)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+      if (!findResult) &#123;</span></span><br><span class="line"><span class="addition">+        // 如果购物车中没有这件商品，则直接 push</span></span><br><span class="line"><span class="addition">+        state.cart.push(goods)</span></span><br><span class="line"><span class="addition">+      &#125; else &#123;</span></span><br><span class="line"><span class="addition">+        // 如果购物车中有这件商品，则只更新数量即可</span></span><br><span class="line"><span class="addition">+        findResult.goods_count++</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 模块的 getters 属性</span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在商品详情页面中，通过 mapMutations 这个辅助方法，把 vuex 中 m_cart 模块下的 addToCart 方法映射到当前页面：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 按需导入 mapMutations 这个辅助方法</span><br><span class="line"><span class="addition">+import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 把 m_cart 模块中的 addToCart 方法映射到当前页面使用</span><br><span class="line"><span class="addition">+    ...mapMutations(&#x27;m_cart&#x27;, [&#x27;addToCart&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为商品导航组件 uni-goods-nav 绑定 @buttonClick=”buttonClick” 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 右侧按钮的点击事件处理函数</span></span><br><span class="line"><span class="title function_">buttonClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">   <span class="comment">// 1. 判断是否点击了 加入购物车 按钮</span></span><br><span class="line">   <span class="keyword">if</span> (e.<span class="property">content</span>.<span class="property">text</span> === <span class="string">&#x27;加入购物车&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2. 组织一个商品的信息对象</span></span><br><span class="line">      <span class="keyword">const</span> goods = &#123;</span><br><span class="line">         <span class="attr">goods_id</span>: <span class="variable language_">this</span>.<span class="property">goods_info</span>.<span class="property">goods_id</span>,       <span class="comment">// 商品的Id</span></span><br><span class="line">         <span class="attr">goods_name</span>: <span class="variable language_">this</span>.<span class="property">goods_info</span>.<span class="property">goods_name</span>,   <span class="comment">// 商品的名称</span></span><br><span class="line">         <span class="attr">goods_price</span>: <span class="variable language_">this</span>.<span class="property">goods_info</span>.<span class="property">goods_price</span>, <span class="comment">// 商品的价格</span></span><br><span class="line">         <span class="attr">goods_count</span>: <span class="number">1</span>,                           <span class="comment">// 商品的数量</span></span><br><span class="line">         <span class="attr">goods_small_logo</span>: <span class="variable language_">this</span>.<span class="property">goods_info</span>.<span class="property">goods_small_logo</span>, <span class="comment">// 商品的图片</span></span><br><span class="line">         <span class="attr">goods_state</span>: <span class="literal">true</span>                         <span class="comment">// 商品的勾选状态</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3. 通过 this 调用映射过来的 addToCart 方法，把商品信息对象存储到购物车中</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">addToCart</span>(goods)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="动态统计购物车中商品的总数量"><a href="#动态统计购物车中商品的总数量" class="headerlink" title="动态统计购物车中商品的总数量"></a>动态统计购物车中商品的总数量</h2><ol><li>在 cart.js 模块中，在 getters 节点下定义一个 total 方法，用来统计购物车中商品的总数量：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模块的 getters 属性</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">   <span class="comment">// 统计购物车中商品的总数量</span></span><br><span class="line">   <span class="title function_">total</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> c = <span class="number">0</span></span><br><span class="line">      <span class="comment">// 循环统计商品的数量，累加到变量 c 中</span></span><br><span class="line">      state.<span class="property">cart</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">goods</span> =&gt;</span> c += goods.<span class="property">goods_count</span>)</span><br><span class="line">      <span class="keyword">return</span> c</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在商品详情页面的 script 标签中，按需导入 mapGetters 方法并进行使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 按需导入 mapGetters 这个辅助方法</span><br><span class="line"><span class="addition">+import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 把 m_cart 模块中名称为 total 的 getter 映射到当前页面中使用</span><br><span class="line"><span class="addition">+    ...mapGetters(&#x27;m_cart&#x27;, [&#x27;total&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过 watch 侦听器，监听计算属性 total 值的变化，从而动态为购物车按钮的徽标赋值：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 1. 监听 total 值的变化，通过第一个形参得到变化后的新值</span></span><br><span class="line">    <span class="title function_">total</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="comment">// 2. 通过数组的 find() 方法，找到购物车按钮的配置对象</span></span><br><span class="line">      <span class="keyword">const</span> findResult = <span class="variable language_">this</span>.<span class="property">options</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="property">text</span> === <span class="string">&#x27;购物车&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (findResult) &#123;</span><br><span class="line">        <span class="comment">// 3. 动态为购物车按钮的 info 属性赋值</span></span><br><span class="line">        findResult.<span class="property">info</span> = newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="持久化存储购物车中的商品"><a href="#持久化存储购物车中的商品" class="headerlink" title="持久化存储购物车中的商品"></a>持久化存储购物车中的商品</h2><ol><li>在 cart.js 模块中，声明一个叫做 saveToStorage 的 mutations 方法，此方法负责将购物车中的数据持久化存储到本地：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将购物车中的数据持久化存储到本地</span></span><br><span class="line"><span class="title function_">saveToStorage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">   uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;cart&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">cart</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 mutations 节点中的 addToCart 方法，在处理完商品信息后，调用步骤 1 中定义的 saveToStorage 方法：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">addToCart(state, goods) &#123;</span><br><span class="line">   // 根据提交的商品的Id，查询购物车中是否存在这件商品</span><br><span class="line">   // 如果不存在，则 findResult 为 undefined；否则，为查找到的商品信息对象</span><br><span class="line">   const findResult = state.cart.find(x =&gt; x.goods_id <span class="comment">=== goods.goods_id)</span></span><br><span class="line"></span><br><span class="line">   if (!findResult) &#123;</span><br><span class="line">      // 如果购物车中没有这件商品，则直接 push</span><br><span class="line">      state.cart.push(goods)</span><br><span class="line">   &#125; else &#123;</span><br><span class="line">      // 如果购物车中有这件商品，则只更新数量即可</span><br><span class="line">      findResult.goods_count++</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   // 通过 commit 方法，调用 m_cart 命名空间下的 saveToStorage 方法</span><br><span class="line"><span class="addition">+   this.commit(&#x27;m_cart/saveToStorage&#x27;)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 cart.js 模块中的 state 函数，读取本地存储的购物车数据，对 cart 数组进行初始化：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 模块的 state 数据</span><br><span class="line">state: () =&gt; (&#123;</span><br><span class="line">   // 购物车的数组，用来存储购物车中每个商品的信息对象</span><br><span class="line">   // 每个商品的信息对象，都包含如下 6 个属性：</span><br><span class="line">   // &#123; goods_id, goods_name, goods_price, goods_count, goods_small_logo, goods_state &#125;</span><br><span class="line"><span class="addition">+   cart: JSON.parse(uni.getStorageSync(&#x27;cart&#x27;) || &#x27;[]&#x27;)</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="优化商品详情页的-total-侦听器"><a href="#优化商品详情页的-total-侦听器" class="headerlink" title="优化商品详情页的 total 侦听器"></a>优化商品详情页的 total 侦听器</h2><ol><li>使用普通函数的形式定义的 watch 侦听器，在页面首次加载后不会被调用。因此导致了商品详情页在首次加载完毕之后，不会将商品的总数量显示到商品导航区域</li><li>为了防止这个上述问题，可以使用对象的形式来定义 watch 侦听器（详细文档请参考 Vue 官方的 watch 侦听器教程），示例代码如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">   // 定义 total 侦听器，指向一个配置对象</span><br><span class="line">   total: &#123;</span><br><span class="line">      // handler 属性用来定义侦听器的 function 处理函数</span><br><span class="line"><span class="addition">+      handler(newVal) &#123;</span></span><br><span class="line">         const findResult = this.options.find(x =&gt; x.text <span class="comment">=== &#x27;购物车&#x27;)</span></span><br><span class="line">         if (findResult) &#123;</span><br><span class="line">            findResult.info = newVal</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      // immediate 属性用来声明此侦听器，是否在页面初次加载完毕后立即调用</span><br><span class="line"><span class="addition">+      immediate: true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="动态为-tabBar-页面设置数字徽标"><a href="#动态为-tabBar-页面设置数字徽标" class="headerlink" title="动态为 tabBar 页面设置数字徽标"></a>动态为 tabBar 页面设置数字徽标</h2><blockquote><p>需求描述：从商品详情页面导航到购物车页面之后，需要为 tabBar 中的购物车动态设置数字徽标。</p></blockquote><ol><li>把 Store 中的 total 映射到 cart.vue 中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 按需导入 mapGetters 这个辅助方法</span><br><span class="line"><span class="addition">+import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 将 m_cart 模块中的 total 映射为当前页面的计算属性</span><br><span class="line"><span class="addition">+    ...mapGetters(&#x27;m_cart&#x27;, [&#x27;total&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在页面刚显示出来的时候，立即调用 setBadge 方法，为 tabBar 设置数字徽标：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// 在页面刚展示的时候，设置数字徽标</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">setBadge</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 methods 节点中，声明 setBadge 方法如下，通过 uni.setTabBarBadge() 为 tabBar 设置数字徽标：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">   setBadge() &#123;</span><br><span class="line">      // 调用 uni.setTabBarBadge() 方法，为购物车设置右上角的徽标</span><br><span class="line"><span class="addition">+      uni.setTabBarBadge(&#123;</span></span><br><span class="line"><span class="addition">+         index: 2, // 索引</span></span><br><span class="line"><span class="addition">+         text: this.total + &#x27;&#x27; // 注意：text 的值必须是字符串，不能是数字</span></span><br><span class="line"><span class="addition">+      &#125;)</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="将设置-tabBar-徽标的代码抽离为-mixins"><a href="#将设置-tabBar-徽标的代码抽离为-mixins" class="headerlink" title="将设置 tabBar 徽标的代码抽离为 mixins"></a>将设置 tabBar 徽标的代码抽离为 mixins</h2><blockquote><p>注意：除了要在 cart.vue 页面中设置购物车的数字徽标，还需要在其它 3 个 tabBar 页面中，为购物车设置数字徽标。<br>此时可以使用 Vue 提供的 mixins 特性，提高代码的可维护性。</p></blockquote><ol><li>在项目根目录中新建 mixins 文件夹，并在 mixins 文件夹之下新建 tabbar-badge.js 文件，用来把设置 tabBar 徽标的代码封装为一个 mixin 文件：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出一个 mixin 对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;m_cart&#x27;</span>, [<span class="string">&#x27;total&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">onShow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在页面刚展示的时候，设置数字徽标</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setBadge</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">setBadge</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 调用 uni.setTabBarBadge() 方法，为购物车设置右上角的徽标</span></span><br><span class="line">      uni.<span class="title function_">setTabBarBadge</span>(&#123;</span><br><span class="line">        <span class="attr">index</span>: <span class="number">2</span>,</span><br><span class="line">        <span class="attr">text</span>: <span class="variable language_">this</span>.<span class="property">total</span> + <span class="string">&#x27;&#x27;</span>, <span class="comment">// 注意：text 的值必须是字符串，不能是数字</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 home.vue，cate.vue，cart.vue，my.vue 这 4 个 tabBar 页面的源代码，分别导入 @/mixins/tabbar-badge.js 模块并进行使用：（目的是从任何页面进入都会调用徽标的代码）<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 导入自己封装的 mixin 模块</span><br><span class="line"><span class="addition">+import badgeMix from &#x27;@/mixins/tabbar-badge.js&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 将 badgeMix 混入到当前的页面中进行使用</span><br><span class="line"><span class="addition">+  mixins: [badgeMix],</span></span><br><span class="line">  // 省略其它代码...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="购物车页面"><a href="#购物车页面" class="headerlink" title="购物车页面"></a>购物车页面</h1><h2 id="商品列表区域"><a href="#商品列表区域" class="headerlink" title="商品列表区域"></a>商品列表区域</h2><h3 id="渲染购物车商品列表的标题区域"><a href="#渲染购物车商品列表的标题区域" class="headerlink" title="渲染购物车商品列表的标题区域"></a>渲染购物车商品列表的标题区域</h3><ol><li>定义如下的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 购物车商品列表的标题区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;cart-title&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 左侧的图标 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;shop&quot;</span> <span class="attr">size</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 描述文本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;cart-title-text&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.cart-title</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#efefef</span>;</span><br><span class="line">  <span class="selector-class">.cart-title-text</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染商品列表区域的基本结构"><a href="#渲染商品列表区域的基本结构" class="headerlink" title="渲染商品列表区域的基本结构"></a>渲染商品列表区域的基本结构</h3><ol><li>通过 mapState 辅助函数，将 Store 中的 cart 数组映射到当前页面中使用<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import badgeMix from &#x27;@/mixins/tabbar-badge.js&#x27;</span></span><br><span class="line">// 按需导入 mapState 这个辅助函数</span><br><span class="line">import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [badgeMix],</span><br><span class="line"><span class="addition">+  computed: &#123;</span></span><br><span class="line"><span class="addition">+    // 将 m_cart 模块中的 cart 数组映射到当前页面中使用</span></span><br><span class="line"><span class="addition">+    ...mapState(&#x27;m_cart&#x27;, [&#x27;cart&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 UI 结构中，通过 v-for 指令循环渲染自定义的 my-goods 组件：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 商品列表区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">block</span> <span class="attr">v-for</span>=<span class="string">&quot;(goods, i) in cart&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-goods</span> <span class="attr">:goods</span>=<span class="string">&quot;goods&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-goods</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="为-my-goods-组件封装-radio-勾选状态"><a href="#为-my-goods-组件封装-radio-勾选状态" class="headerlink" title="为 my-goods 组件封装 radio 勾选状态"></a>为 my-goods 组件封装 radio 勾选状态</h3><ol><li>打开 my-goods.vue 组件的源代码，为商品的左侧图片区域添加 radio 组件：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品左侧图片区域 --&gt;</span><br><span class="line">&lt;view class=&quot;goods-item-left&quot;&gt;</span><br><span class="line"><span class="addition">+  &lt;radio checked color=&quot;#C00000&quot;&gt;&lt;/radio&gt;</span></span><br><span class="line">  &lt;image :src=&quot;goods.goods_small_logo || defaultPic&quot; class=&quot;goods-pic&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>给类名为 goods-item-left 的 view 组件添加样式，实现 radio 组件和 image 组件的左右布局：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.goods-item-left &#123;</span><br><span class="line">  margin-right: 5px;</span><br><span class="line"><span class="addition">+  display: flex;</span></span><br><span class="line"><span class="addition">+  justify-content: space-between;</span></span><br><span class="line"><span class="addition">+  align-items: center;</span></span><br><span class="line"></span><br><span class="line">  .goods-pic &#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    display: block;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>封装名称为 showRadio 的 props 属性，来控制当前组件中是否显示 radio 组件：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // 定义 props 属性，用来接收外界传递到当前组件的数据</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 商品的信息对象</span><br><span class="line">    goods: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 是否展示图片左侧的 radio</span><br><span class="line"><span class="addition">+    showRadio: &#123;</span></span><br><span class="line"><span class="addition">+      type: Boolean,</span></span><br><span class="line"><span class="addition">+      // 如果外界没有指定 show-radio 属性的值，则默认不展示 radio 组件</span></span><br><span class="line"><span class="addition">+      default: false,</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 v-if 指令控制 radio 组件的按需展示：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品左侧图片区域 --&gt;</span><br><span class="line">&lt;view class=&quot;goods-item-left&quot;&gt;</span><br><span class="line">  &lt;!-- 使用 v-if 指令控制 radio 组件的显示与隐藏 --&gt;</span><br><span class="line"><span class="addition">+  &lt;radio checked color=&quot;#C00000&quot; v-if=&quot;showRadio&quot;&gt;&lt;/radio&gt;</span></span><br><span class="line">  &lt;image :src=&quot;goods.goods_small_logo || defaultPic&quot; class=&quot;goods-pic&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 cart.vue 页面中的商品列表区域，指定 :show-radio=”true” 属性，从而显示 radio 组件：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品列表区域 --&gt;</span><br><span class="line">&lt;block v-for=&quot;(goods, i) in cart&quot; :key=&quot;i&quot;&gt;</span><br><span class="line"><span class="addition">+  &lt;my-goods :goods=&quot;goods&quot; :show-radio=&quot;true&quot;&gt;&lt;/my-goods&gt;</span></span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure></li><li>修改 my-goods.vue 组件，动态为 radio 绑定选中状态：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品左侧图片区域 --&gt;</span><br><span class="line">&lt;view class=&quot;goods-item-left&quot;&gt;</span><br><span class="line">  &lt;!-- 存储在购物车中的商品，包含 goods_state 属性，表示商品的勾选状态 --&gt;</span><br><span class="line"><span class="addition">+  &lt;radio :checked=&quot;goods.goods_state&quot; color=&quot;#C00000&quot; v-if=&quot;showRadio&quot;&gt;&lt;/radio&gt;</span></span><br><span class="line">  &lt;image :src=&quot;goods.goods_small_logo || defaultPic&quot; class=&quot;goods-pic&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="为-my-goods-组件封装-radio-change-事件"><a href="#为-my-goods-组件封装-radio-change-事件" class="headerlink" title="为 my-goods 组件封装 radio-change 事件"></a>为 my-goods 组件封装 radio-change 事件</h3><ol><li>当用户点击 radio 组件，希望修改当前商品的勾选状态，此时用户可以为 my-goods 组件绑定 @radio-change 事件，从而获取当前商品的 goods_id 和 goods_state：<br>定义 radioChangeHandler 事件处理函数如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 商品的勾选状态发生了变化</span></span><br><span class="line">  <span class="title function_">radioChangeHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// 输出得到的数据 -&gt; &#123;goods_id: 395, goods_state: false&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件中，为 radio 组件绑定 @click 事件处理函数如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品左侧图片区域 --&gt;</span><br><span class="line">&lt;view class=&quot;goods-item-left&quot;&gt;</span><br><span class="line"><span class="addition">+  &lt;radio :checked=&quot;goods.goods_state&quot; color=&quot;#C00000&quot; v-if=&quot;showRadio&quot; @click=&quot;radioClickHandler&quot;&gt;&lt;/radio&gt;</span></span><br><span class="line">  &lt;image :src=&quot;goods.goods_small_logo || defaultPic&quot; class=&quot;goods-pic&quot;&gt;&lt;/image&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件的 methods 节点中，定义 radioClickHandler 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// radio 组件的点击事件处理函数</span></span><br><span class="line">  <span class="title function_">radioClickHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 this.$emit() 触发外界通过 @ 绑定的 radio-change 事件，</span></span><br><span class="line">    <span class="comment">// 同时把商品的 Id 和 勾选状态 作为参数传递给 radio-change 事件处理函数</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;radio-change&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 商品的 Id</span></span><br><span class="line">      <span class="attr">goods_id</span>: <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">goods_id</span>,</span><br><span class="line">      <span class="comment">// 商品最新的勾选状态</span></span><br><span class="line">      <span class="attr">goods_state</span>: !<span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">goods_state</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改购物车中商品的勾选状态"><a href="#修改购物车中商品的勾选状态" class="headerlink" title="修改购物车中商品的勾选状态"></a>修改购物车中商品的勾选状态</h3><ol><li>在 store/cart.js 模块中，声明如下的 mutations 方法，用来修改对应商品的勾选状态：</li><li>在 cart.vue 页面中，导入 mapMutations 这个辅助函数，从而将需要的 mutations 方法映射到当前页面中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import badgeMix from &#x27;@/mixins/tabbar-badge.js&#x27;</span><br><span class="line"><span class="addition">+import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [badgeMix],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(&#x27;m_cart&#x27;, [&#x27;cart&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="addition">+    ...mapMutations(&#x27;m_cart&#x27;, [&#x27;updateGoodsState&#x27;]),</span></span><br><span class="line">    // 商品的勾选状态发生了变化</span><br><span class="line">    radioChangeHandler(e) &#123;</span><br><span class="line"><span class="addition">+      this.updateGoodsState(e)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="为-my-goods-组件封装-NumberBox"><a href="#为-my-goods-组件封装-NumberBox" class="headerlink" title="为 my-goods 组件封装 NumberBox"></a>为 my-goods 组件封装 NumberBox</h3><blockquote><p>注意：NumberBox 组件是 uni-ui 提供的</p></blockquote><ol><li>修改 my-goods.vue 组件的源代码，在类名为 goods-info-box 的 view 组件内部渲染 NumberBox 组件的基本结构：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;goods-info-box&quot;&gt;</span><br><span class="line">  &lt;!-- 商品价格 --&gt;</span><br><span class="line">  &lt;view class=&quot;goods-price&quot;&gt;￥&#123;&#123;goods.goods_price | tofixed&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;!-- 商品数量 --&gt;</span><br><span class="line"><span class="addition">+  &lt;uni-number-box :min=&quot;1&quot;&gt;&lt;/uni-number-box&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>美化页面的结构：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.goods-item-right &#123;</span><br><span class="line">  display: flex;</span><br><span class="line"><span class="addition">+  flex: 1;</span></span><br><span class="line">  flex-direction: column;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line"></span><br><span class="line">  .goods-name &#123;</span><br><span class="line">    font-size: 13px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  .goods-info-box &#123;</span></span><br><span class="line"><span class="addition">+    display: flex;</span></span><br><span class="line"><span class="addition">+    align-items: center;</span></span><br><span class="line"><span class="addition">+    justify-content: space-between;</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line"></span><br><span class="line">  .goods-price &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    color: #c00000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件中，动态为 NumberBox 组件绑定商品的数量值：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;goods-info-box&quot;&gt;</span><br><span class="line">  &lt;!-- 商品价格 --&gt;</span><br><span class="line">  &lt;view class=&quot;goods-price&quot;&gt;￥&#123;&#123;goods.goods_price | tofixed&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;!-- 商品数量 --&gt;</span><br><span class="line"><span class="addition">+  &lt;uni-number-box :min=&quot;1&quot; :value=&quot;goods.goods_count&quot;&gt;&lt;/uni-number-box&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件中，封装名称为 showNum 的 props 属性，来控制当前组件中是否显示 NumberBox 组件：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // 定义 props 属性，用来接收外界传递到当前组件的数据</span><br><span class="line">  props: &#123;</span><br><span class="line">    // 商品的信息对象</span><br><span class="line">    goods: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      defaul: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 是否展示图片左侧的 radio</span><br><span class="line">    showRadio: &#123;</span><br><span class="line">      type: Boolean,</span><br><span class="line">      // 如果外界没有指定 show-radio 属性的值，则默认不展示 radio 组件</span><br><span class="line">      default: false,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 是否展示价格右侧的 NumberBox 组件</span><br><span class="line"><span class="addition">+    showNum: &#123;</span></span><br><span class="line"><span class="addition">+      type: Boolean,</span></span><br><span class="line"><span class="addition">+      default: false,</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件中，使用 v-if 指令控制 NumberBox 组件的按需展示：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;goods-info-box&quot;&gt;</span><br><span class="line">  &lt;!-- 商品价格 --&gt;</span><br><span class="line">  &lt;view class=&quot;goods-price&quot;&gt;￥&#123;&#123;goods.goods_price | tofixed&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;!-- 商品数量 --&gt;</span><br><span class="line"><span class="addition">+  &lt;uni-number-box :min=&quot;1&quot; :value=&quot;goods.goods_count&quot; @change=&quot;numChangeHandler&quot; v-if=&quot;showNum&quot;&gt;&lt;/uni-number-box&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 cart.vue 页面中的商品列表区域，指定 :show-num=”true” 属性，从而显示 NumberBox 组件：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品列表区域 --&gt;</span><br><span class="line">&lt;block v-for=&quot;(goods, i) in cart&quot; :key=&quot;i&quot;&gt;</span><br><span class="line"><span class="addition">+  &lt;my-goods :goods=&quot;goods&quot; :show-radio=&quot;true&quot; :show-num=&quot;true&quot; @radio-change=&quot;radioChangeHandler&quot;&gt;&lt;/my-goods&gt;</span></span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="为-my-goods-组件封装-num-change-事件"><a href="#为-my-goods-组件封装-num-change-事件" class="headerlink" title="为 my-goods 组件封装 num-change 事件"></a>为 my-goods 组件封装 num-change 事件</h3><ol><li>当用户修改了 NumberBox 的值以后，希望将最新的商品数量更新到购物车中，此时用户可以为 my-goods 组件绑定 @num-change 事件，从而获取当前商品的 goods_id 和 goods_count：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品列表区域 --&gt;</span><br><span class="line">&lt;block v-for=&quot;(goods, i) in cart&quot; :key=&quot;i&quot;&gt;</span><br><span class="line"><span class="addition">+  &lt;my-goods :goods=&quot;goods&quot; :show-radio=&quot;true&quot; :show-num=&quot;true&quot; @radio-change=&quot;radioChangeHandler&quot; @num-change=&quot;numberChangeHandler&quot;&gt;&lt;/my-goods&gt;</span></span><br><span class="line">&lt;/block&gt;</span><br></pre></td></tr></table></figure>定义 numberChangeHandler 事件处理函数如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 商品的数量发生了变化</span></span><br><span class="line"><span class="title function_">numberChangeHandler</span>(<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件中，为 uni-number-box 组件绑定 @change 事件处理函数如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view class=&quot;goods-info-box&quot;&gt;</span><br><span class="line">  &lt;!-- 商品价格 --&gt;</span><br><span class="line">  &lt;view class=&quot;goods-price&quot;&gt;￥&#123;&#123;goods.goods_price | tofixed&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;!-- 商品数量 --&gt;</span><br><span class="line"><span class="addition">+  &lt;uni-number-box :min=&quot;1&quot; :value=&quot;goods.goods_count&quot; @change=&quot;numChangeHandler&quot;&gt;&lt;/uni-number-box&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 my-goods.vue 组件的 methods 节点中，定义 numChangeHandler 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// NumberBox 组件的 change 事件处理函数</span></span><br><span class="line">  <span class="title function_">numChangeHandler</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="comment">// 通过 this.$emit() 触发外界通过 @ 绑定的 num-change 事件</span></span><br><span class="line">    <span class="variable language_">this</span>.$emit(<span class="string">&#x27;num-change&#x27;</span>, &#123;</span><br><span class="line">      <span class="comment">// 商品的 Id</span></span><br><span class="line">      <span class="attr">goods_id</span>: <span class="variable language_">this</span>.<span class="property">goods</span>.<span class="property">goods_id</span>,</span><br><span class="line">      <span class="comment">// 商品的最新数量</span></span><br><span class="line">      <span class="attr">goods_count</span>: +val</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改购物车中商品的数量"><a href="#修改购物车中商品的数量" class="headerlink" title="修改购物车中商品的数量"></a>修改购物车中商品的数量</h3><ol><li>在 store/cart.js 模块中，声明如下的 mutations 方法，用来修改对应商品的数量：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新购物车中商品的数量</span></span><br><span class="line"><span class="title function_">updateGoodsCount</span>(<span class="params">state, goods</span>) &#123;</span><br><span class="line">  <span class="comment">// 根据 goods_id 查询购物车中对应商品的信息对象</span></span><br><span class="line">  <span class="keyword">const</span> findResult = state.<span class="property">cart</span>.<span class="title function_">find</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">goods_id</span> === goods.<span class="property">goods_id</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(findResult) &#123;</span><br><span class="line">    <span class="comment">// 更新对应商品的数量</span></span><br><span class="line">    findResult.<span class="property">goods_count</span> = goods.<span class="property">goods_count</span></span><br><span class="line">    <span class="comment">// 持久化存储到本地</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;m_cart/saveToStorage&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 cart.vue 页面中，通过 mapMutations 这个辅助函数，将需要的 mutations 方法映射到当前页面中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import badgeMix from &#x27;@/mixins/tabbar-badge.js&#x27;</span><br><span class="line">import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [badgeMix],</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(&#x27;m_cart&#x27;, [&#x27;cart&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="addition">+    ...mapMutations(&#x27;m_cart&#x27;, [&#x27;updateGoodsState&#x27;, &#x27;updateGoodsCount&#x27;]),</span></span><br><span class="line">    // 商品的勾选状态发生了变化</span><br><span class="line">    radioChangeHandler(e) &#123;</span><br><span class="line">      this.updateGoodsState(e)</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    // 商品的数量发生了变化</span></span><br><span class="line"><span class="addition">+    numberChangeHandler(e) &#123;</span></span><br><span class="line"><span class="addition">+      this.updateGoodsCount(e)</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染滑动删除的-UI-效果"><a href="#渲染滑动删除的-UI-效果" class="headerlink" title="渲染滑动删除的 UI 效果"></a>渲染滑动删除的 UI 效果</h3><blockquote><p>滑动删除需要用到 uni-ui 的 uni-swipe-action 组件和 uni-swipe-action-item。详细的官方文档请参考SwipeAction 滑动操作。</p></blockquote><ol><li>改造 cart.vue 页面的 UI 结构，将商品列表区域的结构修改如下（可以使用 uSwipeAction 代码块快速生成基本的 UI 结构）：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 商品列表区域 --&gt;</span><br><span class="line">&lt;!-- uni-swipe-action 是最外层包裹性质的容器 --&gt;</span><br><span class="line"><span class="addition">+&lt;uni-swipe-action&gt;</span></span><br><span class="line">  &lt;block v-for=&quot;(goods, i) in cart&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">    &lt;!-- uni-swipe-action-item 可以为其子节点提供滑动操作的效果。需要通过 options 属性来指定操作按钮的配置信息 --&gt;</span><br><span class="line"><span class="addition">+    &lt;uni-swipe-action-item :right-options=&quot;options&quot; @click=&quot;swipeActionClickHandler(goods)&quot;&gt;</span></span><br><span class="line">      &lt;my-goods :goods=&quot;goods&quot; :show-radio=&quot;true&quot; :show-num=&quot;true&quot; @radio-change=&quot;radioChangeHandler&quot; @num-change=&quot;numberChangeHandler&quot;&gt;&lt;/my-goods&gt;</span><br><span class="line"><span class="addition">+    &lt;/uni-swipe-action-item&gt;</span></span><br><span class="line">  &lt;/block&gt;</span><br><span class="line"><span class="addition">+&lt;/uni-swipe-action&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 data 节点中声明 options 数组，用来定义操作按钮的配置信息：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">options</span>: [&#123;</span><br><span class="line">      <span class="attr">text</span>: <span class="string">&#x27;删除&#x27;</span>, <span class="comment">// 显示的文本内容</span></span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="string">&#x27;#C00000&#x27;</span> <span class="comment">// 按钮的背景颜色</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 methods 中声明 uni-swipe-action-item 组件的 @click 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击了滑动操作按钮</span></span><br><span class="line"><span class="title function_">swipeActionClickHandler</span>(<span class="params">goods</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(goods)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>美化 my-goods.vue 组件的样式：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.goods-item &#123;</span><br><span class="line"><span class="addition">+  // 让 goods-item 项占满整个屏幕的宽度</span></span><br><span class="line"><span class="addition">+  width: 750rpx;</span></span><br><span class="line"><span class="addition">+  // 设置盒模型为 border-box</span></span><br><span class="line"><span class="addition">+  box-sizing: border-box;</span></span><br><span class="line">  display: flex;</span><br><span class="line">  padding: 10px 5px;</span><br><span class="line">  border-bottom: 1px solid #f0f0f0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现滑动删除的功能"><a href="#实现滑动删除的功能" class="headerlink" title="实现滑动删除的功能"></a>实现滑动删除的功能</h3><ol><li>在 store/cart.js 模块的 mutations 节点中声明如下的方法，从而根据商品的 Id 从购物车中移除对应的商品：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 Id 从购物车中删除对应的商品信息</span></span><br><span class="line"><span class="title function_">removeGoodsById</span>(<span class="params">state, goods_id</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用数组的 filter 方法进行过滤</span></span><br><span class="line">  state.<span class="property">cart</span> = state.<span class="property">cart</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">goods_id</span> !== goods_id)</span><br><span class="line">  <span class="comment">// 持久化存储到本地</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;m_cart/saveToStorage&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 cart.vue 页面中，使用 mapMutations 辅助函数，把需要的方法映射到当前页面中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line"><span class="addition">+  ...mapMutations(&#x27;m_cart&#x27;, [&#x27;updateGoodsState&#x27;, &#x27;updateGoodsCount&#x27;, &#x27;removeGoodsById&#x27;]),</span></span><br><span class="line">  // 商品的勾选状态发生了变化</span><br><span class="line">  radioChangeHandler(e) &#123;</span><br><span class="line">    this.updateGoodsState(e)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 商品的数量发生了变化</span><br><span class="line">  numberChangeHandler(e) &#123;</span><br><span class="line">    this.updateGoodsCount(e)</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+  // 点击了滑动操作按钮</span></span><br><span class="line"><span class="addition">+  swipeActionClickHandler(goods) &#123;</span></span><br><span class="line"><span class="addition">+    this.removeGoodsById(goods.goods_id)</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="收货地址区域"><a href="#收货地址区域" class="headerlink" title="收货地址区域"></a>收货地址区域</h2><h3 id="创建收货地址组件"><a href="#创建收货地址组件" class="headerlink" title="创建收货地址组件"></a>创建收货地址组件</h3><ol><li>在 components 目录上鼠标右键，选择 新建组件命名为：<code>my-address</code>，并填写组件相关的信息</li><li>渲染收货地址组件的基本结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 选择收货地址的盒子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;address-choose-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btnChooseAddress&quot;</span>&gt;</span>请选择收货地址+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 渲染收货信息的盒子 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;address-info-box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row1-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;username&quot;</span>&gt;</span>收货人：<span class="tag">&lt;<span class="name">text</span>&gt;</span>escook<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row1-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;phone&quot;</span>&gt;</span>电话：<span class="tag">&lt;<span class="name">text</span>&gt;</span>138XXXX5555<span class="tag">&lt;/<span class="name">text</span>&gt;</span><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;arrowright&quot;</span> <span class="attr">size</span>=<span class="string">&quot;16&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2-left&quot;</span>&gt;</span>收货地址：<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;row2-right&quot;</span>&gt;</span>河北省邯郸市肥乡区xxx 河北省邯郸市肥乡区xxx 河北省邯郸市肥乡区xxx 河北省邯郸市肥乡区xxx <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 底部的边框线 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/static/cart_border@2x.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;address-border&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化收货地址组件的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">// 底部边框线的样式</span><br><span class="line"><span class="selector-class">.address-border</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 选择收货地址的盒子</span><br><span class="line"><span class="selector-class">.address-choose-box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 渲染收货信息的盒子</span><br><span class="line"><span class="selector-class">.address-info-box</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line"></span><br><span class="line">  // 第一行</span><br><span class="line">  <span class="selector-class">.row1</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.row1-right</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.phone</span> &#123;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 第二行</span><br><span class="line">  <span class="selector-class">.row2</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.row2-left</span> &#123;</span><br><span class="line">      <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现收货地址区域的按需展示"><a href="#实现收货地址区域的按需展示" class="headerlink" title="实现收货地址区域的按需展示"></a>实现收货地址区域的按需展示</h3><ol><li>在 data 中定义收货地址的信息对象：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 收货地址</span><br><span class="line"><span class="addition">+      address: &#123;&#125;,</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 v-if 和 v-else 实现按需展示：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 选择收货地址的盒子 --&gt;</span><br><span class="line"><span class="addition">+&lt;view class=&quot;address-choose-box&quot; v-if=&quot;JSON.stringify(address) === &#x27;&#123;&#125;&#x27;&quot;&gt;</span></span><br><span class="line">  &lt;button type=&quot;primary&quot; size=&quot;mini&quot; class=&quot;btnChooseAddress&quot;&gt;请选择收货地址+&lt;/button&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 渲染收货信息的盒子 --&gt;</span><br><span class="line"><span class="addition">+&lt;view class=&quot;address-info-box&quot; v-else&gt;</span></span><br><span class="line">  &lt;!-- 省略其它代码 --&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现选择收货地址的功能"><a href="#实现选择收货地址的功能" class="headerlink" title="实现选择收货地址的功能"></a>实现选择收货地址的功能</h3><blockquote><p>注意！使用 uni.chooseAddress() 有一个bug: (模拟器不能获取收货地址，但是真机模拟没有问题)<br>报错信息：<code>chooseAddress:fail the api need to be declared in …e requiredPrivateInfos field in app.json/ext.json</code><br>解决方案：<a href="https://github.com/dcloudio/uni-app/issues/3755">https://github.com/dcloudio/uni-app/issues/3755</a><br>配置在manifest.json的mp-weixin节点下(使用源码视图编辑)<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;mp-weixin&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;requiredPrivateInfos&quot;</span> <span class="punctuation">:</span> <span class="punctuation">[</span> <span class="string">&quot;chooseLocation&quot;</span><span class="punctuation">,</span> <span class="string">&quot;getLocation&quot;</span> <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p></blockquote><ol><li>为 请选择收货地址+ 的 button 按钮绑定点击事件处理函数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 选择收货地址的盒子 --&gt;</span><br><span class="line">&lt;view class=&quot;address-choose-box&quot; v-if=&quot;JSON.stringify(address) <span class="comment">=== &#x27;&#123;&#125;&#x27;&quot;&gt;</span></span><br><span class="line"><span class="addition">+  &lt;button type=&quot;primary&quot; size=&quot;mini&quot; class=&quot;btnChooseAddress&quot; @click=&quot;chooseAddress&quot;&gt;请选择收货地址+&lt;/button&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>定义 chooseAddress 事件处理函数，调用小程序提供的 chooseAddress() API 实现选择收货地址的功能：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 选择收货地址</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">chooseAddress</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1. 调用小程序提供的 chooseAddress() 方法，即可使用选择收货地址的功能</span></span><br><span class="line">    <span class="comment">//    返回值是一个数组：第 1 项为错误对象；第 2 项为成功之后的收货地址对象</span></span><br><span class="line">    <span class="keyword">const</span> [err, succ] = <span class="keyword">await</span> uni.<span class="title function_">chooseAddress</span>().<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 用户成功的选择了收货地址</span></span><br><span class="line">    <span class="keyword">if</span> (err === <span class="literal">null</span> &amp;&amp; succ.<span class="property">errMsg</span> === <span class="string">&#x27;chooseAddress:ok&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 为 data 里面的收货地址对象赋值</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">address</span> = succ</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义收货详细地址的计算属性：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 收货详细地址的计算属性</span></span><br><span class="line">  <span class="title function_">addstr</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">address</span>.<span class="property">provinceName</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接 省，市，区，详细地址 的字符串并返回给用户</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">address</span>.<span class="property">provinceName</span> + <span class="variable language_">this</span>.<span class="property">address</span>.<span class="property">cityName</span> + <span class="variable language_">this</span>.<span class="property">address</span>.<span class="property">countyName</span> + <span class="variable language_">this</span>.<span class="property">address</span>.<span class="property">detailInfo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>渲染收货地址区域的数据：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 渲染收货信息的盒子 --&gt;</span><br><span class="line">&lt;view class=&quot;address-info-box&quot; v-else&gt;</span><br><span class="line">  &lt;view class=&quot;row1&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;row1-left&quot;&gt;</span><br><span class="line"><span class="addition">+      &lt;view class=&quot;username&quot;&gt;收货人：&lt;text&gt;&#123;&#123;address.userName&#125;&#125;&lt;/text&gt;&lt;/view&gt;</span></span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;row1-right&quot;&gt;</span><br><span class="line"><span class="addition">+      &lt;view class=&quot;phone&quot;&gt;电话：&lt;text&gt;&#123;&#123;address.telNumber&#125;&#125;&lt;/text&gt;&lt;/view&gt;</span></span><br><span class="line">      &lt;uni-icons type=&quot;arrowright&quot; size=&quot;16&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">  &lt;view class=&quot;row2&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;row2-left&quot;&gt;收货地址：&lt;/view&gt;</span><br><span class="line"><span class="addition">+    &lt;view class=&quot;row2-right&quot;&gt;&#123;&#123;addstr&#125;&#125;&lt;/view&gt;</span></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将-address-信息存储到-vuex-中"><a href="#将-address-信息存储到-vuex-中" class="headerlink" title="将 address 信息存储到 vuex 中"></a>将 address 信息存储到 vuex 中</h3><ol><li>在 store 目录中，创建用户相关的 vuex 模块，命名为 user.js：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 开启命名空间</span></span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// state 数据</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="comment">// 收货地址</span></span><br><span class="line">    <span class="attr">address</span>: &#123;&#125;,</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="comment">// 更新收货地址</span></span><br><span class="line">    <span class="title function_">updateAddress</span>(<span class="params">state, address</span>) &#123;</span><br><span class="line">      state.<span class="property">address</span> = address</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 数据包装器</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 store/store.js 模块中，导入并挂载 user.js 模块：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 1. 导入 Vue 和 Vuex</span><br><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line">import Vuex from &#x27;vuex&#x27;</span><br><span class="line">// 导入购物车的 vuex 模块</span><br><span class="line">import moduleCart from &#x27;./cart.js&#x27;</span><br><span class="line">// 导入用户的 vuex 模块</span><br><span class="line"><span class="addition">+import moduleUser from &#x27;./user.js&#x27;</span></span><br><span class="line"></span><br><span class="line">// 2. 将 Vuex 安装为 Vue 的插件</span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line">// 3. 创建 Store 的实例对象</span><br><span class="line">const store = new Vuex.Store(&#123;</span><br><span class="line">  // TODO：挂载 store 模块</span><br><span class="line">  modules: &#123;</span><br><span class="line">    // 挂载购物车的 vuex 模块，模块内成员的访问路径被调整为 m_cart，例如：</span><br><span class="line">    // 购物车模块中 cart 数组的访问路径是 m_cart/cart</span><br><span class="line">    m_cart: moduleCart,</span><br><span class="line">    // 挂载用户的 vuex 模块，访问路径为 m_user</span><br><span class="line"><span class="addition">+    m_user: moduleUser,</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 4. 向外共享 Store 的实例对象</span><br><span class="line">export default store</span><br></pre></td></tr></table></figure></li><li>改造 address.vue 组件中的代码，使用 vuex 提供的 address 计算属性 替代 data 中定义的本地 address 对象：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+// 1. 按需导入 mapState 和 mapMutations 这两个辅助函数</span></span><br><span class="line"><span class="addition">+import &#123; mapState, mapMutations &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line"><span class="addition">+      // 2.1 注释掉下面的 address 对象，使用 2.2 中的代码替代之</span></span><br><span class="line"><span class="addition">+      // address: &#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 3.1 把 m_user 模块中的 updateAddress 函数映射到当前组件</span><br><span class="line">    ...mapMutations(&#x27;m_user&#x27;, [&#x27;updateAddress&#x27;]),</span><br><span class="line">    // 选择收货地址</span><br><span class="line">    async chooseAddress() &#123;</span><br><span class="line">      const [err, succ] = await uni.chooseAddress().catch((err) =&gt; err)</span><br><span class="line"></span><br><span class="line">      // 用户成功的选择了收货地址</span><br><span class="line">      if (err <span class="comment">=== null &amp;&amp; succ.errMsg === &#x27;chooseAddress:ok&#x27;) &#123;</span></span><br><span class="line"><span class="addition">+        // 3.2 把下面这行代码注释掉，使用 3.3 中的代码替代之</span></span><br><span class="line"><span class="addition">+        // this.address = succ</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+        // 3.3 调用 Store 中提供的 updateAddress 方法，将 address 保存到 Store 里面</span></span><br><span class="line"><span class="addition">+        this.updateAddress(succ)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="addition">+    // 2.2 把 m_user 模块中的 address 对象映射当前组件中使用，代替 data 中 address 对象</span></span><br><span class="line"><span class="addition">+    ...mapState(&#x27;m_user&#x27;, [&#x27;address&#x27;]),</span></span><br><span class="line">    // 收货详细地址的计算属性</span><br><span class="line">    addstr() &#123;</span><br><span class="line">      if (!this.address.provinceName) return &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">      // 拼接 省，市，区，详细地址 的字符串并返回给用户</span><br><span class="line">      return this.address.provinceName + this.address.cityName + this.address.countyName + this.address.detailInfo</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将-Store-中的-address-持久化存储到本地"><a href="#将-Store-中的-address-持久化存储到本地" class="headerlink" title="将 Store 中的 address 持久化存储到本地"></a>将 Store 中的 address 持久化存储到本地</h3><ol><li>修改 store/user.js 模块中的代码如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // 开启命名空间</span><br><span class="line">  namespaced: true,</span><br><span class="line"></span><br><span class="line">  // state 数据</span><br><span class="line">  state: () =&gt; (&#123;</span><br><span class="line"><span class="addition">+    // 3. 读取本地的收货地址数据，初始化 address 对象</span></span><br><span class="line"><span class="addition">+    address: JSON.parse(uni.getStorageSync(&#x27;address&#x27;) || &#x27;&#123;&#125;&#x27;),</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    // 更新收货地址</span><br><span class="line">    updateAddress(state, address) &#123;</span><br><span class="line">      state.address = address</span><br><span class="line"></span><br><span class="line"><span class="addition">+      // 2. 通过 this.commit() 方法，调用 m_user 模块下的 saveAddressToStorage 方法将 address 对象持久化存储到本地</span></span><br><span class="line"><span class="addition">+      this.commit(&#x27;m_user/saveAddressToStorage&#x27;)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="addition">+    // 1. 定义将 address 持久化存储到本地 mutations 方法</span></span><br><span class="line"><span class="addition">+    saveAddressToStorage(state) &#123;</span></span><br><span class="line"><span class="addition">+      uni.setStorageSync(&#x27;address&#x27;, JSON.stringify(state.address))</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 数据包装器</span><br><span class="line">  getters: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将-addstr-抽离为-getters"><a href="#将-addstr-抽离为-getters" class="headerlink" title="将 addstr 抽离为 getters"></a>将 addstr 抽离为 getters</h3><blockquote><p>目的：为了提高代码的复用性，可以把收货的详细地址抽离为 getters，方便在多个页面和组件之间实现复用。</p></blockquote><ol><li>剪切 my-address.vue 组件中的 addstr 计算属性的代码，粘贴到 user.js 模块中，作为一个 getters 节点：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据包装器</span></span><br><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line">  <span class="comment">// 收货详细地址的计算属性</span></span><br><span class="line">  <span class="title function_">addstr</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!state.<span class="property">address</span>.<span class="property">provinceName</span>) <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拼接 省，市，区，详细地址 的字符串并返回给用户</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">address</span>.<span class="property">provinceName</span> + state.<span class="property">address</span>.<span class="property">cityName</span> + state.<span class="property">address</span>.<span class="property">countyName</span> + state.<span class="property">address</span>.<span class="property">detailInfo</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>改造 my-address.vue 组件中的代码，通过 mapGetters 辅助函数，将 m_user 模块中的 addstr 映射到当前组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+// 按需导入 mapGetters 辅助函数</span></span><br><span class="line"><span class="addition">+import &#123; mapState, mapMutations, mapGetters &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 省略其它代码</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapState(&#x27;m_user&#x27;, [&#x27;address&#x27;]),</span><br><span class="line"><span class="addition">+    // 将 m_user 模块中的 addstr 映射到当前组件中使用</span></span><br><span class="line"><span class="addition">+    ...mapGetters(&#x27;m_user&#x27;, [&#x27;addstr&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="重新选择收货地址"><a href="#重新选择收货地址" class="headerlink" title="重新选择收货地址"></a>重新选择收货地址</h3><ol><li>为 class 类名为 address-info-box 的盒子绑定 click 事件处理函数如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 渲染收货信息的盒子 --&gt;</span><br><span class="line"><span class="addition">+&lt;view class=&quot;address-info-box&quot; v-else @click=&quot;chooseAddress&quot;&gt;</span></span><br><span class="line">  &lt;!-- 省略其它代码 --&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解决收货地址授权失败的问题【新版本自动授权】"><a href="#解决收货地址授权失败的问题【新版本自动授权】" class="headerlink" title="解决收货地址授权失败的问题【新版本自动授权】"></a>解决收货地址授权失败的问题【新版本自动授权】</h3><blockquote><p>如果在选择收货地址的时候，用户点击了取消授权，则需要进行特殊的处理，否则用户将无法再次选择收货地址！</p></blockquote><ol><li>改造 chooseAddress 方法如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 选择收货地址</span><br><span class="line">async chooseAddress() &#123;</span><br><span class="line">  // 1. 调用小程序提供的 chooseAddress() 方法，即可使用选择收货地址的功能</span><br><span class="line">  //    返回值是一个数组：第1项为错误对象；第2项为成功之后的收货地址对象</span><br><span class="line">  const [err, succ] = await uni.chooseAddress().catch(err =&gt; err)</span><br><span class="line"></span><br><span class="line">  // 2. 用户成功的选择了收货地址</span><br><span class="line">  if (succ &amp;&amp; succ.errMsg <span class="comment">=== &#x27;chooseAddress:ok&#x27;) &#123;</span></span><br><span class="line">    // 更新 vuex 中的收货地址</span><br><span class="line">    this.updateAddress(succ)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 3. 用户没有授权</span></span><br><span class="line"><span class="addition">+  if (err &amp;&amp; err.errMsg === &#x27;chooseAddress:fail auth deny&#x27;) &#123;</span></span><br><span class="line"><span class="addition">+    this.reAuth() // 调用 this.reAuth() 方法，向用户重新发起授权申请</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 methods 节点中声明 reAuth 方法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用此方法，重新发起收货地址的授权</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">reAuth</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 3.1 提示用户对地址进行授权</span></span><br><span class="line">  <span class="keyword">const</span> [err2, confirmResult] = <span class="keyword">await</span> uni.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;检测到您没打开地址权限，是否去设置打开？&#x27;</span>,</span><br><span class="line">    <span class="attr">confirmText</span>: <span class="string">&quot;确认&quot;</span>,</span><br><span class="line">    <span class="attr">cancelText</span>: <span class="string">&quot;取消&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.2 如果弹框异常，则直接退出</span></span><br><span class="line">  <span class="keyword">if</span> (err2) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.3 如果用户点击了 “取消” 按钮，则提示用户 “您取消了地址授权！”</span></span><br><span class="line">  <span class="keyword">if</span> (confirmResult.<span class="property">cancel</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;您取消了地址授权！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.4 如果用户点击了 “确认” 按钮，则调用 uni.openSetting() 方法进入授权页面，让用户重新进行授权</span></span><br><span class="line">  <span class="keyword">if</span> (confirmResult.<span class="property">confirm</span>) <span class="keyword">return</span> uni.<span class="title function_">openSetting</span>(&#123;</span><br><span class="line">    <span class="comment">// 3.4.1 授权结束，需要对授权的结果做进一步判断</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function">(<span class="params">settingResult</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 3.4.2 地址授权的值等于 true，提示用户 “授权成功”</span></span><br><span class="line">      <span class="keyword">if</span> (settingResult.<span class="property">authSetting</span>[<span class="string">&#x27;scope.address&#x27;</span>]) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;授权成功！请选择地址&#x27;</span>)</span><br><span class="line">      <span class="comment">// 3.4.3 地址授权的值等于 false，提示用户 “您取消了地址授权”</span></span><br><span class="line">      <span class="keyword">if</span> (!settingResult.<span class="property">authSetting</span>[<span class="string">&#x27;scope.address&#x27;</span>]) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;您取消了地址授权！&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="解决-iPhone-真机上无法重新授权的问题【新版本自动授权】"><a href="#解决-iPhone-真机上无法重新授权的问题【新版本自动授权】" class="headerlink" title="解决 iPhone 真机上无法重新授权的问题【新版本自动授权】"></a>解决 iPhone 真机上无法重新授权的问题【新版本自动授权】</h3><blockquote><p>问题说明：在 iPhone 设备上，当用户取消授权之后，再次点击选择收货地址按钮的时候，无法弹出授权的提示框！</p></blockquote><ol><li>导致问题的原因 - 用户取消授权后，再次点击 “选择收货地址” 按钮的时候：<ol><li>在模拟器和安卓真机上，错误消息 err.errMsg 的值为 chooseAddress:fail auth deny</li><li>在 iPhone 真机上，错误消息 err.errMsg 的值为 chooseAddress:fail authorize no response</li></ol></li><li>解决问题的方案 - 修改 chooseAddress 方法中的代码，进一步完善用户没有授权时的 if 判断条件即可：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">async chooseAddress() &#123;</span><br><span class="line">  // 1. 调用小程序提供的 chooseAddress() 方法，即可使用选择收货地址的功能</span><br><span class="line">  //    返回值是一个数组：第1项为错误对象；第2项为成功之后的收货地址对象</span><br><span class="line">  const [err, succ] = await uni.chooseAddress().catch(err =&gt; err)</span><br><span class="line"></span><br><span class="line">  // 2. 用户成功的选择了收货地址</span><br><span class="line">  if (succ &amp;&amp; succ.errMsg <span class="comment">=== &#x27;chooseAddress:ok&#x27;) &#123;</span></span><br><span class="line">    this.updateAddress(succ)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 3. 用户没有授权</span><br><span class="line"><span class="addition">+  if (err &amp;&amp; (err.errMsg === &#x27;chooseAddress:fail auth deny&#x27; || err.errMsg === &#x27;chooseAddress:fail authorize no response&#x27;)) &#123;</span></span><br><span class="line">    this.reAuth()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="结算区域"><a href="#结算区域" class="headerlink" title="结算区域"></a>结算区域</h2><h3 id="封装结算区域组件"><a href="#封装结算区域组件" class="headerlink" title="封装结算区域组件"></a>封装结算区域组件</h3><ol><li>初始化 my-settle 组件的基本结构和样式：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 最外层的容器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-settle-container&quot;</span>&gt;</span></span><br><span class="line">    结算组件</span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.my-settle-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 底部固定定位 */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 设置宽高和背景色 */</span></span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: cyan;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 cart.vue 页面中使用自定义的 my-settle 组件，并美化页面样式，防止页面底部被覆盖：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="addition">+  &lt;view class=&quot;cart-container&quot;&gt;</span></span><br><span class="line">    &lt;!-- 使用自定义的 address 组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 购物车商品列表的标题区域 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 商品列表区域 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 结算区域 --&gt;</span><br><span class="line">    &lt;my-settle&gt;&lt;/my-settle&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line"><span class="addition">+.cart-container &#123;</span></span><br><span class="line"><span class="addition">+  padding-bottom: 50px;</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染结算区域的结构和样式"><a href="#渲染结算区域的结构和样式" class="headerlink" title="渲染结算区域的结构和样式"></a>渲染结算区域的结构和样式</h3><ol><li>定义如下的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 最外层的容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-settle-container&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 全选区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radio</span> <span class="attr">color</span>=<span class="string">&quot;#C00000&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;true&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 合计区域 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;amount-box&quot;</span>&gt;</span></span><br><span class="line">    合计:<span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;amount&quot;</span>&gt;</span>￥1234.00<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 结算按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn-settle&quot;</span>&gt;</span>结算(0)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-settle-container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  // 将背景色从 cyan 改为 white</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.radio</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.amount</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c00000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.btn-settle</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c00000</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="动态渲染已勾选商品的总数量"><a href="#动态渲染已勾选商品的总数量" class="headerlink" title="动态渲染已勾选商品的总数量"></a>动态渲染已勾选商品的总数量</h3><ol><li>在 store/cart.js 模块中，定义一个名称为 checkedCount 的 getters，用来统计已勾选商品的总数量：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 勾选的商品的总数量</span></span><br><span class="line"><span class="title function_">checkedCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="comment">// 先使用 filter 方法，从购物车中过滤器已勾选的商品</span></span><br><span class="line">  <span class="comment">// 再使用 reduce 方法，将已勾选的商品总数量进行累加</span></span><br><span class="line">  <span class="comment">// reduce() 的返回值就是已勾选的商品的总数量</span></span><br><span class="line">  <span class="keyword">return</span> state.<span class="property">cart</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">goods_state</span>).<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total += item.<span class="property">goods_count</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件中，通过 mapGetters 辅助函数，将需要的 getters 映射到当前组件中使用：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>(<span class="string">&#x27;m_cart&#x27;</span>, [<span class="string">&#x27;checkedCount&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将 checkedCount 的值渲染到页面中：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结算按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn-settle&quot;</span>&gt;</span>结算(&#123;&#123;checkedCount&#125;&#125;)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="动态渲染全选按钮的选中状态"><a href="#动态渲染全选按钮的选中状态" class="headerlink" title="动态渲染全选按钮的选中状态"></a>动态渲染全选按钮的选中状态</h3><ol><li>使用 mapGetters 辅助函数，将商品的总数量映射到当前组件中使用，并定义一个叫做 isFullCheck 的计算属性：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 1. 将 total 映射到当前组件中</span><br><span class="line"><span class="addition">+    ...mapGetters(&#x27;m_cart&#x27;, [&#x27;checkedCount&#x27;, &#x27;total&#x27;]),</span></span><br><span class="line">    // 2. 是否全选</span><br><span class="line"><span class="addition">+    isFullCheck() &#123;</span></span><br><span class="line"><span class="addition">+      return this.total === this.checkedCount</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为 radio 组件动态绑定 checked 属性的值：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 全选区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">&quot;radio&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">radio</span> <span class="attr">color</span>=<span class="string">&quot;#C00000&quot;</span> <span class="attr">:checked</span>=<span class="string">&quot;isFullCheck&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">text</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实现商品的全选-反选功能"><a href="#实现商品的全选-反选功能" class="headerlink" title="实现商品的全选/反选功能"></a>实现商品的全选/反选功能</h3><ol><li>在 store/cart.js 模块中，定义一个叫做 updateAllGoodsState 的 mutations 方法，用来修改所有商品的勾选状态：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新所有商品的勾选状态</span></span><br><span class="line"><span class="title function_">updateAllGoodsState</span>(<span class="params">state, newState</span>) &#123;</span><br><span class="line">  <span class="comment">// 循环更新购物车中每件商品的勾选状态</span></span><br><span class="line">  state.<span class="property">cart</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">goods_state</span> = newState)</span><br><span class="line">  <span class="comment">// 持久化存储到本地</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;m_cart/saveToStorage&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件中，通过 mapMutations 辅助函数，将需要的 mutations 方法映射到当前组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 1. 按需导入 mapMutations 辅助函数</span><br><span class="line"><span class="addition">+import &#123; mapGetters, mapMutations &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  // 省略其它代码</span><br><span class="line">  methods: &#123;</span><br><span class="line">    // 2. 使用 mapMutations 辅助函数，把 m_cart 模块提供的 updateAllGoodsState 方法映射到当前组件中使用</span><br><span class="line"><span class="addition">+    ...mapMutations(&#x27;m_cart&#x27;, [&#x27;updateAllGoodsState&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>为 UI 中的 label 组件绑定 click 事件处理函数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 全选区域 --&gt;</span><br><span class="line"><span class="addition">+&lt;label class=&quot;radio&quot; @click=&quot;changeAllState&quot;&gt;</span></span><br><span class="line">  &lt;radio color=&quot;#C00000&quot; :checked=&quot;isFullCheck&quot; /&gt;&lt;text&gt;全选&lt;/text&gt;</span><br><span class="line">&lt;/label&gt;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件的 methods 节点中，声明 changeAllState 事件处理函数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  ...mapMutations(&#x27;m_cart&#x27;, [&#x27;updateAllGoodsState&#x27;]),</span><br><span class="line">  // label 的点击事件处理函数</span><br><span class="line"><span class="addition">+  changeAllState() &#123;</span></span><br><span class="line"><span class="addition">+    // 修改购物车中所有商品的选中状态</span></span><br><span class="line"><span class="addition">+    // !this.isFullCheck 表示：当前全选按钮的状态取反之后，就是最新的勾选状态</span></span><br><span class="line"><span class="addition">+    this.updateAllGoodsState(!this.isFullCheck)</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="动态渲染已勾选商品的总价格"><a href="#动态渲染已勾选商品的总价格" class="headerlink" title="动态渲染已勾选商品的总价格"></a>动态渲染已勾选商品的总价格</h3><ol><li>在 store/cart.js 模块中，定义一个叫做 checkedGoodsAmount 的 getters，用来统计已勾选商品的总价格：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 已勾选的商品的总价</span></span><br><span class="line"><span class="title function_">checkedGoodsAmount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="comment">// 先使用 filter 方法，从购物车中过滤器已勾选的商品</span></span><br><span class="line">  <span class="comment">// 再使用 reduce 方法，将已勾选的商品数量 * 单价之后，进行累加</span></span><br><span class="line">  <span class="comment">// reduce() 的返回值就是已勾选的商品的总价</span></span><br><span class="line">  <span class="comment">// 最后调用 toFixed(2) 方法，保留两位小数</span></span><br><span class="line">  <span class="keyword">return</span> state.<span class="property">cart</span>.<span class="title function_">filter</span>(<span class="function"><span class="params">x</span> =&gt;</span> x.<span class="property">goods_state</span>)</span><br><span class="line">                   .<span class="title function_">reduce</span>(<span class="function">(<span class="params">total, item</span>) =&gt;</span> total += item.<span class="property">goods_count</span> * item.<span class="property">goods_price</span>, <span class="number">0</span>)</span><br><span class="line">                   .<span class="title function_">toFixed</span>(<span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件中，使用 mapGetters 辅助函数，把需要的 checkedGoodsAmount 映射到当前组件中使用：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;m_cart&#x27;</span>, [<span class="string">&#x27;total&#x27;</span>, <span class="string">&#x27;checkedCount&#x27;</span>, <span class="string">&#x27;checkedGoodsAmount&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li>在组件的 UI 结构中，渲染已勾选的商品的总价:<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 合计区域 --&gt;</span><br><span class="line">&lt;view class=&quot;amount-box&quot;&gt;</span><br><span class="line"><span class="addition">+  合计:&lt;text class=&quot;amount&quot;&gt;￥&#123;&#123;checkedGoodsAmount&#125;&#125;&lt;/text&gt;</span></span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="动态计算购物车徽标的数值"><a href="#动态计算购物车徽标的数值" class="headerlink" title="动态计算购物车徽标的数值"></a>动态计算购物车徽标的数值</h3><p>问题说明：当修改购物车中商品的数量之后，tabBar 上的数字徽标不会自动更新。<br>解决方案：改造 mixins/tabbar-badge.js 中的代码，使用 watch 侦听器，监听 total 总数量的变化，从而动态为 tabBar 的徽标赋值：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">// 导出一个 mixin 对象</span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters(&#x27;m_cart&#x27;, [&#x27;total&#x27;]),</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="addition">+  watch: &#123;</span></span><br><span class="line"><span class="addition">+    // 监听 total 值的变化</span></span><br><span class="line"><span class="addition">+    total() &#123;</span></span><br><span class="line"><span class="addition">+      // 调用 methods 中的 setBadge 方法，重新为 tabBar 的数字徽章赋值</span></span><br><span class="line"><span class="addition">+      this.setBadge()</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">  onShow() &#123;</span><br><span class="line">    // 在页面刚展示的时候，设置数字徽标</span><br><span class="line">    this.setBadge()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setBadge() &#123;</span><br><span class="line">      // 调用 uni.setTabBarBadge() 方法，为购物车设置右上角的徽标</span><br><span class="line">      uni.setTabBarBadge(&#123;</span><br><span class="line">        index: 2,</span><br><span class="line">        text: this.total + &#x27;&#x27;, // 注意：text 的值必须是字符串，不能是数字</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="渲染购物车为空时的页面结构"><a href="#渲染购物车为空时的页面结构" class="headerlink" title="渲染购物车为空时的页面结构"></a>渲染购物车为空时的页面结构</h3><ol><li>改造 cart.vue 页面的 UI 结构，使用 v-if 和 v-else 控制购物车区域和空白购物车区域的按需展示：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view class=&quot;cart-container&quot; v-if=&quot;cart.length !== 0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 使用自定义的 address 组件 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 购物车商品列表的标题区域 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 商品列表区域 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 结算区域 --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line"></span><br><span class="line"><span class="addition">+  &lt;!-- 空白购物车区域 --&gt;</span></span><br><span class="line"><span class="addition">+  &lt;view class=&quot;empty-cart&quot; v-else&gt;</span></span><br><span class="line"><span class="addition">+    &lt;image src=&quot;/static/cart_empty@2x.png&quot; class=&quot;empty-img&quot;&gt;&lt;/image&gt;</span></span><br><span class="line"><span class="addition">+    &lt;text class=&quot;tip-text&quot;&gt;空空如也~&lt;/text&gt;</span></span><br><span class="line"><span class="addition">+  &lt;/view&gt;</span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li>美化空白购物车区域的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.empty-cart</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">150px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.empty-img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.tip-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="登录与支付"><a href="#登录与支付" class="headerlink" title="登录与支付"></a>登录与支付</h1><h2 id="点击结算按钮进行条件判断"><a href="#点击结算按钮进行条件判断" class="headerlink" title="点击结算按钮进行条件判断"></a>点击结算按钮进行条件判断</h2><blockquote><p>说明：用户点击了结算按钮之后，需要先后判断是否勾选了要结算的商品、是否选择了收货地址、是否登录。</p></blockquote><ol><li>在 my-settle 组件中，为结算按钮绑定点击事件处理函数：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 结算按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;btn-settle&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;settlement&quot;</span>&gt;</span>结算(&#123;&#123;checkedCount&#125;&#125;)<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件的 methods 节点中声明 settlement 事件处理函数如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击了结算按钮</span></span><br><span class="line"><span class="title function_">settlement</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 先判断是否勾选了要结算的商品</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">checkedCount</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;请选择要结算的商品！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 再判断用户是否选择了收货地址</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">addstr</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;请选择收货地址！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3. 最后判断用户是否登录了</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">token</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;请先登录！&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件中，使用 mapGetters 辅助函数，从 m_user 模块中将 addstr 映射到当前组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters(&#x27;m_cart&#x27;, [&#x27;total&#x27;, &#x27;checkedCount&#x27;, &#x27;checkedGoodsAmount&#x27;]),</span><br><span class="line"><span class="addition">+    // addstr 是详细的收货地址</span></span><br><span class="line"><span class="addition">+    ...mapGetters(&#x27;m_user&#x27;, [&#x27;addstr&#x27;]),</span></span><br><span class="line">    isFullCheck() &#123;</span><br><span class="line">      return this.total <span class="comment">=== this.checkedCount</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 store/user.js 模块的 state 节点中，声明 token 字符串：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  // 开启命名空间</span><br><span class="line">  namespaced: true,</span><br><span class="line"></span><br><span class="line">  // state 数据</span><br><span class="line">  state: () =&gt; (&#123;</span><br><span class="line">    // 收货地址</span><br><span class="line">    address: JSON.parse(uni.getStorageSync(&#x27;address&#x27;) || &#x27;&#123;&#125;&#x27;),</span><br><span class="line"><span class="addition">+    // 登录成功之后的 token 字符串</span></span><br><span class="line"><span class="addition">+    token: &#x27;&#x27;,</span></span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  // 省略其它代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件中，使用 mapState 辅助函数，从 m_user 模块中将 token 映射到当前组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+// 按需从 vuex 中导入 mapState 辅助函数</span></span><br><span class="line"><span class="addition">+import &#123; mapGetters, mapMutations, mapState &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters(&#x27;m_cart&#x27;, [&#x27;total&#x27;, &#x27;checkedCount&#x27;, &#x27;checkedGoodsAmount&#x27;]),</span><br><span class="line">    ...mapGetters(&#x27;m_user&#x27;, [&#x27;addstr&#x27;]),</span><br><span class="line"><span class="addition">+    // token 是用户登录成功之后的 token 字符串</span></span><br><span class="line"><span class="addition">+    ...mapState(&#x27;m_user&#x27;, [&#x27;token&#x27;]),</span></span><br><span class="line">    isFullCheck() &#123;</span><br><span class="line">      return this.total <span class="comment">=== this.checkedCount</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><h3 id="实现登录和用户信息组件的按需展示"><a href="#实现登录和用户信息组件的按需展示" class="headerlink" title="实现登录和用户信息组件的按需展示"></a>实现登录和用户信息组件的按需展示</h3><ol><li>在 components 目录中新建<code>my-login</code>登录组件：</li><li>在 components 目录中新建<code>my-userinfo</code>用户信息组件：</li><li>在 my.vue 页面中，通过 mapState 辅助函数，导入需要的 token 字符串：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import badgeMix from &#x27;@/mixins/tabbar-badge.js&#x27;</span><br><span class="line"><span class="addition">+// 1. 从 vuex 中按需导入 mapState 辅助函数</span></span><br><span class="line"><span class="addition">+import &#123; mapState &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  mixins: [badgeMix],</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="addition">+    // 2. 从 m_user 模块中导入需要的 token 字符串</span></span><br><span class="line"><span class="addition">+    ...mapState(&#x27;m_user&#x27;, [&#x27;token&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my.vue 页面中，实现登录组件和用户信息组件的按需展示：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用户未登录时，显示登录组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-login</span> <span class="attr">v-if</span>=<span class="string">&quot;!token&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-login</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用户登录后，显示用户信息组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-userinfo</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">my-userinfo</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="实现登录组件的基本布局"><a href="#实现登录组件的基本布局" class="headerlink" title="实现登录组件的基本布局"></a>实现登录组件的基本布局</h3><ol><li>为 my-login 组件定义如下的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提示登录的图标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;contact-filled&quot;</span> <span class="attr">size</span>=<span class="string">&quot;100&quot;</span> <span class="attr">color</span>=<span class="string">&quot;#AFAFAF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-login&quot;</span>&gt;</span>一键登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录提示 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;tips-text&quot;</span>&gt;</span>登录后尽享更多权益<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化登录组件的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.login-container</span> &#123;</span><br><span class="line">  // 登录盒子的样式</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">750</span>rpx;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line">  // 绘制登录盒子底部的半椭圆造型</span><br><span class="line">  &amp;<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">50%</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 登录按钮的样式</span><br><span class="line">  <span class="selector-class">.btn-login</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">15px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c00000</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 按钮下方提示消息的样式</span><br><span class="line">  <span class="selector-class">.tips-text</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">color</span>: gray;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="点击登录按钮获取微信用户的基本信息"><a href="#点击登录按钮获取微信用户的基本信息" class="headerlink" title="点击登录按钮获取微信用户的基本信息"></a>点击登录按钮获取微信用户的基本信息</h3><blockquote><p>需求描述：需要获取微信用户的头像、昵称等基本信息。</p></blockquote><ol><li>为登录的 button 按钮绑定 open-type=”getUserInfo” 属性，表示点击按钮时，希望获取用户的基本信息：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以从 @getuserinfo 事件处理函数的形参中，获取到用户的基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn-login&quot;</span> <span class="attr">open-type</span>=<span class="string">&quot;getUserInfo&quot;</span> @<span class="attr">getuserinfo</span>=<span class="string">&quot;getUserInfo&quot;</span>&gt;</span>一键登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 methods 节点中声明 getUserInfo 事件处理函数如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 获取微信用户的基本信息</span></span><br><span class="line">  <span class="title function_">getUserInfo</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断是否获取用户信息成功</span></span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">detail</span>.<span class="property">errMsg</span> === <span class="string">&#x27;getUserInfo:fail auth deny&#x27;</span>) <span class="keyword">return</span> uni.$showMsg(<span class="string">&#x27;您取消了登录授权！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取用户信息成功， e.detail.userInfo 就是用户的基本信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">detail</span>.<span class="property">userInfo</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将用户的基本信息存储到-vuex"><a href="#将用户的基本信息存储到-vuex" class="headerlink" title="将用户的基本信息存储到 vuex"></a>将用户的基本信息存储到 vuex</h3><ol><li>在 store/user.js 模块的 state 节点中，声明 userinfo 的信息对象如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// state 数据</span><br><span class="line">state: () =&gt; (&#123;</span><br><span class="line">  // 收货地址</span><br><span class="line">  // address: &#123;&#125;</span><br><span class="line">  address: JSON.parse(uni.getStorageSync(&#x27;address&#x27;) || &#x27;&#123;&#125;&#x27;),</span><br><span class="line">  // 登录成功之后的 token 字符串</span><br><span class="line">  token: &#x27;&#x27;,</span><br><span class="line"><span class="addition">+  // 用户的基本信息</span></span><br><span class="line"><span class="addition">+  userinfo: JSON.parse(uni.getStorageSync(&#x27;userinfo&#x27;) || &#x27;&#123;&#125;&#x27;)</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li><li>在 store/user.js 模块的 mutations 节点中，声明如下的两个方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">// 省略其它代码...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新用户的基本信息</span></span><br><span class="line">  <span class="title function_">updateUserInfo</span>(<span class="params">state, userinfo</span>) &#123;</span><br><span class="line">    state.<span class="property">userinfo</span> = userinfo</span><br><span class="line">    <span class="comment">// 通过 this.commit() 方法，调用 m_user 模块下的 saveUserInfoToStorage 方法，将 userinfo 对象持久化存储到本地</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;m_user/saveUserInfoToStorage&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 userinfo 持久化存储到本地</span></span><br><span class="line">  <span class="title function_">saveUserInfoToStorage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;userinfo&#x27;</span>, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state.<span class="property">userinfo</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 mapMutations 辅助函数，将需要的方法映射到 my-login 组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 1. 按需导入 mapMutations 辅助函数</span><br><span class="line"><span class="addition">+import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="addition">+    // 2. 调用 mapMutations 辅助方法，把 m_user 模块中的 updateUserInfo 映射到当前组件中使用</span></span><br><span class="line"><span class="addition">+    ...mapMutations(&#x27;m_user&#x27;, [&#x27;updateUserInfo&#x27;]),</span></span><br><span class="line">    // 获取微信用户的基本信息</span><br><span class="line">    getUserInfo(e) &#123;</span><br><span class="line">      // 判断是否获取用户信息成功</span><br><span class="line">      if (e.detail.errMsg <span class="comment">=== &#x27;getUserInfo:fail auth deny&#x27;) return uni.$showMsg(&#x27;您取消了登录授权！&#x27;)</span></span><br><span class="line">      // 获取用户信息成功， e.detail.userInfo 就是用户的基本信息</span><br><span class="line">      // console.log(e.detail.userInfo)</span><br><span class="line"></span><br><span class="line"><span class="addition">+      // 3. 将用户的基本信息存储到 vuex 中</span></span><br><span class="line"><span class="addition">+      this.updateUserInfo(e.detail.userInfo)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录获取-Token-字符串"><a href="#登录获取-Token-字符串" class="headerlink" title="登录获取 Token 字符串"></a>登录获取 Token 字符串</h3><blockquote><p>需求说明：当获取到了微信用户的基本信息之后，还需要进一步调用登录相关的接口，从而换取登录成功之后的 Token 字符串。</p></blockquote><ol><li>在 getUserInfo 方法中，预调用 this.getToken() 方法，同时把获取到的用户信息传递进去：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 获取微信用户的基本信息</span><br><span class="line">getUserInfo(e) &#123;</span><br><span class="line">  // 判断是否获取用户信息成功</span><br><span class="line">  if (e.detail.errMsg <span class="comment">=== &#x27;getUserInfo:fail auth deny&#x27;) return uni.$showMsg(&#x27;您取消了登录授权！&#x27;)</span></span><br><span class="line"></span><br><span class="line">  // 将用户的基本信息存储到 vuex 中</span><br><span class="line">  this.updateUserInfo(e.detail.userInfo)</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 获取登录成功后的 Token 字符串</span></span><br><span class="line"><span class="addition">+  this.getToken(e.detail)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 methods 中定义 getToken 方法，调用登录相关的 API，实现登录的功能:<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 调用登录接口，换取永久的 token</span><br><span class="line">async getToken(info) &#123;</span><br><span class="line">  // 调用微信登录接口</span><br><span class="line"><span class="addition">+  const [err, res] = await uni.login().catch(err =&gt; err)</span></span><br><span class="line">  // 判断是否 uni.login() 调用失败</span><br><span class="line">  if (err || res.errMsg !== &#x27;login:ok&#x27;) return uni.$showError(&#x27;登录失败！&#x27;)</span><br><span class="line"></span><br><span class="line">  // 准备参数对象</span><br><span class="line">  const query = &#123;</span><br><span class="line"><span class="addition">+    code: res.code,</span></span><br><span class="line">    encryptedData: info.encryptedData,</span><br><span class="line">    iv: info.iv,</span><br><span class="line">    rawData: info.rawData,</span><br><span class="line">    signature: info.signature</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 换取 token</span><br><span class="line">  const &#123; data: loginResult &#125; = await uni.$http.post(&#x27;/api/public/v1/users/wxlogin&#x27;, query)</span><br><span class="line">  if (loginResult.meta.status !== 200) return uni.$showMsg(&#x27;登录失败！&#x27;)</span><br><span class="line">  uni.$showMsg(&#x27;登录成功&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="将-Token-存储到-vuex"><a href="#将-Token-存储到-vuex" class="headerlink" title="将 Token 存储到 vuex"></a>将 Token 存储到 vuex</h3><ol><li>在 store/user.js 模块的 mutations 节点中，声明如下的两个方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">// 省略其它代码...</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 更新 token 字符串</span></span><br><span class="line">  <span class="title function_">updateToken</span>(<span class="params">state, token</span>) &#123;</span><br><span class="line">    state.<span class="property">token</span> = token</span><br><span class="line">    <span class="comment">// 通过 this.commit() 方法，调用 m_user 模块下的 saveTokenToStorage 方法，将 token 字符串持久化存储到本地</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">commit</span>(<span class="string">&#x27;m_user/saveTokenToStorage&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将 token 字符串持久化存储到本地</span></span><br><span class="line">  <span class="title function_">saveTokenToStorage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    uni.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;token&#x27;</span>, state.<span class="property">token</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 store/user.js 模块的 state 节点如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// state 数据</span><br><span class="line">state: () =&gt; (&#123;</span><br><span class="line">  // 收货地址</span><br><span class="line">  address: JSON.parse(uni.getStorageSync(&#x27;address&#x27;) || &#x27;&#123;&#125;&#x27;),</span><br><span class="line"><span class="addition">+  // 登录成功之后的 token 字符串</span></span><br><span class="line"><span class="addition">+  token: uni.getStorageSync(&#x27;token&#x27;) || &#x27;&#x27;,</span></span><br><span class="line">  // 用户的基本信息</span><br><span class="line">  userinfo: JSON.parse(uni.getStorageSync(&#x27;userinfo&#x27;) || &#x27;&#123;&#125;&#x27;)</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li><li>在 my-login 组件中，把 vuex 中的 updateToken 方法映射到当前组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line"><span class="addition">+  // 1. 使用 mapMutations 辅助方法，把 m_user 模块中的 updateToken 方法映射到当前组件中使用</span></span><br><span class="line"><span class="addition">+  ...mapMutations(&#x27;m_user&#x27;, [&#x27;updateUserInfo&#x27;, &#x27;updateToken&#x27;])</span></span><br><span class="line"></span><br><span class="line">  // 省略其它代码...</span><br><span class="line"></span><br><span class="line">  // 调用登录接口，换取永久的 token</span><br><span class="line">  async getToken(info) &#123;</span><br><span class="line">    // 调用微信登录接口</span><br><span class="line">    const [err, res] = await uni.login().catch(err =&gt; err)</span><br><span class="line">    // 判断是否 uni.login() 调用失败</span><br><span class="line">    if (err || res.errMsg !== &#x27;login:ok&#x27;) return uni.$showError(&#x27;登录失败！&#x27;)</span><br><span class="line"></span><br><span class="line">    // 准备参数对象</span><br><span class="line">    const query = &#123;</span><br><span class="line">      code: res.code,</span><br><span class="line">      encryptedData: info.encryptedData,</span><br><span class="line">      iv: info.iv,</span><br><span class="line">      rawData: info.rawData,</span><br><span class="line">      signature: info.signature</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 换取 token</span><br><span class="line">    const &#123; data: loginResult &#125; = await uni.$http.post(&#x27;/api/public/v1/users/wxlogin&#x27;, query)</span><br><span class="line">    if (loginResult.meta.status !== 200) return uni.$showMsg(&#x27;登录失败！&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+    // 2. 更新 vuex 中的 token</span></span><br><span class="line"><span class="addition">+    this.updateToken(loginResult.message.token)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h2><ol><li>实现用户头像昵称区域的基本布局<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;my-userinfo-container&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 头像昵称区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;top-box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;nickname&quot;</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化当前组件的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.my-userinfo-container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  // 为整个组件的结构添加浅灰色的背景</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.top-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400</span>rpx;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c00000</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.avatar</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: block;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">90px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">90px</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">45px</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">2px</span> solid white;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> black;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.nickname</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: white;</span><br><span class="line">      <span class="attribute">font-weight</span>: bold;</span><br><span class="line">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my.vue 页面中，为最外层包裹性质的 view 容器，添加 class=”my-container” 的类名，并美化样式如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">page,</span><br><span class="line"><span class="selector-class">.my-container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染用户的头像和昵称"><a href="#渲染用户的头像和昵称" class="headerlink" title="渲染用户的头像和昵称"></a>渲染用户的头像和昵称</h3><ol><li>在 my-userinfo 组件中，通过 mapState 辅助函数，将需要的成员映射到当前组件中使用：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 按需导入 mapState 辅助函数</span><br><span class="line"><span class="addition">+import &#123; mapState &#125; from &#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line"><span class="addition">+    // 将 m_user 模块中的 userinfo 映射到当前页面中使用</span></span><br><span class="line"><span class="addition">+    ...mapState(&#x27;m_user&#x27;, [&#x27;userinfo&#x27;]),</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data() </span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>将用户的头像和昵称渲染到页面中:<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 头像昵称区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;top-box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">image</span> <span class="attr">:src</span>=<span class="string">&quot;userinfo.avatarUrl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;avatar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;nickname&quot;</span>&gt;</span>&#123;&#123;userinfo.nickName&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染第一个面板区域"><a href="#渲染第一个面板区域" class="headerlink" title="渲染第一个面板区域"></a>渲染第一个面板区域</h3><ol><li>在 my-userinfo 组件中，定义如下的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 面板的列表区域 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-list&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 第一个面板 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- panel 的主体区域 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- panel 的 item 项 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>8<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>收藏的店铺<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>14<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>收藏的商品<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>18<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>关注的商品<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>84<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>足迹<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第二个面板 --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 第三个面板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化第一个面板的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel-list</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.panel</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">8px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.panel-body</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: space-around;</span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.panel-item</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">        <span class="attribute">align-items</span>: center;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染第二个面板区域"><a href="#渲染第二个面板区域" class="headerlink" title="渲染第二个面板区域"></a>渲染第二个面板区域</h3><ol><li>定义第二个面板区域的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第二个面板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 面板的标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-title&quot;</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 面板的主体 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-body&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 面板主体中的 item 项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/static/my-icons/icon1.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>待付款<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/static/my-icons/icon2.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>待收货<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/static/my-icons/icon3.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>退款/退货<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;/static/my-icons/icon4.png&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>全部订单<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>对之前的 SCSS 样式进行改造，从而美化第二个面板的样式：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">.panel-list &#123;</span><br><span class="line">  padding: 0 10px;</span><br><span class="line">  position: relative;</span><br><span class="line">  top: -10px;</span><br><span class="line"></span><br><span class="line">  .panel &#123;</span><br><span class="line">    background-color: white;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    margin-bottom: 8px;</span><br><span class="line"></span><br><span class="line"><span class="addition">+    .panel-title &#123;</span></span><br><span class="line"><span class="addition">+      line-height: 45px;</span></span><br><span class="line"><span class="addition">+      padding-left: 10px;</span></span><br><span class="line"><span class="addition">+      font-size: 15px;</span></span><br><span class="line"><span class="addition">+      border-bottom: 1px solid #f4f4f4;</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"></span><br><span class="line">    .panel-body &#123;</span><br><span class="line">      display: flex;</span><br><span class="line">      justify-content: space-around;</span><br><span class="line"></span><br><span class="line">      .panel-item &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line">        align-items: center;</span><br><span class="line">        justify-content: space-around;</span><br><span class="line">        font-size: 13px;</span><br><span class="line">        padding: 10px 0;</span><br><span class="line"></span><br><span class="line"><span class="addition">+        .icon &#123;</span></span><br><span class="line"><span class="addition">+          width: 35px;</span></span><br><span class="line"><span class="addition">+          height: 35px;</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="渲染第三个面板区域"><a href="#渲染第三个面板区域" class="headerlink" title="渲染第三个面板区域"></a>渲染第三个面板区域</h3><ol><li>定义第三个面板区域的 UI 结构：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 第三个面板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-list-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>收货地址<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;arrowright&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-list-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>联系客服<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;arrowright&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;panel-list-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uni-icons</span> <span class="attr">type</span>=<span class="string">&quot;arrowright&quot;</span> <span class="attr">size</span>=<span class="string">&quot;15&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uni-icons</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>美化第三个面板区域的样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.panel-list-item</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">45px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="实现退出登录的功能"><a href="#实现退出登录的功能" class="headerlink" title="实现退出登录的功能"></a>实现退出登录的功能</h3><ol><li>为第三个面板区域中的 退出登录 项绑定 click 点击事件处理函数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+&lt;view class=&quot;panel-list-item&quot; @click=&quot;logout&quot;&gt;</span></span><br><span class="line">  &lt;text&gt;退出登录&lt;/text&gt;</span><br><span class="line">  &lt;uni-icons type=&quot;arrowright&quot; size=&quot;15&quot;&gt;&lt;/uni-icons&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure></li><li>在 my-userinfo 组件的 methods 节点中定义 logout 事件处理函数：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出登录</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">logout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 询问用户是否退出登录</span></span><br><span class="line">  <span class="keyword">const</span> [err, succ] = <span class="keyword">await</span> uni.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;确认退出登录吗？&#x27;</span></span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (succ &amp;&amp; succ.<span class="property">confirm</span>) &#123;</span><br><span class="line">     <span class="comment">// 用户确认了退出登录的操作</span></span><br><span class="line">     <span class="comment">// 需要清空 vuex 中的 userinfo、token 和 address</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">updateUserInfo</span>(&#123;&#125;)</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">updateToken</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">     <span class="variable language_">this</span>.<span class="title function_">updateAddress</span>(&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 mapMutations 辅助方法，将需要用到的 mutations 方法映射到当前组件中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入辅助函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;m_user&#x27;</span>, [<span class="string">&#x27;updateUserInfo&#x27;</span>, <span class="string">&#x27;updateToken&#x27;</span>, <span class="string">&#x27;updateAddress&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三秒后自动跳转"><a href="#三秒后自动跳转" class="headerlink" title="三秒后自动跳转"></a>三秒后自动跳转</h2><h3 id="三秒后自动跳转到登录页面"><a href="#三秒后自动跳转到登录页面" class="headerlink" title="三秒后自动跳转到登录页面"></a>三秒后自动跳转到登录页面</h3><blockquote><p>需求描述：在购物车页面，当用户点击 “结算” 按钮时，如果用户没有登录，则 3 秒后自动跳转到登录页面</p></blockquote><ol><li>在 my-settle 组件的 methods 节点中，声明一个叫做 showTips 的方法，专门用来展示倒计时的提示消息：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 展示倒计时的提示消息</span></span><br><span class="line"><span class="title function_">showTips</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="comment">// 调用 uni.showToast() 方法，展示提示消息</span></span><br><span class="line">  uni.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">    <span class="comment">// 不展示任何图标</span></span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    <span class="comment">// 提示的消息</span></span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;请登录后再结算！&#x27;</span> + n + <span class="string">&#x27; 秒后自动跳转到登录页&#x27;</span>,</span><br><span class="line">    <span class="comment">// 为页面添加透明遮罩，防止点击穿透</span></span><br><span class="line">    <span class="attr">mask</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 1.5 秒后自动消失</span></span><br><span class="line">    <span class="attr">duration</span>: <span class="number">1500</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 data 节点中声明倒计时的秒数：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line"><span class="addition">+    // 倒计时的秒数</span></span><br><span class="line"><span class="addition">+    seconds: 3</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>改造 结算 按钮的 click 事件处理函数，如果用户没有登录，则预调用一个叫做 delayNavigate 的方法，进行倒计时的导航跳转：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 点击了结算按钮</span><br><span class="line">settlement() &#123;</span><br><span class="line">  // 1. 先判断是否勾选了要结算的商品</span><br><span class="line">  if (!this.checkedCount) return uni.$showMsg(&#x27;请选择要结算的商品！&#x27;)</span><br><span class="line"></span><br><span class="line">  // 2. 再判断用户是否选择了收货地址</span><br><span class="line">  if (!this.addstr) return uni.$showMsg(&#x27;请选择收货地址！&#x27;)</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 3. 最后判断用户是否登录了，如果没有登录，则调用 delayNavigate() 进行倒计时的导航跳转</span></span><br><span class="line"><span class="addition">+  // if (!this.token) return uni.$showMsg(&#x27;请先登录！&#x27;)</span></span><br><span class="line"><span class="addition">+  if (!this.token) return this.delayNavigate()</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>定义 delayNavigate 方法，初步实现倒计时的提示功能：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 延迟导航到 my 页面</span></span><br><span class="line"><span class="title function_">delayNavigate</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 展示提示消息，此时 seconds 的值等于 3</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">showTips</span>(<span class="variable language_">this</span>.<span class="property">seconds</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2. 创建定时器，每隔 1 秒执行一次</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 2.1 先让秒数自减 1</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">seconds</span>--</span><br><span class="line">    <span class="comment">// 2.2 再根据最新的秒数，进行消息提示</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">showTips</span>(<span class="variable language_">this</span>.<span class="property">seconds</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>在 data 节点中声明定时器的 Id 如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    // 倒计时的秒数</span><br><span class="line">    seconds: 3,</span><br><span class="line"><span class="addition">+    // 定时器的 Id</span></span><br><span class="line"><span class="addition">+    timer: null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>改造 delayNavigate 方法如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 延迟导航到 my 页面</span><br><span class="line">delayNavigate() &#123;</span><br><span class="line">  this.showTips(this.seconds)</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 1. 将定时器的 Id 存储到 timer 中</span></span><br><span class="line"><span class="addition">+  this.timer = setInterval(() =&gt; &#123;</span></span><br><span class="line">    this.seconds--</span><br><span class="line"></span><br><span class="line"><span class="addition">+    // 2. 判断秒数是否 &lt;= 0</span></span><br><span class="line"><span class="addition">+    if (this.seconds &lt;= 0) &#123;</span></span><br><span class="line"><span class="addition">+      // 2.1 清除定时器</span></span><br><span class="line"><span class="addition">+      clearInterval(this.timer)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+      // 2.2 跳转到 my 页面</span></span><br><span class="line"><span class="addition">+      uni.switchTab(&#123;</span></span><br><span class="line"><span class="addition">+        url: &#x27;/pages/my/my&#x27;</span></span><br><span class="line"><span class="addition">+      &#125;)</span></span><br><span class="line"><span class="addition">+</span></span><br><span class="line"><span class="addition">+      // 2.3 终止后续代码的运行（当秒数为 0 时，不再展示 toast 提示消息）</span></span><br><span class="line"><span class="addition">+      return</span></span><br><span class="line"><span class="addition">+    &#125;</span></span><br><span class="line"></span><br><span class="line">    this.showTips(this.seconds)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>进一步改造 delayNavigate 方法，在执行此方法时，立即将 seconds 秒数重置为 3 即可：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 延迟导航到 my 页面</span><br><span class="line">delayNavigate() &#123;</span><br><span class="line"><span class="addition">+  // 把 data 中的秒数重置成 3 秒</span></span><br><span class="line"><span class="addition">+  this.seconds = 3</span></span><br><span class="line">  this.showTips(this.seconds)</span><br><span class="line"></span><br><span class="line">  this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">    this.seconds--</span><br><span class="line"></span><br><span class="line">    if (this.seconds &lt;= 0) &#123;</span><br><span class="line">      clearInterval(this.timer)</span><br><span class="line">      uni.switchTab(&#123;</span><br><span class="line">        url: &#x27;/pages/my/my&#x27;</span><br><span class="line">      &#125;)</span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.showTips(this.seconds)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="登录成功之后再返回之前的页面"><a href="#登录成功之后再返回之前的页面" class="headerlink" title="登录成功之后再返回之前的页面"></a>登录成功之后再返回之前的页面</h3><blockquote><p>核心实现思路：在自动跳转到登录页面成功之后，把返回页面的信息存储到 vuex 中，从而方便登录成功之后，根据返回页面的信息重新跳转回去。<br>返回页面的信息对象，主要包含 { openType, from } 两个属性，其中 openType 表示以哪种方式导航回之前的页面；from 表示之前页面的 url 地址；</p></blockquote><ol><li>在 store/user.js 模块的 state 节点中，声明一个叫做 redirectInfo 的对象如下：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// state 数据</span><br><span class="line">state: () =&gt; (&#123;</span><br><span class="line">  // 收货地址</span><br><span class="line">  address: JSON.parse(uni.getStorageSync(&#x27;address&#x27;) || &#x27;&#123;&#125;&#x27;),</span><br><span class="line">  // 登录成功之后的 token 字符串</span><br><span class="line">  token: uni.getStorageSync(&#x27;token&#x27;) || &#x27;&#x27;,</span><br><span class="line">  // 用户的基本信息</span><br><span class="line">  userinfo: JSON.parse(uni.getStorageSync(&#x27;userinfo&#x27;) || &#x27;&#123;&#125;&#x27;),</span><br><span class="line"><span class="addition">+  // 重定向的 object 对象 &#123; openType, from &#125;</span></span><br><span class="line"><span class="addition">+  redirectInfo: null</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure></li><li>在 store/user.js 模块的 mutations 节点中，声明一个叫做 updateRedirectInfo 的方法：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="comment">// 更新重定向的信息对象</span></span><br><span class="line">  <span class="title function_">updateRedirectInfo</span>(<span class="params">state, info</span>) &#123;</span><br><span class="line">    state.<span class="property">redirectInfo</span> = info</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-settle 组件中，通过 mapMutations 辅助方法，把 m_user 模块中的 updateRedirectInfo 方法映射到当前页面中使用：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="comment">// 把 m_user 模块中的 updateRedirectInfo 方法映射到当前页面中使用</span></span><br><span class="line">  ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;m_user&#x27;</span>, [<span class="string">&#x27;updateRedirectInfo&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>改造 my-settle 组件 methods 节点中的 delayNavigate 方法，当成功跳转到 my 页面 之后，将重定向的信息对象存储到 vuex 中：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 延迟导航到 my 页面</span><br><span class="line">delayNavigate() &#123;</span><br><span class="line">  // 把 data 中的秒数重置成 3 秒</span><br><span class="line">  this.seconds = 3</span><br><span class="line">  this.showTips(this.seconds)</span><br><span class="line"></span><br><span class="line">  this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">    this.seconds--</span><br><span class="line"></span><br><span class="line">    if (this.seconds &lt;= 0) &#123;</span><br><span class="line">      // 清除定时器</span><br><span class="line">      clearInterval(this.timer)</span><br><span class="line">      // 跳转到 my 页面</span><br><span class="line">      uni.switchTab(&#123;</span><br><span class="line">        url: &#x27;/pages/my/my&#x27;,</span><br><span class="line"><span class="addition">+        // 页面跳转成功之后的回调函数</span></span><br><span class="line"><span class="addition">+        success: () =&gt; &#123;</span></span><br><span class="line"><span class="addition">+          // 调用 vuex 的 updateRedirectInfo 方法，把跳转信息存储到 Store 中</span></span><br><span class="line"><span class="addition">+          this.updateRedirectInfo(&#123;</span></span><br><span class="line"><span class="addition">+            // 跳转的方式</span></span><br><span class="line"><span class="addition">+            openType: &#x27;switchTab&#x27;,</span></span><br><span class="line"><span class="addition">+            // 从哪个页面跳转过去的</span></span><br><span class="line"><span class="addition">+            from: &#x27;/pages/cart/cart&#x27;</span></span><br><span class="line"><span class="addition">+          &#125;)</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      return</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    this.showTips(this.seconds)</span><br><span class="line">  &#125;, 1000)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-login 组件中，通过 mapState 和 mapMutations 辅助方法，将 vuex 中需要的数据和方法，映射到当前页面中使用：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需导入辅助函数</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations, mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 调用 mapState 辅助方法，把 m_user 模块中的数据映射到当前用组件中使用</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(<span class="string">&#x27;m_user&#x27;</span>, [<span class="string">&#x27;redirectInfo&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 调用 mapMutations 辅助方法，把 m_user 模块中的方法映射到当前组件中使用</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(<span class="string">&#x27;m_user&#x27;</span>, [<span class="string">&#x27;updateUserInfo&#x27;</span>, <span class="string">&#x27;updateToken&#x27;</span>, <span class="string">&#x27;updateRedirectInfo&#x27;</span>]),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>改造 my-login 组件中的 getToken 方法，当登录成功之后，预调用 this.navigateBack() 方法返回登录之前的页面:<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 调用登录接口，换取永久的 token</span><br><span class="line">async getToken(info) &#123;</span><br><span class="line">  // 省略其它代码...</span><br><span class="line"></span><br><span class="line"><span class="addition">+  // 判断 vuex 中的 redirectInfo 是否为 null</span></span><br><span class="line"><span class="addition">+  // 如果不为 null，则登录成功之后，需要重新导航到对应的页面</span></span><br><span class="line"><span class="addition">+  this.navigateBack()</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 my-login 组件中，声明 navigateBack 方法如下：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回登录之前的页面</span></span><br><span class="line"><span class="title function_">navigateBack</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// redirectInfo 不为 null，并且导航方式为 switchTab</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">redirectInfo</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">redirectInfo</span>.<span class="property">openType</span> === <span class="string">&#x27;switchTab&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用小程序提供的 uni.switchTab() API 进行页面的导航</span></span><br><span class="line">    uni.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">      <span class="comment">// 要导航到的页面地址</span></span><br><span class="line">      <span class="attr">url</span>: <span class="variable language_">this</span>.<span class="property">redirectInfo</span>.<span class="property">from</span>,</span><br><span class="line">      <span class="comment">// 导航成功之后，把 vuex 中的 redirectInfo 对象重置为 null</span></span><br><span class="line">      <span class="attr">complete</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">updateRedirectInfo</span>(<span class="literal">null</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="微信支付【查文档】"><a href="#微信支付【查文档】" class="headerlink" title="微信支付【查文档】"></a>微信支付【查文档】</h2><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 标题不显示</li><li>[ ] vuex 实现购物车逻辑，及如何实现状态管理的细节</li><li>[ ] token 用户登录的流程</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> MiniPrograme </category>
          
          <category> uni-app </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Project </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wechat MiniPrograme Start</title>
      <link href="/2023/02/212022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2023/%E5%89%8D%E7%AB%AF_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_Start/979989ax/"/>
      <url>/2023/02/212022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2023/%E5%89%8D%E7%AB%AF_%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F_Start/979989ax/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="小程序与普通网页开发的区别"><a href="#小程序与普通网页开发的区别" class="headerlink" title="小程序与普通网页开发的区别"></a>小程序与普通网页开发的区别</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221182647.png" alt="20230221182647"></p><h2 id="AppID"><a href="#AppID" class="headerlink" title="AppID"></a>AppID</h2><p>wx5a5488330c13021c</p><h2 id="微信开发者工具"><a href="#微信开发者工具" class="headerlink" title="微信开发者工具"></a>微信开发者工具</h2><p>设置外观和代理</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221183910.png" alt="20230221183910"></p><p>自定义编译模式</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222190847.png" alt="20230222190847"></p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221184048.png" alt="20230221184048"></p><h2 id="小程序代码构成"><a href="#小程序代码构成" class="headerlink" title="小程序代码构成"></a>小程序代码构成</h2><h3 id="项目的基本组成结构"><a href="#项目的基本组成结构" class="headerlink" title="项目的基本组成结构"></a>项目的基本组成结构</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221184650.png" alt="20230221184650"></p><ul><li>pages用来存放所有小程序的页面</li><li>utils用来存放工具性质的模块（例如：格式化时间的自定义模块）</li><li>app.js小程序项目的入口文件</li><li>app.json小程序项目的全局配置文件</li><li>app.wxss小程序项目的全局样式文件</li><li>project.config.json项目的配置文件</li><li>sitemap.json用来配置小程序及其页面是否允许被微信索引</li></ul><h3 id="页面的组成部分"><a href="#页面的组成部分" class="headerlink" title="页面的组成部分"></a>页面的组成部分</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221185152.png" alt="20230221185152"></p><h3 id="JSON-配置文件"><a href="#JSON-配置文件" class="headerlink" title="JSON 配置文件"></a>JSON 配置文件</h3><p>通过不同的.json配置文件，可以对小程序项目进行不同级别的配置。</p><p>小程序项目中有4种json配置文件，分别是：</p><ol><li>项目根目录中的app.json配置文件</li><li>项目根目录中的project.config.json配置文件</li><li>项目根目录中的sitemap.json配置文件</li><li>每个页面文件夹中的.json配置文件</li></ol><p>app.json ：<br>app.json是当前小程序的全局配置，包括了小程序的所有页面路径、窗口外观、界面表现、底部tab等。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221185855.png" alt="20230221185855"></p><p>project.config.json：<br>project.config.json是项目配置文件，用来记录我们对小程序开发工具所做的个性化配置。如：</p><ol><li>setting 中保存了编译相关的配置</li><li>projectname 中保存的是项目名称</li><li>appid 中保存的是小程序的账号 ID</li></ol><p>sitemap.json：<br>微信现已开放小程序内搜索，效果类似于PC网页的SEO。sitemap.json文件用来配置小程序页面是否允许微信索引。<br>当开发者允许微信索引时，微信会通过爬虫的形式，为小程序的页面内容建立索引。当用户的搜索关键字和页面的索引匹配成功的时候，小程序的页面将可能展示在搜索结果中。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221190411.png" alt="20230221190411"></p><p>页面的.json 配置文件：<br>小程序中的每一个页面，可以使用.json文件来对本页面的窗口外观进行配置，页面中的配置项会覆盖app.json的window中相同的配置项。例如：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221190904.png" alt="20230221190904"></p><h4 id="新建小程序页面"><a href="#新建小程序页面" class="headerlink" title="新建小程序页面"></a>新建小程序页面</h4><p>只需要在 app.json-&gt;pages 中新增页面的存放路径，小程序开发者工具即可帮我们自动创建对应的页面文件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221191047.png" alt="20230221191047"></p><h4 id="修改项目首页"><a href="#修改项目首页" class="headerlink" title="修改项目首页"></a>修改项目首页</h4><p>只需要调整 app.json-&gt;pages 数组中页面路径的前后顺序，即可修改项目的首页。小程序会把排在第一位的页面，当作项目首页进行渲染，如图所示：</p><h3 id="WXML-模板"><a href="#WXML-模板" class="headerlink" title="WXML 模板"></a>WXML 模板</h3><p>WXML(WeiXin Markup Language)是小程序框架设计的一套标签语言，用来构建小程序页面的结构，其作用类似于网页开发中的HTML。</p><p>WXML和HTML的区别：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221191611.png" alt="20230221191611"></p><h3 id="WXSS-样式"><a href="#WXSS-样式" class="headerlink" title="WXSS 样式"></a>WXSS 样式</h3><p>WXSS(WeiXin Style Sheets)是一套样式语言，用于描述WXML的组件样式，类似于网页开发中的CSS。</p><p>WXSS和CSS的区别：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221191937.png" alt="20230221191937"></p><h3 id="JS逻辑交互"><a href="#JS逻辑交互" class="headerlink" title="JS逻辑交互"></a>JS逻辑交互</h3><p>小程序中.js文件的三大分类：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221192143.png" alt="20230221192143"></p><h2 id="小程序的宿主环境"><a href="#小程序的宿主环境" class="headerlink" title="小程序的宿主环境"></a>小程序的宿主环境</h2><h3 id="什么是宿主环境"><a href="#什么是宿主环境" class="headerlink" title="什么是宿主环境"></a>什么是宿主环境</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221192340.png" alt="20230221192340"></p><h3 id="小程序的宿主环境-1"><a href="#小程序的宿主环境-1" class="headerlink" title="小程序的宿主环境"></a>小程序的宿主环境</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221193014.png" alt="20230221193014"></p><h3 id="小程序宿主环境包含的内容"><a href="#小程序宿主环境包含的内容" class="headerlink" title="小程序宿主环境包含的内容"></a>小程序宿主环境包含的内容</h3><ol><li>通信模型</li><li>运行机制</li><li>组件</li><li>API</li></ol><h4 id="通信模型"><a href="#通信模型" class="headerlink" title="通信模型"></a>通信模型</h4><p>小程序中通信的主体是渲染层和逻辑层：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221193311.png" alt="20230221193311"></p><p>小程序的通信模型（分为两部分）：</p><ol><li>渲染层和逻辑层之间的通信</li><li>逻辑层和第三方服务器之间的通信</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221193516.png" alt="20230221193516"></p><h4 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h4><p>小程序启动的过程</p><ol><li>把小程序的代码包下载到本地</li><li>解析 app.json 全局配置文件</li><li>执行app.js小程序入口文件，调用App()创建小程序实例</li><li>渲染小程序首页</li><li>小程序启动完成</li></ol><p>小程序页面渲染的过程</p><ol><li>加载解析页面的.json配置文件</li><li>加载页面的.wxml模板和.WXSS样式</li><li>执行页面的.js文件，调用Page()创建页面实例</li><li>页面渲染完成</li></ol><h4 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h4><p>小程序中组件的分类：小程序中的组件也是由宿主环境提供的，开发者可以基于组件快速搭建出漂亮的页面结构。官方把小程序的组<br>件分为了9大类，分别是：</p><ol><li>视图容器</li><li>基础内容</li><li>表单组件</li><li>导航组件</li><li>媒体组件</li><li>map地图组件</li><li>canvas 画布组件</li><li>开放能力</li><li>无障碍访问</li></ol><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>小程序中的API是由宿主环境提供的，通过这些丰富的小程序API,开发者可以方便的调用微信提供的能力，例如：获取用户信息、本地存储、支付功能等。</p><p>小程序API的3大分类：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221201003.png" alt="20230221201003"></p><h2 id="协同工作和发布"><a href="#协同工作和发布" class="headerlink" title="协同工作和发布"></a>协同工作和发布</h2><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3><p>权限管理需求：在中大型的公司里，人员的分工非常仔细：同一个小程序项目，一般会有不同岗位、不同角色的员工同时参与设计与开发。此时出于管理需要，我们迫切需要对不同岗位、不同角色的员工的权限进行边界的划分，使他们能够高效的进行协同工作。</p><p>项目成员的组织结构：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221201355.png" alt="20230221201355"></p><p>小程序的开发流程：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221201502.png" alt="20230221201502"></p><h3 id="成员管理"><a href="#成员管理" class="headerlink" title="成员管理"></a>成员管理</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221201723.png" alt="20230221201723"></p><p>不同项目成员对应的权限：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221201852.png" alt="20230221201852"></p><ol><li>开发者权限：可使用小程序开发者工具及对小程序的功能进行代码开发</li><li>体验者权限：可使用体验版小程序</li><li>登录权限：可登录小程序管理后台，无需管理员确认</li><li>开发设置：设置小程序服务器域名、消息推送及扫描普通链接二维码打开小程序</li><li>腾讯云管理：云开发相关设置</li></ol><p>添加项目成员和体验成员：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221202116.png" alt="20230221202116"></p><h3 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h3><p>小程序的版本：</p><ol><li>开发版本</li><li>体验版本</li><li>审核中的版本</li><li>线上版本</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221202419.png" alt="20230221202419"></p><h3 id="发布上线"><a href="#发布上线" class="headerlink" title="发布上线"></a>发布上线</h3><p>一个小程序的发布上线，一般要经过 上传代码-&gt;提交审核-&gt;发布 三个步骤。</p><p>上传代码：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221202627.png" alt="20230221202627"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221202659.png" alt="20230221202659"></p><p>提交审核：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221202759.png" alt="20230221202759"></p><p>发布：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221202838.png" alt="20230221202838"></p><h3 id="小程序码获取"><a href="#小程序码获取" class="headerlink" title="小程序码获取"></a>小程序码获取</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221203047.png" alt="20230221203047"></p><h3 id="运营数据"><a href="#运营数据" class="headerlink" title="运营数据"></a>运营数据</h3><p>查看小程序运营数据的两种方式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221203238.png" alt="20230221203238"></p><h1 id="组件-1"><a href="#组件-1" class="headerlink" title="组件"></a>组件</h1><h2 id="视图容器"><a href="#视图容器" class="headerlink" title="视图容器"></a>视图容器</h2><p>常用的视图容器类组件</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221194146.png" alt="20230221194146"></p><p>view 组件的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221194259.png" alt="20230221194259"></p><p>scroll-view 组件的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221194613.png" alt="20230221194613"></p><p>swiper 和 swiper-item 组件的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221194836.png" alt="20230221194836"></p><p>swiper 组件的常用属性：</p><ul><li>indicator-dots</li><li>indicator-color</li><li>indicator-active-color</li><li>autoplay</li><li>interval</li><li>circular</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221195052.png" alt="20230221195052"></p><h2 id="基础内容"><a href="#基础内容" class="headerlink" title="基础内容"></a>基础内容</h2><p>常用的基础内容组件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221195415.png" alt="20230221195415"></p><p>text组件的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221195509.png" alt="20230221195509"></p><p>rich-text 组件的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221195659.png" alt="20230221195659"></p><h2 id="表单组件"><a href="#表单组件" class="headerlink" title="表单组件"></a>表单组件</h2><h3 id="button"><a href="#button" class="headerlink" title="button"></a>button</h3><ul><li>按钮组件</li><li>功能比HTML中的button按钮丰富</li><li>通过open-type属性可以调用微信提供的各种功能（客服、转发、获取用户授权、获取用户信息等）</li></ul><p>button 按钮的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221200037.png" alt="20230221200037"></p><h2 id="导航组件"><a href="#导航组件" class="headerlink" title="导航组件"></a>导航组件</h2><h2 id="媒体组件"><a href="#媒体组件" class="headerlink" title="媒体组件"></a>媒体组件</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><ul><li>图片组件</li><li>image组件默认宽度约300px、高度约240px</li></ul><p>image组件的基本使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221200231.png" alt="20230221200231"></p><p>image组件的mode属性用来指定图片的裁剪和缩放模式，常用的mode属性值如下：</p><ol><li>scaleToFill</li><li>aspectFit</li><li>aspectFill</li><li>widthFix</li><li>heightFix</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221200450.png" alt="20230221200450"></p><h2 id="map地图组件"><a href="#map地图组件" class="headerlink" title="map地图组件"></a>map地图组件</h2><h2 id="canvas-画布组件"><a href="#canvas-画布组件" class="headerlink" title="canvas 画布组件"></a>canvas 画布组件</h2><h2 id="开放能力"><a href="#开放能力" class="headerlink" title="开放能力"></a>开放能力</h2><h2 id="无障碍访问"><a href="#无障碍访问" class="headerlink" title="无障碍访问"></a>无障碍访问</h2><h1 id="模板与配置"><a href="#模板与配置" class="headerlink" title="模板与配置"></a>模板与配置</h1><h2 id="WXML模板语法"><a href="#WXML模板语法" class="headerlink" title="WXML模板语法"></a>WXML模板语法</h2><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><ol><li>在data中定义数据<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221205056.png" alt="20230221205056"></li><li>在WXML中使用数据（Mustache 语法的格式）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221205208.png" alt="20230221205208"></li></ol><p>Mustache 语法的应用场景：</p><ol><li>绑定内容</li><li>绑定属性<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221205406.png" alt="20230221205406"></li><li>运算（三元运算、算术运算等）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221205603.png" alt="20230221205603"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221205742.png" alt="20230221205742"></li></ol><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>事件是渲染层到逻辑层的通讯方式。通过事件可以将用户在渲染层产生的行为，反馈到逻辑层进行业务的处理。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221205945.png" alt="20230221205945"></p><p>小程序中常用的事件：</p><ol><li>tap</li><li>input</li><li>change</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221210031.png" alt="20230221210031"></p><p>事件对象的属性列表：（当事件回调触发的时候，会收到一个事件对象event,它的详细属性如下表所示）</p><ol><li>type</li><li>timeStamp</li><li>target</li><li>currentTarget</li><li>detail</li><li>touches</li><li>changedTouches</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221210518.png" alt="20230221210518"></p><p>target 和 currentTarget 的区别：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221210828.png" alt="20230221210828"></p><p>bindtap 的语法格式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221211507.png" alt="20230221211507"></p><p>在事件处理函数中为 data 中的数据赋值：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221211816.png" alt="20230221211816"></p><p>bindinput 的语法格式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221213419.png" alt="20230221213419"></p><p>实现文本框和 data 之间的数据同步：</p><ol><li>定义数据</li><li>渲染结构</li><li>绑定input事件处理函数<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221213927.png" alt="20230221213927"></li></ol><h3 id="事件传参"><a href="#事件传参" class="headerlink" title="事件传参"></a>事件传参</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221212534.png" alt="20230221212534"></p><p>可以为组件提供<code>data-*</code>自定义属性传参，其中<code>*</code>代表的是参数的名字，示例代码如下：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221212631.png" alt="20230221212631"></p><p>获取参数：</p><p>在事件处理函数中，通过<code>event.target.dataset.参数名</code>即可获取到具体参数的值，示例代码如下：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221212758.png" alt="20230221212758"></p><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><p>wx:if：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221230002.png" alt="20230221230002"></p><p>结合<code>&lt;block&gt;</code>使用wx:if：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221230152.png" alt="20230221230152"></p><p>hidden：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221230324.png" alt="20230221230324"></p><p>wx:if与hidden的对比：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221230629.png" alt="20230221230629"></p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><p>wx:for：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221230747.png" alt="20230221230747"></p><p>手动指定索引和当前项的变量名：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221230959.png" alt="20230221230959"></p><p>wx:key 的使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221231105.png" alt="20230221231105"></p><h2 id="WXSS-模板样式"><a href="#WXSS-模板样式" class="headerlink" title="WXSS 模板样式"></a>WXSS 模板样式</h2><p>WXSS 和 CSS 的关系：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221231612.png" alt="20230221231612"></p><h3 id="rpx"><a href="#rpx" class="headerlink" title="rpx"></a>rpx</h3><p>rpx(responsive pixel)是微信小程序独有的，用来解决屏适配的尺寸单位。</p><p>rpx的实现原理：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221231839.png" alt="20230221231839"></p><p>rpx与px之间的单位换算：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230221232130.png" alt="20230221232130"></p><h3 id="样式导入"><a href="#样式导入" class="headerlink" title="样式导入"></a>样式导入</h3><p>使用WXSS提供的<code>@import</code>语法，可以导入外联的样式表。</p><p>语法格式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222132541.png" alt="20230222132541"></p><h3 id="全局-局部样式"><a href="#全局-局部样式" class="headerlink" title="全局/局部样式"></a>全局/局部样式</h3><p>全局样式：定义在<code>app.wxss</code>中的样式为全局样式，作用于每一个页面。</p><p>局部样式：在<code>页面的.wxss</code>文件中定义的样式为局部样式，只作用于当前页面。</p><p>注意：</p><ol><li>当局部样式和全局样式冲突时，根据就近原则，局部样式会覆盖全局样式</li><li>当局部样式的权重大于或等于全局样式的权重时，才会覆盖全局的样式</li></ol><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><h3 id="全局配置文件及常用的配置项"><a href="#全局配置文件及常用的配置项" class="headerlink" title="全局配置文件及常用的配置项"></a>全局配置文件及常用的配置项</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222133320.png" alt="20230222133320"></p><p>window：</p><ol><li>小程序窗口的组成部分<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222133450.png" alt="20230222133450"></li><li>window 节点常用的配置项<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222133548.png" alt="20230222133548"></li></ol><h3 id="tabBar"><a href="#tabBar" class="headerlink" title="tabBar"></a>tabBar</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222134632.png" alt="20230222134632"></p><p>tabBar的6个组成部分：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222134802.png" alt="20230222134802"></p><p>tabBar节点的配置项：</p><ol><li>position</li><li>borderStyle</li><li>color</li><li>selectedColor</li><li>backgroundColor</li><li>list</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222134911.png" alt="20230222134911"></p><p>list 数组对象（tab）选项配置项：</p><ol><li>pagePath</li><li>text</li><li>iconPath</li><li>selectedlconPath</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222135151.png" alt="20230222135151"></p><p>配置步骤：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222135755.png" alt="20230222135755"></p><h2 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h2><p>小程序中，每个页面都有自己的.json配置文件，用来对当前页面的窗口外观、页面效果等进行配置。</p><p>页面配置和全局配置的关系：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222140209.png" alt="20230222140209"></p><p>页面配置中常用的配置项：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222140253.png" alt="20230222140253"></p><h2 id="网络数据请求"><a href="#网络数据请求" class="headerlink" title="网络数据请求"></a>网络数据请求</h2><h3 id="数据请求的限制"><a href="#数据请求的限制" class="headerlink" title="数据请求的限制"></a>数据请求的限制</h3><ol><li>只能请求HTTPS类型的接口</li><li>必须将接口的域名添加到信任列表中</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222140627.png" alt="20230222140627"></p><h3 id="配置request合法域名"><a href="#配置request合法域名" class="headerlink" title="配置request合法域名"></a>配置request合法域名</h3><p>配置步骤：</p><p>登录微信小程序管理后台-&gt;开发-&gt;开发设置-&gt;服务器域名-&gt;修改request合法域名</p><p>注意事项：</p><ol><li>域名只支持https协议</li><li>域名不能使用IP地址或localhost</li><li>域名必须经过ICP备案</li><li>服务器域名一个月内最多可申请5次修改</li></ol><h3 id="发起GET请求"><a href="#发起GET请求" class="headerlink" title="发起GET请求"></a>发起GET请求</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222141205.png" alt="20230222141205"></p><h3 id="发起POST请求"><a href="#发起POST请求" class="headerlink" title="发起POST请求"></a>发起POST请求</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222141646.png" alt="20230222141646"></p><h3 id="页面加载请求"><a href="#页面加载请求" class="headerlink" title="页面加载请求"></a>页面加载请求</h3><p>在很多情况下，我们需要在页面刚加载的时候，自动请求一些初始化的数据。此时需要在页面的onLoad事件中调用获取数据的函数，示例代码如下：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222141932.png" alt="20230222141932"></p><h3 id="跳过request合法域名校验"><a href="#跳过request合法域名校验" class="headerlink" title="跳过request合法域名校验"></a>跳过request合法域名校验</h3><p>仅限在开发与调试阶段使用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222142232.png" alt="20230222142232"></p><h3 id="关于跨域和Ajax的说明"><a href="#关于跨域和Ajax的说明" class="headerlink" title="关于跨域和Ajax的说明"></a>关于跨域和Ajax的说明</h3><p>跨域：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222142525.png" alt="20230222142525"></p><h1 id="视图与逻辑"><a href="#视图与逻辑" class="headerlink" title="视图与逻辑"></a>视图与逻辑</h1><h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><h3 id="导航跳转"><a href="#导航跳转" class="headerlink" title="导航跳转"></a>导航跳转</h3><p>小程序中实现页面导航的两种方式：</p><ol><li>声明式导航</li><li>编程式导航</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222144337.png" alt="20230222144337"></p><p>声明式导航到tabBar页面：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222144600.png" alt="20230222144600"></p><p>声明式导航到非tabBar页面：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222144847.png" alt="20230222144847"></p><p>声明式导航后退页面：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222145035.png" alt="20230222145035"></p><p>编程式导航到 tabBar 页面：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222145158.png" alt="20230222145158"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222150304.png" alt="20230222150304"></p><p>编程式导航到非 tabBar 页面：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222151036.png" alt="20230222151036"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222151102.png" alt="20230222151102"></p><p>编程式导航后退页面：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222151223.png" alt="20230222151223"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222151246.png" alt="20230222151246"></p><h3 id="导航传参"><a href="#导航传参" class="headerlink" title="导航传参"></a>导航传参</h3><p>声明式导航传参：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222151757.png" alt="20230222151757"></p><p>编程式导航传参：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222172816.png" alt="20230222172816"></p><p>在onLoad 中接收导航参数：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222172942.png" alt="20230222172942"></p><h2 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h2><h3 id="下拉刷新事件"><a href="#下拉刷新事件" class="headerlink" title="下拉刷新事件"></a>下拉刷新事件</h3><p>启用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222175951.png" alt="20230222175951"></p><p>配置刷新窗口样式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222180120.png" alt="20230222180120"></p><p>监听页面的下拉刷新事件：</p><p>在页面的.js文件中，通过 <code>onPullDownRefresh()</code> 函数即可监听当前页面的下拉刷新事件。</p><p>停止下拉刷新的效果:</p><p>当处理完下拉刷新后，下拉刷新的loading效果会一直显示，不会主动消失，所以需要手动隐藏 loading 效果。此时，调用 <code>wx.stopPullDownRefresh()</code> 可以停止当前页面的下拉刷新。</p><h3 id="上拉触底事件"><a href="#上拉触底事件" class="headerlink" title="上拉触底事件"></a>上拉触底事件</h3><p>上拉触底是移动端的专有名词，通过手指在屏幕上的上拉滑动操作，从而加载更多数据的行为。</p><p>监听页面的上拉触底事件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222181805.png" alt="20230222181805"></p><p>配置上拉触底距离：</p><p>上拉触底距离指的是触发上拉触底事件时，滚动条距离页面底部的距离。<br>可以在全局或页面的.json配置文件中，通过 <code>onReachBottomDistance</code> 属性来配置上拉触底的距离。<br>小程序默认的触底距离是50px,在实际开发中，可以根据自己的需求修改这个默认值。</p><p>配置 loading 效果：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222190211.png" alt="20230222190211"></p><p>对上拉触底进行节流处理：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222190443.png" alt="20230222190443"></p><p>判断是否还有下一页数据：</p><p>公式：页码值<code>*</code>每页显示多少条数据<code>&gt;=</code>总数据条数</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222224425.png" alt="20230222224425"></p><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p>生命周期（Life Cycle)是指一个对象从创建-&gt;运行-&gt;销毁的整个阶段，强调的是一个时间段。</p><p>生命周期的分类：</p><ol><li>应用生命周期</li><li>页面生命周期</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222191432.png" alt="20230222191432"></p><p>应用的生命周期函数：</p><ol><li>onLaunch</li><li>onShow</li><li>onHide</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222191927.png" alt="20230222191927"></p><p>页面的生命周期函数：</p><ol><li>onLoad</li><li>onShow</li><li>onReady</li><li>onHide</li><li>onUnload</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222193126.png" alt="20230222193126"></p><h2 id="WXS-脚本"><a href="#WXS-脚本" class="headerlink" title="WXS 脚本"></a>WXS 脚本</h2><p>WXS(WeiXin Script)是小程序独有的一套脚本语言，结合WXML,可以构建出页面的结构。</p><p>wxml中无法调用在页面的.js中定义的函数，但是，wxml中可以调用WXS中定义的函数。因此，小程序中wxs的典型应用场景就是“<code>过滤器</code>”。</p><p>WXS和JavaScript的关系：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222193543.png" alt="20230222193543"></p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><p>内嵌 wxs 脚本：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222193815.png" alt="20230222193815"></p><p>定义并使用外联的wxs脚本：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222194430.png" alt="20230222194430"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222194533.png" alt="20230222194533"></p><h3 id="WXS-特点"><a href="#WXS-特点" class="headerlink" title="WXS 特点"></a>WXS 特点</h3><ol><li>与JavaScript不同</li><li>不能作为组件的事件回调<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222194930.png" alt="20230222194930"></li><li>隔离性<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222195020.png" alt="20230222195020"></li><li>性能好<ol><li>在iOS设备上，小程序内的WXS会比JavaScript代码快2~20倍</li><li>在android设备上，二者的运行效率无差异</li></ol></li></ol><h1 id="基础加强"><a href="#基础加强" class="headerlink" title="基础加强"></a>基础加强</h1><h2 id="自定义组件"><a href="#自定义组件" class="headerlink" title="自定义组件"></a>自定义组件</h2><h3 id="创建与引用组件"><a href="#创建与引用组件" class="headerlink" title="创建与引用组件"></a>创建与引用组件</h3><p>创建组件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222231536.png" alt="20230222231536"></p><p>引用组件：</p><ol><li>局部引用（组件只能在当前被引用的页面内使用）</li><li>全局引用（组件可以在每个小程序页面中使用）</li></ol><p>局部引用组件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222231936.png" alt="20230222231936"></p><p>全局引用组件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222232148.png" alt="20230222232148"></p><p>全局引用VS局部引用：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222232403.png" alt="20230222232403"></p><p>组件和页面的区别：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222232551.png" alt="20230222232551"></p><h3 id="组件样式"><a href="#组件样式" class="headerlink" title="组件样式"></a>组件样式</h3><p>组件样式隔离：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222232831.png" alt="20230222232831"></p><p>组件样式隔离的注意点：</p><ol><li>app.wxss中的全局样式对组件无效</li><li>只有class选择器会有样式隔离效果，<code>id选择器、属性选择器、标签选择器不受样式隔离的影响</code>（建议：在组件和引用组件的页面中建议使用class选择器，不要使用id、属性、标签选择器！）</li></ol><p>修改组件的样式隔离选项（stylelsolation）：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222233319.png" alt="20230222233319"></p><p>stylelsolation 的可选值：</p><ol><li>isolated</li><li>apply-shared（外部可以影响内部）</li><li>shared（双向影响）</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222233452.png" alt="20230222233452"></p><h3 id="数据方法和属性"><a href="#数据方法和属性" class="headerlink" title="数据方法和属性"></a>数据方法和属性</h3><p>data 数据：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222233930.png" alt="20230222233930"></p><p>methods 方法：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222234053.png" alt="20230222234053"></p><p>properties 属性：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222234438.png" alt="20230222234438"><br>data 和 properties 的区别：</p><blockquote><p>在小程序的组件中，properties属性和data数据的用法相同，它们都是可读可写的，只不过：</p></blockquote><ol><li>data更倾向于存储组件的私有数据</li><li>properties更倾向于存储外界传递到组件中的数据</li></ol><p>使用setData修改properties的值：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222235014.png" alt="20230222235014"></p><h3 id="数据监听器"><a href="#数据监听器" class="headerlink" title="数据监听器"></a>数据监听器</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222235218.png" alt="20230222235218"></p><p>监听对象属性的变化：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230222235723.png" alt="20230222235723"></p><p>监听对象中所有属性的变化：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223000507.png" alt="20230223000507"></p><h3 id="纯数据字段"><a href="#纯数据字段" class="headerlink" title="纯数据字段"></a>纯数据字段</h3><blockquote><p>概念：纯数据字段指的是那些不用于界面渲染的data字段。使用此配置有助于提升页面更新的性能。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223153132.png" alt="20230223153132"></p><p>使用规则：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223153253.png" alt="20230223153253"></p><h3 id="组件的生命周期【重点】"><a href="#组件的生命周期【重点】" class="headerlink" title="组件的生命周期【重点】"></a>组件的生命周期【重点】</h3><p>组件全部的生命周期函数：</p><ol><li>created</li><li>attached</li><li>ready</li><li>moved</li><li>detached</li><li>error</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223153631.png" alt="20230223153631"></p><p>组件主要的生命周期函数:</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223153922.png" alt="20230223153922"></p><p>lifetimes 节点：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223154207.png" alt="20230223154207"></p><h3 id="组件所在页面的生命周期"><a href="#组件所在页面的生命周期" class="headerlink" title="组件所在页面的生命周期"></a>组件所在页面的生命周期</h3><blockquote><p>自定义组件的行为依赖于页面状态的变化，此时就需要用到组件所在页面的生命周期。</p></blockquote><ol><li>show</li><li>hide</li><li>resize</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223154549.png" alt="20230223154549"></p><p>pageLifetimes 节点：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223154710.png" alt="20230223154710"></p><h3 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h3><p>插槽的概念：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223155303.png" alt="20230223155303"></p><p>使用单个插槽（默认）：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223155429.png" alt="20230223155429"></p><p>使用多个插槽：</p><blockquote><p>当需要使用多个插槽时，需要在组件的.js文件中配置启用多个插槽：</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223155728.png" alt="20230223155728"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223155955.png" alt="20230223155955"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223160222.png" alt="20230223160222"></p><h3 id="父子组件之间的通信"><a href="#父子组件之间的通信" class="headerlink" title="父子组件之间的通信"></a>父子组件之间的通信</h3><p>父子组件之间通信的3种方式：</p><ol><li>属性绑定</li><li>事件绑定</li><li>获取组件实例</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223160413.png" alt="20230223160413"></p><h4 id="属性绑定"><a href="#属性绑定" class="headerlink" title="属性绑定"></a>属性绑定</h4><blockquote><p>属性绑定用于实现父向子传值，而且只能传递普通类型的数据。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223160812.png" alt="20230223160812"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223160843.png" alt="20230223160843"></p><h4 id="事件绑定-1"><a href="#事件绑定-1" class="headerlink" title="事件绑定"></a>事件绑定</h4><blockquote><p>事件绑定用于实现子向父传值，可以传递任何类型的数据</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223161419.png" alt="20230223161419"></p><p>子组件向父组件传值案例步骤：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223162013.png" alt="20230223162013"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223162036.png" alt="20230223162036"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223162115.png" alt="20230223162115"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223162149.png" alt="20230223162149"></p><h4 id="获取组件实例"><a href="#获取组件实例" class="headerlink" title="获取组件实例"></a>获取组件实例</h4><blockquote><p>可在父组件里调用<code>this.selectComponent(&quot;id或class选择器&quot;)</code>,获取子组件的实例对象，从而直接访问子组件的任意数据和方法。调用时需要传入一个选择器。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223162627.png" alt="20230223162627"></p><h3 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a>behaviors</h3><blockquote><p>behaviors是小程序中，用于实现组件间代码共享的特性，类似于Vue.js中的”mixins”。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223163216.png" alt="20230223163216"></p><p>behaviors 的工作方式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223163407.png" alt="20230223163407"></p><p>创建 behavior：</p><blockquote><p>在项目根目录创建 behaviors 文件夹，然后创建一个 js 文件，调用 Behavior 构造函数并向外导出</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223163502.png" alt="20230223163502"></p><p>导入并使用 behavior：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223164225.png" alt="20230223164225"></p><p>behavior 中所有可用的节点：</p><ol><li>properties</li><li>data</li><li>methods</li><li>behaviors</li><li>created</li><li>attached</li><li>ready</li><li>moved</li><li>detached</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223164523.png" alt="20230223164523"></p><p>同名字段的覆盖和组合规则：</p><blockquote><p><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/custom-component/behaviors.html#%E5%90%8C%E5%90%8D%E5%AD%97%E6%AE%B5%E7%9A%84%E8%A6%86%E7%9B%96%E5%92%8C%E7%BB%84%E5%90%88%E8%A7%84%E5%88%99">同名字段的覆盖和组合规则官方文档</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223164658.png" alt="20230223164658"></p><h2 id="使用-npm-包"><a href="#使用-npm-包" class="headerlink" title="使用 npm 包"></a>使用 npm 包</h2><p>小程序对npm的支持与限制:</p><ol><li>不支持依赖于Node.js内置库的包</li><li>不支持依赖于浏览器内置对象的包</li><li>不支持依赖于C++插件的包</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223165531.png" alt="20230223165531"></p><h3 id="Vant-Weapp"><a href="#Vant-Weapp" class="headerlink" title="Vant Weapp"></a>Vant Weapp</h3><blockquote><p><a href="https://youzan.github.io/vant-weapp/#/home">Vant Weapp  </a>是有赞前端团队开源的一套小程序UI组件库，助力开发者快速搭建小程序应用。它所使用的是  MIT开源许可协议，对商业使用比较友好。</p></blockquote><p>安装Vant组件库：<a href="https://youzan.github.io/vant-weapp/#/quickstart">快速开始（官方）</a></p><ol><li>通过npm安装（建议指定版本为@1.3.3)</li><li>构建npm包</li><li>修改app.json</li></ol><p>使用Vant组件：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223171747.png" alt="20230223171747"></p><p>定制全局主题样式：</p><blockquote><p>Vant Weapp使用CSS变量来实现定制主题。关于CSS变量的基本用法，请参考<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties">MDN文档</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223193511.png" alt="20230223193511"></p><p><a href="https://youzan.github.io/vant-weapp/#/custom-style">样式覆盖</a>：</p><p>在自定义组件中使用 Vant Weapp 组件时，需开启 <code>styleIsolation:&#39;shared&#39;</code> 选项</p><h3 id="API-Promise-化"><a href="#API-Promise-化" class="headerlink" title="API Promise 化"></a>API Promise 化</h3><p>基于回调函数的异步API的缺点：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223193630.png" alt="20230223193630"></p><blockquote><p>API Promise化，指的是通过额外的配置，将官方提供的、基于回调函数的异步API,升级改造为基于Promise的异步API,从而提高代码的可读性、维护性，避免回调地狱的问题。</p></blockquote><p>实现 API Promise 化：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223194121.png" alt="20230223194121"></p><p>调用Promise化之后的异步API案例：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223194400.png" alt="20230223194400"></p><h2 id="全局数据共享"><a href="#全局数据共享" class="headerlink" title="全局数据共享"></a>全局数据共享</h2><p>什么是全局数据共享：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223194731.png" alt="20230223194731"></p><p>小程序中的全局数据共享方案：</p><ol><li>mobx-miniprogram</li><li>mobx-miniprogram-bindings</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223194910.png" alt="20230223194910"></p><h3 id="Mobx-安装与使用"><a href="#Mobx-安装与使用" class="headerlink" title="Mobx 安装与使用"></a>Mobx 安装与使用</h3><p>安装 MobX 相关的包：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223195340.png" alt="20230223195340"></p><p>创建 MobX 的 Store 实例：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223195803.png" alt="20230223195803"></p><p>将 Store 中的成员绑定到页面中：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223201338.png" alt="20230223201338"></p><p>在页面上使用 Store 中的成员示例：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223201829.png" alt="20230223201829"></p><p>将 Store 中的成员绑定到组件中：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223202144.png" alt="20230223202144"></p><p>在组件中使用 Store 中的成员示例：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223202716.png" alt="20230223202716"></p><h2 id="分包【性能优化】"><a href="#分包【性能优化】" class="headerlink" title="分包【性能优化】"></a>分包【性能优化】</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><blockquote><p>分包指的是把一个完整的小程序项目，按照需求划分为不同的子包，在构建时打包成不同的分包，用户在使用时按需进行加载。</p></blockquote><p>分包的好处：</p><ol><li>可以优化小程序首次启动的下载时间</li><li>在多团队共同开发时可以更好的解藕协作</li></ol><p>分包前项目的构成：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223203044.png" alt="20230223203044"></p><p>分包后项目的构成：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223203153.png" alt="20230223203153"></p><p>分包的加载规则：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223203254.png" alt="20230223203254"></p><p>分包的体积限制：</p><ol><li>整个小程序<code>所有分包大小不超过 16M</code> (主包+所有分包）</li><li>单个分包/主包大小不能超过 2M</li></ol><h3 id="使用分包"><a href="#使用分包" class="headerlink" title="使用分包"></a>使用分包</h3><p>配置方法：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223203638.png" alt="20230223203638"></p><p>配置别名：</p><p>在 subpackages 节点中每个分包对象都可以配置别名，只需要跟 root 平级，添加 name 字段即可指定别名</p><p>查看分包大小：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223204251.png" alt="20230223204251"></p><p>打包原则：</p><ol><li>小程序会按subpackages的配置进行分包，subpackages之外的目录将被打包到主包中</li><li>主包也可以有自己的pages(即最外层的pages字段）</li><li>tabBar 页面必须在主包内</li><li>分包之间不能互相嵌套</li></ol><p>引用原则：</p><ol><li>主包无法引用分包内的私有资源</li><li>分包之间不能相互引用私有资源</li><li>分包可以引用主包内的公共资源</li></ol><h3 id="独立分包"><a href="#独立分包" class="headerlink" title="独立分包"></a>独立分包</h3><p>什么是独立分包：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223205028.png" alt="20230223205028"></p><p>独立分包和普通分包的区别：</p><ol><li>普通分包必须依赖于主包才能运行</li><li>独立分包可以在不下载主包的情况下，独立运行</li></ol><p>独立分包的应用场景：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223205242.png" alt="20230223205242"></p><p>独立分包配置方法：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223205547.png" alt="20230223205547"></p><p>引用原则：</p><blockquote><p>独立分包和普通分包以及主包之间，是相互隔绝的，不能相互引用彼此的资源！</p></blockquote><ol><li>主包无法引用独立分包内的私有资源</li><li>独立分包之间，不能相互引用私有资源</li><li>独立分包和普通分包之间，不能相互引用私有资源</li><li>特别注意：独立分包中不能引用主包内的公共资源</li></ol><h3 id="分包预下载"><a href="#分包预下载" class="headerlink" title="分包预下载"></a>分包预下载</h3><blockquote><p>分包预下载指的是：在进入小程序的某个页面时，由框架自动预下载可能需要的分包，从而提升进入后续分包页面时的启动速度。</p></blockquote><p>配置分包的预下载：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223211135.png" alt="20230223211135"></p><p>分包预下载的限制：</p><blockquote><p>同一个分包中的页面享有共同的预下载大小 <code>限额2M</code></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230223211312.png" alt="20230223211312"></p><h2 id="自定义-tabBar"><a href="#自定义-tabBar" class="headerlink" title="自定义 tabBar"></a>自定义 tabBar</h2><p>自定义tabBar分为3大步骤，分别是：</p><ol><li>配置信息</li><li>添加tabBar代码文件</li><li>编写tabBar代码</li></ol><p>详细步骤，可以参考小程序<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/ability/custom-tabbar.html">官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> MiniPrograme </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TodoList 2023</title>
      <link href="/2023/02/192022%20%E5%BD%92%E6%A1%A3/%E9%9A%8F%E7%AC%94/Todo/TodoList%202023/84093bb4/"/>
      <url>/2023/02/192022%20%E5%BD%92%E6%A1%A3/%E9%9A%8F%E7%AC%94/Todo/TodoList%202023/84093bb4/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="cb0503c5f29939683629eba35128bf1d540d5d41a801fb03d0e82fa192869003"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页设计</title>
      <link href="/2023/02/172022%20%E5%BD%92%E6%A1%A3/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/956155ad/"/>
      <url>/2023/02/172022%20%E5%BD%92%E6%A1%A3/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/956155ad/</url>
      
        <content type="html"><![CDATA[<h1 id="PS相关网页操作"><a href="#PS相关网页操作" class="headerlink" title="PS相关网页操作"></a>PS相关网页操作</h1><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>Description</th></tr></thead><tbody><tr><td>Ctrl+K</td><td>首选项</td></tr><tr><td>Ctrl+H</td><td>隐藏/显示参考线快捷</td></tr><tr><td>Alt+左单击</td><td>剪切蒙版</td></tr><tr><td>Ctrl+Alt+;</td><td>锁定/解除锁定参考线</td></tr><tr><td>Ctrl+【或】</td><td>将图层上移一层或者下移一层（注意：如果编了组需要多按一次）</td></tr><tr><td>Ctrl+Shift+【或】</td><td>将图层置于顶层或者底层 （注意：如果编了组需要多按一次）</td></tr><tr><td>Ctrl+Shift+I</td><td>反选</td></tr></tbody></table></div><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><div class="table-container"><table><thead><tr><th>功能</th><th>Description</th></tr></thead><tbody><tr><td>选择组</td><td>左上角切换为自动选择组</td></tr><tr><td>链接图层</td><td>链接多个图层方便选中</td></tr><tr><td>选区对齐</td><td>将某容器内的子元素对齐，选中子元素，按住 Ctrl键 + 单击 父容器获得选区，然后再对齐</td></tr><tr><td>拷贝图层样式</td><td>右击目标图层，然后选择拷贝该图层的样式，然后选中其他图层右击选择快速应用到其他图层</td></tr><tr><td>纯色背景抠图</td><td>1. 用魔棒工具选择纯色区域；2. 反选 3. 复制选择的图层</td></tr></tbody></table></div><h2 id="排坑"><a href="#排坑" class="headerlink" title="排坑"></a>排坑</h2><p>自动选择：当勾选自动选择组时，默认选择的是“最外层的大组”，建议一个模块做完之后再编大组</p><p>描边：重叠问题：当多个相邻紧靠的图形都设置了描边属性的时候，他们重合的地方会发生叠加，可以设置描边的对齐类型：</p><ol><li>居内</li><li>居中</li><li>居外</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219141630.png" alt="20230219141630"></p><h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><p>对于网页设计，栅格系统的使用不仅可以让网页的信息呈现更加美观易读、更具可读性；对于前端开发来说，网页将更加地灵活与规范。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217182038.png" alt="20230217182038"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217182940.png" alt="20230217182940"></p><h2 id="栅格系统的计算"><a href="#栅格系统的计算" class="headerlink" title="栅格系统的计算"></a>栅格系统的计算</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230  217182149.png" alt="20230217182149"></p><p>公式：W=(a+i)xN-i</p><p>设计时，网页宽度W、列宽a、间隔i,建议为常见的整数，其中通常用 5、10、15、20、30 等，</p><h2 id="栅格系统的三种形式"><a href="#栅格系统的三种形式" class="headerlink" title="栅格系统的三种形式"></a>栅格系统的三种形式</h2><h3 id="有边距栅格"><a href="#有边距栅格" class="headerlink" title="有边距栅格"></a>有边距栅格</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217182403.png" alt="20230217182403"></p><h3 id="无边距栅格"><a href="#无边距栅格" class="headerlink" title="无边距栅格"></a>无边距栅格</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217182536.png" alt="20230217182536"></p><h3 id="等分栅格"><a href="#等分栅格" class="headerlink" title="等分栅格"></a>等分栅格</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217182610.png" alt="20230217182610"></p><p>适用于产品网站，不适用于企业官网</p><h2 id="栅格结构划分"><a href="#栅格结构划分" class="headerlink" title="栅格结构划分"></a>栅格结构划分</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217183958.png" alt="20230217183958"></p><h2 id="自定义栅格系统"><a href="#自定义栅格系统" class="headerlink" title="自定义栅格系统"></a>自定义栅格系统</h2><p>栅格基础掌握牢固之后，可以大胆地尝试并自定义栅格系统</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230220132509.png" alt="20230220132509"></p><h1 id="线框图"><a href="#线框图" class="headerlink" title="线框图"></a>线框图</h1><p>线框图，英文为Wireframe,是指在网站设计（不仅用于网页界面设计）中对网站结构和层级关系作出表现的一种方式，是网站、APP设计过程中非常重要的环节，适用于团队内部的讨论和初步提案。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217184202.png" alt="20230217184202"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217184247.png" alt="20230217184247"></p><h1 id="设计相关关键词"><a href="#设计相关关键词" class="headerlink" title="设计相关关键词"></a>设计相关关键词</h1><h2 id="黄金分割比"><a href="#黄金分割比" class="headerlink" title="黄金分割比"></a>黄金分割比</h2><p>黄金分割是指将整体一分为二，较大部分与整体部分的比值等于较小部分与较大部分的比值，其比值约为0.618。 这个比例被公认为是最能引起美感的比例，因此被称为黄金分割。</p><h2 id="视觉中心"><a href="#视觉中心" class="headerlink" title="视觉中心"></a>视觉中心</h2><h2 id="亲密性原则"><a href="#亲密性原则" class="headerlink" title="亲密性原则"></a>亲密性原则</h2><h2 id="等分原则"><a href="#等分原则" class="headerlink" title="等分原则"></a>等分原则</h2><p>具体做法：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219133751.png" alt="20230219133751"></p><ol><li>先在容器的左上角画一个矩形，X 轴一条参考线，Y 轴一条参考线</li><li>在容器的右下角画一个矩形，X 轴一条参考线，Y 轴一条参考线即可</li></ol><h2 id="宫格排版"><a href="#宫格排版" class="headerlink" title="宫格排版"></a>宫格排版</h2><h2 id="点线面"><a href="#点线面" class="headerlink" title="点线面"></a>点线面</h2><h1 id="常见效果实现"><a href="#常见效果实现" class="headerlink" title="常见效果实现"></a>常见效果实现</h1><h2 id="阴影效果"><a href="#阴影效果" class="headerlink" title="阴影效果"></a>阴影效果</h2><p>阴影效果的颜色：背景色，在调色板中斜向下45度角选择同色系的颜色</p><p>第一种做法：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217210302.png" alt="20230217210302"></p><p>第二种做法：</p><p>复制一个目标对象，然后将复制出来的目标对象设置羽化效果，（可选：调整复制对象的大小，缩小到原来的70%）</p><h2 id="网页模板创建"><a href="#网页模板创建" class="headerlink" title="网页模板创建"></a>网页模板创建</h2><ol><li>新建 web 格式，宽度 1920 x 5000 px</li><li>新建参考线<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230217185129.png" alt="20230217185129"></li><li>版心：1200px</li></ol><h2 id="banner"><a href="#banner" class="headerlink" title="banner"></a>banner</h2><ol><li>头图+导航栏 高度建议不超过 720px</li></ol><h2 id="丰富背景方法"><a href="#丰富背景方法" class="headerlink" title="丰富背景方法"></a>丰富背景方法</h2><ol><li>图片</li><li>纹理</li><li>渐变</li><li>水印（如翻译英文做文字水印）</li></ol><h2 id="文字描边"><a href="#文字描边" class="headerlink" title="文字描边"></a>文字描边</h2><ol><li>先将文字转换为形状</li><li>填充—&gt;描边</li></ol><h1 id="网页设计规范"><a href="#网页设计规范" class="headerlink" title="网页设计规范"></a>网页设计规范</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218193032.png" alt="20230218193032"></p><h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><p>Web 设计时，网页的宽度（画布尺寸）创建1920px,高度不限（依内容决定）,分辨率则使用默认的72像素/英寸</p><ol><li>像素（px）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218193800.png" alt="20230218193800"></li><li>像素密度（ppi）<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218193850.png" alt="20230218193850"></li><li>点（pt）印刷单位<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218194016.png" alt="20230218194016"></li></ol><h2 id="页面安全宽度"><a href="#页面安全宽度" class="headerlink" title="页面安全宽度"></a>页面安全宽度</h2><p>界面设计和前端开发都需要保证网页在某个分辨率下图片、文字、布局、按钮等元素的正常比例和正常显示效果，比例不能过宽或过窄，否则容易造成阅读障碍。那么在某个分辨率下，我们使用一个固定宽度值来作为基准进行设计和开发，这个固定值就是安全宽度。</p><p>安全宽度的设定原则：</p><ol><li>不允许在浏览过程中出现左右滚动条（用户体验差）;</li><li>根据当前市场屏幕分辨率的使用大数据来看；</li><li>结合网页的发展历史进程来看。</li></ol><h2 id="列宽的计算方法"><a href="#列宽的计算方法" class="headerlink" title="列宽的计算方法"></a>列宽的计算方法</h2><blockquote><p>可以使用在线工具来计算：<a href="http://grid.guide/">http://grid.guide/</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218200350.png" alt="20230218200350"></p><h2 id="首屏高度"><a href="#首屏高度" class="headerlink" title="首屏高度"></a>首屏高度</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218200724.png" alt="20230218200724"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218200942.png" alt="20230218200942"></p><ol><li>首屏重要的信息要在 560px 之内</li><li>核心内容不要超出版心</li></ol><h2 id="页面组成部分"><a href="#页面组成部分" class="headerlink" title="页面组成部分"></a>页面组成部分</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218201346.png" alt="20230218201346"></p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218202219.png" alt="20230218202219"></p><ol><li>位置明显；</li><li>简洁不腑肿；</li><li>合理放置导航（用户的点击频率高/产品业务权重，的放在靠前）；</li><li>保持一致性原则；</li><li>重要性排序；</li><li>响应式设计。</li></ol><p>导航的种类：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218202907.png" alt="20230218202907"></p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><h4 id="按钮发展趋势"><a href="#按钮发展趋势" class="headerlink" title="按钮发展趋势"></a>按钮发展趋势</h4><p>三维按钮</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218203007.png" alt="20230218203007"></p><p>拟物化：降低用户的学习成本</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218203053.png" alt="20230218203053"></p><p>扁平化：提高工作效率</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218203306.png" alt="20230218203306"></p><p>微质感按钮：渐变 + 阴影</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218203551.png" alt="20230218203551"></p><h4 id="按钮设计规范"><a href="#按钮设计规范" class="headerlink" title="按钮设计规范"></a>按钮设计规范</h4><p>颜色：引导用户主要操作的按钮通常采用强调色、放在画面的视觉中心、恰当的大小</p><p>按钮的三态及禁用：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218203901.png" alt="20230218203901"></p><p>按钮的优先级：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218204123.png" alt="20230218204123"></p><p>按钮的样式：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218204531.png" alt="20230218204531"></p><p>表单：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218204618.png" alt="20230218204618"></p><h2 id="中英文字体规范"><a href="#中英文字体规范" class="headerlink" title="中英文字体规范"></a>中英文字体规范</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218210812.png" alt="20230218210812"></p><ol><li>字体：在网页设计中除了图片中的字，其他地方的字体只能用<code>微软雅黑</code>，单位是像素</li><li>字体颜色：拾色器面板勾选只有Web颜色</li><li>字体间距：常用 4 的倍数来控制</li><li>行间距：段落行间距一般为 1.5倍，如字体大小为 16，行间距应该为 24，段落中的文字一般为左对齐，有更好的阅读体验 </li><li>字体对齐：全选文字，然后选择水平居中分布选项</li></ol><p>字号：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218211336.png" alt="20230218211336"></p><ul><li>大字不要使用宋体，因为小字是点阵渲染，比较美观，但是大字不是；</li><li>字体常用单位有px、pt、em、rem,我们在PS中通常使用pt或px作为单位，但前端开发上述</li><li>四种都会用到（1em=1倍正文字体，默认为14px)</li><li>为了提高文本可读性，字体一般使用12~16px作为最小值</li><li>基于上述原则，整理字号规范如下：</li><li>导航：14、16、18px</li><li>标题：①内容少、留白大——24、30、36、40、48px;②内容多、留白小——18、20、24px</li><li>正文：14、16px （一般为左对齐）</li><li>注解：12、14px(整个网页中的最小字号不能小于12px)</li><li>另外：字号必须是整数，尽量用偶数，通常用4的倍数</li><li>字间距建议就用默认值，行间距通常为1.2~1.5倍</li></ul><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218222154.png" alt="20230218222154"></p><ol><li>文字布局：根据大众阅读习惯，常用“由上至下、由左至右”的顺序来布局网页；</li><li>图片布局：根据适当的图片比例，在满足图片可读性的基础上对图片进行排列、缩放，常见的图片宽高比例有：<ol><li>4:3(800×600px)</li><li>16:9(1280×720px/1920×1080px/2560×1440px)</li><li>16:10(1280×800px/1920×1200px/2560×1600px)</li></ol></li><li>感观布局：就是第一眼看到某个页面时的第一印象，瞬间映入眼帘的网页结构</li></ol><h2 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h2><p>常用文字配色:</p><ol><li>主要文字颜色：首选公司品牌 Logo 颜色，可提高网站与公司 VI 的关联，增加可辨识性和记忆性</li><li>正文颜色：选用易读性的深灰色，建议选用 #333333-#666666 之间的颜色</li><li>辅助类、注释类文字颜色：选用中级灰色，建议选用 #999999-#cccccc 之间颜色</li></ol><p>常用灰色（配色）</p><ol><li>主要文字颜色：#333333、#666666、#999999 (冷色灰 #2e3233)</li><li>背景颜色：#eeeeee、#f2f2f2 (冷色灰 #8a9699)</li><li>分割线颜色：#cccccc、#eeeeee、#fcfcfc</li></ol><p>网站中的配色</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218223034.png" alt="20230218223034"></p><p>行业配色</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230218234147.png" alt="20230218234147"></p><h2 id="可读性"><a href="#可读性" class="headerlink" title="可读性"></a>可读性</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205338.png" alt="20230219205338"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219211216.png" alt="20230219211216"></p><h2 id="空白与留白"><a href="#空白与留白" class="headerlink" title="空白与留白"></a>空白与留白</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205438.png" alt="20230219205438"></p><p>五个设计原则</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205631.png" alt="20230219205631"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205705.png" alt="20230219205705"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205804.png" alt="20230219205804"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205847.png" alt="20230219205847"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219205923.png" alt="20230219205923"></p><h2 id="页脚信息"><a href="#页脚信息" class="headerlink" title="页脚信息"></a>页脚信息</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219210125.png" alt="20230219210125"></p><p>页脚设计的用户体验目标：</p><ul><li>能够为网站建立必须的导航系统</li><li>不同模块之间留白要适当，宜于阅读</li><li>表单体验不能过于复杂</li><li>首尾呼应，页头设计和页脚设计要和谐，避免头重脚轻或头轻脚重</li><li>能够突出和宣传网站品牌特征</li><li>信息列表样式美观，宜于分栏分列</li><li>尽量保留能与网站做出快速的响应互动的入口（注册、返回顶部、订阅、社交等）</li></ul><h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219210343.png" alt="20230219210343"></p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>PSD 文件和图层可以使用中文，导出后的图片和文件夹尽量都使用英文保存。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219211030.png" alt="20230219211030"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219211118.png" alt="20230219211118"></p><h2 id="窗体"><a href="#窗体" class="headerlink" title="窗体"></a>窗体</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219211912.png" alt="20230219211912"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219212131.png" alt="20230219212131"></p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219212248.png" alt="20230219212248"></p><h1 id="图标制作"><a href="#图标制作" class="headerlink" title="图标制作"></a>图标制作</h1><h1 id="全屏站"><a href="#全屏站" class="headerlink" title="全屏站"></a>全屏站</h1><h2 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h2><p>尺寸:</p><ol><li>N x “1920×1080”</li><li>画板 1920×1080,数量有几屏就建几块画布</li></ol><p>版心:</p><ol><li>全屏站没有固定的版心尺寸</li><li>没有版心不代表没有栅格和边距</li></ol><p>页面指示:</p><p>告诉用户 “现在在哪里，将要去哪里”</p><p>排版方式</p><ol><li>左右排版</li><li>居中排版</li></ol><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 学习地址：<a href="https://www.bilibili.com/video/BV1PL411J7zF">https://www.bilibili.com/video/BV1PL411J7zF</a>   历史记录：P24</li><li>[ ] 保持谦虚，不要自大！！！注意！这是任何时候!!!当你自己觉得你自己又行了的时候，保持冷静，时刻保持危机感</li><li>[ ] 绘制矩形的时候不用管宽度，只用管宽度即可，超过画板宽度的是看不见的</li><li>[ ] 画板可以新建多个，可以先画一个草图，然后再新建一个画板对比第一个画板进行设计<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219160546.png" alt="20230219160546"></li><li>[ ] 选中对应的元素之后，可以在右侧属性栏中修改元素的属性</li><li>[ ] 参考线：可以新建一根参考线，输入对应的数值即可自动创建</li><li>[ ] 数字（年月日之类）动词、名词、可以单独提出来进行排版<ul><li>[ ] 数字的字体可以使用 din 字体</li></ul></li><li>[ ] 关键词：标题设计、文案版式</li><li>[ ] 处理历史之类的信息推荐使用时间轴的方式来呈现</li><li>[ ] 点缀色：选取目标颜色的对比颜色进行突出，一般用于小面积的点缀</li><li>[ ] 有“小标题+正文”的类似特点、说明、列举之类的文案，可以用“图标+标题+正文”然后做卡片设计</li><li>[ ] 图标没有准备之前可以先用一个色块去代替，进行占位</li><li>[ ] 遇见多个重复相同的模块时，可以先做一个模块，做完之后将其编组，选中组进行复制，注意：复制之后的组不要轻易改动结构</li><li>[ ] 选择比较难以选中的元素时，可以将选择的《自动选择》属性取消勾选，再进行选择</li><li>[ ] 拷贝图层样式：当给某个图层加了样式之后，可以右击该图层，然后选择拷贝该图层的样式，快速应用到其他图层。（单次拷贝快捷方式：按住 Alt 键选择该图层的样式，然后复制到目标图层）</li><li>[ ] 文字的对齐注意事项：放在左中右文字就要选择的对应的对齐方式（如图标下的文字，选居中对齐即可）</li><li>[ ] 注意“分布”选项的用法：多个元素分布对齐的时候，可以直接把多个元素中的第一个和最后一个对应对应的头和尾，然后选分布对齐即可<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219105805.png" alt="20230219105805"></li><li>[ ] 调整文本框大小误区：不要直接 Ctrl + T，正确：使用文字工具获取文本框焦点之后再去调整</li><li>[ ] 避免“孤行寡字” 可以删除不影响语义的文字或稍减少文字间距。</li><li>[ ] 站酷：小明老师教设计</li><li>[ ] 字体：字重的选择尽量避免选最粗/最细两种极端，推荐跨一个层级</li><li>[ ] 字号：尽量简单统一，避免过多字号</li><li>[ ] 字色：明确好层级，保持统一</li><li>[ ] 海报设计、画册设计</li><li>[ ] 先放元素，再去排版：设计某一个模块的文案的时候，第一步先把文案全部复制进去，再进行设计排版</li><li>[ ] 间距的控制：可以画矩形，然后用矩形的高度来进行距离的参考控制<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219120654.png" alt="20230219120654"></li><li>[ ] 图片调色：<ul><li>[ ] 方式一：添加一个矩形，放在图片的上方，设置和网站主色一样的颜色，降低矩形的透明度（加了以后图片还是彩色的，速度快）</li><li>[ ] 方式二：单色处理：给图片加一个渐变映射效果，加了以后颜色可以随意调整</li></ul></li><li>[ ] 做卡片需要注重：等分原则，各个角之间的缝隙都是一样的<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219123114.png" alt="20230219123114"></li><li>[ ] 要做到像素级别，拒绝误差</li><li>[ ] 找参考：看同行竞品看相同，看版式竞品看不同</li><li>[ ] logo 的排列要注意视觉大小</li><li>[ ] 背景做完之后要把背景锁住，防止误选背景</li><li>[ ] 等比例缩放的容器中如果有文字，缩放操作会改变文字的大小，导致文字大小出现小数点，所以缩放之后将容器内的文字改为整数</li><li>[ ] 图层蒙版的应用：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230219220610.png" alt="20230219220610"></li><li>[ ] 选中所有的文本图层: 在图层面板下方有图层筛选功能<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230220123246.png" alt="20230220123246"></li><li>[ ] 英文设计尽量只用来做参考，不要做纯英文的设计，国内目前还是中文客户多</li><li>[ ] 分割线不要做的那么明显，不要抢视觉</li></ul>]]></content>
      
      
      <categories>
          
          <category> 平面设计 </category>
          
          <category> 网页设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平面设计系统调研</title>
      <link href="/2023/02/152022%20%E5%BD%92%E6%A1%A3/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%A0%94/976155ad/"/>
      <url>/2023/02/152022%20%E5%BD%92%E6%A1%A3/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1/%E5%B9%B3%E9%9D%A2%E8%AE%BE%E8%AE%A1%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%A0%94/976155ad/</url>
      
        <content type="html"><![CDATA[<h1 id="就业方向"><a href="#就业方向" class="headerlink" title="就业方向"></a>就业方向</h1><div class="table-container"><table><thead><tr><th>就业方向</th><th>Description</th></tr></thead><tbody><tr><td>品牌设计</td><td></td></tr><tr><td>包装设计</td><td></td></tr><tr><td>UI设计</td><td></td></tr><tr><td>广告设计</td></tr></tbody></table></div><h2 id="UI设计路线"><a href="#UI设计路线" class="headerlink" title="UI设计路线"></a>UI设计路线</h2><h3 id="掌握软件"><a href="#掌握软件" class="headerlink" title="掌握软件"></a>掌握软件</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216104030.png" alt="20230216104030"></p><ol><li>视觉设计：软件功能大同小异，用的顺手即可</li><li>交互设计<ol><li>原型工具：墨刀等</li><li>文档工具：markdown、office…</li></ol></li><li>前端开发技能</li><li>视频处理技术</li></ol><h3 id="设计规范"><a href="#设计规范" class="headerlink" title="设计规范"></a>设计规范</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216104853.png" alt="20230216104853"></p><ol><li>各大平台文档（掌握设计的思想）<ol><li>苹果：《人机交互指南》推荐</li><li>Google </li><li>安卓：《Material Design》</li></ol></li></ol><h3 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216105237.png" alt="20230216105237"></p><p>方向：<code>用户体验</code>、<code>界面设计</code>等相关的书籍（浏览大框，再大量练习，最后反过来再去读这些书）</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216105609.png" alt="20230216105609"></p><h4 id="视觉设计师"><a href="#视觉设计师" class="headerlink" title="视觉设计师"></a>视觉设计师</h4><blockquote><p>!!! 先把交互设计学好又空余实践再深入这个</p></blockquote><ol><li>临摹</li><li>基础的图标到完整的界面</li><li>自己去探索去创作</li></ol><p>100天新手视觉设计师入门(参考):</p><p>图形练习</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216114621.png" alt="20230216114621"></p><ol><li><code>功能性图标</code>临摹：找多种不同风格的功能性图标组进行临摹，其中需包含 iOS 10 系统的功能图标以及 Material Design 的功能图标</li><li><code>扁平风格图标</code>临摹</li><li><code>写实特效图标</code>临摹</li><li><code>图标造型创作</code>练习</li></ol><p>配色练习</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216115010.png" alt="20230216115010"></p><ol><li>配色收集+临摹: 收集好的配色设计，并进行临摹</li><li>重新配色: 选择合适的图形及需要进行颜色搭配的图片进行重新配色，利用自己已经收集的好的配色的方案</li></ol><p>控件练习</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216115135.png" alt="20230216115135"></p><ol><li>iOS 和 Android 的系统控件全部临摹一遍</li><li>选择 Dribbble 上比较优秀的控件设计进行临摹</li><li>图标及控件动效临摹练习：可到 Dribble 上搜索一些比较不错的图标和控件的动效进行临摹，或是 Material Design 的动效设计</li></ol><p>界面练习</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216115334.png" alt="20230216115334"></p><ol><li>将 iOS 和 Android 的系统界面选择性临摹</li><li>临摹优秀 App 的界面设计，例如： Google、Facebook 等相关产品的优秀界面</li><li>临摹界面转场动效</li></ol><p>命题创作</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216115439.png" alt="20230216115439"></p><p>题目可以自己找，也可以订阅 Daily UI 之类</p><h4 id="交互设计师"><a href="#交互设计师" class="headerlink" title="交互设计师"></a>交互设计师</h4><ol><li>典型的产品进行反向描绘<ol><li>信息架构</li><li>交互框架</li><li>主线流程</li></ol></li><li>评估产品中可能存在的交互的问题</li><li>提出改进的具体做法（输出<a href="https://pixso.cn/designskills/how-to-wireframe/">线框图</a>、展现基本流程）</li><li>具体的页面/流程详细改进（聚焦细节）<ol><li>重构经典案例</li><li>创造（试着自己实际地去改变优化）</li><li>多领域（积累与提升眼界）的</li><li>复盘（返回去看一些基本的书、设计规范、反思自己作品的不足）</li></ol></li></ol><h3 id="对比优秀设计"><a href="#对比优秀设计" class="headerlink" title="对比优秀设计"></a>对比优秀设计</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216113009.png" alt="20230216113009"></p><p>网上找其他人优秀、成熟的设计的设计对比找出差距：</p><ol><li><a href="https://dribbble.com/">Dribbble</a></li><li><a href="https://www.zcool.com.cn/">站酷</a></li><li>各种论坛、个人博客（<a href="https://blog.zhheo.com/">张洪Heo</a>）等…</li></ol><h3 id="工作实践"><a href="#工作实践" class="headerlink" title="工作实践"></a>工作实践</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216113619.png" alt="20230216113619"></p><p>保持谦虚、积极上进、热爱学习、提高自己</p><h3 id="突破瓶颈"><a href="#突破瓶颈" class="headerlink" title="突破瓶颈"></a>突破瓶颈</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230216114245.png" alt="20230216114245"></p><p>设计永无止境…</p><h1 id="平面设计软件"><a href="#平面设计软件" class="headerlink" title="平面设计软件"></a>平面设计软件</h1><div class="table-container"><table><thead><tr><th>software</th><th>Description</th></tr></thead><tbody><tr><td>Photoshop</td><td>位图处理</td></tr><tr><td>Illustrator/CorelDRAW</td><td>矢量图</td></tr><tr><td>Indesign</td><td>排版软件</td></tr><tr><td>Skech</td></tr></tbody></table></div><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ]  设计的三大构成: 平面构成、立体构成、色彩构成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 平面设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> design </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>230215</title>
      <link href="/2023/02/152022%20%E5%BD%92%E6%A1%A3/Diary/2023/230215/433fef40/"/>
      <url>/2023/02/152022%20%E5%BD%92%E6%A1%A3/Diary/2023/230215/433fef40/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="a454ffdfe2a51f2d3907270111691313eb525c990e815be86e326a6193334a2c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows C 盘清理</title>
      <link href="/2023/02/112022%20%E5%BD%92%E6%A1%A3/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_C%E7%9B%98%E6%B8%85%E7%90%86/f35vv2e6/"/>
      <url>/2023/02/112022%20%E5%BD%92%E6%A1%A3/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96_C%E7%9B%98%E6%B8%85%E7%90%86/f35vv2e6/</url>
      
        <content type="html"><![CDATA[<h1 id="清理缓存文件"><a href="#清理缓存文件" class="headerlink" title="清理缓存文件"></a>清理缓存文件</h1><ol><li>Windows +R打开运行，然后输入 <code>%temp%</code><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230311190246.png" alt="20230311190246"></li><li>打开临时文件夹，这里的文件都是可以清理的<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230311190348.png" alt="20230311190348"></li><li>Ctrl+A全选，Shift+delete直接永久删除</li></ol><h1 id="磁盘清理"><a href="#磁盘清理" class="headerlink" title="磁盘清理"></a>磁盘清理</h1><ol><li>在我的电脑中，选中C盘，右键 —&gt; 属性，点击磁盘清理<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230311190605.png" alt="20230311190605"></li><li>这里的文件都是可以直接删除的，全选—&gt; 直接删除即可</li></ol><h1 id="休眠文件"><a href="#休眠文件" class="headerlink" title="休眠文件"></a>休眠文件</h1><blockquote><p>hiberfil 休眠文件，简单来说就是，你关机时会将所有内存中的数据，写入到硬盘，然后再关闭系统，在下次启动开机时，将保持的数据在写回内存。<br>被保存的数据就是休眠文件，笔记本用户可能会用到此功能。但拥有同样功能的<code>睡眠启动</code>更快（就是不能关闭系统。）</p></blockquote><p>关闭方式：</p><ol><li>管理员身份打开运行</li><li>输入<code>powercfg -h off</code> 指令即可关闭休眠文件</li><li>如果后面又要用到休眠功能，只需要将 off 改为 on 即可再次打开该功能，没有任何损失。</li></ol><h1 id="不要将软件安装到C盘"><a href="#不要将软件安装到C盘" class="headerlink" title="不要将软件安装到C盘"></a>不要将软件安装到C盘</h1><p>很多软件在安装时，会默认安装至C盘。</p><p>建议在其他盘符（C盘以外）中，安装软件，因为软件一般会在当前目录中生成缓存文件。</p><p>安装至其他盘，可大大降低C盘爆满速度！</p><h1 id="清理临时文件"><a href="#清理临时文件" class="headerlink" title="清理临时文件"></a>清理临时文件</h1><ol><li>WIN + I 快捷键打开设置在设置中搜索<code>存储</code>找到临时文件选项<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230311191539.png" alt="20230311191539"></li><li>这里的文件都是可以清理的，删除文件即可<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230311191613.png" alt="20230311191613"></li></ol><h1 id="清理软件缓存"><a href="#清理软件缓存" class="headerlink" title="清理软件缓存"></a>清理软件缓存</h1><p>很多软件默认将缓存保存在C盘，毫无疑问，大大加快了C盘的爆满速度，这里微信为例。</p><ol><li>找到微信文件管理界面<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230311191825.png" alt="20230311191825"></li><li>点击更改，选择一个非C盘的路径。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.X</title>
      <link href="/2022/12/132022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vue3/974189ad/"/>
      <url>/2022/12/132022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vue3/974189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3-快速上手"><a href="#Vue3-快速上手" class="headerlink" title="Vue3 快速上手"></a>Vue3 快速上手</h1><h2 id="1-Vue3简介"><a href="#1-Vue3简介" class="headerlink" title="1.Vue3简介"></a>1.Vue3简介</h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors">99位贡献者</a> </li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2-Vue3带来了什么"><a href="#2-Vue3带来了什么" class="headerlink" title="2.Vue3带来了什么"></a>2.Vue3带来了什么</h2><h3 id="1-性能的提升"><a href="#1-性能的提升" class="headerlink" title="1.性能的提升"></a>1.性能的提升</h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>……</p></li></ul><h3 id="2-源码的升级"><a href="#2-源码的升级" class="headerlink" title="2.源码的升级"></a>2.源码的升级</h3><ul><li><p>使用 <code>Proxy</code> 代替 defineProperty 实现响应式</p></li><li><p>重写虚拟DOM的实现和 <code>Tree-Shaking</code><br>……</p></li></ul><h3 id="3-拥抱TypeScript"><a href="#3-拥抱TypeScript" class="headerlink" title="3.拥抱TypeScript"></a>3.拥抱TypeScript</h3><ul><li>Vue3 可以更好的支持 <code>TypeScript</code></li></ul><h3 id="4-新的特性"><a href="#4-新的特性" class="headerlink" title="4.新的特性"></a>4.新的特性</h3><ol><li>Composition API（组合API）<ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>……</li></ul></li><li>新的内置组件<ul><li>Fragment </li><li>Teleport</li><li>Suspense</li></ul></li><li>其他改变<ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>……</li></ul></li></ol><h1 id="一、创建Vue3-0工程"><a href="#一、创建Vue3-0工程" class="headerlink" title="一、创建Vue3.0工程"></a>一、创建Vue3.0工程</h1><h2 id="1-使用-vue-cli-创建"><a href="#1-使用-vue-cli-创建" class="headerlink" title="1.使用 vue-cli 创建"></a>1.使用 vue-cli 创建</h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2-使用-vite-创建"><a href="#2-使用-vite-创建" class="headerlink" title="2.使用 vite 创建"></a>2.使用 vite 创建</h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的<code>冷启动</code>。</li><li>轻量快速的<code>热重载</code>（HMR）。</li><li>真正的<code>按需编译</code>，不再等待整个应用编译完成。</li></ul></li><li>传统构建与vite构建对比图:<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221220134413.png" alt="20221220134413"></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-Composition-API"><a href="#二、常用-Composition-API" class="headerlink" title="二、常用 Composition API"></a>二、常用 Composition API</h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1-拉开序幕的-setup"><a href="#1-拉开序幕的-setup" class="headerlink" title="1.拉开序幕的 setup"></a>1.拉开序幕的 setup</h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：<code>数据、方法等等，均要配置在setup中</code>。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要<code>Suspense和异步组件</code>的配合）</li></ol></li></ol><h2 id="2-ref函数"><a href="#2-ref函数" class="headerlink" title="2.ref函数"></a>2.ref函数</h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code> <ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：<code>基本类型</code>、也可以是<code>对象类型</code>。<ul><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul></li></ul><h2 id="3-reactive函数"><a href="#3-reactive函数" class="headerlink" title="3.reactive函数"></a>3.reactive函数</h2><ul><li>作用: 定义一个<code>对象类型</code>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4-Vue3-0中的响应式原理"><a href="#4-Vue3-0中的响应式原理" class="headerlink" title="4.Vue3.0中的响应式原理"></a>4.Vue3.0中的响应式原理</h2><h3 id="vue2-x的响应式"><a href="#vue2-x的响应式" class="headerlink" title="vue2.x的响应式"></a>vue2.x的响应式</h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="Vue3-0的响应式"><a href="#Vue3-0的响应式" class="headerlink" title="Vue3.0的响应式"></a>Vue3.0的响应式</h3><ul><li><p>实现原理: </p><ul><li><p>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</p></li><li><p>通过Reflect（反射）:  对源对象的属性进行操作。</p></li><li><p>MDN文档中描述的Proxy与Reflect：</p><ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5-reactive对比ref"><a href="#5-reactive对比ref" class="headerlink" title="5.reactive对比ref"></a>5.reactive对比ref</h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6-setup的两个注意点"><a href="#6-setup的两个注意点" class="headerlink" title="6.setup的两个注意点"></a>6.setup的两个注意点</h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7-计算属性与监视"><a href="#7-计算属性与监视" class="headerlink" title="7.计算属性与监视"></a>7.计算属性与监视</h2><h3 id="1-computed函数"><a href="#1-computed函数" class="headerlink" title="1.computed函数"></a>1.computed函数</h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = <span class="title function_">computed</span>(&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> person.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + person.<span class="property">lastName</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.<span class="property">firstName</span> = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.<span class="property">lastName</span> = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-watch函数"><a href="#2-watch函数" class="headerlink" title="2.watch函数"></a>2.watch函数</h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：<code>oldValue无法正确获取</code>、强制开启了深度监视（deep配置失效）。</li><li>监视<code>reactive</code>定义的响应式数据中某个属性时：<code>deep配置有效</code>。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">// 若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">// 若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line"><span class="title function_">watch</span>([<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">()=&gt;</span>person.<span class="property">name</span>],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">()=&gt;</span>person.<span class="property">job</span>,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-watchEffect函数"><a href="#3-watchEffect函数" class="headerlink" title="3.watchEffect函数"></a>3.watchEffect函数</h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.<span class="property">value</span></span><br><span class="line">    <span class="keyword">const</span> x2 = person.<span class="property">age</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-生命周期"><a href="#8-生命周期" class="headerlink" title="8.生命周期"></a>8.生命周期</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221230162512.png" alt="20221230162512"></p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 <code>Composition API 形式</code> 的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>========&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>========&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code>==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9-自定义hook函数"><a href="#9-自定义hook函数" class="headerlink" title="9.自定义hook函数"></a>9.自定义hook函数</h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li><li><p>命名规范：在项目中新建 <code>hooks</code> 文件夹，在文件夹中用 <code>usexxx.js</code> 的命名方式，创建 hook 函数。</p></li></ul><h2 id="10-toRef"><a href="#10-toRef" class="headerlink" title="10.toRef"></a>10.toRef</h2><ul><li>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</li><li>语法：<code>const name = toRef(person,&#39;name&#39;)</code></li><li>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</li></ul><ul><li>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></li></ul><h1 id="三、其它-Composition-API"><a href="#三、其它-Composition-API" class="headerlink" title="三、其它 Composition API"></a>三、其它 Composition API</h1><h2 id="1-shallowReactive-与-shallowRef"><a href="#1-shallowReactive-与-shallowRef" class="headerlink" title="1.shallowReactive 与 shallowRef"></a>1.shallowReactive 与 shallowRef</h2><ul><li>shallowReactive：只处理对象<code>最外层属性</code>的响应式（浅响应式）。</li><li><p>shallowRef：只处理<code>基本数据类型</code>的响应式, 不进行对象的响应式处理。</p></li><li><p>应用场景：</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2-readonly-与-shallowReadonly"><a href="#2-readonly-与-shallowReadonly" class="headerlink" title="2.readonly 与 shallowReadonly"></a>2.readonly 与 shallowReadonly</h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。（数据是别的组件传递过来的，不希望被改动。）</li></ul><h2 id="3-toRaw-与-markRaw"><a href="#3-toRaw-与-markRaw" class="headerlink" title="3.toRaw 与 markRaw"></a>3.toRaw 与 markRaw</h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4.customRef"></a>4.customRef</h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Demo&#x27;,</span><br><span class="line">setup()&#123;</span><br><span class="line">// let keyword = ref(&#x27;hello&#x27;) //使用Vue准备好的内置ref</span><br><span class="line">//自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">//通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)=&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() //告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer = setTimeout(()=&gt;&#123;</span><br><span class="line">value = newValue</span><br><span class="line">trigger() //告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword = myRef(&#x27;hello&#x27;,500) //使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-provide-与-inject"><a href="#5-provide-与-inject" class="headerlink" title="5.provide 与 inject"></a>5.provide 与 inject</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230104192534.png" alt="20230104192534"></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    <span class="title function_">provide</span>(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params">props,context</span>)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = <span class="title function_">inject</span>(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、Composition-API-的优势"><a href="#四、Composition-API-的优势" class="headerlink" title="四、Composition API 的优势"></a>四、Composition API 的优势</h1><h2 id="1-Options-API-存在的问题"><a href="#1-Options-API-存在的问题" class="headerlink" title="1.Options API 存在的问题"></a>1.Options API 存在的问题</h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><h2 id="2-Composition-API-的优势"><a href="#2-Composition-API-的优势" class="headerlink" title="2.Composition API 的优势"></a>2.Composition API 的优势</h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><h1 id="五、新的组件"><a href="#五、新的组件" class="headerlink" title="五、新的组件"></a>五、新的组件</h1><h2 id="1-Fragment"><a href="#1-Fragment" class="headerlink" title="1.Fragment"></a>1.Fragment</h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件<code>可以没有根标签</code>, 内部会将多个标签包含在一个<code>Fragment虚拟元素</code>中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2-Teleport"><a href="#2-Teleport" class="headerlink" title="2.Teleport"></a>2.Teleport</h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to=&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if=&quot;isShow&quot; class=&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;/h3&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = false&quot;&gt;关闭弹窗&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-Suspense"><a href="#3-Suspense" class="headerlink" title="3.Suspense"></a>3.Suspense</h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;/h3&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Suspense&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h1><h2 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局API的转移</h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="function"><span class="params">el</span> =&gt;</span> el.<span class="title function_">focus</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</li></ul></li></ul><div class="table-container"><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></div><h2 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h2><ul><li><p>data 选项应始终被声明为一个函数。</p></li><li><p>过渡类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close=&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click=&quot;handleNativeClickEvent&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#x27;close&#x27;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li>……</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.X 尚品汇电商项目（后台）</title>
      <link href="/2022/12/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_vue2.x%E5%B0%9A%E5%93%81%E6%B1%87%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0/926189ad/"/>
      <url>/2022/12/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_vue2.x%E5%B0%9A%E5%93%81%E6%B1%87%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE%E5%90%8E%E5%8F%B0/926189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="尚品汇后台管理端"><a href="#尚品汇后台管理端" class="headerlink" title="尚品汇后台管理端"></a>尚品汇后台管理端</h1><p>后台管理端：可以让用户通过一个可视化工具，可以实现对于数据库进行增删改查的操作。</p><p>尚品汇后台管理项目教程：<a href="https://www.bilibili.com/video/BV1Vf4y1T7bw?p=122&amp;vd_source=3ed70d49b47a074637711a68e7f42b04">https://www.bilibili.com/video/BV1Vf4y1T7bw?p=122&amp;vd_source=3ed70d49b47a074637711a68e7f42b04</a></p><h2 id="vue-admin-template"><a href="#vue-admin-template" class="headerlink" title="vue-admin-template"></a>vue-admin-template</h2><p><a href="https://github.com/PanJiaChen/vue-admin-template">vue-admin-template</a> 是一个 vue2.x 管理模板，本项目基于此模板<code>二次开发</code>。</p><h2 id="API-接口文档"><a href="#API-接口文档" class="headerlink" title="API 接口文档"></a>API 接口文档</h2><ul><li><a href="http://39.98.123.211:8170/swagger-ui.html">http://39.98.123.211:8170/swagger-ui.html</a></li><li><a href="http://39.98.123.211:8510/swagger-ui.html">http://39.98.123.211:8510/swagger-ui.html</a></li></ul><h3 id="项目接口配置"><a href="#项目接口配置" class="headerlink" title="项目接口配置"></a>项目接口配置</h3><p>项目中的接口统一写在 api 文件夹，为了方便管理进行如下操作：</p><ol><li>创建 <code>api&gt;index.js</code>，将各个模块的 API 统一暴露</li><li>在 <code>main.js</code> 中将 <code>api&gt;index.js</code> 挂载到原型：</li><li>所有组件的实例都可以通过 <code>$API.xxx</code> 发起请求</li></ol><h3 id="配置代理跨域"><a href="#配置代理跨域" class="headerlink" title="配置代理跨域"></a>配置代理跨域</h3><p>编辑 <code>vue.config.js</code> 中的 devServer：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">proxy</span>: &#123;</span><br><span class="line">  <span class="string">&quot;/dev-api&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&quot;http://gmall-h5-api.atguigu.cn:80&quot;</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123;<span class="string">&quot;^/dev-api&quot;</span> : <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>devServer.proxy：<a href="https://www.webpackjs.com/configuration/dev-server/#devserver-proxy">https://www.webpackjs.com/configuration/dev-server/#devserver-proxy</a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><h1 id="插件相关"><a href="#插件相关" class="headerlink" title="插件相关"></a>插件相关</h1><h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h2><h3 id="表单自定义校验规则"><a href="#表单自定义校验规则" class="headerlink" title="表单自定义校验规则"></a>表单自定义校验规则</h3><h2 id="Echarts"><a href="#Echarts" class="headerlink" title="Echarts"></a>Echarts</h2><h1 id="项目路由搭建"><a href="#项目路由搭建" class="headerlink" title="项目路由搭建"></a>项目路由搭建</h1><h2 id="views-目录结构"><a href="#views-目录结构" class="headerlink" title="views 目录结构"></a>views 目录结构</h2><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><h1 id="全局组件封装"><a href="#全局组件封装" class="headerlink" title="全局组件封装"></a>全局组件封装</h1><h2 id="三级联动"><a href="#三级联动" class="headerlink" title="三级联动"></a>三级联动</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221025104220.png" alt="20221025104220"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;catInfo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;一级分类&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;catInfo.catList1id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">&quot;catList1Handler&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:disabled</span>=<span class="string">&quot;iscontrol&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;item in catList1&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;二级分类&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;catInfo.catList2id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">&quot;catList2Handler&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:disabled</span>=<span class="string">&quot;iscontrol&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;item in catList2&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;三级分类&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-select</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-model</span>=<span class="string">&quot;catInfo.catList3id&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">placeholder</span>=<span class="string">&quot;请选择&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">change</span>=<span class="string">&quot;catList3Handler&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:disabled</span>=<span class="string">&quot;iscontrol&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">v-for</span>=<span class="string">&quot;item in catList3&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">          &gt;</span><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;CategorySelect&quot;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">formInline</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">region</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 服务器获取的1~3级分类列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">catList1</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">catList2</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">catList3</span>: [],</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// el-form 数据绑定源</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">catInfo</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 选中的 id</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">catList1id</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">catList2id</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">catList3id</span>: <span class="string">&quot;&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;iscontrol&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="title function_">getCategory1</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">getCategory1</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">attrmanage</span>.<span class="title function_">reqGetCategory1</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">catList1</span> = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">catList1Handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> &#123; catList1id &#125; = <span class="variable language_">this</span>.<span class="property">catInfo</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;getCategoryId&quot;</span>, &#123; <span class="attr">catListid</span>: catList1id, <span class="attr">level</span>: <span class="number">1</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 二次选择清空逻辑</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">catList2</span> = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">catList3</span> = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">catInfo</span>.<span class="property">catList2id</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">catInfo</span>.<span class="property">catList3id</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">attrmanage</span>.<span class="title function_">reqGetCategory2</span>(catList1id);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">catList2</span> = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="title function_">catList2Handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> &#123; catList2id &#125; = <span class="variable language_">this</span>.<span class="property">catInfo</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;getCategoryId&quot;</span>, &#123; <span class="attr">catListid</span>: catList2id, <span class="attr">level</span>: <span class="number">2</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 二次选择清空逻辑</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">catList3</span> = [];</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">catInfo</span>.<span class="property">catList3id</span> = <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">attrmanage</span>.<span class="title function_">reqGetCategory3</span>(catList2id);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">catList3</span> = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">catList3Handler</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> &#123; catList3id &#125; = <span class="variable language_">this</span>.<span class="property">catInfo</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;getCategoryId&quot;</span>, &#123; <span class="attr">catListid</span>: catList3id, <span class="attr">level</span>: <span class="number">3</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="登录与退出登录"><a href="#登录与退出登录" class="headerlink" title="登录与退出登录"></a>登录与退出登录</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ol><li>将 <code>api&gt;user.js</code> 中的相关接口地址换成项目的接口地址</li><li>编辑 <code>utils&gt;request.js</code><br>将请求拦截器中 X-Token 换成 token 字段<br>将响应拦截器中状态码判断逻辑更换 <code>if (res.code !== 20000 &amp;&amp; res.code != 200)</code></li></ol><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p>用户登录 actions 重构成 async await 写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">login</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params"> commit</span></span><br><span class="line"><span class="params">&#125;, userInfo</span>) &#123;</span><br><span class="line"> <span class="keyword">const</span> &#123;</span><br><span class="line">   username,</span><br><span class="line">   password</span><br><span class="line"> &#125; = userInfo</span><br><span class="line"> <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">login</span>(&#123;</span><br><span class="line">   <span class="attr">username</span>: username.<span class="title function_">trim</span>(),</span><br><span class="line">   <span class="attr">password</span>: password</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span> || res.<span class="property">code</span> == <span class="number">20000</span>) &#123;</span><br><span class="line">   <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, res.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line">   <span class="title function_">setToken</span>(res.<span class="property">data</span>.<span class="property">token</span>)</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(res.<span class="property">message</span>))</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h2><p>将 Navbar 组件中退出登录文字替换即可</p><h1 id="商品管理"><a href="#商品管理" class="headerlink" title="商品管理"></a>商品管理</h1><h2 id="品牌管理"><a href="#品牌管理" class="headerlink" title="品牌管理"></a>品牌管理</h2><h3 id="请求品牌列表-API"><a href="#请求品牌列表-API" class="headerlink" title="请求品牌列表 API"></a>请求品牌列表 API</h3><ol><li>在 api 文件夹下创建 <code>product&gt; tradeMark.js</code></li><li>编写请求品牌列表接口：<code>/admin/product/baseTrademark/&#123;page&#125;/&#123;limit&#125;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  API: /admin/product/baseTrademark/&#123;page&#125;/&#123;limit&#125;</span></span><br><span class="line"><span class="comment">  Method: GET</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqTradeMarkList</span> = (<span class="params">page,limit</span>) =&gt; <span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`/admin/product/baseTrademark/<span class="subst">$&#123;page&#125;</span>/<span class="subst">$&#123;limit&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在 tradeMark 组件中将请求品牌列表接口封装成一个 method，在 mounted 钩子函数中调用该 method</li><li>data 中定义并初始化变量（传递给服务器的参数与服务器返回的数据）<ol><li>page（第几页）</li><li>limit（当前页展示的数据条数）</li><li>total（服务器返回的总共数据条数）</li><li>list（服务器返回的品牌列表数据）</li></ol></li></ol><h3 id="el-table-组件渲染数据"><a href="#el-table-组件渲染数据" class="headerlink" title="el-table 组件渲染数据"></a>el-table 组件渲染数据</h3><blockquote><p>el-table 组件展示的数据是以一列一列进行展示</p></blockquote><ol><li>将 el-table 组件的 data 属性与服务器返回的 list 品牌列表数据(数组) 进行绑定</li><li>序号: el-table-column 指定 <code>type=&quot;index&quot;</code> 可以展示索引</li><li>品牌：通过 el-table-column 的 prop 属性 指定服务器返回的属性即可</li><li>Logo: (展示图片)<ol><li>使用作用域插槽</li><li>img 展示插槽回传的数据</li></ol></li><li>操作：<ol><li>使用作用域插槽</li><li>编辑按钮</li><li>删除按钮</li></ol></li></ol><h3 id="el-pagination-分页数据绑定"><a href="#el-pagination-分页数据绑定" class="headerlink" title="el-pagination 分页数据绑定"></a>el-pagination 分页数据绑定</h3><ol><li>相关数据跟data绑定</li><li>事件<ol><li>@size-change 每页条数</li><li>@current-change 当前页码</li></ol></li></ol><h3 id="dialog"><a href="#dialog" class="headerlink" title="dialog"></a>dialog</h3><p>添加/修改品牌对话框(复用)</p><blockquote><p><code>:title=&quot;tradeInfo.id ? &#39;修改品牌&#39; : &#39;添加品牌&#39;&quot;</code></p></blockquote><ol><li>添加/修改点击事件，控制 dialog 显示 <code>dialogFormVisible</code></li><li>dialog 中：<ol><li>input</li><li>upload</li></ol></li></ol><h3 id="添加-修改品牌-API"><a href="#添加-修改品牌-API" class="headerlink" title="添加/修改品牌 API"></a>添加/修改品牌 API</h3><p>添加/修改品牌 API：(复用)</p><p>两个接口的区别：修改需要携带 id，添加不用<br>添加：/admin/product/baseTrademark/save<br>修改：/admin/product/baseTrademark/update</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tradeMark.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  API: </span></span><br><span class="line"><span class="comment">    添加：/admin/product/baseTrademark/save Method: post</span></span><br><span class="line"><span class="comment">    修改：/admin/product/baseTrademark/update Method: put</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqAddOrUpdateTradeMark</span> = (<span class="params">trademarkinfo</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 修改品牌</span></span><br><span class="line">  <span class="keyword">if</span> (trademarkinfo.<span class="property">id</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/admin/product/baseTrademark/update`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;put&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: trademarkinfo</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 添加品牌</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">`/admin/product/baseTrademark/save`</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">      <span class="attr">data</span>: trademarkinfo</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="添加品牌"><a href="#添加品牌" class="headerlink" title="添加品牌"></a>添加品牌</h3><ol><li>收集品牌相关数据（品牌名称和品牌logo）<ol><li>品牌名称: form 绑定 :model=”xxx” 将用户输入绑定到 data 的对象中，xxx 是一个对象，里面的属性根据接口来写</li><li>品牌logo 使用 upload 插件收集的，upload 相关属性：<ol><li>action：上传的地址 （<code>/dev-api/admin/product/fileUpload</code>）</li><li>:on-success=”handleAvatarSuccess” 上传成功的回调，在回调里面可以接收到服务器返回上传成功的地址</li></ol></li></ol></li><li>将 data 对象中收集到的数据作为添加/修改品牌 API的参数发起请求</li><li>成功之后将数据清空<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">addOrUpdateConfirm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">trademark</span>.<span class="title function_">reqAddOrUpdateTradeMark</span>(</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tradeInfo</span></span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tradeInfo</span>.<span class="property">id</span> ? <span class="string">&quot;修改品牌成功&quot;</span> : <span class="string">&quot;添加品牌成功&quot;</span></span><br><span class="line">    );</span><br><span class="line">    <span class="comment">// 刷新列表</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getTradeMarkList</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tradeInfo</span> = &#123; <span class="attr">tmName</span>: <span class="string">&quot;&quot;</span>, <span class="attr">logoUrl</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tradeInfo</span>.<span class="property">id</span> ? <span class="string">&quot;修改品牌失败&quot;</span> : <span class="string">&quot;添加品牌失败&quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改品牌"><a href="#修改品牌" class="headerlink" title="修改品牌"></a>修改品牌</h3><ol><li>作用域插槽中的 row 就是对应品牌的信息，传递给修改对应的回调</li><li>在回调中将对应的值同步到 data 进行展示（注意此处<code>浅拷贝</code>，防止表格数据直接被修改）</li><li>点击确定刷新列表时，保持之前的页码</li><li>dialog title 根据 tradeInfo 中是否包含 id 动态展示 <code>:title=&quot;tradeInfo.id ? &#39;修改品牌&#39; : &#39;添加品牌&#39;&quot;</code></li></ol><h3 id="dialog-表单验证"><a href="#dialog-表单验证" class="headerlink" title="dialog 表单验证"></a>dialog 表单验证</h3><blockquote><p>Form 组件提供了表单验证的功能，只需要通过 rules 属性传入约定的验证规则，并将 Form-Item 的 prop 属性设置为需校验的字段名即可</p></blockquote><ol><li>编写 rules 表单验证规则<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dialog 表单验证规则</span></span><br><span class="line"><span class="attr">rules</span>: &#123;</span><br><span class="line">  <span class="attr">tmName</span>: [</span><br><span class="line">    &#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入品牌名称&quot;</span>, <span class="attr">trigger</span>: <span class="string">&quot;change&quot;</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">min</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">max</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&quot;长度在 1 到 10 个字符&quot;</span>,</span><br><span class="line">      <span class="attr">trigger</span>: <span class="string">&quot;change&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">logoUrl</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请上传品牌Logo&quot;</span> &#125;],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>Form-Item prop 属性设置为需校验的字段名</li><li>在确定按钮的回调函数中进行判断，如果表单校验成功则发送请求<ol><li>给 Form 标识一个 ref</li><li>获取表单，并通过 validate 回调函数返回的布尔值判断表单验证是否通过<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">trademarkForm</span>.<span class="title function_">validate</span>(<span class="keyword">async</span> (valid) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 校验成功</span></span><br><span class="line">  <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">trademark</span>.<span class="title function_">reqAddOrUpdateTradeMark</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tradeInfo</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tradeInfo</span>.<span class="property">id</span> ? <span class="string">&quot;修改品牌成功&quot;</span> : <span class="string">&quot;添加品牌成功&quot;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// 刷新列表</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getTradeMarkList</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tradeInfo</span> = &#123; <span class="attr">tmName</span>: <span class="string">&quot;&quot;</span>, <span class="attr">logoUrl</span>: <span class="string">&quot;&quot;</span> &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tradeInfo</span>.<span class="property">id</span> ? <span class="string">&quot;修改品牌失败&quot;</span> : <span class="string">&quot;添加品牌失败&quot;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 校验失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;error submit!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="删除品牌"><a href="#删除品牌" class="headerlink" title="删除品牌"></a>删除品牌</h3><ol><li>编写删除品牌接口。（API: /admin/product/baseTrademark/remove/{id} method: DELETE)</li><li>删除回调传递作用域插槽中的 row （品牌信息）</li><li>messagebox 弹出框确认删除中调用接口。</li></ol><h2 id="属性管理"><a href="#属性管理" class="headerlink" title="属性管理"></a>属性管理</h2><h3 id="三级联动动态数据"><a href="#三级联动动态数据" class="headerlink" title="三级联动动态数据"></a>三级联动动态数据</h3><ol><li>编写获取分类相关 API（二级分类根据一级分类id获取，三级分类根据二级分类id获取）<ol><li>GET /admin/product/getCategory1</li><li>GET /admin/product/getCategory2/{category1Id}</li><li>GET /admin/product/getCategory3/{category2Id}</li></ol></li><li>三级联动组件 mounted 生命周期函数中调用获取一级分类方法，获取的数据存储在 data 中</li><li>el-option 组件循环渲染数据展示，并通过 el-option 的 <code>:value</code> 属性收集一级分类的 id，保存于 data 自定义对象中，el-select v-model 绑定这个 id</li><li>一级分类 el-option 绑定 change 事件，事件回调中根据 id 获取二级分类列表并渲染</li><li>二级分类 el-option 绑定 change 事件，事件回调中根据 id 获取三级分类列表并渲染</li><li>三级分类 el-option 绑定 change 事件</li><li>一二级分类<code>二次选择清空逻辑</code><ol><li>当一级分类发生变化，清空二三级数据列表与 id</li><li>当二级分类发生变化，清空三级数据列表与 id</li></ol></li></ol><h3 id="获取分类属性"><a href="#获取分类属性" class="headerlink" title="获取分类属性"></a>获取分类属性</h3><p>商品基础属性接口 API: /admin/product/attrInfoList/{category1Id}/{category2Id}/{category3Id}<br>Method: GET</p><ol><li>分类 change 事件回调中将分类 id 通过<code>自定义事件</code>发送给父组件，并<code>加上标识</code>用于区分一二三级分类</li><li>attrManage 父组件在自定义事件回调中接收到传过来的 id，并保存，</li><li>收集完毕，调用接口请求数据</li><li>数据在 attrManage 组件表格中展示</li></ol><h3 id="添加属性按钮功能"><a href="#添加属性按钮功能" class="headerlink" title="添加属性按钮功能"></a>添加属性按钮功能</h3><ol><li>禁用效果：三级分类 id 没有的情况下，禁用状态。</li><li>点击添加按钮 attrManage 表格组件隐藏，添加属性组件显示（使用变量控制）</li></ol><h3 id="收集组件中的属性"><a href="#收集组件中的属性" class="headerlink" title="收集组件中的属性"></a>收集组件中的属性</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221024104532.png" alt="20221024104532"></p><p>添加属性与属性值接口 API: /admin/product/saveAttrInfo<br>Method: POST<br>参数描述：（saveAttrInfo）<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;attrName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span> <span class="comment">// 属性名</span></span><br><span class="line">  <span class="comment">// 相关属性值列表</span></span><br><span class="line">  <span class="attr">&quot;attrValueList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;attrId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 属性名的 id (归属于哪个属性名)</span></span><br><span class="line">      <span class="attr">&quot;valueName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span> <span class="comment">// 属性值</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;categoryId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span> <span class="comment">// 分类3 id</span></span><br><span class="line">  <span class="attr">&quot;categoryLevel&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>收集属性逻辑：</p><ol><li>收集属性名<ol><li>v-model 双向绑定到 data 中</li></ol></li><li>收集属性值<ol><li>属性值表格数据 data 绑定到 attrValueList，表格根据 attrValueList 数组内容而呈现</li><li>属性值名称使用作用域插槽回传 attrValueList 中对应元素，插槽中放 el-input 数据双向绑定到回传数据的 valueName 属性</li><li>添加属性值按钮<ol><li>禁用条件：<code>:disabled=&quot;!attrInfo.attrName.trim().length&quot;</code></li><li>点击事件 attrValueList push 一个新元素 <code>&#123; attrId: undefined, valueName: &quot;&quot;,&#125;</code></li></ol></li></ol></li></ol><h3 id="取消按钮数据回显问题"><a href="#取消按钮数据回显问题" class="headerlink" title="取消按钮数据回显问题"></a>取消按钮数据回显问题</h3><blockquote><p>解决添加属性操作中，上次的数据遗留问题</p></blockquote><ol><li>给添加属性按钮绑定事件</li><li>回调函数中初始化data中的数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">addAttrHandler</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">isShowAttrInfo</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">attrInfo</span> = &#123;</span><br><span class="line">    <span class="attr">attrName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">attrValueList</span>: [],</span><br><span class="line">    <span class="comment">// 注意此处的三级分类 id 只能在这里获取，不能在 data 中获取，因为对象中的数据是无序排列的</span></span><br><span class="line">    <span class="attr">categoryId</span>: <span class="variable language_">this</span>.<span class="property">catInfo</span>.<span class="property">catList3id</span>,</span><br><span class="line">    <span class="attr">categoryLevel</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="修改属性操作"><a href="#修改属性操作" class="headerlink" title="修改属性操作"></a>修改属性操作</h3><ol><li>修改属性按钮添加回调，传入作用域插槽中的 row 对象</li><li>将传过来的对象<strong>深拷贝</strong>，并赋值给 attrInfo (注意此处不能直接赋值,否则他们用的都是同一个地址)</li></ol><h3 id="查看模式与编辑模式操作"><a href="#查看模式与编辑模式操作" class="headerlink" title="查看模式与编辑模式操作"></a>查看模式与编辑模式操作</h3><p>编辑并添加属性值操作: 新添加的属性值 id 应该为<code>对应编辑的属性值 id</code>: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">attrValueList</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="comment">// attrId: undefined,</span></span><br><span class="line">  <span class="attr">attrId</span>: <span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">id</span>,</span><br><span class="line">  <span class="attr">valueName</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="编辑模式与查看模式"><a href="#编辑模式与查看模式" class="headerlink" title="编辑模式与查看模式"></a>编辑模式与查看模式</h4><p>属性值名称编辑模式与查看模式（input or span 切换）:</p><ol><li>定义变量：flag (注意这个变量不能定义在 data 中，而是定义在添加的属性值对象上)<ol><li>input 失去焦点（<code>@blur</code>）或者回车（<code>@keyup.native.enter</code>） 对应属性值对象 flag 改变状态</li><li>span 点击事件，对应属性值对象 flag 改变状态</li></ol></li><li>使用 v-if 与 v-else 属性值对象身上变量 flag 切换 input or span 显示模式</li></ol><h4 id="编辑模式优化"><a href="#编辑模式优化" class="headerlink" title="编辑模式优化"></a>编辑模式优化</h4><ol><li>编辑模式下之前的属性没有 flag<ol><li>编辑事件回调中是直接对服务器的数据进行了深拷贝，而服务器数据中没有我们自定义的 flag 属性</li><li>深拷贝之后，对拷贝过来的对象进行遍历，使用 <code>$set</code> 方法对对象添加响应式数据。</li></ol></li><li>由编辑模式切换查看模式 input 输入框内容判断<ol><li>不能为空<ol><li>input 失去焦点（<code>@blur</code>）回调函数中对 row 的值进行判断</li><li>如果为空，就直接 return 一个弹出框提示用户</li></ol></li><li>不能有重复的属性值<ol><li>input 失去焦点（<code>@blur</code>）回调函数中对整个数组使用 some 方法进行判断（<code>排除自身</code>进行判断, 用自身的这个元素和数组中每一个元素比较）</li><li>如果结果为 false 则说明有重复的元素，return 一个弹出框提示用户</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 属性值表单失去焦点事件 (写的太优雅!)</span></span><br><span class="line"><span class="title function_">attrInfoBlurHandler</span>(<span class="params">row</span>) &#123;</span><br><span class="line">  <span class="comment">// 属性值不能为空判断</span></span><br><span class="line">  <span class="keyword">if</span> (!row.<span class="property">valueName</span>.<span class="title function_">trim</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.$message(<span class="string">&quot;属性值不能为空！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不能有重复的属性值判断</span></span><br><span class="line">  <span class="keyword">let</span> isRepeat = <span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">attrValueList</span>.<span class="title function_">some</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 排除自身进行判断</span></span><br><span class="line">    <span class="keyword">if</span> (row != item) &#123;</span><br><span class="line">      <span class="comment">// 返回的是一个布尔值</span></span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">valueName</span> == row.<span class="property">valueName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">if</span> (isRepeat) &#123;</span><br><span class="line">    <span class="comment">// 删除这个重复的元素</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">attrValueList</span>.<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;属性值不能重复！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  row.<span class="property">flag</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="表单元素自动聚焦"><a href="#表单元素自动聚焦" class="headerlink" title="表单元素自动聚焦"></a>表单元素自动聚焦</h4><p>由查看模式切换为编辑模式自动聚焦：</p><ol><li>给 input 元素打一个 ref 属性，属性值是 $index</li><li>点击 span 标签回调函数中传入$index索引，用于获取 input 标签</li><li>在 <code>nextTick 函数</code>中获取 input 并调用 focus 方法</li></ol><p>点击添加属性值按钮自动聚焦：</p><ol><li>在添加属性值按钮回调函数中使用 nextTick 方法获取当前属性列表<code>数组中最后一个 input 元素</code>。</li><li>为最后一个 input 元素调用 focus 方法</li></ol><h3 id="删除属性名称"><a href="#删除属性名称" class="headerlink" title="删除属性名称"></a>删除属性名称</h3><p>API: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  API: /admin/product/deleteAttr/&#123;attrId&#125;</span></span><br><span class="line"><span class="comment">  Method: DELETE</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqDeleteAttr</span> = (<span class="params">attrId</span>) =&gt; <span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`/admin/product/deleteAttr/<span class="subst">$&#123;attrId&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;DELETE&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>删除属性名称按钮绑定事件,并传入要删除的 attrId 调用接口</p><h3 id="删除属性值名称"><a href="#删除属性值名称" class="headerlink" title="删除属性值名称"></a>删除属性值名称</h3><ol><li>删除点击弹出 Popconfirm 气泡确认框组件<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;prop&quot;</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;width&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;&#123; row, $index &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-popconfirm</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:title</span>=<span class="string">&quot;`确定删除$&#123;row.valueName&#125;?`&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">onConfirm</span>=<span class="string">&quot;attrInfoDeleteHandler($index)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span><span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-popconfirm</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>回调函数中根据索引删除数组对应元素<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">attrInfoDeleteHandler</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">attrValueList</span>.<span class="title function_">splice</span>(index, <span class="number">1</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="添加属性与修改属性保存操作"><a href="#添加属性与修改属性保存操作" class="headerlink" title="添加属性与修改属性保存操作"></a>添加属性与修改属性保存操作</h3><h4 id="保存数据API"><a href="#保存数据API" class="headerlink" title="保存数据API"></a>保存数据API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  API: /admin/product/saveAttrInfo</span></span><br><span class="line"><span class="comment">  Method: POST</span></span><br><span class="line"><span class="comment">  参数格式:</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    &quot;attrName&quot;: &quot;string&quot;,</span></span><br><span class="line"><span class="comment">    &quot;attrValueList&quot;: [</span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">        &quot;attrId&quot;: 0,</span></span><br><span class="line"><span class="comment">        &quot;valueName&quot;: &quot;string&quot;</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">    ],</span></span><br><span class="line"><span class="comment">    &quot;categoryId&quot;: 0,</span></span><br><span class="line"><span class="comment">    &quot;categoryLevel&quot;: 0,</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqaddOrUpdateAttrSave</span> = (<span class="params">data</span>) =&gt; <span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`/admin/product/saveAttrInfo`</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">  data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="保存操作逻辑"><a href="#保存操作逻辑" class="headerlink" title="保存操作逻辑"></a>保存操作逻辑</h4><p>保存按钮中对数据进行<code>整理</code></p><ol><li>如果属性值为空，则不需要提交给服务器</li><li>不需要传递 flag 属性</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存按钮</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">addOrUpdateAttrSave</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/* </span></span><br><span class="line"><span class="comment">  整理参数</span></span><br><span class="line"><span class="comment">    1. 如果属性值为空，则不需要提交给服务器</span></span><br><span class="line"><span class="comment">    2. 不需要传递 flag 属性</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">attrValueList</span> = <span class="variable language_">this</span>.<span class="property">attrInfo</span>.<span class="property">attrValueList</span>.<span class="title function_">filter</span>(</span><br><span class="line">    <span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!item.<span class="property">valueName</span> == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> item.<span class="property">flag</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 发请求</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="property">attrmanage</span>.<span class="title function_">reqaddOrUpdateAttrSave</span>(</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">attrInfo</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getAttrInfoList</span>();</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;保存成功!&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">isShowAttrInfo</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;保存失败!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="最后优化"><a href="#最后优化" class="headerlink" title="最后优化"></a>最后优化</h3><h4 id="三级联动禁用状态"><a href="#三级联动禁用状态" class="headerlink" title="三级联动禁用状态"></a>三级联动禁用状态</h4><p>当点击添加属性,展示属性表格隐藏的时候,三级联动禁用</p><ol><li>通过 <code>props</code> 将 <code>isShowAttrInfo</code> (控制属性表格显示与隐藏) 的变量<code>取反</code>传递给三级联动组件</li><li>三级联动组件 el-select 的禁用状态<code>通过这个变量来控制</code></li></ol><h4 id="保存按钮禁用状态"><a href="#保存按钮禁用状态" class="headerlink" title="保存按钮禁用状态"></a>保存按钮禁用状态</h4><p>如果属性值列表为空,则保存按钮为禁用状态 <code>:disabled=&quot;attrInfo.attrValueList.length &lt; 1&quot;</code></p><h2 id="SPU-管理"><a href="#SPU-管理" class="headerlink" title="SPU 管理"></a>SPU 管理</h2><h3 id="静态组件"><a href="#静态组件" class="headerlink" title="静态组件"></a>静态组件</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221026223510.png" alt="20221026223510"></p><p>顶部：三级联动</p><p>底部：底部会有三部分进行切换: 通过定义数字 scene: <code>0 1 2</code> 来判断加载哪个场景</p><ol><li>SPU 列表结构【场景0】<ol><li>索引</li><li>SPU 名称</li><li>SPU 描述</li><li>操作(按钮)<ol><li>添加</li><li>编辑</li><li>信息</li><li>删除</li></ol></li><li>分页</li></ol></li><li>添加 / 修改 SPU (拆分成一个组件)【场景1】<ol><li>SPU名称</li><li>品牌</li><li>SPU描述</li><li>SPU图片（照片墙）</li><li>销售属性</li><li>保存/取消按钮</li></ol></li><li>添加 SKU (拆分成一个组件)【场景2】<ol><li>SPU名称</li><li>SKU名称</li><li>价格（元）</li><li>重量（千克）</li><li>规格描述</li><li>平台属性</li><li>销售属性</li><li>图片列表</li><li>保存/取消按钮</li></ol></li></ol><h3 id="SPU-列表结构"><a href="#SPU-列表结构" class="headerlink" title="SPU 列表结构"></a>SPU 列表结构</h3><h4 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  API: /admin/product/&#123;page&#125;/&#123;limit&#125;</span></span><br><span class="line"><span class="comment">  Method: GET</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqGetSpuList</span> = (<span class="params">page, limit, category3Id</span>) =&gt; <span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">`/admin/product/<span class="subst">$&#123;page&#125;</span>/<span class="subst">$&#123;limit&#125;</span>`</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    category3Id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="展示逻辑"><a href="#展示逻辑" class="headerlink" title="展示逻辑"></a>展示逻辑</h4><ol><li>三级分类选择完成调用接口，获取数据，渲染数据</li><li>SPU 列表操作按钮有鼠标 hover 提示效果.（两种方案）<ol><li>使用 el-tooltip 组件包裹按钮</li><li>封装自定义按钮组件。<code>HintButton</code></li></ol></li><li>分页器数据绑定事件绑定</li></ol><h4 id="信息-info"><a href="#信息-info" class="headerlink" title="信息 info"></a>信息 info</h4><p>接口：GET /admin/product/findBySpuId/{spuId}</p><p>点击 info 按钮会通过 dialog 对话框展示当前 spu 的 所有 sku</p><ol><li>dialog 嵌套表格</li><li>title 动态</li><li>根据 spu id 信息发请求获取 sku 列表数据</li><li>保存数据，渲染数据</li></ol><p>loading 效果：</p><blockquote><p>Loading 加载 <a href="https://element.eleme.cn/#/zh-CN/component/loading">https://element.eleme.cn/#/zh-CN/component/loading</a></p></blockquote><h4 id="删除-SPU"><a href="#删除-SPU" class="headerlink" title="删除 SPU"></a>删除 SPU</h4><p>删除场景 0 中的数据</p><ol><li>点击删除按钮传递 Row，（根据row中的spuid删除数据）</li><li>在回调中发送请求删除数据</li><li>删除成功后重新获取列表数据</li></ol><h3 id="添加-修改-SPU-组件数据请求与绑定【难点】"><a href="#添加-修改-SPU-组件数据请求与绑定【难点】" class="headerlink" title="添加 / 修改 SPU 组件数据请求与绑定【难点】"></a>添加 / 修改 SPU 组件数据请求与绑定【难点】</h3><h4 id="修改-SPU-组件数据获取与展示逻辑"><a href="#修改-SPU-组件数据获取与展示逻辑" class="headerlink" title="修改 SPU 组件数据获取与展示逻辑"></a>修改 SPU 组件数据获取与展示逻辑</h4><p>数据获取：</p><ol><li>点击修改按钮 spuEdit 子组件需要发送四个请求：<ol><li>品牌信息 数据：GET /admin/product/baseTrademark/getTrademarkList</li><li>获取平台所有销售属性：GET /admin/product/baseSaleAttrList</li><li>根据 id 获取spu数据：GET /admin/product/getSpuById/{spuId}</li><li>根据 id 获取spu图片：GET /admin/product/spuImageList/{spuId}</li></ol></li><li>取消按钮点击事件：展示 <code>scene：0</code> SPU 列表结构场景<ol><li>通过自定义事件将数字 0 传递给父组件，父组件同步到 data</li></ol></li><li>spuEdit 子组件什么时候发请求？（不可以在mounted生命周期中发，因为只会执行一次。）<ol><li>在编辑按钮事件中发请求。（每次点击都会发请求）</li><li>给 spuEdit 子组件打一个 ref</li><li>在编辑按钮事件回调中获取子组件，调用组件身上初始化数据的接口函数（注意此处用了 v-if 展示子组件，所以需要使用 nextTick 函数获取，否则获取不到）</li></ol></li></ol><p>数据展示：</p><blockquote><p>此处不仅要考虑<code>如何展示数据</code>，还要考虑<code>如何收集数据</code></p></blockquote><p>整个表单数据绑定到 spuInfo 对象上：<code>:model=&quot;spuInfo&quot;</code></p><ol><li>SPU名称<ol><li>v-model</li></ol></li><li>品牌<ol><li><code>el-select</code> 收集到的数据双向绑定到 <code>spuInfo.tmId</code> 中</li><li>循环渲染数据源为 tradeMarkList，收集的数据为 item.id</li></ol></li><li>SPU描述<ol><li>双向数据绑定到 <code>spuInfo.description</code> 字段</li></ol></li><li>SPU图片（照片墙）<ol><li>数据展示<ol><li>需要使用 <code>:file-list=&quot;spuImages&quot;</code> 字段指定要展示的数据源，<ol><li>fileList 是一个数组对象</li><li>对象中包含两个属性：name url</li></ol></li><li>而服务器返回的数据中没有这两个属性，所以在保存服务器返回的数据之前，需要对数据进行处理，加上 name url 字段</li></ol></li><li>图片数据收集<ol><li>照片墙删除事件：<code>:on-remove=&quot;handleRemove&quot;</code> 会注入两个参数：file(被删除的元素)、fileList(删除后剩余的元素) 将 fileList(删除后剩余的元素) 保存在 data 中</li><li>照片墙上传图片：<code>:on-success=&quot;handleSpuImgSuccess&quot;</code> 会注入三个参数：response、file、filelist 其中 filelist 是上传成功后所有的图片数据，将其保存在 data 中</li><li>数据整理</li></ol></li></ol></li><li>销售属性【难点】<ol><li>销售属性 select 选择【展示】<ol><li>使用计算属性: 计算出还没有被选中的销售属性(平台一共有三个属性)使用计算出来的数据进行渲染，数据绑定在变量：spuSaleAttr<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-select</span> <span class="attr">v-model</span>=<span class="string">&quot;spuSaleAttr&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;`还有$&#123;getNoSelectSaleAttr.length&#125;个属性`&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-option</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-for</span>=<span class="string">&quot;item in getNoSelectSaleAttr&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:label</span>=<span class="string">&quot;item.name&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line"><span class="title function_">getNoSelectSaleAttr</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> res = <span class="variable language_">this</span>.<span class="property">baseSaleAttrList</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">item1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">spuInfo</span>.<span class="property">spuSaleAttrList</span>.<span class="title function_">every</span>(<span class="function">(<span class="params">item2</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item2.<span class="property">saleAttrName</span> != item1.<span class="property">name</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>添加销售属性按钮禁用事件：<code>:disabled=&quot;!spuSaleAttr&quot;</code> (spuSaleAttr 是 el-select 双向绑定的变量，el-select 没有选中属性，按钮就是禁用状态)</li></ol></li><li>table 组件【展示】: 已有销售属性(数据源绑定到 spuInfo.spuSaleAttrList)<ol><li>属性名</li><li>属性名称列表<ol><li>使用 Tag 动态编辑标签组件展示</li><li>Tag 标签中的 input 和 按钮之间的切换</li></ol></li><li>操作</li></ol></li><li>销售属性操作<ol><li>添加销售属性名<ol><li>收集 el-select 双向绑定的数据：<code>:value=&quot;</code>${item.id}:${item.name}<code>&quot;</code></li><li>添加销售属性按钮点击事件：<ol><li>对以上收集到的数据进行处理（split(“:”)）</li><li>处理完成后将数据添加到 <code>属性名 el-table</code> 的数据源上: <code>spuInfo.spuSaleAttrList</code>(pushh)</li></ol></li><li>相关字段<ol><li>baseSaleAttrId</li><li>saleAttrName</li><li>spuSaleAttrValueList</li></ol></li></ol></li><li>展示 / 收集销售属性值<ol><li><code>+ New Tag</code> 按钮点击事件：<ol><li>给每一个 row 添加一个 <code>inputVisible</code> 属性，用于控制 input 和 span 状态的切换（注意此处要用 $set 方法为 row 添加响应式数据）</li><li>收集用户输入 input 中的数据（注意此处要用 $set 方法为 <code>row</code> 添加响应式数据）数据双向绑定到这个响应式数据</li></ol></li><li>input 失去焦点：<ol><li>inputVisible 属性为 false（由输入框变为 span）</li><li>将 input 中的数据整合并添加到  el-tag 绑定的数据源，字段格式：<ol><li>baseSaleAttrId</li><li>saleAttrValueName</li></ol></li></ol></li><li>input 失去焦点数据校验：<ol><li>属性值不能为空</li><li>属性值不能重复</li></ol></li></ol></li></ol></li><li>删除操作<ol><li>删除 Tag<ol><li>使用 splice 方法根据索引删除 <code>row.spuSaleAttrValueList</code> 数组中的数据</li></ol></li><li>删除整个 Row<ol><li>使用 splice 方法根据索引删除 spuSaleAttrList 数组中的数据</li></ol></li></ol></li></ol></li><li>三级联动操作性<ol><li>除了场景 0 以外都不可以操作三级联动</li></ol></li><li>保存操作<ol><li>修改和添加 SPU 封装成同一个请求（除了添加 SPU 接口参数<code>不携带 id</code> 外，其他参数都和修改接口一样）<ol><li>POST /admin/product/updateSpuInfo</li><li>POST /admin/product/saveSpuInfo</li></ol></li><li>整理参数【难点】<ol><li>对照片墙收集到的数据进行整理<ol><li>必须有 <code>imgName</code> 和 <code>imgUrl</code> 字段，新上传的图片没有这两个字段（但是有 name 和 url 字段），所以需要对新上传的数据进行处理。</li><li>使用数组 map 方法对原数组进行处理，返回处理后的数组，覆盖原数组</li></ol></li></ol></li><li>发请求</li><li>弹出 message 并回到场景 0，然后父组件中刷新场景 0 中的数据</li></ol></li></ol><h4 id="添加-SPU-数据逻辑"><a href="#添加-SPU-数据逻辑" class="headerlink" title="添加 SPU 数据逻辑"></a>添加 SPU 数据逻辑</h4><p>因为添加 SPU 中 spuInfo 对象没有被初始化是空对象。不利于后期收集数据，所以在 data 中直接将 spuInfo 对象根据接口参数初始化。<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;category3Id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spuImageList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;imgName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;imgUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spuSaleAttrList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;baseSaleAttrId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;saleAttrName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spuSaleAttrValueList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;baseSaleAttrId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;isChecked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;saleAttrName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;saleAttrValueName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;spuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tmId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p><p>添加 SPU 数据</p><ol><li>点击添加按钮 spuEdit 子组件需要发送两个请求初始化组件 select：<ol><li>品牌信息 数据：GET /admin/product/baseTrademark/getTrademarkList</li><li>获取平台所有销售属性：GET /admin/product/baseSaleAttrList</li></ol></li><li>三级分类 id 传递给子组件，初始化 data 中的数据</li><li>添加完成后跳转到场景 0 的 第一页</li></ol><h3 id="添加-SKU"><a href="#添加-SKU" class="headerlink" title="添加 SKU"></a>添加 SKU</h3><ol><li>传递参数 <code>row</code> 和 <code>categoryId</code> 并切换为场景 2</li><li>父组件通知子组件（ref获取子节点调用方法）发送请求初始化组件数据<ol><li>根据 Id 获取图片数据 GET /admin/product/spuImageList/{spuId}</li><li>根据 Id 获取销售属性 GET /admin/product/spuSaleAttrList/{spuId}</li><li>根据 Id 获取平台属性 GET /admin/product/attrInfoList/{category1Id}/{category2Id}/{category3Id}</li></ol></li><li>将接口请求的数据分别保存在 data 中</li><li>数据展示与收集<ol><li>SPU名称</li><li>SKU名称</li><li>价格（元）<ol><li>type = “number”</li></ol></li><li>重量（千克）</li><li>规格描述</li><li>平台属性 【难点】<ol><li>有两个 select 数据是动态的（使用循环渲染出来）</li><li>使用模板字符串<code>收集到平台属性对象身上</code></li></ol></li><li>销售属性<ol><li>使用循环渲染</li><li>使用模板字符串<code>收集到平台属性对象身上</code></li></ol></li><li>图片列表（数据展示与收集）<ol><li>绑定数据源，使用 table 渲染</li><li>selection 的事件获取被勾选的 row（数组）存储在 data 中需要收集发给服务器的参数：<ol><li>imgName </li><li>imgurl</li><li>spuImgId</li><li>isDefault（控制是不是默认图片）</li></ol></li><li>图片使用作用域插槽读取展示</li><li>两个按钮（设为默认、默认）<ol><li>数据默认没有 isDefault 字段，所以在服务器返回数据存储之前，对数据进行处理，添加 isDefault 字段：默认值为 0</li><li>按钮根据 isDefault 字段的值进行 v-if 展示</li><li>按钮点击事件，使用排他操作（只能有一张图片设置为默认图）</li><li>收集默认图片地址</li></ol></li></ol></li><li>保存/取消按钮<ol><li>保存：发请求</li><li>取消: 切换场景【清除数据】</li></ol></li></ol></li><li>保存 SKU<ol><li>接口：POST /admin/product/saveSkuInfo</li><li>参数格式：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;category3Id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-10-22T13:40:27.515Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;isSale&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skuAttrValueList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;attrId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;attrName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;skuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;valueId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;valueName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skuDefaultImg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skuDesc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skuImageList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;imgName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;imgUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;skuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spuImgId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skuName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;skuSaleAttrValueList&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;saleAttrId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;saleAttrName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;saleAttrValueId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;saleAttrValueName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;skuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;spuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;spuId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tmId&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;string&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>整理参数【难点】<ol><li>平台属性数据整理<ol><li>forEach</li><li>reduce</li></ol></li><li>销售属性数据整理<ol><li>forEach</li><li>reduce</li></ol></li><li>图片数据整理</li></ol></li></ol></li></ol><h2 id="SKU-管理"><a href="#SKU-管理" class="headerlink" title="SKU 管理"></a>SKU 管理</h2><h3 id="静态组件-1"><a href="#静态组件-1" class="headerlink" title="静态组件"></a>静态组件</h3><ol><li>el-table 展示数据，相关字段：<ol><li>序号</li><li>名称</li><li>描述</li><li>默认图片</li><li>重量（KG)</li><li>价格（元）</li><li>操作<ol><li>上架 （根据 row.isSale 属性展示）</li><li>下架 （根据 row.isSale 属性展示）</li><li>编辑<ol><li>正在开发中..</li></ol></li><li>信息</li><li>删除</li></ol></li></ol></li><li>分页</li></ol><h3 id="渲染数据"><a href="#渲染数据" class="headerlink" title="渲染数据"></a>渲染数据</h3><ol><li>接口：GET /admin/product/list/{page}/{limit}</li><li>初始化页码参数并绑定到 pagination</li><li>根据参数调用接口发送请求</li><li>el-table 操作区域按钮<ol><li>上下架操作<ol><li>接口：<ol><li>GET /admin/product/onSale/{skuId}</li><li>GET /admin/product/cancelSale/{skuId}</li></ol></li></ol></li><li>信息按钮<ol><li>Drawer 抽屉进行展示</li></ol></li></ol></li></ol><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><blockquote><p>值得参考的权限管理文章：<a href="https://juejin.cn/post/6949453195987025927#heading-8">https://juejin.cn/post/6949453195987025927#heading-8</a></p></blockquote><p>通过给项目引入了权限控制方案,可以满足我们灵活的调整用户访问相关页面的许可。<br>比如哪些页面向游客开放,哪些页面必须要登录后才能访问,哪些页面只能被某些角色访问(比如超级管理员).有些页面即使用户登录了但受到角色的限制,他也只被允许看到页面的部分内容。</p><h3 id="路由权限管理"><a href="#路由权限管理" class="headerlink" title="路由权限管理"></a>路由权限管理</h3><p>不同的用户（角色）,<code>登录</code>的时候会向服务器发请求，<code>服务器会把用户相应的菜单的权限的信息，返回给我们我们可以根据服务器返回的数据（信息）</code>,可以动态的设置路由，可以根据不同的用户展示不同的菜单。</p><ol><li>当用户登录的时候，服务器端会返回相应角色的菜单权限的信息【数组】</li><li>把项目中的<code>路由进行拆分</code><ol><li>常量路由：就是不关用户是什么角色，都可以看见的路由</li><li>异步理由：不同的用户（角色），需要过滤筛选出的路由，称之为异步路由</li><li>任意路由：当路径出现错误的时候重定向 404</li></ol></li><li>项目中已有的异步路由，与服务器返回的标记信息<code>进行对比过滤</code>出最终需要展示的理由。<ol><li>定义一个函数使用 <code>filter 方法</code> + <code>递归</code> 计算出异步路由与服务器返回的路由，返回当前用户需要展示的异步路由</li><li>将计算出的路由信息<code>合并</code></li><li>给路由器添加新的路由</li></ol></li></ol><h3 id="路由权限管理（代码步骤）"><a href="#路由权限管理（代码步骤）" class="headerlink" title="路由权限管理（代码步骤）"></a>路由权限管理（代码步骤）</h3><ol><li>用户登录，服务器根据用户信息返回数据，其中包含了用户可以访问哪些权限的路由。保存这些信息。<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221106155010.png" alt="服务器根据用户信息返回数据"><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221106155625.png" alt="保存服务器返回的数据"></li><li>把项目中的<code>路由进行拆分</code><br>拆分前：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 权限管理及子路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Acl&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/acl&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/acl/user/list&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;el-icon-lock&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;user/list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/user/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Role&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;role/list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/role/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;RoleAuth&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;role/auth/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/role/roleAuth&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">activeMenu</span>: <span class="string">&#x27;/acl/role/list&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色授权&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Permission&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;permission/list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/permission/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;菜单管理&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 商品管理及其子路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Product&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;商品管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;el-icon-goods&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 子路由</span></span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;trademark&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;TradeMark&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/tradeMark&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;品牌管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;attrmanage&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;AttrManage&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/attrManage&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;属性管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;spumanage&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;SpuManage&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/spuManage&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;SPU管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;skumanage&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;SkuManage&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/skuManage&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;SKU管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>拆分后：(1. 常量路由 2. 异步理由 3. 任意路由)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 常量路由：就是不关用户是什么角色，都可以看见的路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRoutes = [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/404&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;首页&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 404 page must be placed at the end !!!</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 异步路由：不同的用户（角色），需要过滤筛选出的路由，称之为异步路由</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRoutes = [</span><br><span class="line">  <span class="comment">// 权限管理及子路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Acl&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/acl&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/acl/user/list&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;el-icon-lock&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;User&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;user/list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/user/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;用户管理&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Role&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;role/list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/role/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色管理&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;RoleAuth&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;role/auth/:id&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/role/roleAuth&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">activeMenu</span>: <span class="string">&#x27;/acl/role/list&#x27;</span>,</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;角色授权&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Permission&#x27;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;permission/list&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/acl/permission/list&#x27;</span>),</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;菜单管理&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 商品管理及其子路由</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Product&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/product&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;商品管理&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;el-icon-goods&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 子路由</span></span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;trademark&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;TradeMark&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/tradeMark&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;品牌管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;attrmanage&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;AttrManage&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/attrManage&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;属性管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;spumanage&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;SpuManage&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/spuManage&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;SPU管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;skumanage&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;SkuManage&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/product/skuManage&#x27;</span>),</span><br><span class="line">      <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;SKU管理&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 任意路由：当路径出现错误的时候重定向 404</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> anyRoutes = &#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>,</span><br><span class="line">  <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>项目中已有的异步路由，与服务器返回的标记信息<code>进行对比过滤</code>出最终需要展示的理由：<ol><li>在 vuex —&gt; user.js 中定义一个数组（resAsyncRoutes）存储对比之后【项目中已有的异步路由，与服务器返回的标记信息进行对比最终需要展示的理由】</li><li>在 vuex —&gt; user.js 中提交 mutation，计算服务器当前用户需要展示的路由<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// actions</span></span><br><span class="line"><span class="title function_">commit</span>(<span class="string">&#x27;SET_RESASYNCROUTES&#x27;</span>, <span class="title function_">computedAsyncRoutes</span>(asyncRoutes, data.<span class="property">routes</span>))</span><br><span class="line"><span class="comment">// computedAsyncRoutes</span></span><br><span class="line"><span class="comment">// 定义一个函数：两个数组进行对比，对比出当前用户到底显示哪些异步路由</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">computedAsyncRoutes</span> = (<span class="params">asyncRoutes, routes</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> asyncRoutes.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (routes.<span class="title function_">indexOf</span>(item.<span class="property">name</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 递归：每一个 item 还有子路由</span></span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">children</span> &amp;&amp; item.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">        item.<span class="property">children</span> = <span class="title function_">computedAsyncRoutes</span>(item.<span class="property">children</span>, routes)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>合并路由<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">state.<span class="property">resAllRoutes</span> = constantRoutes.<span class="title function_">concat</span>(state.<span class="property">resAsyncRoutes</span>, anyRoutes)</span><br></pre></td></tr></table></figure></li><li>在 vuex —&gt; user.js 中引入 router，并给路由器添加新的路由<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">addRoutes</span>(state.<span class="property">resAllRoutes</span>)</span><br></pre></td></tr></table></figure></li><li>修改 vue-admin-template 源码，将路由指定为 vuex 仓库中计算出来的路由<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># src&gt;layout&gt;components&gt;Sidebar&gt;index.vue</span><br><span class="line">computed: &#123;</span><br><span class="line"> routes() &#123;</span><br><span class="line"><span class="deletion">-   return this.$router.options.routes</span></span><br><span class="line"><span class="addition">+   return this.$store.state.user.resAllRoutes</span></span><br><span class="line"> &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="按钮权限管理"><a href="#按钮权限管理" class="headerlink" title="按钮权限管理"></a>按钮权限管理</h3><p>不同的用户（角色）,有的用户的是可见按钮、当然有的用户不可见。</p><p>实现思路：按钮的 v-show 显示与隐藏通过用户是否有这个权限来展示</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.X 尚品汇电商项目</title>
      <link href="/2022/12/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_vue2.x%E5%B0%9A%E5%93%81%E6%B1%87%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/936189ad/"/>
      <url>/2022/12/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_vue2.x%E5%B0%9A%E5%93%81%E6%B1%87%E7%94%B5%E5%95%86%E9%A1%B9%E7%9B%AE/936189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="尚品汇"><a href="#尚品汇" class="headerlink" title="尚品汇"></a>尚品汇</h1><p>技术架构：vue + webpack + vuex + vue-router + axios + less. .<br>项目地址：<a href="https://github.com/HaloBoys/ShangPinHui_Vue2.X">https://github.com/HaloBoys/ShangPinHui_Vue2.X</a></p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">├── public：存放静态资源（图片）public中的静态资源，webpack打包的时候，会原封不动打包到dist文件夹中。</span><br><span class="line">│ ├── favicon.ico: 页签图标</span><br><span class="line">│ └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│ ├── assets: 存放静态资源（一般放置多个组件共用的静态资源，会被webpack当作模块打包,打包Js文件里面）</span><br><span class="line">│ │ └── logo.png</span><br><span class="line">│ │── component: 存放组件（非路由组件&amp;全局组件）</span><br><span class="line">│ │ └── HelloWorld.vue</span><br><span class="line">│ │── App.vue: 汇总所有组件</span><br><span class="line">│ │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git 版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel 的配置文件</span><br><span class="line">├── package.json: 应用包配置文件</span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件（缓存性文件）</span><br></pre></td></tr></table></figure><h2 id="项目开发流程"><a href="#项目开发流程" class="headerlink" title="项目开发流程"></a>项目开发流程</h2><ol><li>书写静态页面（HTML + CSS)</li><li>拆分组件（组件结构 + 组件的样式 + 图片资源）</li><li>获取服务器的数据动态展示</li><li>完成相应的动态业务逻辑</li></ol><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><h3 id="npm-run-serve-自动打开"><a href="#npm-run-serve-自动打开" class="headerlink" title="npm run serve 自动打开"></a>npm run serve 自动打开</h3><p>在 scripts serve 命令中加上 <code>--open</code> 后缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line"> <span class="string">&quot;serve&quot;</span>: <span class="string">&quot;vue-cli-service serve --open&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="关闭-Eslint-校验"><a href="#关闭-Eslint-校验" class="headerlink" title="关闭 Eslint 校验"></a>关闭 Eslint 校验</h3><p>在项目根目录创建 <code>vue.config.js</code> 文件，加入以下配置：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="addition">+  lintOnSave:false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-快捷路径（src-别名）"><a href="#配置-快捷路径（src-别名）" class="headerlink" title="配置 @ 快捷路径（src 别名）"></a>配置 @ 快捷路径（src 别名）</h3><p>使用 <code>@</code> 表示 src 源代码目录，从外往里查找；不要使用 <code>../../</code> 从里往外查找：</p><ol><li>在项目根目录创建：<code>jsconfig.json</code></li><li>配置<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><p>补充：如果需要在 css 文件中使用 @ 需要在前面加上 <code>~</code> 符号</p><h2 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h2><p>路由组件与非路由组件的区别？</p><ol><li>路由组件一般放置在 <code>pages|views</code> 文件夹，非路由组件一般放置 <code>components</code> 文件夹中</li><li>路由组件一般需要在 <code>router</code> 文件夹中进行注册（使用的即为组件的名字），非路由组件在使用的时候，一般都是以<code>标签</code>的形式使用</li><li><code>注册完路由，不管路由路由组件、还是非路由组件身上都有</code>$route<code>、</code>$router<code>属性</code><ol><li>$route: 一般获取路由信息【路径、query、params等等】</li><li>$router: 一般进行编程式导航进行路由跳转【push|replace]</li></ol></li></ol><h3 id="Footer-组件显示与隐藏"><a href="#Footer-组件显示与隐藏" class="headerlink" title="Footer 组件显示与隐藏"></a>Footer 组件显示与隐藏</h3><p>只有当 Home、Search 组件显示时 Footer 组件才显示，否则隐藏。</p><p>方案一：通过路径判断：（不推荐，因为如果有多个组件会造成代码冗余。）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Footer</span> <span class="attr">v-show</span>=<span class="string">&quot;$route.path == &#x27;/home&#x27; || $route.path == &#x27;/search&#x27;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方案二：路由元信息（推荐）</p><ol><li>在路由规则中为路由定义 <code>meta</code> 元信息：<code>showFooter</code> 值为 <code>布尔值</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [&#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line"> <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line"> <span class="attr">meta</span>: &#123;</span><br><span class="line">   <span class="attr">showFooter</span>: <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line"> <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line"> <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line"> <span class="attr">meta</span>: &#123;</span><br><span class="line">   <span class="attr">showFooter</span>: <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>在组件中根据路由 meta 元信息控制显示与隐藏<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Footer</span> <span class="attr">v-show</span>=<span class="string">&quot;$route.meta.showFooter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="接口相关"><a href="#接口相关" class="headerlink" title="接口相关"></a>接口相关</h1><p><a href="http://gmall-h5-api.atguigu.cn">http://gmall-h5-api.atguigu.cn</a></p><p><a href="http://39.98.123.211:8510">http://39.98.123.211:8510</a></p><h2 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h2><p>postman 接口测试工具</p><h2 id="Axios-二次封装-接口统一管理"><a href="#Axios-二次封装-接口统一管理" class="headerlink" title="Axios 二次封装 + 接口统一管理"></a>Axios 二次封装 + 接口统一管理</h2><blockquote><p>主要是利用axios的<code>拦截器（请求拦截器和响应拦截器）</code>进行封装:</p></blockquote><ol><li>项目中安装 axios</li><li>项目中新建 src/api/request.js 文件</li><li>在 request.js 文件中编写：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/api/request.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">// 1. 利用axios对象的方法create,去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础路径(发请求的时候，路径当中会出现api)</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="comment">// 请求超时的时间 5S </span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 响应拦截器：所有的请求在响应之后都会走这个</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="comment">// 成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情</span></span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//响应失败的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;faile&#x27;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure></li><li>API 统一管理<ol><li>项目中新建 <code>src/api/index.js</code> 文件，并导入二次封装好的 axios</li><li>基于二次封装好的 axios 发送请求：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getBaseCategoryList </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBaseCategoryList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/product/getBaseCategoryList&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>解决跨域问题（devServer）<br>项目根目录新建 <code>vue.config.js</code> 文件 :<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 配置此项，打包时不生成 map 文件</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://gmall-h5-api.atguigu.cn&#x27;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="comment">// pathRewrite: &#123;</span></span><br><span class="line">        <span class="comment">//   &#x27;^/api&#x27;: &#x27;&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Vuex（模块式开发）"><a href="#Vuex（模块式开发）" class="headerlink" title="Vuex（模块式开发）"></a>Vuex（模块式开发）</h2><ol><li>将项目中每个模块所用到的 vuex 隔离成多个文件（小仓库），每个文件（小仓库）都有自己的 <code>state mutations actions getters</code><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221113171007.png" alt="20221113171007"></li><li>将抽离出来的文件合并到大仓库中：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/store/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"><span class="comment">// 全局引入 swiper 样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;swiper/css/swiper.css&quot;</span></span><br><span class="line"><span class="keyword">import</span> home <span class="keyword">from</span> <span class="string">&#x27;./home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> search <span class="keyword">from</span> <span class="string">&#x27;./search&#x27;</span></span><br><span class="line"><span class="keyword">import</span> detail <span class="keyword">from</span> <span class="string">&#x27;./detail&#x27;</span></span><br><span class="line"><span class="keyword">import</span> shopcart <span class="keyword">from</span> <span class="string">&#x27;./shopcart&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> trade <span class="keyword">from</span> <span class="string">&#x27;./trade&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    home,</span><br><span class="line">    search,</span><br><span class="line">    detail,</span><br><span class="line">    shopcart,</span><br><span class="line">    user,</span><br><span class="line">    trade</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="nprogress"><a href="#nprogress" class="headerlink" title="nprogress"></a>nprogress</h2><p><a href="https://github.com/rstacruz/nprogress">nprogress</a> 可以实现请求加载效果，在项目axios 请求拦截器中调用。</p><h2 id="mockjs"><a href="#mockjs" class="headerlink" title="mockjs"></a>mockjs</h2><p><a href="http://mockjs.com/">Mockjs</a> 用于生成随机数据，<code>拦截 Ajax 请求</code>，通过随机数据，模拟各种场景。</p><p>使用步骤：</p><ol><li>在项目 <code>src</code> 文件夹中创建 <code>mock</code> 文件夹</li><li>准备JSON数据 mock 文件夹中创建相应的 <code>JSON 文件</code></li><li>mock 数据需要的图片放置到 <code>public</code> 文件夹中（public文件夹在打包的时候，会把相应的资源原封不动打包到dist文件夹中）</li><li>在 <code>mock</code> 文件夹中创建 <code>mockServer.js</code>（通过 mockjs 模块模拟虚拟数据）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mockServer.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&#x27;mockjs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 JSON 文件（JSON 文件不需要对外暴露即可引入）</span></span><br><span class="line"><span class="keyword">import</span> banner <span class="keyword">from</span> <span class="string">&#x27;./banner.json&#x27;</span></span><br><span class="line"><span class="keyword">import</span> floor <span class="keyword">from</span> <span class="string">&#x27;./floor.json&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/mock/banner&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: banner</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;/mock/floor&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">data</span>: floor</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>mockServer.js 在入口文件（main.js）中引入：<code>import &quot;@/mock/mockServer.js&quot;</code></li><li>对 axios 二次封装一个新的请求：<code>mock.js</code>（同以前的封装步骤），唯一区别：<code>baseURL: &#39;/mock&#39;,</code>：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mock 虚拟数据</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">NProgress</span> <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 利用axios对象的方法create,去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础路径(发请求的时候，路径当中会出现api)</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/mock&#x27;</span>,</span><br><span class="line">  <span class="comment">// 请求超时的时间 5S </span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>();</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 响应拦截器：所有的请求在响应之后都会走这个</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="comment">// 成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情</span></span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">NProgress</span>.<span class="title function_">done</span>();</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//响应失败的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;faile&#x27;</span>, err));</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure></li><li>在 <code>api/index.js</code> 中引入封装的 axios: <code>import mockAjax from &#39;./mock&#39;</code>，通过 mockAjax 写接口：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// API 统一管理</span></span><br><span class="line"><span class="keyword">import</span> mockAjax <span class="keyword">from</span> <span class="string">&#x27;./mock&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getBannerList</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBannerList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">mockAjax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/banner&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>通过 vuex 调用接口，请求数据，存储数据。</li></ol><h1 id="插件相关"><a href="#插件相关" class="headerlink" title="插件相关"></a>插件相关</h1><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>注意此处要指定版本，不然不支持 vue2.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev less-loader@7 less</span><br></pre></td></tr></table></figure><p>补充：如果想让组件识别 less 样式，需要在style标签的身上加上 <code>lang = less</code></p><h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>注意此处要指定版本，不然不支持 vue2.x</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@3</span><br></pre></td></tr></table></figure><h2 id="nprogress-1"><a href="#nprogress-1" class="headerlink" title="nprogress"></a>nprogress</h2><h2 id="Swiper"><a href="#Swiper" class="headerlink" title="Swiper"></a>Swiper</h2><p>安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install swiper@5</span><br></pre></td></tr></table></figure><p>基本使用：</p><blockquote><p>官方文档: <a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a></p></blockquote><ol><li>引包（js &amp; css）<ol><li>js 文件在组件中引入：<code>import Swiper from &quot;swiper&quot;</code></li><li>如果让所有组件都可用，可以在 <code>main.js</code> 文件中引入<code>样式文件</code>: <code>import &quot;swiper/css/swiper.css&quot;</code></li></ol></li><li>复制页面结构（不要更改类名）</li><li>new Swiper 实例（<code>必须有结构</code>） </li></ol><p>问题：new swiper 实例页面中还没有结构</p><p>解决方案：watch + nextTick</p><blockquote><p>$nextTick：在<code>下次DOM更新循环结束之后</code>执行延迟回调。在<code>修改数据之后</code>立即使用这个方法，获取更新后的DOM。</p></blockquote><ol><li>使用 watch 监听 bannerList 数据的变化（当服务器请求回来之后数据就会发生变化）</li><li>在 watch 回调函数中调用组件 nextTick 方法（因为此时只有数据，基于数据渲染 dom 也是需要时间的，所以此时没有 dom 结构），在 nextTick 方法中 new Swiper 实例</li></ol><h2 id="mockjs-1"><a href="#mockjs-1" class="headerlink" title="mockjs"></a>mockjs</h2><p>模拟 Ajax 请求，生成并返回模拟数据</p><h2 id="qrcode-二维码生成"><a href="#qrcode-二维码生成" class="headerlink" title="qrcode 二维码生成"></a>qrcode 二维码生成</h2><p>qrcode github: <a href="https://github.com/soldair/node-qrcode">https://github.com/soldair/node-qrcode</a></p><h2 id="vue-lazyload-图片懒加载"><a href="#vue-lazyload-图片懒加载" class="headerlink" title="vue-lazyload 图片懒加载"></a>vue-lazyload 图片懒加载</h2><p><a href="https://github.com/hilongjw/vue-lazyload">https://github.com/hilongjw/vue-lazyload</a></p><ol><li>在项目中安装：<code>npm i vue-lazyload@1.3.3 -S</code> 【vue2.x】</li><li>main.js 中引入<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueLazyload</span> <span class="keyword">from</span> <span class="string">&#x27;vue-lazyload&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueLazyload</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> loadimage = <span class="built_in">require</span>(<span class="string">&#x27;./assets/loading.gif&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> errorimage = <span class="built_in">require</span>(<span class="string">&#x27;./assets/error.gif&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueLazyload</span>, &#123;</span><br><span class="line">  <span class="attr">preLoad</span>: <span class="number">1.3</span>,</span><br><span class="line">  <span class="attr">error</span>: errorimage,</span><br><span class="line">  <span class="attr">loading</span>: loadimage,</span><br><span class="line">  <span class="attr">attempt</span>: <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在组件中为 <code>v-lazy</code> 指令为图片标签绑定</li></ol><h2 id="vee-validate"><a href="#vee-validate" class="headerlink" title="vee-validate"></a>vee-validate</h2><p>vee-validate github 地址：github.com/logaretm/vee-validate</p><p>快速上手：</p><ol><li>安装：npm i vee-validate@2</li><li>在 plugins 文件夹中新建 validate.js 用于定义表单相关的校验规则<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vee-validate 表单验证插件相关配置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VeeValidate</span> <span class="keyword">from</span> <span class="string">&quot;vee-validate&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中文提示信息</span></span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">&quot;vee-validate/dist/locale/zh_CN&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VeeValidate</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">VeeValidate</span>.<span class="property">Validator</span>.<span class="title function_">localize</span>(<span class="string">&quot;zh_CN&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    ...zh_CN.<span class="property">messages</span>,</span><br><span class="line">    <span class="attr">is</span>: <span class="function">(<span class="params">field</span>) =&gt;</span> <span class="string">`<span class="subst">$&#123;field&#125;</span> 必须与登录密码相同`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">attributes</span>: &#123;</span><br><span class="line">    <span class="attr">phone</span>: <span class="string">&quot;手机号&quot;</span>,</span><br><span class="line">    <span class="attr">code</span>: <span class="string">&quot;验证码&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    <span class="attr">password2</span>: <span class="string">&quot;确认密码&quot;</span>,</span><br><span class="line">    <span class="attr">agree</span>: <span class="string">&quot;协议&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义校验规则</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">VeeValidate</span>.<span class="property">Validator</span>.<span class="title function_">extend</span>(<span class="string">&#x27;agree&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">validate</span>: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getMessage</span>: <span class="function">(<span class="params">field</span>) =&gt;</span> field + <span class="string">&quot;必须同意&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li>在 main.js 中引入 validate.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/plugins/validate&#x27;</span></span><br></pre></td></tr></table></figure></li><li>在需要被验证的表单元素上编写指定规则<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>手机号:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的手机号&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;phone&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;phone&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-validate</span>=<span class="string">&quot;&#123; required: true, regex: /^1\d&#123;10&#125;$/ &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123; invalid: errors.has(&#x27;phone&#x27;) &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error-msg&quot;</span>&gt;</span>&#123;&#123; errors.first(&quot;phone&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入验证码&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;code&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;code&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-validate</span>=<span class="string">&quot;&#123; required: true, regex: /^\d&#123;6&#125;$/ &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123; invalid: errors.has(&#x27;code&#x27;) &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getVerifyCode&quot;</span> <span class="attr">class</span>=<span class="string">&quot;getverifycode&quot;</span>&gt;</span>获取验证码<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error-msg&quot;</span>&gt;</span>&#123;&#123; errors.first(&quot;code&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>登录密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;input&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入你的密码&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-validate</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      required: true,</span></span></span><br><span class="line"><span class="string"><span class="tag">      regex: /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]&#123;8,&#125;$/,</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123; invalid: errors.has(&#x27;password&#x27;) &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error-msg&quot;</span>&gt;</span>&#123;&#123; errors.first(&quot;password&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span>确认密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;input&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;确认你的密码&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;password2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;password2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-validate</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      required: true,</span></span></span><br><span class="line"><span class="string"><span class="tag">      is: password,</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123; invalid: errors.has(&#x27;password2&#x27;) &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error-msg&quot;</span>&gt;</span>&#123;&#123; errors.first(&quot;password2&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;agree&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;agree&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-validate</span>=<span class="string">&quot;&#123;</span></span></span><br><span class="line"><span class="string"><span class="tag">      required: true,</span></span></span><br><span class="line"><span class="string"><span class="tag">      agree: true,</span></span></span><br><span class="line"><span class="string"><span class="tag">    &#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:class</span>=<span class="string">&quot;&#123; invalid: errors.has(&#x27;agree&#x27;) &#125;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>同意协议并注册《尚品汇用户协议》<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;error-msg&quot;</span>&gt;</span>&#123;&#123; errors.first(&quot;agree&quot;) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h2><p>路由懒加载：<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html">https://router.vuejs.org/zh/guide/advanced/lazy-loading.html</a></p><p>把不同路由对应的组件分割成不同的代码块（动态导入），然后当路由被访问的时候才加载对应组件，这样就更加高效了。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import UserDetails from &#x27;./views/UserDetails&#x27;</span></span><br><span class="line"><span class="comment">// 替换成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">UserDetails</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;./views/UserDetails&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="attr">routes</span>: [&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">UserDetails</span> &#125;],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// const router = createRouter(&#123;</span></span><br><span class="line"><span class="comment">//   // ...</span></span><br><span class="line"><span class="comment">//   routes: [&#123; path: &#x27;/users/:id&#x27;, component: () =&gt; import(&#x27;./views/UserDetails&#x27;) &#125;],</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h1 id="路由组件"><a href="#路由组件" class="headerlink" title="路由组件"></a>路由组件</h1><h2 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h2><blockquote><p>规范：所有的全局组件放到 components 文件夹中。</p></blockquote><h3 id="TypeNav（三级联动）"><a href="#TypeNav（三级联动）" class="headerlink" title="TypeNav（三级联动）"></a>TypeNav（三级联动）</h3><p>TypeNav 三级联动组件因为要在多个组件中使用，所以注册为全局组件</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927145257.png" alt="20220927145257"></p><h4 id="TypeNav-一级分类动态添加背景颜色"><a href="#TypeNav-一级分类动态添加背景颜色" class="headerlink" title="TypeNav 一级分类动态添加背景颜色"></a>TypeNav 一级分类动态添加背景颜色</h4><p>解决方案：</p><ol><li>使用 CSS 伪类</li><li>使用 JS 实现</li></ol><p>JS 实现思路:</p><ol><li>鼠标移入获取每个 item 的 index 并保存在 data 下的 currentIndex 变量中(初始值为 -1 代表谁也不选中)</li><li>给每个被移入的 item 添加 current 类名：<code>:class=&quot;&#123; current: currentIndex == index ? &#39;current&#39; : &#39;&#39; &#125;&quot;</code></li><li>鼠标离开时，将 currentIndex 的值重置 -1</li></ol><h4 id="TypeNav-二三级分类的显示与隐藏"><a href="#TypeNav-二三级分类的显示与隐藏" class="headerlink" title="TypeNav 二三级分类的显示与隐藏"></a>TypeNav 二三级分类的显示与隐藏</h4><p>默认是使用 CSS 来控制显示与隐藏的，这里使用 JS 写法控制二三级分类显示与隐藏：</p><p><code>:style=&quot;&#123; display: currentIndex == index ? &#39;block&#39; : &#39;none&#39; &#125;&quot;</code></p><h4 id="函数节流与防抖"><a href="#函数节流与防抖" class="headerlink" title="函数节流与防抖"></a>函数节流与防抖</h4><p>节流：在规定的<code>间隔时间范围内</code>不会重复触发回调，<code>只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</code><br>防抖：前面的所有的触发都<code>被取消</code>，最后一次执行在规定的时间之后才会触发，也就是说如果<code>连续快速的触发只会执行一次</code></p><p>解决方案：</p><p><a href="https://www.lodashjs.com/">lodashjs</a> 已经封装好了防抖（<em>.debounce）与节流（</em>.throttle）函数</p><h4 id="TypeNav-节流"><a href="#TypeNav-节流" class="headerlink" title="TypeNav 节流"></a>TypeNav 节流</h4><ol><li>按需引入 lodash <code>import throttle from &quot;lodash/throttle&quot;</code> (按需加载)</li><li>三级联动配置节流效果：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// TypeNav 节流(throttle 函数不要写成箭头函数)</span></span><br><span class="line"><span class="attr">getCurrentIndex</span>: <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">index</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index;</span><br><span class="line">&#125;, <span class="number">16</span>),</span><br></pre></td></tr></table></figure></li></ol><h4 id="TypeNav-路由跳转与传递参数【重要】"><a href="#TypeNav-路由跳转与传递参数【重要】" class="headerlink" title="TypeNav 路由跳转与传递参数【重要】"></a>TypeNav 路由跳转与传递参数【重要】</h4><blockquote><p>如果使用 router-link 来进行跳转，当服务器的数据返回之后，会循环出很多的 router-link 组件，会导致卡顿现象。所以使用<code>事件委托</code>来跳转。</p></blockquote><p>路由跳转：</p><ol><li>声明式导航：router-link 【可以实现，但是出现卡顿现象。因为 router-link 是一个组件，当服务器的大量数据返回之后，需要循环出很多的 router-link 组件，会非常消耗内存。】</li><li>编程式导航：$router.push | replace【推荐：事件委派 + 编程式导航方案。】</li></ol><p>使用事件委派难点及解决方案：</p><ol><li>如何判断点击的一定是 a 标签。<ul><li>解决方案：</li><li>为所有 a 标签加上一个指定 <code>自定义属性</code>，其余的节点没有：<code>&lt;a :data-categoryName=&quot;v1.categoryName&quot;&gt;&lt;/a&gt;</code></li><li>通过<code>事件对象</code>的 <code>dataset</code> 属性获取节点上文定义的自定义属性<code>进行判断</code>是否是 a 标签。</li></ul></li><li>如何判断是一级分类二级分类还是三级分类的 a 标签。<ul><li>解决方案：</li><li>同样为所有层级的 a 标签（一级分类二级分类三级分类）加对应的 <code>自定义属性</code>：<code>&lt;a :data-category1Id=&quot;v1.categoryId&quot;&gt;&lt;/a&gt;</code></li><li>通过事件对象元素的 <code>dataset</code> 属性获取节点上文定义的自定义属性<code>进行判断</code>。</li></ul></li></ol><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">goSearch</span>(<span class="params">event</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> element = event.<span class="property">target</span>;</span><br><span class="line"> <span class="comment">// 解构出属性，简化下面 if 语句</span></span><br><span class="line"> <span class="keyword">let</span> &#123; categoryname, category1id, category2id, category3id &#125; = element.<span class="property">dataset</span>;</span><br><span class="line"> <span class="keyword">if</span> (categoryname) &#123;</span><br><span class="line">   <span class="comment">// 整理路由跳转参数</span></span><br><span class="line">   <span class="keyword">let</span> location = &#123; <span class="attr">name</span>: <span class="string">&quot;search&quot;</span> &#125;;</span><br><span class="line">   <span class="keyword">let</span> query = &#123; <span class="attr">categoryName</span>: categoryname &#125;;</span><br><span class="line">   <span class="keyword">if</span> (category1id) &#123;</span><br><span class="line">     query.<span class="property">category1Id</span> = category1id;</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (category2id) &#123;</span><br><span class="line">     query.<span class="property">category2Id</span> = category2id;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     query.<span class="property">category3Id</span> = category3id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 参数整理完毕</span></span><br><span class="line">   location.<span class="property">query</span> = query;</span><br><span class="line">   <span class="comment">// 路由跳转</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(location);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TypeNav-多场景显示与隐藏"><a href="#TypeNav-多场景显示与隐藏" class="headerlink" title="TypeNav 多场景显示与隐藏"></a>TypeNav 多场景显示与隐藏</h4><p>应用场景：非 home 组件中：TypeNav 默认是隐藏的，并有鼠标移入移出显示隐藏效果（过渡动画）</p><p>实现方案：使用 v-show + 变量判断控制</p><ol><li>在 TypeNav 组件 data 中定义变量（isTypeNavCatShow）默认为 true</li><li>由于每次引用 TypeNav 组件都会<code>新创建一个 TypeNav 实例</code>。会执行 mounted 生命周期函数。在 mounted 生命周期函数中进行条件判断，如果 TypeNav 组件在非 home 中渲染则变量为 false<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span> != <span class="string">&quot;/home&quot;</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">path</span> != <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">isTypeNavCatShow</span> = <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>非 home 组件中TypeNav 分类添加鼠标移入移出显示与隐藏效果：<ol><li>移入：变量为 true（更改变量前同样做路径判断）</li><li>移出：变量为 false（更改变量前同样做路径判断）</li></ol></li></ol><p>过渡动画：</p><p>前提组件 | 元素务必要有 v-if | v-show 指令才可以进行过渡动画 </p><h4 id="TypeNav-接口请求优化"><a href="#TypeNav-接口请求优化" class="headerlink" title="TypeNav 接口请求优化"></a>TypeNav 接口请求优化</h4><p>由于每次加载创建 TypeNav 组件都会发送请求请求数据，而这些数据没有必要重复请求。<br>所以把这个请求放在 App 根组件 mounted 生命周期中调用:（App 根组件只执行一次）【注意不能在 main.js 中调用，因为 main 中的 this 指向 undefined】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getTypeNavList&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TypeNav-合并参数"><a href="#TypeNav-合并参数" class="headerlink" title="TypeNav 合并参数"></a>TypeNav 合并参数</h4><p>解决 params 参数和 query 参数只能传递一个的情况</p><p>解决方案：跳转前先判断路由中是否有 params 或 query 参数，如果有直接合并一起发送。</p><ol><li><p>在 Header 组件搜索框点击事件中判断是否有 query 参数，如果有就合并</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Header.vue</span><br><span class="line"></span><br><span class="line">searchInfo() &#123;</span><br><span class="line"><span class="deletion">-  this.$router.push(&#123;</span></span><br><span class="line"><span class="deletion">-    name: &quot;search&quot;,</span></span><br><span class="line"><span class="deletion">-    params: &#123;</span></span><br><span class="line"><span class="deletion">-      keyword: this.keyword,</span></span><br><span class="line"><span class="deletion">-    &#125;,</span></span><br><span class="line"><span class="deletion">-  &#125;);</span></span><br><span class="line">  // 合并参数：</span><br><span class="line"><span class="addition">+  if (this.$route.query) &#123;</span></span><br><span class="line"><span class="addition">+    let location = &#123;</span></span><br><span class="line"><span class="addition">+      name: &quot;search&quot;,</span></span><br><span class="line"><span class="addition">+      params: &#123;</span></span><br><span class="line"><span class="addition">+        keyword: this.keyword,</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+    &#125;;</span></span><br><span class="line"><span class="addition">+    location.query = this.$route.query;</span></span><br><span class="line"><span class="addition">+    this.$router.push(location);</span></span><br><span class="line"><span class="addition">+  &#125;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>在 TypeNav 组件中判断是否有 params 参数，如果有就合并</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># TypeNav.vue</span><br><span class="line">goSearch(event) &#123;</span><br><span class="line">  let element = event.target;</span><br><span class="line">  // 解构出属性，简化下面 if 语句</span><br><span class="line">  let &#123; categoryname, category1id, category2id, category3id &#125; =</span><br><span class="line">    element.dataset;</span><br><span class="line">  if (categoryname) &#123;</span><br><span class="line">    // 整理路由跳转参数</span><br><span class="line">    let location = &#123; name: &quot;search&quot; &#125;;</span><br><span class="line">    let query = &#123; categoryName: categoryname &#125;;</span><br><span class="line">    if (category1id) &#123;</span><br><span class="line">      query.category1Id = category1id;</span><br><span class="line">    &#125; else if (category2id) &#123;</span><br><span class="line">      query.category2Id = category2id;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      query.category3Id = category3id;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="addition">+    if (this.$route.params) &#123;</span></span><br><span class="line"><span class="addition">+      location.params = this.$route.params;</span></span><br><span class="line">      // 参数整理完毕</span><br><span class="line">      location.query = query;</span><br><span class="line">      // 路由跳转</span><br><span class="line">      this.$router.push(location);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="Carousel-轮播图"><a href="#Carousel-轮播图" class="headerlink" title="Carousel (轮播图)"></a>Carousel (轮播图)</h3><p>由于 Carousel (轮播图) 组件在多个地方使用，并且结构都一样，所以可以封装成一个组件，实现复用。</p><p>注意：封装的时候，轮播图的结构和Js代码风格都要封装成一致的。</p><ol><li>都是用 watch 监听的写法，监听传递过来的 props 数据。</li><li>都使用 watch 监听的 immediate 属性。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Carousel/index.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;carousel in list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;carousel.id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;carousel.imgUrl&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Swiper</span> <span class="keyword">from</span> <span class="string">&quot;swiper&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;Carousel&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&quot;list&quot;</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">list</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">loop</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">pagination</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">el</span>: <span class="string">&quot;.swiper-pagination&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">clickable</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">navigation</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">nextEl</span>: <span class="string">&quot;.swiper-button-next&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">prevEl</span>: <span class="string">&quot;.swiper-button-prev&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">scrollbar</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">              <span class="attr">el</span>: <span class="string">&quot;.swiper-scrollbar&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">          &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Carousel</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/Carousel/index.vue&#x27;</span></span><br><span class="line"><span class="comment">// 注册全局组件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&quot;Carousel&quot;</span>, <span class="title class_">Carousel</span>);</span><br></pre></td></tr></table></figure><h3 id="Pagination-分页器"><a href="#Pagination-分页器" class="headerlink" title="Pagination (分页器)"></a>Pagination (分页器)</h3><h4 id="Pagination-静态组件"><a href="#Pagination-静态组件" class="headerlink" title="Pagination 静态组件"></a>Pagination 静态组件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>7<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>9<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 30px&quot;</span>&gt;</span>共 60 条<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Pagination&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagination</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f4f4f5</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#606266</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: <span class="number">35.5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#c0c4cc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#409eff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Pagination-相关属性"><a href="#Pagination-相关属性" class="headerlink" title="Pagination 相关属性"></a>Pagination 相关属性</h4><ol><li>PageNo: 当前页数</li><li>PageSize: 每一页展示多少条数据</li><li>Total: 一共多少条数据</li><li>TotalPage: 一共多少页【 Math.ceil(Total / PageSize) 计算属性，向上取整 】</li><li>Continues: 分页连续页码个数【5|7】因为奇数是对称的，如：3 4 5 6 7</li></ol><h4 id="Pagination-实现思路"><a href="#Pagination-实现思路" class="headerlink" title="Pagination 实现思路"></a>Pagination 实现思路</h4><p>计算总页数(根据已知条件): </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 总页数</span></span><br><span class="line">  <span class="title function_">totalPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">total</span> / <span class="variable language_">this</span>.<span class="property">pageSize</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连续页码实现思路: </p><ol><li>定义计算属性，并定义连续的页码（continues）的<code>起始数字（start）</code>与<code>结束数字(end)</code></li><li>当总页数没有连续页码多<ol><li>start = 1</li><li>end = totalPage</li></ol></li><li>当总页数比连续页码多<ol><li>start = this.pageNo - parseInt(this.continue / 2);</li><li>end = this.pageNo + parseInt(this.continue / 2);</li></ol></li><li>纠正不正常的两种情况：<ol><li>start &lt; 1 <ol><li>start = 1;</li><li>end = this.continue;</li></ol></li><li>end &gt; totalPage<ol><li>end = this.totalPage;</li><li>start = this.totalPage - this.continue + 1;</li></ol></li></ol></li></ol><p>分页 UI 渲染相关: </p><p>使用 v-for 遍历页码结束数字 end ，且只有当元素 &gt;= start 时才展示</p><p>相关按钮的显示与隐藏逻辑: </p><ol><li>顶端<code>上一页</code>页码的禁用：当 pageNo = 1 时</li><li>顶端<code>1</code>页码的显示与隐藏：当 start &gt; 1 时，顶端 1 页码显示，否则隐藏</li><li>顶端<code>...</code>页码的显示与隐藏: 当 start &gt; 2 时，顶端<code>...</code>页码显示，否则隐藏</li><li>底部<code>下一页</code>页码的禁用：当 pageNo = totalPage 时</li><li>底部<code>...</code>页码的显示与隐藏: 当 end &lt; totalPage - 1 时，底部<code>...</code>页码显示，否则隐藏</li><li>底部<code>总</code>页码的显示与隐藏：当 end &lt; totalPage 时，底部<code>总</code>页码的显示，否则隐藏</li></ol><p>按钮类名绑定: </p><ol><li>顶端<code>1</code>：<code>:class = &#123; active:pageNo == 1 &#125;</code></li><li>连续页码：<code>:class = &#123; active:pageNo == page &#125;</code></li><li>底部<code>总</code>页码：<code>:class = &#123; active:pageNo == totalPage &#125;</code></li></ol><p>按钮点击传递页码: </p><p>在按钮点击的回调函数中将传递过来的页码赋值给 pageNo</p><ol><li>顶端<code>上一页</code>页码点击：传递 pageNo - 1</li><li>顶端<code>1</code>页码点击：传递  1</li><li><code>连续页码</code>点击：传递被点击的页码数</li><li>底部<code>下一页</code>点击：：传递 pageNo + 1</li><li>底部<code>总</code>页码点击：传递总页码</li></ol><h2 id="Home"><a href="#Home" class="headerlink" title="Home"></a>Home</h2><h3 id="ListContainer"><a href="#ListContainer" class="headerlink" title="ListContainer"></a>ListContainer</h3><p>数据：使用 Mock.js 模拟</p><p>安装 swiper：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install swiper@5</span><br></pre></td></tr></table></figure><ol><li>引包（js &amp; css）<ol><li>js 文件在组件中引入：<code>import Swiper from &quot;swiper&quot;</code></li><li>如果让所有组件都可用，可以在 <code>main.js</code> 文件中引入<code>样式文件</code>: <code>import &quot;swiper/css/swiper.css&quot;</code></li></ol></li><li>复制页面结构（不要更改类名）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-container&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mySwiper&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">     <span class="attr">class</span>=<span class="string">&quot;swiper-slide&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">v-for</span>=<span class="string">&quot;carousel in bannerList&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">:key</span>=<span class="string">&quot;carousel.id&quot;</span></span></span><br><span class="line"><span class="tag">   &gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;carousel.imgUrl&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 如果需要分页器 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 如果需要导航按钮 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-prev&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;swiper-button-next&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>new Swiper 实例（<code>必须有结构</code>） <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"><span class="attr">bannerList</span>: &#123;</span><br><span class="line">  <span class="comment">// 如果不使用 nextTick 方法，只能保证 bannerList 数据已经有了，但没办法保证v-for 已经执行结束了</span></span><br><span class="line">  <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">        <span class="comment">// direction: &quot;vertical&quot;, // 垂直切换选项</span></span><br><span class="line">        <span class="attr">loop</span>: <span class="literal">true</span>, <span class="comment">// 循环模式选项</span></span><br><span class="line">        <span class="comment">// 如果需要分页器</span></span><br><span class="line">        <span class="attr">pagination</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&quot;.swiper-pagination&quot;</span>,</span><br><span class="line">          <span class="attr">clickable</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">        <span class="attr">navigation</span>: &#123;</span><br><span class="line">          <span class="attr">nextEl</span>: <span class="string">&quot;.swiper-button-next&quot;</span>,</span><br><span class="line">          <span class="attr">prevEl</span>: <span class="string">&quot;.swiper-button-prev&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 如果需要滚动条</span></span><br><span class="line">        <span class="attr">scrollbar</span>: &#123;</span><br><span class="line">          <span class="attr">el</span>: <span class="string">&quot;.swiper-scrollbar&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><p>问题：</p><p>直接在 mounted 生命周期中 new swiper 实例没有结构的问题：(v-for 遍历在组件自身)<br>解决方案：watch + nextTick</p><ol><li>使用 watch 监听 bannerList 数据的变化（当服务器请求回来之后数据就会发生变化）</li><li>在 watch 回调函数中调用组件 nextTick 方法，在 nextTick 方法中 new Swiper 实例</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927151117.png" alt="20220927151117"></p><h3 id="Recommend"><a href="#Recommend" class="headerlink" title="Recommend"></a>Recommend</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927151452.png" alt="20220927151452"></p><h3 id="Rank"><a href="#Rank" class="headerlink" title="Rank"></a>Rank</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927154535.png" alt="20220927154535"></p><h3 id="Like"><a href="#Like" class="headerlink" title="Like"></a>Like</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927154556.png" alt="20220927154556"></p><h3 id="Floor"><a href="#Floor" class="headerlink" title="Floor"></a>Floor</h3><p>数据：使用 Mock.js 模拟</p><p>通过 Vuex 存储数据，然后在 <code>Home 组件中</code>发送 action（Home 组件中有两个 Floor 组件）</p><ol><li>发送 action 得到 getFloorList 数据</li><li>在组件 <code>&lt;Floor&gt;</code> 上使用 v-for 基于 getFloorList 数据渲染</li></ol><p>问题：</p><p>为什么在 Floor 组件中可以直接在 mounted 钩子中 new Swiper 实例？</p><p>因为 v-for 是在 Home 组件（Floor 的父组件）上进行遍历的，所以遍历完成之后，子组件可以接收到结构。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927154616.png" alt="20220927154616"></p><h3 id="Brand"><a href="#Brand" class="headerlink" title="Brand"></a>Brand</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927154629.png" alt="20220927154629"></p><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><h3 id="Search-接口请求逻辑"><a href="#Search-接口请求逻辑" class="headerlink" title="Search 接口请求逻辑"></a>Search 接口请求逻辑</h3><p>Search 接口请求次数根据参数的不同而返回不同的数据，所以可以把派发 action 的行为封装成一个函数：getData（函数声明一次可以多次调用）</p><ol><li>封装 getData 函数，在函数内部派发 action<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">getData</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 携带的参数为data中响应式的对象</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;getSearchList&#x27;</span>,<span class="variable language_">this</span>.<span class="property">searchParams</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 mounted 生命周期函数中调用一次 getData 函数</li><li>派发 action 所携带的参数，在 data 中定义成一个响应式的数据对象：<code>searchParams</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">searchParams</span>:&#123;</span><br><span class="line">      <span class="string">&quot;category1Id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;category2Id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;category3Id&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;categoryName&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;keyword&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;order&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      <span class="string">&quot;pageNo&quot;</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">&quot;pageSize&quot;</span>: <span class="number">10</span>,</span><br><span class="line">      <span class="string">&quot;props&quot;</span>: [],</span><br><span class="line">      <span class="string">&quot;trademark&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 mounted 生命周期函数之前（<code>beforeMount</code> 中）整理一次 <code>searchParams</code> 对象。【整理从 home 中 TypeNav 中点击的参数选项】<br>在 beforeMount 生命周期函数中可以通过 <code>this.$route.query.xxx</code> 获取到路由中的参数，通过 <code>Object.assign</code> 方法合并参数（合并完成之后再触发第二步中的 mounted 生命周期函数根据参数获取数据）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(searchParams,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>,<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>现存问题：接口请求<code>只能在 mounted 生命周期中发送一次</code>。<br>解决方案：使用 watch 监听路由变化，当路由信息发生变化的时候通过 <code>Object.assign</code> 方法再次合并参数，并重新发送请求。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"> $route() &#123;</span><br><span class="line">   <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">searchParams</span>, <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>, <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>);</span><br><span class="line">   <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">   <span class="comment">// 优化: 防止上次搜索数据遗留，搜索之后应该将 id 重置</span></span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category1Id</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category2Id</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">category3Id</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h3><p>处理 query 参数: (TypeNav 中传递的数据)</p><ol><li>显示与隐藏 &amp; 面包屑中的数据: 根据 searchParams 中的 categoryName 来控制</li><li>面包屑导航点击关闭事件<ol><li>将 searchParams 中的 categoryName 设置为 undefined </li><li>重新发送请求</li></ol></li><li>关闭面包屑导航后清空浏览器地址栏<ol><li>通过编程式导航,自己跳转自己,即可清空地址栏的查询参数.</li><li>需要判断路由中是否有 params 参数,如果有则需要带着参数一起跳转</li></ol></li></ol><p>处理 param 参数: (Header 组件搜索框传递的数据)</p><ol><li>显示与隐藏 &amp; 面包屑中的数据: 根据 searchParams 中的 keyword 来控制</li><li>面包屑导航点击关闭事件<ol><li>将 searchParams 中的 keyword 设置为 undefined </li><li>重新发送请求</li></ol></li><li>关闭面包屑导航后<code>清空浏览器地址栏</code><ol><li>通过编程式导航,<code>自己跳转自己</code>,即可清空地址栏的查询参数.</li><li>需要判断路由中是否有 query 参数,如果有则需要带着参数一起跳转。（但 params 参数需要带着）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 清空浏览器地址栏，并判断路由中是否有 params 参数，如果有则需要携带着</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;search&quot;</span>, <span class="attr">params</span>: <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>清空 Header 组件搜索框的数据: (全局事件总线)<ol><li>安装全局事件总线</li><li>面包屑导航点击关闭事件处理函数中发送事件</li><li>Header 组件中监听事件,并将搜索框的数据清空</li></ol></li></ol><p>补充：对象中的属性值设置为 undefined 则不会带给服务器</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221004142335.png" alt="20221004142335"></p><h3 id="排序功能（后端排序）"><a href="#排序功能（后端排序）" class="headerlink" title="排序功能（后端排序）"></a>排序功能（后端排序）</h3><p>排序方式 ： 1: 综合,2: 价格 asc: 升序,desc: 降序（示例: “1:desc”）</p><p>实现思路：</p><ol><li>综合 &amp; 价格 active 样式：<ol><li>根据 searchParams 中 order 属性控制</li><li>动态为元素绑定样式：通过字符串 indexOf 方法判断 data 中 order 属性是否包含对应标识：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;1&quot;</span>) != -<span class="number">1</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">isTwo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;2&quot;</span>) != -<span class="number">1</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol></li><li>综合 &amp; 价格 图标（iconfont）样式：<ol><li>在 iconfont 选择图标，添加到项目（项目中引入在线链接，通过类名应用图标）</li><li>图标是否显示的判断：（同样根据 active 中的计算控制）</li><li>上下图标的样式动态绑定：（根据 searchParams 中 order 属性 <code>asc or desc</code> 控制）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class=&quot;iconfont&quot;</span><br><span class="line">:class=&quot;&#123;</span><br><span class="line">  &#x27;icon-direction-down&#x27;: isDesc,</span><br><span class="line">  &#x27;icon-direction-up&#x27;: isAsc,</span><br><span class="line">&#125;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">isAsc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;asc&quot;</span>) != -<span class="number">1</span>;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">isDesc</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;desc&quot;</span>) != -<span class="number">1</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol></li><li>综合 &amp; 价格 点击逻辑：<ol><li>绑定同一个回调函数，点击对应元素，传递参数：<ol><li>综合传递 <code>1</code> 价格 传递 <code>2</code></li></ol></li><li>排序逻辑：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">orderClickHandler</span>(<span class="params">flag</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> originType = <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> originSort = <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span>.<span class="title function_">split</span>(<span class="string">&quot;:&quot;</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> newOrder = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (originType == flag) &#123;</span><br><span class="line">    newOrder = <span class="string">`<span class="subst">$&#123;flag&#125;</span>:<span class="subst">$&#123;originSort == <span class="string">&quot;desc&quot;</span> ? <span class="string">&quot;asc&quot;</span> : <span class="string">&quot;desc&quot;</span>&#125;</span>`</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    newOrder = <span class="string">`<span class="subst">$&#123;flag&#125;</span>:<span class="subst">$&#123;<span class="string">&quot;desc&quot;</span>&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">searchParams</span>.<span class="property">order</span> = newOrder;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="SearchSelector-组件"><a href="#SearchSelector-组件" class="headerlink" title="SearchSelector 组件"></a>SearchSelector 组件</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221003143150.png" alt="20221003143150"></p><p>数据通过 vuex getters 简化，在组件中通过 …mapGetters 获取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...<span class="title function_">mapGetters</span>([<span class="string">&quot;trademarkList&quot;</span>, <span class="string">&quot;attrsList&quot;</span>]),</span><br></pre></td></tr></table></figure><h4 id="品牌单击筛选功能"><a href="#品牌单击筛选功能" class="headerlink" title="品牌单击筛选功能"></a>品牌单击筛选功能</h4><p>技术：组件通信 + 合并参数</p><p>实现思路：</p><ol><li>给品牌列表绑定事件,单击品牌信息将被点击的品牌对象传递给事件回调</li><li>通过<code>自定义事件</code>将品牌对象传递给Search父组件</li><li>父组件中接收到品牌对象,将data中的数据合并,并重新请求数据</li><li>添加品牌面包屑导航:<ol><li>显示与隐藏 &amp; 面包屑中的数据: 根据 searchParams 中的 trademark 来控制(注意此处的数据需要处理下)</li><li>面包屑导航点击关闭事件<ol><li>将 searchParams 中的 trademark 设置为 <code>&quot;&quot;</code> (如果设置为 undefined 则需要用 <code>v-if</code> 控制显示与隐藏)</li><li>重新发送请求</li></ol></li></ol></li></ol><h4 id="售卖属性筛选功能"><a href="#售卖属性筛选功能" class="headerlink" title="售卖属性筛选功能"></a>售卖属性筛选功能</h4><p>技术：组件通信 + 合并参数</p><p>实现思路：</p><ol><li>给售卖属性绑定事件,单击售卖属性将被点击的属性对象传递给事件回调</li><li>通过<code>自定义事件</code>将售卖属性传递给Search父组件。数据传递格式：<code>[&quot;属性ID:属性值:属性名&quot;]</code></li><li>父组件中接收到售卖属性,将data中的数据合并,并重新请求数据<ol><li>数组去重（防止多次点击）</li></ol></li><li>添加品牌面包屑导航:<ol><li>显示与隐藏 &amp; 面包屑中的数据: 根据 searchParams 中的 props 数组来控制</li><li>面包屑个数由 props 数组循环渲染</li><li>面包屑导航点击关闭事件<ol><li>被点击的导航传递 index 索引，回调函数中删除 props 数组中对应的索引:<code>splice 方法</code></li><li>重新发送请求</li></ol></li></ol></li></ol><h2 id="Detail"><a href="#Detail" class="headerlink" title="Detail"></a>Detail</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221006165905.png" alt="20221006165905"></p><h3 id="Detail-跳转参数传递"><a href="#Detail-跳转参数传递" class="headerlink" title="Detail 跳转参数传递"></a>Detail 跳转参数传递</h3><p>跳转 detail 组件需要携带params 参数（产品 id 作为标识）</p><ol><li>detail 组件中需要占位<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/detail/:skuid&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">showFooter</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 search 组件中点击商品图片进行跳转：router-link + 动态传递参数<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/detail/$&#123;item.id&#125;`&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;item.defaultImg&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Detail-路由跳转滚动行为"><a href="#Detail-路由跳转滚动行为" class="headerlink" title="Detail 路由跳转滚动行为"></a>Detail 路由跳转滚动行为</h3><blockquote><p>路由滚动行为：<a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html">https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html</a></p></blockquote><p>设置点击商品图片跳转到详情页，自动滚动到顶部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [...],</span><br><span class="line">  scrollBehavior (to, <span class="keyword">from</span>, savedPosition) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Detail-组件获取服务器数据"><a href="#Detail-组件获取服务器数据" class="headerlink" title="Detail 组件获取服务器数据"></a>Detail 组件获取服务器数据</h3><ol><li>接口相关：<ol><li>请求地址 &amp; 参数：/api/item/{ skuid }</li><li>请求方式：Get</li></ol></li><li>Vuex 新建 detail 模块</li><li>Detail 组件调用 vuex 并传递 skuid 获取数据</li></ol><h3 id="Detail-组件售卖属性相关"><a href="#Detail-组件售卖属性相关" class="headerlink" title="Detail 组件售卖属性相关"></a>Detail 组件售卖属性相关</h3><h4 id="售卖属性数据"><a href="#售卖属性数据" class="headerlink" title="售卖属性数据"></a>售卖属性数据</h4><p>通过 vuex getters 简化，使用 v-for 渲染</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">spuSaleAttrList</span>(<span class="params">state</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> state.<span class="property">detailItem</span>.<span class="property">spuSaleAttrList</span> || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="售卖属性点击功能"><a href="#售卖属性点击功能" class="headerlink" title="售卖属性点击功能"></a>售卖属性点击功能</h4><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/%E5%94%AE%E5%8D%96%E5%B1%9E%E6%80%A7.gif" alt="售卖属性"></p><p>点击高亮（排他思想）</p><p>通过元素对象身上 <code>isChecked</code> 属性决定当前元素是否被选中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">   1. spuSaleAttrVal: 被点击的元素对象</span></span><br><span class="line"><span class="comment">   2. spuSaleAttrValueList: 被点击的元素对象所在的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="title function_">saleAttrClickHandler</span>(<span class="params">spuSaleAttrVal, spuSaleAttrValueList</span>) &#123;</span><br><span class="line">   <span class="comment">// 排他思想</span></span><br><span class="line">   spuSaleAttrValueList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">     element.<span class="property">isChecked</span> = <span class="number">0</span>;</span><br><span class="line">   &#125;);</span><br><span class="line">   spuSaleAttrVal.<span class="property">isChecked</span> = <span class="number">1</span>;</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Detail-组件商品数量操作"><a href="#Detail-组件商品数量操作" class="headerlink" title="Detail 组件商品数量操作"></a>Detail 组件商品数量操作</h3><ol><li>加减按钮</li><li>用户输入<ol><li>输入不合法</li><li>输入 &lt; 0</li><li>输入为小数</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;controls&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;itxt&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model</span>=<span class="string">&quot;goodsCount&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">change</span>=<span class="string">&quot;itxtChange&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span> <span class="attr">class</span>=<span class="string">&quot;plus&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;goodsCount++&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;javascript:&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;mins&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">click</span>=<span class="string">&quot;goodsCount &gt; 1 ? goodsCount-- : (goodsCount = 1)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>-&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">itxtChange</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> count = event.<span class="property">target</span>.<span class="property">value</span> * <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">isNaN</span>(count)) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goodsCount</span> = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goodsCount</span> = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">goodsCount</span> = <span class="built_in">parseInt</span>(count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Detail-加入购物车功能"><a href="#Detail-加入购物车功能" class="headerlink" title="Detail 加入购物车功能"></a>Detail 加入购物车功能</h3><p>BUG: 商品的购买属性在购物车中不能显示的问题。</p><ol><li>发请求（点击购物车按钮发送请求，将当前产品及数量发送至服务器）<ol><li>编写请求接口（reqAddOrUpdateShopCar），接收两个参数：skuid skunum</li><li>vuex 中编写 action （addOrUpdateShopCar）</li><li>点击按钮触发 action</li></ol></li><li>服务器存储成功之后，路由跳转 addCartSuccess 组件<ol><li>接收 vuex 中接口返回的状态<ol><li>addOrUpdateShopCar 返回的是一个 Promise</li><li>成功返回 ok</li><li>失败返回 Error 实例</li></ol></li><li>点击事件中 try catch </li><li>如果成功，跳转 addCartSuccess 组件并携带产品信息</li></ol></li></ol><h3 id="Detail-加入购物车并跳转-addCartSuccess-组件"><a href="#Detail-加入购物车并跳转-addCartSuccess-组件" class="headerlink" title="Detail 加入购物车并跳转 addCartSuccess 组件"></a>Detail 加入购物车并跳转 addCartSuccess 组件</h3><ol><li>参数传递（当前商品对象）<ol><li>query 传递【不推荐，地址栏太乱】</li><li>本地存储（sessionStorage）<ol><li>只通过 params 携带产品个数</li><li>商品对象存储在 sessionStorage 中</li></ol></li></ol></li><li>数据绑定</li></ol><h3 id="Zoom（放大镜组件）"><a href="#Zoom（放大镜组件）" class="headerlink" title="Zoom（放大镜组件）"></a>Zoom（放大镜组件）</h3><h4 id="展示数据"><a href="#展示数据" class="headerlink" title="展示数据"></a>展示数据</h4><p>在 Detail 组件中通过 props 将图片数据传递给 Zoom 组件</p><p>问题：请求还没有回来的时候传递过去的是 undefined 导致控制台报错 解决方案：</p><ol><li>方法一：通过计算属性进行判断，如果是 undefined 则返回一个空数组：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">skuImageList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 数据为 undefined 返回 [] 防止控制台报错</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">skuInfo</span>.<span class="property">skuImageList</span> || [];</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li>方法二：在子组件中接收 props (并设置默认值)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">skuImageList</span>: &#123;</span><br><span class="line">    <span class="title function_">default</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h4 id="放大镜效果"><a href="#放大镜效果" class="headerlink" title="放大镜效果"></a>放大镜效果</h4><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202210080044466.gif" alt="放大镜效果"></p><ol><li>给容器绑定鼠标移动事件，并在处理函数中计算出 mask 的位移<ol><li>left</li><li>top</li></ol></li><li>处理边界情况</li><li>bigImg 二倍</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">moveHandler</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> mask = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">mask</span>;</span><br><span class="line">  <span class="keyword">let</span> bigImg = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">bigImg</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> left = event.<span class="property">offsetX</span> - mask.<span class="property">offsetWidth</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> top = event.<span class="property">offsetY</span> - mask.<span class="property">offsetHeight</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理边界(注意是在赋值之前判断)</span></span><br><span class="line">  <span class="keyword">if</span> (left &lt;= <span class="number">0</span>) left = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (left &gt;= mask.<span class="property">offsetWidth</span>) left = mask.<span class="property">offsetWidth</span>;</span><br><span class="line">  <span class="keyword">if</span> (top &lt;= <span class="number">0</span>) top = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (top &gt;= mask.<span class="property">offsetHeight</span>) top = mask.<span class="property">offsetHeight</span>;</span><br><span class="line"></span><br><span class="line">  mask.<span class="property">style</span>.<span class="property">left</span> = left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  mask.<span class="property">style</span>.<span class="property">top</span> = top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 右侧大图</span></span><br><span class="line">  bigImg.<span class="property">style</span>.<span class="property">left</span> = -<span class="number">2</span> * left + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">  bigImg.<span class="property">style</span>.<span class="property">top</span> = -<span class="number">2</span> * top + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ImageList（小轮播组件）"><a href="#ImageList（小轮播组件）" class="headerlink" title="ImageList（小轮播组件）"></a>ImageList（小轮播组件）</h3><p>数据：和 Zoom 放大镜组件使用同一份数据</p><h4 id="Swiper-1"><a href="#Swiper-1" class="headerlink" title="Swiper"></a>Swiper</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"> <span class="attr">skuImageList</span>: &#123;</span><br><span class="line">   <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Swiper</span>(<span class="string">&quot;.swiper-container&quot;</span>, &#123;</span><br><span class="line">         <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">         <span class="attr">navigation</span>: &#123;</span><br><span class="line">           <span class="attr">nextEl</span>: <span class="string">&quot;.swiper-button-next&quot;</span>,</span><br><span class="line">           <span class="attr">prevEl</span>: <span class="string">&quot;.swiper-button-prev&quot;</span>,</span><br><span class="line">         &#125;,</span><br><span class="line">        <span class="comment">//  https://www.swiper.com.cn/api/grid/491.html</span></span><br><span class="line">         <span class="attr">slidesPerView</span>: <span class="number">5</span>,</span><br><span class="line">       &#125;);</span><br><span class="line">     &#125;);</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="轮播点击功能"><a href="#轮播点击功能" class="headerlink" title="轮播点击功能"></a>轮播点击功能</h4><p>高亮效果: 动态添加类名</p><ol><li>在 data 中设置变量 curIndex 初始化数据</li><li>轮播图片被点击，传递 index 参数给回调函数</li><li>回调函数中将 data 中 curIndex 设置为 index</li></ol><p>Zoom 组件跟随效果：</p><p>通过全局事件总线将 index 传递给 Zoom 兄弟组件（作为Zoom组件数组图片索引，他们共用的是同一份数据）</p><h2 id="AddCartSuccess"><a href="#AddCartSuccess" class="headerlink" title="AddCartSuccess"></a>AddCartSuccess</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221008152609.png" alt="20221008152609"></p><h3 id="查看商品详情"><a href="#查看商品详情" class="headerlink" title="查看商品详情"></a>查看商品详情</h3><p>使用 router-link 跳转到当前商品 detail 页面，id: skuObj.id</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;`/detail/$&#123;getSkuObj.id&#125;`&quot;</span> <span class="attr">class</span>=<span class="string">&quot;sui-btn btn-xlarge&quot;</span>&gt;</span></span><br><span class="line">  查看商品详情</span><br><span class="line"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="去购物车结算"><a href="#去购物车结算" class="headerlink" title="去购物车结算"></a>去购物车结算</h3><p>使用 router-link 跳转到 ShopCart 购物车页面</p><h2 id="ShopCart"><a href="#ShopCart" class="headerlink" title="ShopCart"></a>ShopCart</h2><h3 id="获取购物车信息"><a href="#获取购物车信息" class="headerlink" title="获取购物车信息"></a>获取购物车信息</h3><ol><li>编写请求接口</li><li>vuex 三连</li></ol><h3 id="uuid-临时游客身份"><a href="#uuid-临时游客身份" class="headerlink" title="uuid 临时游客身份"></a>uuid 临时游客身份</h3><p>需要在发送请求的时候在请求头中携带 userTempId 字段，之后再请求购物车信息的时候，必须有这个 id 才能获取到临时购物车数据</p><ol><li>在 detail 的 vuex store 中定义 uuid_token</li><li>创建 utils 文件夹，并定义一个工具函数，用于返回 uuid 注意这个 id 只能生成一个（单例模式）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  v4 <span class="keyword">as</span> uuidv4</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;uuid&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">genUuid</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> uuid_token = <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;UUIDTOKEN&quot;</span>);</span><br><span class="line">  <span class="comment">// 如果本地没有，生成一个并存储到本地，如果有，直接返回本地的id</span></span><br><span class="line">  <span class="keyword">if</span> (!uuid_token) &#123;</span><br><span class="line">    uuid_token = <span class="title function_">uuidv4</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;UUIDTOKEN&quot;</span>, uuid_token);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> uuid_token</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="请求数据并渲染"><a href="#请求数据并渲染" class="headerlink" title="请求数据并渲染"></a>请求数据并渲染</h3><ol><li>在购物车组件mounted生命周期中请求接口（因为请求接口频繁调用，所以封装成一个methods:getData）</li><li>循环渲染数据</li></ol><h3 id="商品数量加减操作"><a href="#商品数量加减操作" class="headerlink" title="商品数量加减操作"></a>商品数量加减操作</h3><p>加/减/用户输入购物车中的数量都要发请求：</p><p>接口：/api/cart/addToCart/{ skuId }/{ skuNum }（addOrUpdateShopCar）<br>参数：skuId  skuNum（正数代表增加，负数代表减少）</p><ol><li>加/减/用户输入 派发同一个 action, 根据传递的参数来区分：<ol><li>type：操作类型</li><li>disNum：增加or减少</li><li>cart：操作对象</li></ol></li><li>根据参数发送请求<ol><li>节流操作：解决用户点击太快会出现负数</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">countHandler</span>(<span class="params">flag, disnum, target</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="string">&quot;sub&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target.<span class="property">skuNum</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        disnum = -<span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        disnum = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="string">&quot;add&quot;</span>) &#123;</span><br><span class="line">      disnum = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="string">&quot;mod&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">isNaN</span>(disnum) || disnum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 用户输入的数字非法</span></span><br><span class="line">        disnum = <span class="number">0</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 用户输入（正常情况）或者输入的是小数（parseInt）</span></span><br><span class="line">        disnum = <span class="built_in">parseInt</span>(disnum) - target.<span class="property">skuNum</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 向服务器发请求</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;addOrUpdateShopCar&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">skuid</span>: target.<span class="property">skuId</span>,</span><br><span class="line">      <span class="attr">skunum</span>: disnum,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="商品删除操作"><a href="#商品删除操作" class="headerlink" title="商品删除操作"></a>商品删除操作</h3><p>请求地址：/api/cart/deleteCart/{skuId}<br>请求方式：DELETE</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqDelCartList</span> = (<span class="params">skuid</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/cart/deleteCart/<span class="subst">$&#123;skuid&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">delCartList</span>(<span class="params">context, skuid</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">reqDelCartList</span>(skuid);</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;delete fail!&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shopcart.vue</span></span><br><span class="line"><span class="comment">// 删除购物车商品</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">deleteGoods</span>(<span class="params">skuId</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;delCartList&quot;</span>, skuId);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="商品选中状态修改"><a href="#商品选中状态修改" class="headerlink" title="商品选中状态修改"></a>商品选中状态修改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqUpdateCartChecked</span> = (<span class="params">skuid, checknum</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123; </span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/cart/checkCart/<span class="subst">$&#123;skuid&#125;</span>/<span class="subst">$&#123;checknum&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">updateCartChecked</span>(<span class="params">context, &#123;</span></span><br><span class="line"><span class="params">  skuid,</span></span><br><span class="line"><span class="params">  checknum</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">reqUpdateCartChecked</span>(skuid, checknum);</span><br><span class="line">  <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;ok&#x27;</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;update fail!&#x27;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shopcart.vue</span></span><br><span class="line"><span class="comment">// 商品选中状态修改</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">changeChecked</span>(<span class="params">skuid, event</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> checknum = event.<span class="property">target</span>.<span class="property">checked</span> ? <span class="string">&quot;1&quot;</span> : <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;updateCartChecked&quot;</span>, &#123;</span><br><span class="line">      <span class="attr">skuid</span>: <span class="title class_">String</span>(skuid),</span><br><span class="line">      checknum,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="删除选中的商品"><a href="#删除选中的商品" class="headerlink" title="删除选中的商品"></a>删除选中的商品</h3><p>接口：复用删除单个商品的接口</p><ol><li>点击删除选中的商品按钮，不传递参数，直接触发一个 action</li><li>在这个 action 中再次触发删除单个商品的 action</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex</span></span><br><span class="line"><span class="comment">// 删除所有选中项 action</span></span><br><span class="line"><span class="title function_">deleteAllCheckedGoods</span>(<span class="params">context</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> cartInfoList = context.<span class="property">getters</span>.<span class="property">cartList</span>.<span class="property">cartInfoList</span>;</span><br><span class="line"> <span class="keyword">let</span> promiseState = [];</span><br><span class="line"> cartInfoList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 返回的是一个 Promise</span></span><br><span class="line">   <span class="keyword">let</span> res = item.<span class="property">isChecked</span> == <span class="number">1</span> ? <span class="variable language_">this</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;delCartList&#x27;</span>, item.<span class="property">skuId</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">   promiseState.<span class="title function_">push</span>(res)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promiseState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shopcart.vue</span></span><br><span class="line"><span class="comment">// 删除所有选中商品</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">deleteAllCheckedGoods</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;deleteAllCheckedGoods&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="全选反选操作"><a href="#全选反选操作" class="headerlink" title="全选反选操作"></a>全选反选操作</h3><ol><li>派发 action 传递复选框状态</li><li>action context 中获取所有购物车列表，将状态都改为传递过去的状态</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex</span></span><br><span class="line"><span class="title function_">changeAllGoodsState</span>(<span class="params">context, state</span>) &#123;</span><br><span class="line"> <span class="keyword">let</span> cartInfoList = context.<span class="property">getters</span>.<span class="property">cartList</span>.<span class="property">cartInfoList</span>;</span><br><span class="line"> <span class="keyword">let</span> stateToNum = state ? <span class="string">&#x27;1&#x27;</span> : <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"> <span class="keyword">let</span> promiseState = [];</span><br><span class="line"> cartInfoList.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> res = <span class="variable language_">this</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;updateCartChecked&quot;</span>, &#123;</span><br><span class="line">     <span class="attr">skuid</span>: item.<span class="property">skuId</span>,</span><br><span class="line">     <span class="attr">checknum</span>: stateToNum</span><br><span class="line">   &#125;)</span><br><span class="line">   promiseState.<span class="title function_">push</span>(res)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(promiseState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shopcart.vue</span></span><br><span class="line"><span class="comment">// 全选反选操作</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">changeAllGoodsState</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;changeAllGoodsState&quot;</span>, event.<span class="property">target</span>.<span class="property">checked</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(error.<span class="property">message</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221011171020.png" alt="20221011171020"></p><h3 id="获取验证码"><a href="#获取验证码" class="headerlink" title="获取验证码"></a>获取验证码</h3><p>收集表单数据</p><ol><li>phone</li><li>code</li><li>password1</li><li>password2</li><li>agree</li></ol><ol><li>点击获取验证码将手机号推送到后台,请求地址：/api/user/passport/sendCode/{phone} method: get</li><li>vuex </li><li>后台将验证码发送到指定的手机号</li><li>完成注册按钮：请求地址：/api/user/passport/register/ method：post 参数：<ol><li>phone</li><li>password</li><li>code</li></ol></li><li>注册成功跳转到登录页</li></ol><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221011171046.png" alt="20221011171046"></p><p>请求接口：/api/user/passport/login method: post 参数：phone password</p><p>登录成功之后将 token 存储到 vuex 中</p><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><p>token 是用户<code>登录成功</code>之后服务器派发的，是用户身份的唯一标识，之后每次请求服务器都要在请求头中携带此 token</p><p>持久化存储 token（localStorage）</p><h3 id="自动登录"><a href="#自动登录" class="headerlink" title="自动登录"></a>自动登录</h3><p>请求接口：/api/user/passport/auth/getUserInfo method: Get</p><p>需要携带 token 请求此接口</p><p>在路由导航守卫中触发此 action </p><p>header 组件中登录状态切换: v-if &amp; v-else</p><h3 id="退出登录"><a href="#退出登录" class="headerlink" title="退出登录"></a>退出登录</h3><p>请求地址：/api/user/passport/logout  method: Get</p><ol><li>发送请求</li><li>请求成功后，清空 vuex 中的数据和本地存储 token</li><li>跳转到首页 / 登录页</li></ol><h3 id="导航守卫相关"><a href="#导航守卫相关" class="headerlink" title="导航守卫相关"></a>导航守卫相关</h3><h4 id="前置导航守卫"><a href="#前置导航守卫" class="headerlink" title="前置导航守卫"></a>前置导航守卫</h4><p>在路由前置守卫中判断 store 中是否有 token </p><ol><li>有 token 相当于已经登录了，再访问 login 页面的时候直接强制跳转到 home<ol><li>已经登录了就不可以跳转到 login 和 register 页面，采用强制跳转</li><li>登录了，访问正常的页面<ol><li>判断有没有 name 属性（<code>let name = store.state.user.loginInfo.name;</code>）有的话直接放行</li><li>没有 name 属性发送 <code>autoLogin</code> dispatch 通过 token 获取 name 属性<ol><li>如果获取失败则代表 token 失效，需要跳转到 login 页面进行重新登录</li></ol></li></ol></li></ol></li><li>没有 token 没有登录: 不能去<code>交易相关</code>、不能去<code>支付相关</code> pay | paysuccess、不能去<code>个人中心</code><ol><li>通过导航守卫获取跳转路径: <code>let toPath = to.path;</code></li><li>指定未登录不能访问的页面</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="keyword">async</span> (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  <span class="title function_">next</span>();</span><br><span class="line">  <span class="comment">// 登录相关逻辑</span></span><br><span class="line">  <span class="keyword">let</span> token = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">token</span>;</span><br><span class="line">  <span class="keyword">let</span> name = store.<span class="property">state</span>.<span class="property">user</span>.<span class="property">loginInfo</span>.<span class="property">name</span>;</span><br><span class="line">  <span class="keyword">if</span> (token) &#123;</span><br><span class="line">    <span class="comment">// 已登录</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> == <span class="string">&quot;/login&quot;</span> || to.<span class="property">path</span> == <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 登录了且有用户信息</span></span><br><span class="line">      <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 登录了没有用户信息：跳转之前获取用户信息</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&quot;autoLogin&quot;</span>)</span><br><span class="line">          <span class="title function_">next</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="title function_">alert</span>(error);</span><br><span class="line">          <span class="comment">// token 失效，重新登录</span></span><br><span class="line">          <span class="keyword">await</span> store.<span class="title function_">dispatch</span>(<span class="string">&quot;logout&quot;</span>)</span><br><span class="line">          <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    如果未登录</span></span><br><span class="line"><span class="comment">    1. 交易相关（trade)、</span></span><br><span class="line"><span class="comment">    2. 支付相关（pay、paysuccess)</span></span><br><span class="line"><span class="comment">    3. 用户中心相关（center)</span></span><br><span class="line"><span class="comment">    跳转到登录页面</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> toPath = to.<span class="property">path</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(toPath);</span><br><span class="line">    <span class="keyword">if</span> (toPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/trade&#x27;</span>) != -<span class="number">1</span> || toPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/pay&#x27;</span>) != -<span class="number">1</span> || toPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/center&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 通过query 参数保存重定向前要访问的页面</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&#x27;/login?redirect=&#x27;</span> + toPath)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则放行</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="组件独享守卫"><a href="#组件独享守卫" class="headerlink" title="组件独享守卫"></a>组件独享守卫</h4><p>只有从<code>购物车界面</code>才能跳转到<code>交易页面</code>（创建订单）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>: <span class="string">&quot;/trade&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;trade&quot;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Trade</span>,</span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">from</span>.<span class="property">path</span> == <span class="string">&quot;/shopcart&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>只有从<code>交易页面</code>（创建订单）页面才能跳转到<code>支付页面</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">path</span>: <span class="string">&quot;/pay&quot;</span>,</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;pay&quot;</span>,</span><br><span class="line"><span class="attr">component</span>: <span class="title class_">Pay</span>,</span><br><span class="line"><span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">from</span>.<span class="property">path</span> == <span class="string">&quot;/trade&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h4><p>只有从<code>支付页面</code>才能跳转到<code>支付成功页面</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PaySuccess.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;PaySuccess&quot;</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.<span class="property">path</span> == <span class="string">&quot;/pay&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="保留登录前的跳转记录"><a href="#保留登录前的跳转记录" class="headerlink" title="保留登录前的跳转记录"></a>保留登录前的跳转记录</h3><ol><li>通过 query 参数保存重定向前要访问的页面<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> toPath = to.<span class="property">path</span>;</span><br><span class="line"><span class="keyword">if</span> (toPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/trade&#x27;</span>) != -<span class="number">1</span> || toPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/pay&#x27;</span>) != -<span class="number">1</span> || toPath.<span class="title function_">indexOf</span>(<span class="string">&#x27;/center&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="comment">// 通过query 参数保存重定向前要访问的页面</span></span><br><span class="line">  <span class="title function_">next</span>(<span class="string">&#x27;/login?redirect=&#x27;</span> + toPath)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 否则放行</span></span><br><span class="line">  <span class="title function_">next</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在登录组件中通过查询参数进行判断<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">loginUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; phone, password &#125; = <span class="variable language_">this</span>;</span><br><span class="line">      <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;loginUser&quot;</span>, &#123; phone, password &#125;);</span><br><span class="line">      <span class="comment">// 在登录组件中通过查询参数进行判断</span></span><br><span class="line">      <span class="keyword">let</span> toPath = <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">redirect</span> || <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">      <span class="comment">/* </span></span><br><span class="line"><span class="comment">        看路由当中是否包含query参数</span></span><br><span class="line"><span class="comment">        1. 有：调到 query 参数指定路由</span></span><br><span class="line"><span class="comment">        2. 没有：调到 home</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(toPath);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="表单验证-1"><a href="#表单验证-1" class="headerlink" title="表单验证"></a>表单验证</h3><h2 id="Trade"><a href="#Trade" class="headerlink" title="Trade"></a>Trade</h2><p>相关接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reqgetUserAddress 获取用户收货地址信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  请求地址：/api/user/userAddress/auth/findUserAddressList</span></span><br><span class="line"><span class="comment">  请求方式：get</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqgetUserAddress</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/user/userAddress/auth/findUserAddressList&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reqgetGoodsList 获取商品清单信息</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  请求地址：/api/order/auth/trade</span></span><br><span class="line"><span class="comment">  请求方式：get</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqgetGoodsList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/order/auth/trade&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收货地址：</p><p>数据从后台返回，使用循环将地址信息渲染出，通过 isDefault 属性判断是否为默认<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">defaultAddressSelect</span>(<span class="params">userAddress, address</span>) &#123;</span><br><span class="line">  <span class="comment">// 排他思想</span></span><br><span class="line">  userAddress.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    item.<span class="property">isDefault</span> = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  address.<span class="property">isDefault</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>提交订单:</p><p>根据 tradeNo (交易编号) 向后台获取订单号</p><p>API：/api/order/auth/submitOrder?tradeNo={tradeNo} method: post</p><p>接口在 main.js 中引入，并挂载到 vue 原型上，以后可以通过 this 访问所有 api 方法 </p><h2 id="Pay"><a href="#Pay" class="headerlink" title="Pay"></a>Pay</h2><ol><li>通过订单号获取支付信息</li><li></li></ol><p>不要在生命周期函数中使用 async 函数(解决方案：将异步代码封装成 method 在生命周期函数中调用 method)</p><p>根据订单号获取支付信息：</p><p>API: /api/payment/weixin/createNative/{orderId}  method: get</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqCreateNative</span> = (<span class="params">orderId</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/payment/weixin/createNative/<span class="subst">$&#123;orderId&#125;</span>`</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Pay&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">nativeInfo</span>: &#123;&#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="title function_">orderId</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">query</span>.<span class="property">orderId</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getCreateNative</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">getCreateNative</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$API</span>.<span class="title function_">reqCreateNative</span>(<span class="variable language_">this</span>.<span class="property">orderId</span>);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">nativeInfo</span> = res.<span class="property">data</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">alert</span>(res.<span class="property">message</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二维码支付"><a href="#二维码支付" class="headerlink" title="二维码支付"></a>二维码支付</h3><p>组件：element-ui 按需引入 <a href="https://element.eleme.cn/#/zh-CN/component/quickstart">https://element.eleme.cn/#/zh-CN/component/quickstart</a> + qrcode</p><h2 id="Center"><a href="#Center" class="headerlink" title="Center"></a>Center</h2><p>二级路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&quot;/center&quot;</span>,</span><br><span class="line">  <span class="comment">// 自动重定向</span></span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&quot;/center/myorder&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="title class_">Center</span>,</span><br><span class="line">  <span class="attr">children</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;myorder&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;myorder&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">MyOrder</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">showFooter</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;grouporder&quot;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;grouporder&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">GroupOrder</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">showFooter</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="attr">meta</span>: &#123;</span><br><span class="line">    <span class="attr">showFooter</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;],</span><br></pre></td></tr></table></figure><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 组件拆分之后如何布局？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 原型与原型链</title>
      <link href="/2022/11/082022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/f75e92e9/"/>
      <url>/2022/11/082022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/f75e92e9/</url>
      
        <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><h2 id="原型的概念"><a href="#原型的概念" class="headerlink" title="原型的概念"></a>原型的概念</h2><p>在JavaScript中是使用构造函数来新建一个对象的，每一个构造函数的内部都有一个 prototype 属性，它的属性值是一个对象，这个对象包含了可以由该构造函数的所有实例共享的属性和方法。当使用构造函数新建一个对象后，在这个对象的内部将包含一个指针，这个指针指向构造函数的 prototype 属性对应的值，在 ES5 中这个指针被称为对象的原型。<br>一般来说不应该能够获取到这个值的，但是现在浏览器中都实现了 <code>__proto__</code> 属性来访问这个属性，但是最好不要使用这个属性，因为它不是规范中规定的。ES5 中新增了一个 <code>Object.getPrototypeOf() 方法</code>，可以通过这个方法来获取对象的原型。</p><h2 id="原型链的概念"><a href="#原型链的概念" class="headerlink" title="原型链的概念"></a>原型链的概念</h2><p>当访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又会有自己的原型，于是就这样一直找下去，也就是原型链的概念。<br>原型链的尽头一般来说都是 <code>Object.prototype</code> 所以这就是新建的对象为什么能够使用 toString() 等方法的原因。</p><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><p>JavaScript 对象是通过引用来传递的，创建的每个新对象实体中并没有一份属于自己的原型副本。当修改原型时，与之相关的对象也会继承这一改变。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221109140502.png" alt="20221109140502"></p><h2 id="原型链指向"><a href="#原型链指向" class="headerlink" title="原型链指向"></a>原型链指向</h2><h2 id="原型链的终点是什么？如何打印出原型链的终点？"><a href="#原型链的终点是什么？如何打印出原型链的终点？" class="headerlink" title="原型链的终点是什么？如何打印出原型链的终点？"></a>原型链的终点是什么？如何打印出原型链的终点？</h2><p>由于Object是构造函数，原型链终点是Object.prototype.<strong>proto</strong>，而Object.prototype.<strong>proto</strong>=== null // true，所以，原型链的终点是null。<br>原型链上的所有原型都是对象，所有的对象最终都是由Object构造的，而Object.prototype的下一级是Object.prototype.<strong>proto</strong>。</p><h2 id="如何获得对象非原型链上的属性？"><a href="#如何获得对象非原型链上的属性？" class="headerlink" title="如何获得对象非原型链上的属性？"></a>如何获得对象非原型链上的属性？</h2><p>使用 <code>hasOwnProperty()</code> 方法来判断属性是否属于原型链的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">iterate</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">   <span class="keyword">var</span> res=[];</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj.<span class="title function_">hasOwnProperty</span>(key))</span><br><span class="line">           res.<span class="title function_">push</span>(key+<span class="string">&#x27;: &#x27;</span>+obj[key]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 继承<ul><li>[ ] 原型继承</li><li>[ ] class 继承</li></ul></li><li>[ ] </li><li>[ ] Object.getPrototypeOf() 方法返回指定对象的原型（即内部 [[Prototype]] 属性的值）</li><li>[ ] Object.create() 方法创建一个新对象，使用现有对象作为新创建对象的原型。</li><li>[ ] hasOwnProperty() 方法返回一个布尔值，指示对象是否具有指定的属性作为它自己的属性（而不是继承它）。</li><li>[ ] Object.prototype.<strong>proto</strong></li><li>[ ] Object.assign</li><li>[ ] Object.is</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 数据结构 与 算法</title>
      <link href="/2022/10/262022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_%E7%AE%97%E6%B3%95/f75e92e9/"/>
      <url>/2022/10/262022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_%E7%AE%97%E6%B3%95/f75e92e9/</url>
      
        <content type="html"><![CDATA[<h1 id="数组过滤"><a href="#数组过滤" class="headerlink" title="数组过滤"></a>数组过滤</h1><p>场景: ShangPinHui_Vue2 后台项目中展示剩余销售属性</p><p>有两个数组: 如 a: [“a”] b: [“a”,”b”,”c”] 返回 b 中不包含 a 中的元素 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> b = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = b.<span class="title function_">filter</span>(<span class="function"><span class="params">item1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a.<span class="title function_">every</span>(<span class="function"><span class="params">item2</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item1 != item2</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">quickSort</span>(<span class="params">arr, ascending = <span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> pivot = arr[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> left = [];</span><br><span class="line">  <span class="keyword">const</span> right = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ascending) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">        left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] &gt; pivot) &#123;</span><br><span class="line">        left.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        right.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> [...<span class="title function_">quickSort</span>(left, ascending), pivot, ...<span class="title function_">quickSort</span>(right, ascending)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mergeSort</span>(<span class="params">arr, ascending = <span class="literal">true</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="property">length</span> &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>(arr.<span class="property">length</span> / <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">const</span> left = arr.<span class="title function_">slice</span>(<span class="number">0</span>, mid);</span><br><span class="line">  <span class="keyword">const</span> right = arr.<span class="title function_">slice</span>(mid);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">left, right</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (i &lt; left.<span class="property">length</span> &amp;&amp; j &lt; right.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ascending) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &lt; right[j]) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(left[i]);</span><br><span class="line">          i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(right[j]);</span><br><span class="line">          j++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[i] &gt; right[j]) &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(left[i]);</span><br><span class="line">          i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.<span class="title function_">push</span>(right[j]);</span><br><span class="line">          j++;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.<span class="title function_">concat</span>(left.<span class="title function_">slice</span>(i)).<span class="title function_">concat</span>(right.<span class="title function_">slice</span>(j));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(<span class="title function_">mergeSort</span>(left, ascending), <span class="title function_">mergeSort</span>(right, ascending));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><div class='checkbox green'><input type="checkbox" />            <p>数据集合: 并集、交集、差集、子集 <a href="https://juejin.cn/post/6844903875342761992">https://juejin.cn/post/6844903875342761992</a></p>            </div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.X 手写分页器</title>
      <link href="/2022/10/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_vue2.x%E6%89%8B%E5%86%99%E5%88%86%E9%A1%B5%E5%99%A8/976189ad/"/>
      <url>/2022/10/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_vue2.x%E6%89%8B%E5%86%99%E5%88%86%E9%A1%B5%E5%99%A8/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221006233705.png" alt="20221006233705"></p><h1 id="静态组件-模板"><a href="#静态组件-模板" class="headerlink" title="静态组件(模板)"></a>静态组件(模板)</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>6<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>7<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>9<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 30px&quot;</span>&gt;</span>共 60 条<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Pagination&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagination</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f4f4f5</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#606266</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: <span class="number">35.5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#c0c4cc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#409eff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="静态组件-功能已实现"><a href="#静态组件-功能已实现" class="headerlink" title="静态组件(功能已实现)"></a>静态组件(功能已实现)</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;pageNo == 1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;pageclickHandler(pageNo - 1)&quot;</span>&gt;</span></span><br><span class="line">      上一页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;paginationStartAndEnd.start &gt; 1&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; active: pageNo == 1 &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;pageclickHandler(1)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      1</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;paginationStartAndEnd.start &gt; 2&quot;</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-for</span>=<span class="string">&quot;(page, index) in paginationStartAndEnd.end&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-show</span>=<span class="string">&quot;page &gt;= paginationStartAndEnd.start&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; active: pageNo == page &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;pageclickHandler(page)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      &#123;&#123; page &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">&quot;paginationStartAndEnd.end &lt; totalPage - 1&quot;</span>&gt;</span>···<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;paginationStartAndEnd.end &lt; totalPage&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:class</span>=<span class="string">&quot;&#123; active: pageNo == totalPage &#125;&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;pageclickHandler(totalPage)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      &#123;&#123; totalPage &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:disabled</span>=<span class="string">&quot;pageNo == totalPage&quot;</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click</span>=<span class="string">&quot;pageclickHandler(pageNo + 1)&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      下一页</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 30px&quot;</span>&gt;</span>共 &#123;&#123; total &#125;&#125; 条<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;Pagination&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">pageNo</span>: <span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">pageSize</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">total</span>: <span class="number">101</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">continue</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 总页数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">totalPage</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">total</span> / <span class="variable language_">this</span>.<span class="property">pageSize</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 起始和中止的变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">paginationStartAndEnd</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> start = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        end = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1. 如果总页数没有连续页码数多</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">continue</span> &gt; <span class="variable language_">this</span>.<span class="property">totalPage</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        start = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        end = <span class="variable language_">this</span>.<span class="property">continue</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2. 总页数比连续页码数多:</span></span></span><br><span class="line"><span class="language-javascript">        start = <span class="variable language_">this</span>.<span class="property">pageNo</span> - <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">continue</span> / <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">        end = <span class="variable language_">this</span>.<span class="property">pageNo</span> + <span class="built_in">parseInt</span>(<span class="variable language_">this</span>.<span class="property">continue</span> / <span class="number">2</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        纠正不正常的两种情况：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1. start &lt; 1 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2. end &gt; totalPage</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      */</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (start &lt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        start = <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">        end = <span class="variable language_">this</span>.<span class="property">continue</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (end &gt; <span class="variable language_">this</span>.<span class="property">totalPage</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        end = <span class="variable language_">this</span>.<span class="property">totalPage</span>;</span></span><br><span class="line"><span class="language-javascript">        start = <span class="variable language_">this</span>.<span class="property">totalPage</span> - <span class="variable language_">this</span>.<span class="property">continue</span> + <span class="number">1</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123; start, end &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">pageclickHandler</span>(<span class="params">pagenum</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">pageNo</span> = pagenum;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(pagenum);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.pagination</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-top</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#f4f4f5</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#606266</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">outline</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">min-width</span>: <span class="number">35.5px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#c0c4cc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &amp;<span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: not-allowed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#409eff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="分页相关属性"><a href="#分页相关属性" class="headerlink" title="分页相关属性"></a>分页相关属性</h1><ol><li>pageNo: 当前页数</li><li>pageSize: 每一页展示多少条数据</li><li>total: 一共多少条数据</li><li>continues: 分页连续页码个数【5|7】因为奇数是对称的，如：3 4 5 6 7</li></ol><h1 id="核心实现思路"><a href="#核心实现思路" class="headerlink" title="核心实现思路"></a>核心实现思路</h1><h2 id="计算总页数-根据已知条件"><a href="#计算总页数-根据已知条件" class="headerlink" title="计算总页数(根据已知条件)"></a>计算总页数(根据已知条件)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  <span class="comment">// 总页数</span></span><br><span class="line">  <span class="title function_">totalPage</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">total</span> / <span class="variable language_">this</span>.<span class="property">pageSize</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="连续页码实现思路"><a href="#连续页码实现思路" class="headerlink" title="连续页码实现思路"></a>连续页码实现思路</h2><ol><li>定义计算属性，并定义连续的页码（continues）的<strong>起始数字（start）</strong>与<strong>结束数字(end)</strong></li><li>当总页数没有连续页码多<ol><li>start = 1</li><li>end = totalPage</li></ol></li><li>当总页数比连续页码多<ol><li>start = this.pageNo - parseInt(this.continue / 2);</li><li>end = this.pageNo + parseInt(this.continue / 2);</li></ol></li><li>纠正不正常的两种情况：<ol><li>start &lt; 1 <ol><li>start = 1;</li><li>end = this.continue;</li></ol></li><li>end &gt; totalPage<ol><li>end = this.totalPage;</li><li>start = this.totalPage - this.continue + 1;</li></ol></li></ol></li></ol><h2 id="分页-UI-渲染相关"><a href="#分页-UI-渲染相关" class="headerlink" title="分页 UI 渲染相关"></a>分页 UI 渲染相关</h2><p>使用 v-for 遍历页码结束数字 end ，且只有当元素 &gt;= start 时才展示</p><h2 id="相关按钮的显示与隐藏逻辑"><a href="#相关按钮的显示与隐藏逻辑" class="headerlink" title="相关按钮的显示与隐藏逻辑"></a>相关按钮的显示与隐藏逻辑</h2><ol><li>顶端<code>上一页</code>页码的禁用：当 pageNo = 1 时</li><li>顶端<code>1</code>页码的显示与隐藏：当 start &gt; 1 时，顶端 1 页码显示，否则隐藏</li><li>顶端<code>...</code>页码的显示与隐藏: 当 start &gt; 2 时，顶端<code>...</code>页码显示，否则隐藏</li><li>底部<code>下一页</code>页码的禁用：当 pageNo = totalPage 时</li><li>底部<code>...</code>页码的显示与隐藏: 当 end &lt; totalPage - 1 时，底部<code>...</code>页码显示，否则隐藏</li><li>底部<code>总</code>页码的显示与隐藏：当 end &lt; totalPage 时，底部<code>总</code>页码的显示，否则隐藏</li></ol><h2 id="按钮类名绑定"><a href="#按钮类名绑定" class="headerlink" title="按钮类名绑定"></a>按钮类名绑定</h2><ol><li>顶端<code>1</code>：<code>:class = &#123; active:pageNo == 1 &#125;</code></li><li>连续页码：<code>:class = &#123; active:pageNo == page &#125;</code></li><li>底部<code>总</code>页码：<code>:class = &#123; active:pageNo == totalPage &#125;</code></li></ol><h2 id="按钮点击传递页码"><a href="#按钮点击传递页码" class="headerlink" title="按钮点击传递页码"></a>按钮点击传递页码</h2><p>在按钮点击的回调函数中将传递过来的页码赋值给 pageNo</p><ol><li>顶端<code>上一页</code>页码点击：传递 pageNo - 1</li><li>顶端<code>1</code>页码点击：传递  1</li><li><code>连续页码</code>点击：传递被点击的页码数</li><li>底部<code>下一页</code>点击：：传递 pageNo + 1</li><li>底部<code>总</code>页码点击：传递总页码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> Project </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tor Browser</title>
      <link href="/2022/10/032022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Software_TorBrowser/450a1492/"/>
      <url>/2022/10/032022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Software_TorBrowser/450a1492/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="74783398c30b597df63c08baccebacce49e5c5bb3443456ca156c22b30e9155c">176af5f71c6ac5419ca35683f9a93d1dcd2899269e20d9804e62c5de4432615a0846a240579285741b808375e8efaebaf3a9ca50c42b994d65b8b206e5c26b25e55f36c7d3ebbeb45157ed09b1726510e73cf8b84e69863cd92296cf5dc931671b3b2bc2a34e12046e2b1c12bc33bfd7600bc8229a8a6608ce51ec9b99d1d115d47fc9da2375898f40bbdc0c3997b7f7f8318dd5b6a3ff9e2a1b98a2a0c4e6cc866304aedc9409d8c098ee0f13ebc377218374ef9f4dc37fc98daf8c5ac49bd63ee24387f5324da8cd7ae54b0af21f8a573898aefe41453e6b6f84a6e8f92f94dc63368fac01340a832ef2654ab31022e1a89d91f8b99951d333bfd0e0342ed6ef0e0558a5b601b025976869b503b49d3ad0532605f24215af781cd276e8daa561a28d77bd0d0650ddea4fd8cecf63e49a34bc81082d9008ba9d1cfd7adeb8b818d9d4067a94b43c77138ec2da9e52728a2c37e471e61781be7c4f96ca50c81981f14ae020f7b64582a3e24f2e0e1d6ab65977b88413d1fa92682ff3fc476ea9eadfa86bfa6df510922933522f9e586311d79483a5fb9455f0158c2df293094a14b5e2dbfb10819bfad28368ef74efe0c8aed623c02f4028656289b27ae7d7e492fc5ab6a10c62205ac7b383909e372d3f605b70b039bfd47442bee986458b696aaecea70788f405ea3ac6791ac0cf989d6a5b5cfd91a3cf0b099378969a3e8f978d04549f3ccfb5b07c387713d8f8aaae0d109ad4b3b8466d2cd8edd9fb2778a755c629532d31fe8d96e902b7730afe6f37d87a87493e8b578f5e0e96211c3cbe7d6b6186aedcc7bbc35b35bb9eae9b2ef360302669fb57dc6ffbe764e043627fe9bddd7cdc21aed2903bbe4ec2949ed7b148bdf6505954a8704dbfac121c9b8cadc5416bec8e8824a0e22c5249a0217985abdd4b853d26f62a46f11e1a069e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 快速上手</title>
      <link href="/2022/09/202022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Git_Git%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/efc31b2a/"/>
      <url>/2022/09/202022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Git_Git%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/efc31b2a/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h1><p>Git是目前世界上最先进的<strong>分布式版本控制系统</strong>，可以记录每次文件的改动。</p><h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p>版本控制是一种记录一个或若干文件<strong>内容变化</strong>，以便将来查阅特定版本修订情况的系统。</p><p>简单的版本控制图示：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220920234104.png" alt="简单的版本控制概念"></p><p>版本控制发展史：</p><ol><li>文件（多个文件的拷贝副本）</li><li>本地版本控制（单个文件）</li><li>集中式（SVN）</li><li>分布式（Git）</li></ol><h2 id="集中式与分布式"><a href="#集中式与分布式" class="headerlink" title="集中式与分布式"></a>集中式与分布式</h2><h3 id="集中式版本控制系统"><a href="#集中式版本控制系统" class="headerlink" title="集中式版本控制系统"></a>集中式版本控制系统</h3><p>版本库是集中存放在中央服务器的（必须联网才能工作），而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919142746.png" alt="20220919142746"></p><h3 id="分布式版本控制系统"><a href="#分布式版本控制系统" class="headerlink" title="分布式版本控制系统"></a>分布式版本控制系统</h3><p>分布式版本控制系统根本没有“中央服务器”（分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。），<strong>每个人的电脑上都是一个完整的版本库</strong>，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919143450.png" alt="20220919143450"></p><h1 id="Git-安装"><a href="#Git-安装" class="headerlink" title="Git 安装"></a>Git 安装</h1><h2 id="Windows上安装Git"><a href="#Windows上安装Git" class="headerlink" title="Windows上安装Git"></a>Windows上安装Git</h2><ol><li>在Git官网直接下载安装程序: <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li><li>安装完成后，初始化全局用户信息，在命令行输入：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</span></span><br><span class="line">$ git config --global user.name <span class="string">&quot;Your Name&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="Git-版本库"><a href="#Git-版本库" class="headerlink" title="Git 版本库"></a>Git 版本库</h1><p>版本库又名仓库，英文名 <code>repository</code>，可以简单<strong>理解成一个目录</strong>，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><ol><li>使用终端进入需要被 git <strong>管理的目录</strong></li><li>通过 <code>git init</code> 命令把这个目录变成 Git 可以管理的仓库（可以发现当前目录下多了一个<code>.git</code>的目录，这个目录是 Git 来跟踪管理版本库的）</li></ol><h2 id="文件添加到版本库"><a href="#文件添加到版本库" class="headerlink" title="文件添加到版本库"></a>文件添加到版本库</h2><blockquote><p>所有的版本控制系统，其实<strong>只能跟踪文本文件的改动</strong>，比如TXT文件，网页，所有的程序代码等等。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p></blockquote><ol><li>编写一个 <code>README.md</code> 文件，并放到被 git 管理的目录下（子目录也行），因为这是一个Git仓库，放到其他地方 Git 再厉害也找不到这个文件。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Git is a version control system.</span><br><span class="line">Git is free software.</span><br></pre></td></tr></table></figure></li><li>把文件放到Git仓库<ol><li>第一步，用命令 <code>git add</code> 告诉 Git，把文件添加到仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md</span><br></pre></td></tr></table></figure></li><li>第二步，用命令 <code>git commit</code> 告诉Git，把文件提交到仓库：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;wrote a readme file&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h1 id="Git-时光机穿梭"><a href="#Git-时光机穿梭" class="headerlink" title="Git 时光机穿梭"></a>Git 时光机穿梭</h1><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220921230311.png" alt="20220921230311"></p><h3 id="工作区（Working-Directory）"><a href="#工作区（Working-Directory）" class="headerlink" title="工作区（Working Directory）"></a>工作区（Working Directory）</h3><p>工作区就是在电脑里被Git管理的目录。（比如 <code>LearnGit</code> 文件夹就是一个工作区）</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919155758.png" alt="20220919155758"></p><h3 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h3><p>工作区有一个隐藏目录 <code>.git</code> ，这个不算工作区，而是Git的版本库。</p><p>Git 的版本库里存了很多东西，其中最重要的就是称为 <code>stage</code> 的<strong>暂存区</strong>。<br>还有Git为我们自动创建的第一个分支 <code>master</code>，以及指向 <code>master</code> 的一个指针叫<code>HEAD</code>。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919155936.png" alt="20220919155936"></p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol><li>对 <code>README.md</code> 做个修改，比如加上一行内容：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br></pre></td></tr></table></figure></li><li>在工作区新增一个 <code>LICENSE</code> 文本文件（内容随便写）。</li><li>用 <code>git status</code> 查看一下状态：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Git非常清楚地告诉我们，README.md 被修改了，而 LICENSE 还从来没有被添加过，所以它的状态是 Untracked。</span></span><br><span class="line"></span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line">Laity@LAPTOP-H514R4JD MINGW64 /e/DevTools/Git/LearnGit (master)</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line">        modified:   README.md</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line">        LICENSE</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>使用两次命令 <code>git add</code>（git add命令实际上就是把要提交的所有修改<strong>放到暂存区</strong>） ，把 README.md 和 LICENSE 都添加后，用 <code>git status</code> 再查看一下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git restore --staged &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">        new file:   LICENSE</span><br><span class="line">        modified:   README.md</span><br></pre></td></tr></table></figure>现在，暂存区的状态就变成这样了：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919161202.png" alt="20220919161202"></li><li>执行 <code>git commit</code> 就可以一次性把暂存区的所有修改提交到分支。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m <span class="string">&quot;understand how stage works&quot;</span></span><br><span class="line">[master 75d4cdd] understand how stage works</span><br><span class="line"> 2 files changed, 8 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure></li><li>一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure></li></ol><p>现在版本库变成了这样，暂存区就没有任何内容了：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919161520.png" alt="20220919161520"></p><h2 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h2><p>在 Git中每当你觉得文件修改到一定程度的时候，就可以“<strong>保存一个快照</strong>”，这个快照在Git中被称为 <code>commit</code>。<br>一旦你把文件改乱了，或者误删了文件，还<strong>可以从最近的一个 <code>commit</code> 恢复</strong>，然后继续工作，而不是把几个月的工作成果全部丢失。</p><h3 id="git-log-命令"><a href="#git-log-命令" class="headerlink" title="git log 命令"></a>git log 命令</h3><p><code>git log</code> 命令显示从最近到最远的 <code>commit</code> 提交日志（查看<code>commit id</code>）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 5941954c7a1243084b61871c2ad2f57f88a3a331 (HEAD -&gt; master)</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Mon Sep 19 15:05:34 2022 +0800</span><br><span class="line"></span><br><span class="line">    append GPL</span><br><span class="line"></span><br><span class="line">commit 8bf2f95c8947bf355763e9e6805bf00f2bd3fa12</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Mon Sep 19 15:04:11 2022 +0800</span><br><span class="line"></span><br><span class="line">    add distributed</span><br></pre></td></tr></table></figure><p>如果嫌输出信息太多，看得眼花缭乱的，可以试试加上 <code>--pretty=oneline</code> 参数：（可以看到的一大串类似 5941954c7… 的是 <code>commit id</code>（版本号）是一个 <code>SHA1</code> 计算出来的一个非常大的数字，用十六进制表示。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拓展命令：%h 代表哈希值 %s 代表提交的记录</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=format:<span class="string">&quot;%h %s&quot;</span></span><br></pre></td></tr></table></figure><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="回退版本-1"><a href="#回退版本-1" class="headerlink" title="回退版本"></a>回退版本</h4><ol><li>在 Git中，用 <code>HEAD</code> 表示当前版本，上一个版本就是 <code>HEAD^</code> ，上上一个版本就是 <code>HEAD^^</code> ，往上100个版本可以写成 <code>HEAD~100</code>。<br>要把当前版本回退到上一个版本可以使用 <code>git reset</code> 命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br><span class="line">HEAD is now at e475afc add distributed</span><br></pre></td></tr></table></figure></li><li>可以使用 <code>commit id</code> （用 <code>git log</code> 获取 commit id）回到指定的某个版本：（版本号没必要写全，前几位就可以了，Git会自动去找。）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 5941954c</span><br><span class="line">HEAD is now at 83b0afe append GPL</span><br></pre></td></tr></table></figure></li></ol><h4 id="回退版本后悔药"><a href="#回退版本后悔药" class="headerlink" title="回退版本后悔药"></a>回退版本后悔药</h4><p>假如你回退到了某个版本，关掉了电脑，第二天早上就后悔了，想恢复到新版本怎么办？找不到新版本的 <code>commit id</code> 怎么办？<br>Git提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令：</p><ol><li>使用 <code>git reflog</code> 命令查找之前的 <code>commit id</code></li><li>git reset —hard <commit id></li></ol><h2 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h2><p>为什么Git比其他版本控制系统设计得优秀，<strong>因为Git跟踪并管理的是修改，而非文件</strong>。</p><p>每次修改，如果不用 <code>git add</code> 到暂存区，那就不会加入到 <code>commit</code> 中。</p><p><code>git diff HEAD -- 文件名</code> 命令可以查看<strong>工作区和版本库里面最新版本的区别</strong>：</p><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h3 id="场景一：撤销工作区修改"><a href="#场景一：撤销工作区修改" class="headerlink" title="场景一：撤销工作区修改"></a>场景一：撤销工作区修改</h3><p>当你改乱了工作区某个文件的内容，想<strong>直接丢弃工作区的修改</strong>时：</p><ol><li>手动删除工作区的文件。</li><li><code>git checkout -- file</code> 把文件在工作区的修改全部撤销（<code>git checkout</code> 其实是用版本库里的版本替换工作区的版本）</li></ol><h3 id="场景二：撤销暂存区修改"><a href="#场景二：撤销暂存区修改" class="headerlink" title="场景二：撤销暂存区修改"></a>场景二：撤销暂存区修改</h3><p>当你不但改乱了工作区某个文件的内容，<strong>还添加到了暂存区时，想丢弃修改</strong>。</p><p>解决方案：</p><ol><li>用命令 <code>git reset HEAD &lt;file&gt;</code>，回到<strong>工作区的修改</strong></li><li>按场景一操作。（使用：<code>git checkout -- file</code> 把文件在<strong>工作区</strong>的修改全部撤销）</li></ol><h3 id="场景三：撤销版本库修改"><a href="#场景三：撤销版本库修改" class="headerlink" title="场景三：撤销版本库修改"></a>场景三：撤销版本库修改</h3><p>已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<strong>版本回退</strong>一节，不过前提是没有推送到远程库。</p><h2 id="删除-复原文件"><a href="#删除-复原文件" class="headerlink" title="删除/复原文件"></a>删除/复原文件</h2><h3 id="场景一：删除暂存区的文件"><a href="#场景一：删除暂存区的文件" class="headerlink" title="场景一：删除暂存区的文件"></a>场景一：删除暂存区的文件</h3><p>已经提交到暂存区的文件想要删除暂存区的文件和本地文件：</p><ol><li>在文件管理器中把没用的文件删了。</li><li>工作区和版本库就不一致了，<code>git status</code> 命令会立刻告诉你哪些文件被删除了</li><li>用命令 <code>git rm &lt;file&gt;</code> 从版本库中删除该文件，并且 <code>git commit</code></li></ol><h3 id="场景二：复原文件"><a href="#场景二：复原文件" class="headerlink" title="场景二：复原文件"></a>场景二：复原文件</h3><p>已经提交到暂存区的文件，误删了本地文件，想要复原。（注意：从来没有被添加到版本库就被删除的文件，是无法恢复的！）</p><ol><li>文件管理器中文件被误删了。</li><li>因为文件已经被提交到暂存区了，版本库里有，所以可以很轻松地把误删的文件恢复到最新版本：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。</span></span><br><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Git-远程仓库"><a href="#Git-远程仓库" class="headerlink" title="Git 远程仓库"></a>Git 远程仓库</h1><p>场景：一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p><p>完全可以自己搭建一台运行Git的服务器，不过现阶段，为了学Git先搭个服务器绝对是小题大作。<br>好在有个叫 <code>GitHub</code> 的网站，这个网站就是提供 Git仓库托管服务的，所以，只要注册一个 GitHub账号，就可以免费获得 Git远程仓库。</p><ol><li>创建SSH Key （由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的）在用户主目录下，看看有没有 <code>.ssh</code> 目录，如果有，再看看这个目录下有没有 <code>id_rsa</code> 和 <code>id_rsa</code> .pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>如果一切顺利的话，可以在用户主目录里找到 <code>.ssh</code> 目录，里面有 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 两个文件，这两个就是SSH Key的秘钥对， <code>id_rsa</code> 是私钥，不能泄露出去， <code>id_rsa.pub</code> 是公钥，可以放心地告诉任何人。</li><li>登陆GitHub，打开“Account settings”，“SSH Keys”页面：点“New SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919210413.png" alt="20220919210413"></li></ol><p>为什么GitHub需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的，而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p><p>当然，GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。</p><h2 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h2><p>已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。</p><ol><li>登陆GitHub，创建一个新的仓库</li><li>这个已经创建的仓库还是空的，GitHub告诉我们：<ol><li>可以从这个仓库克隆出新的仓库。(参考：<code>从远程库克隆</code> 一节)</li><li>也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。<ol><li>在本地<strong>需要被推送的</strong>仓库下运行命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关联远程库</span></span><br><span class="line">$ git remote add origin git@github.com:&lt;Github用户名&gt;/&lt;仓库名称&gt;.git</span><br></pre></td></tr></table></figure>添加后，远程库的名字就是 <code>origin</code> ，这是Git默认的叫法，也可以改成别的，但是 <code>origin</code> 这个名字一看就知道是远程库。</li><li>把本地库的所有内容推送到远程库上：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用git push命令，实际上是把当前分支master推送到远程。</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>由于远程库是空的，我们第一次推送 <code>master</code> 分支时，加上了 <code>-u</code> 参数，Git不但会把本地的 <code>master</code> 分支内容推送的远程新的 <code>master</code> 分支，还会把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支关联起来，在以后的推送或者拉取时就可以简化命令 （<code>git push origin master</code>）。</li></ol></li></ol></li></ol><h2 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h2><p>要克隆一个仓库，首先必须知道仓库的地址，然后使用 <code>git clone</code> 命令克隆:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:&lt;Github用户名&gt;/&lt;仓库名称&gt;.git</span><br></pre></td></tr></table></figure><p>Git支持多种协议，包括 <code>https</code>，但 <code>ssh协议</code> 速度最快。</p><h1 id="Git-分支管理"><a href="#Git-分支管理" class="headerlink" title="Git 分支管理"></a>Git 分支管理</h1><p>分支在实际中有什么用呢？<br>假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。</p><p>现在有了分支，就不用怕了。你创建了一个<strong>属于你自己的分支（相对于主分支这个分支是独立的）</strong>，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><h2 id="分支操作命令"><a href="#分支操作命令" class="headerlink" title="分支操作命令"></a>分支操作命令</h2><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code> 或者 <code>git switch &lt;name&gt;</code></p><p>创建 + 切换分支：<code>git checkout -b &lt;name&gt;</code> 或者 <code>git switch -c &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code> （注意：<strong>切换分支再合并</strong>）</p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p><h2 id="分支的概念"><a href="#分支的概念" class="headerlink" title="分支的概念"></a>分支的概念</h2><p>在 Git里，master 为默认分支。master 分支是一条线，Git用 master 指向最新的提交，再用 HEAD 指向 master，就能确定当前分支，以及当前分支的提交点：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919215828.png" alt="20220919215828"></p><p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919215936.png" alt="20220919215936"></p><p>从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919220429.png" alt="20220919220429"></p><p>假如我们在dev上的工作完成了，就可以把dev合并到master上。<br>Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919220454.png" alt="20220919220454"></p><p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919220530.png" alt="20220919220530"></p><p>创建dev分支，然后切换到dev分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># git checkout 命令加上 -b 参数表示创建并切换，相当于以下两条命令：</span></span><br><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br></pre></td></tr></table></figure><p><code>git branch</code> 命令会列出所有分支，当前分支前面会标一个 <code>*</code> 号。</p><p>然后，我们就可以在dev分支上正常提交，比如对 README.md 做个修改，加上一行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick.</span><br></pre></td></tr></table></figure><p>然后提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;branch test&quot;</span></span><br></pre></td></tr></table></figure><p>现在，dev分支的工作完成，我们就可以切换回master分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p>切换回master分支后，再查看一个README.md文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变。</p><p>现在，我们把dev分支的工作成果合并到master分支上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git merge 命令用于合并指定分支到当前分支。</span></span><br><span class="line">$ git merge dev</span><br><span class="line">Updating 5941954..d40742b</span><br><span class="line">Fast-forward</span><br><span class="line"> test.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 test.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</span></span><br></pre></td></tr></table></figure><p>合并完成后，就可以放心地删除dev分支了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d dev</span><br></pre></td></tr></table></figure><p>删除后，查看branch，就只剩下master分支了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，<strong>合并后再删掉分支</strong>，这和直接在master分支上工作效果是一样的，但过程更安全。</p><p>switch 命令：</p><p>我们注意到切换分支使用 <code>git checkout &lt;branch&gt;</code> ，而前面讲过的撤销修改则是 <code>git checkout -- &lt;file&gt;</code> ，同一个命令，有两种作用，确实有点令人迷惑。</p><p>实际上，切换分支这个动作，用switch更科学。因此，最新版本的Git提供了新的 <code>git switch</code> 命令来切换分支：</p><p>创建并切换到新的dev分支，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br></pre></td></tr></table></figure><p>直接切换到已有的master分支，可以使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch master</span><br></pre></td></tr></table></figure><h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>当Git无法自动合并分支时，就<strong>必须首先解决冲突</strong>。解决冲突后，再提交，合并完成。</p><p>解决冲突就是<strong>把Git合并失败的文件手动编辑为我们希望的内容</strong>，再提交。</p><p>冲突场景：</p><p>当两个分支（feature1 和 master）都对同一个文件（如：readme.txt ）进行 修改 并 commit。例如：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919225737.png" alt="20220919225737"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure><p>果然冲突了！Git告诉我们，readme.txt 文件存在冲突，<strong>必须手动解决冲突后再提交</strong>。<code>git status</code> 也可以告诉我们冲突的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 2 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">You have unmerged paths.</span><br><span class="line">  (fix conflicts and run <span class="string">&quot;git commit&quot;</span>)</span><br><span class="line">  (use <span class="string">&quot;git merge --abort&quot;</span> to abort the merge)</span><br><span class="line">Unmerged paths:</span><br><span class="line">  (use <span class="string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution)</span><br><span class="line">    both modified:   readme.txt</span><br><span class="line">no changes added to commit (use <span class="string">&quot;git add&quot;</span> and/or <span class="string">&quot;git commit -a&quot;</span>)</span><br></pre></td></tr></table></figure><p>可以直接使用 <code>cat</code> 命令查看 readme.txt 的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> readme.txt</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; <span class="string">HEAD</span></span><br><span class="line"><span class="string">Creating a new branch is quick &amp; simple.</span></span><br><span class="line"><span class="string">=======</span></span><br><span class="line"><span class="string">Creating a new branch is quick AND simple.</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span></span><br></pre></td></tr></table></figure><p>Git用 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 标记出不同分支的内容，我们修改如下后保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><p>再提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;conflict fixed&quot;</span></span><br><span class="line">[master cf810e4] conflict fixed</span><br></pre></td></tr></table></figure><p>现在，master 分支和 feature1 分支变成了下图所示：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919230313.png" alt="20220919230313"></p><p>用带参数的 <code>git log</code> 也可以看到分支的合并情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 git log --graph 命令可以看到分支合并图。</span></span><br><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   cf810e4 (HEAD -&gt; master) conflict fixed</span><br><span class="line">|\  </span><br><span class="line">| * 14096d0 (feature1) AND simple</span><br><span class="line">* | 5dc6824 &amp; simple</span><br><span class="line">|/  </span><br><span class="line">* b17d20e branch <span class="built_in">test</span></span><br><span class="line">* d46f35e (origin/master) remove test.txt</span><br><span class="line">* b84166e add test.txt</span><br><span class="line">* 519219b git tracks changes</span><br><span class="line">* e43a48b understand how stage works</span><br><span class="line">* 1094adb append GPL</span><br><span class="line">* e475afc add distributed</span><br><span class="line">* eaadf4e wrote a readme file</span><br></pre></td></tr></table></figure><h2 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h2><p>Git分支十分强大，在团队开发中应该充分应用。</p><p>通常，合并分支时，如果可能，Git会用 <code>Fast forward</code> 模式，但这种模式下，<strong>删除分支后，会丢掉分支信息</strong>。</p><p>如果要<strong>强制禁用 <code>Fast forward</code></strong> 模式，加上 <code>--no-ff</code> 参数就可以用普通模式合并，Git就会在 <code>merge</code> 时<strong>生成一个新的commit</strong>，这样，从分支历史上就可以看出分支信息。</p><h3 id="禁用-Fast-forward-演示"><a href="#禁用-Fast-forward-演示" class="headerlink" title="禁用 Fast forward 演示"></a>禁用 Fast forward 演示</h3><p>首先，仍然创建并切换dev分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c dev</span><br><span class="line">Switched to a new branch <span class="string">&#x27;dev&#x27;</span></span><br></pre></td></tr></table></figure><p>修改 readme.txt 文件，并提交一个新的 commit：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;add merge&quot;</span></span><br><span class="line">[dev f52c633] add merge</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>现在，我们切换回 master：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>准备合并dev分支，请注意 <code>--no-ff</code> 参数，表示禁用 Fast forward：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。</span></span><br><span class="line">$ git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> readme.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure><p>合并后，我们用git log看看分支历史：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   e1e9c68 (HEAD -&gt; master) merge with no-ff</span><br><span class="line">|\  </span><br><span class="line">| * f52c633 (dev) add merge</span><br><span class="line">|/  </span><br><span class="line">*   cf810e4 conflict fixed</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到，不使用 Fast forward 模式，merge 后就像这样：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919232230.png" alt="20220919232230"></p><h3 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h3><p>在实际开发中，应该按照几个基本原则进行分支管理：</p><ol><li>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</li><li>干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；</li><li>你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。</li></ol><p>所以，团队合作的分支看起来就像这样：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220919232332.png" alt="20220919232332"></p><h2 id="Bug-分支"><a href="#Bug-分支" class="headerlink" title="Bug 分支"></a>Bug 分支</h2><p>修复bug时，我们会通过<strong>创建新的 bug 分支</strong>进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场 <code>git stash</code> 一下，然后去修复 bug，修复后，再 <code>git stash pop</code> ，回到工作现场；</p><p>在 master 分支上修复的 bug，想要合并到当前 dev分支，可以用 <code>git cherry-pick &lt;commit id&gt;</code> 命令，把 bug提交的修改“<strong>复制</strong>”到当前分支，避免重复劳动。</p><h3 id="Bug-分支演示"><a href="#Bug-分支演示" class="headerlink" title="Bug 分支演示"></a>Bug 分支演示</h3><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支 <code>issue-101</code> 来修复它。<br>但是，等等，当前正在dev上进行的工作还没有提交，并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>幸好，Git 还提供了一个 <code>stash</code> 功能，可以把当前工作现场（暂存区）“储藏”起来，等以后恢复现场后继续工作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">$ git checkout -b issue-101</span><br><span class="line">Switched to a new branch <span class="string">&#x27;issue-101&#x27;</span></span><br></pre></td></tr></table></figure><p>现在修复bug，需要把“Git is free software …”改为“Git is a free software …”，然后提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">&quot;fix bug 101&quot;</span></span><br><span class="line">[issue-101 4c805e2] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git switch master</span><br><span class="line">Switched to branch <span class="string">&#x27;master&#x27;</span></span><br><span class="line">Your branch is ahead of <span class="string">&#x27;origin/master&#x27;</span> by 6 commits.</span><br><span class="line">  (use <span class="string">&quot;git push&quot;</span> to publish your <span class="built_in">local</span> commits)</span><br><span class="line">$ git merge --no-ff -m <span class="string">&quot;merged bug fix 101&quot;</span> issue-101</span><br><span class="line">Merge made by the <span class="string">&#x27;recursive&#x27;</span> strategy.</span><br><span class="line"> readme.txt | 2 +-</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>现在，是时候接着回到dev分支干活了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git switch dev</span><br><span class="line">Switched to branch <span class="string">&#x27;dev&#x27;</span></span><br><span class="line">$ git status</span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>工作区是干净的，刚才的工作现场存到哪去了？用 <code>git stash list</code> 命令看看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><ol><li>用 <code>git stash apply</code> 恢复，但是恢复后，<code>stash</code> 内容并不删除，你需要用 <code>git stash drop</code> 来删除；</li><li>用 <code>git stash pop</code> ，恢复的同时把 <code>stash</code> 内容也删了：</li></ol><p>再用 <code>git stash list</code> 查看，就看不到任何 <code>stash</code> 内容了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash list</span><br></pre></td></tr></table></figure><p>你可以多次 <code>stash</code> ，恢复的时候，先用 <code>git stash list</code> 查看，然后恢复指定的 <code>stash</code>。用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git stash apply stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><p>在master分支上修复了bug后，我们要想一想，dev分支是早期从master分支分出来的，所以，<strong>这个bug其实在当前dev分支上也存在</strong>。</p><p>同样的bug，要在dev上修复，我们只需要把 <code>4c805e2 fix bug 101</code> 这个提交所做的修改“复制”到dev分支。<br>注意：我们只想复制 <code>4c805e2 fix bug 101</code> 这个提交所做的修改，并不是把整个master分支merge过来。</p><p>为了方便操作，Git专门提供了一个 <code>cherry-pick</code> 命令，让我们能复制一个特定的提交到当前分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* dev</span><br><span class="line">  master</span><br><span class="line">$ git cherry-pick 4c805e2</span><br><span class="line">[master 1d4b803] fix bug 101</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>Git自动给dev分支做了一次提交，注意这次提交的commit是1d4b803，它并不同于master的4c805e2，因为这两个commit只是改动相同，但确实是两个不同的commit。<br>用 <code>git cherry-pick</code> ，我们就不需要在dev分支上手动再把修bug的过程重复一遍。</p><h2 id="Feature-分支"><a href="#Feature-分支" class="headerlink" title="Feature 分支"></a>Feature 分支</h2><p>开发一个新 feature，最好新建一个分支；（你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。）</p><p>如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D &lt;name&gt;</code> <strong>强行删除</strong>。</p><h3 id="Feature-分支演示"><a href="#Feature-分支演示" class="headerlink" title="Feature 分支演示"></a>Feature 分支演示</h3><p>你接到了一个新任务：开发代号为 Vulcan 的新功能，该功能计划用于下一代星际飞船。</p><p>于是准备开发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git switch -c feature-vulcan</span><br><span class="line">Switched to a new branch <span class="string">&#x27;feature-vulcan&#x27;</span></span><br></pre></td></tr></table></figure><p>a moments later… 开发完毕：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git add vulcan.py</span><br><span class="line">$ git status</span><br><span class="line">On branch feature-vulcan</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">&quot;git reset HEAD &lt;file&gt;...&quot;</span> to unstage)</span><br><span class="line">    new file:   vulcan.py</span><br><span class="line">$ git commit -m <span class="string">&quot;add feature vulcan&quot;</span></span><br><span class="line">[feature-vulcan 287773e] add feature vulcan</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 vulcan.py</span><br></pre></td></tr></table></figure><p>切回 <code>dev</code> ，准备合并：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git switch dev</span><br></pre></td></tr></table></figure><p>但是！</p><p>就在此时，接到上级命令，因经费不足，新功能必须取消！虽然白干了，但是这个包含机密资料的分支还是必须就地销毁：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-vulcan</span><br><span class="line">error: The branch <span class="string">&#x27;feature-vulcan&#x27;</span> is not fully merged.</span><br><span class="line">If you are sure you want to delete it, run <span class="string">&#x27;git branch -D feature-vulcan&#x27;</span>.</span><br></pre></td></tr></table></figure><p>销毁失败。Git友情提醒，<code>feature-vulcan</code> 分支<strong>还没有被合并</strong>，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的 <code>-D</code> 参数。</p><p>现在我们强行删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D feature-vulcan</span><br><span class="line">Deleted branch feature-vulcan (was 287773e).</span><br></pre></td></tr></table></figure><h2 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h2><p>当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的<strong>默认名称是 origin</strong>。</p><ol><li><code>git remote</code> 查看远程库的信息</li><li><code>git remote -v</code> 显示远程库更详细的信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没有推送权限，就看不到push的地址。</span></span><br><span class="line">$ git remote -v</span><br><span class="line">origin  git@github.com:HaloBoys/LearnGit.git (fetch)</span><br><span class="line">origin  git@github.com:HaloBoys/LearnGit.git (push)</span><br></pre></td></tr></table></figure></li></ol><p>补充：</p><p>删除已关联的名为origin的远程库：<code>git remote rm origin</code></p><p>远程仓库的<strong>默认名称是 origin</strong>，如果有多个远程库，我们需要用<strong>不同的名称来标识不同的远程库</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add &lt;自定义远程仓库名称&gt; git@gitxxx.com:&lt;用户名&gt;/&lt;仓库名&gt;.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 演示</span></span><br><span class="line">$ git remote add github git@github.com:HaloBoys/LearnGit.git</span><br></pre></td></tr></table></figure><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p>分支推送原则：</p><ul><li><code>master</code> 分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code> 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li><code>bug</code> 分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li><code>feature</code> 分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h3 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h3><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:&lt;Github用户名&gt;/&lt;仓库名称&gt;.git</span><br></pre></td></tr></table></figure><p>默认情况下 clone的仓库，只能显示 master 分支（<strong>虽然不显示其他分支，但是也可以直接使用命令切换到对应分支</strong>），可以在本地创建和远程分支对应的分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;分支名称&gt; origin/&lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p>现在，就可以在分支上进行修改。</p><h4 id="代码冲突"><a href="#代码冲突" class="headerlink" title="代码冲突"></a>代码冲突</h4><p>多人协作可能会出现这种问题：多个人对同一个文件进行修改并提交，后提交的人会提交失败，因为与远程文件有冲突，需要<strong>解决冲突</strong>。</p><p>解决方案：</p><ol><li>用 <code>git pull</code> 把最新的提交从分支抓下来<ol><li>如果 <code>git pull</code> 失败，提示 <code>no tracking information</code>，原因是<strong>没有指定本地分支与远程分支的关联</strong>，使用命令 <code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code></li><li>拓展：<code>git pull</code> 命令相当于执行了 <code>git fetch</code> 和 <code>git merge</code> 操作</li></ol></li><li>在本地合并，手动解决冲突，提交，再 push</li></ol><h3 id="git-flow-工作流"><a href="#git-flow-工作流" class="headerlink" title="git flow 工作流"></a>git flow 工作流</h3><p>Gitflow 工作流 (Gitflow Workflow) 是2010年由Vincent Driessen在他的一篇博客里提出来的。<br>它定义了一整套完善的基于Git分支模型的框架，结合了版本发布的研发流程，适合管理具有固定发布周期的<strong>大型项目</strong>。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220922162544.png" alt="git flow"></p><h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><p>Pull Request 是自己修改源代码后，请求对方仓库采纳该修改时采取的一种行为。</p><h3 id="参与开源项目"><a href="#参与开源项目" class="headerlink" title="参与开源项目"></a>参与开源项目</h3><ol><li>在 github <code>fork</code> 开源仓库（相当于把开源代码拷贝一份到自己的 github 账号）</li><li>在自己的 github 账号下 clone 并参与提交/开发</li><li>如果觉得自己开发的还不错，可以提交一个 Pull Request 申请给开源项目的作者。</li></ol><h2 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h2><p>Git有一种称为 <code>rebase</code> 的操作可以让提交历史是一条干净的直线（变得更加简洁）</p><h3 id="场景一：多个记录整合成一个记录"><a href="#场景一：多个记录整合成一个记录" class="headerlink" title="场景一：多个记录整合成一个记录"></a>场景一：多个记录整合成一个记录</h3><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法一：将当前的记录和指定 commit id 这个区间合并成一个记录</span></span><br><span class="line">$ git rebase -i &lt;commit <span class="built_in">id</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：通过 HEAD~n 参数；指定从当前的记录找最近的 n 条记录进行合并</span></span><br><span class="line">$ git rebase -i &lt;HEAD~n&gt;</span><br></pre></td></tr></table></figure><p>场景演示：</p><ol><li>模拟多个提交版本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span> 1.js</span><br><span class="line"></span><br><span class="line">$ git add 1.js</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;v1&quot;</span></span><br><span class="line">[master (root-commit) b6c0387] v1</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 1.js</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span> 2.js</span><br><span class="line"></span><br><span class="line">$ git add 2.js</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;v2&quot;</span></span><br><span class="line">[master b139149] v2</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 2.js</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">touch</span> 3.js</span><br><span class="line"></span><br><span class="line">$ git add 3.js</span><br><span class="line"></span><br><span class="line">$ git commit -m <span class="string">&quot;v3&quot;</span></span><br><span class="line">[master 462c44c] v3</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 3.js</span><br></pre></td></tr></table></figure></li><li>使用 git rebase 命令指定合并记录<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 462c44c7f2ce7f3e0e21f42312c29427c7dad0ad (HEAD -&gt; master)</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Thu Sep 22 14:36:17 2022 +0800</span><br><span class="line"></span><br><span class="line">    v3</span><br><span class="line"></span><br><span class="line">commit b1391492c657fd3d94abd80715c9e76f7a501b50</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Thu Sep 22 14:36:05 2022 +0800</span><br><span class="line"></span><br><span class="line">    v2</span><br><span class="line"></span><br><span class="line">commit b6c038759462e4e6589c934850f78b421906531f</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Thu Sep 22 14:35:44 2022 +0800</span><br><span class="line"></span><br><span class="line">    v1</span><br><span class="line"></span><br><span class="line">$ git rebase -i b6c038759462e4e6589c934850f78b421906531f</span><br></pre></td></tr></table></figure></li><li>跳转到 vim 编辑界面<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pick b139149 v2</span><br><span class="line">pick 462c44c v3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase b6c0387..462c44c onto b6c0387 (2 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit&#x27;s</span></span><br><span class="line"><span class="comment"># .       message (or the oneline, if no original merge commit was</span></span><br><span class="line"><span class="comment"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>修改并 <code>esc + :wq</code> 保存：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">pick b139149 v2</span><br><span class="line">s 462c44c v3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Rebase b6c0387..462c44c onto b6c0387 (2 commands)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Commands:</span></span><br><span class="line"><span class="comment"># p, pick &lt;commit&gt; = use commit</span></span><br><span class="line"><span class="comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span></span><br><span class="line"><span class="comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span></span><br><span class="line"><span class="comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span></span><br><span class="line"><span class="comment"># f, fixup &lt;commit&gt; = like &quot;squash&quot;, but discard this commit&#x27;s log message</span></span><br><span class="line"><span class="comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="comment"># b, break = stop here (continue rebase later with &#x27;git rebase --continue&#x27;)</span></span><br><span class="line"><span class="comment"># d, drop &lt;commit&gt; = remove commit</span></span><br><span class="line"><span class="comment"># l, label &lt;label&gt; = label current HEAD with a name</span></span><br><span class="line"><span class="comment"># t, reset &lt;label&gt; = reset HEAD to a label</span></span><br><span class="line"><span class="comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span></span><br><span class="line"><span class="comment"># .       create a merge commit using the original merge commit&#x27;s</span></span><br><span class="line"><span class="comment"># .       message (or the oneline, if no original merge commit was</span></span><br><span class="line"><span class="comment"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure></li><li>保存后跳转到编写提交信息窗口<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 2 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">v2</span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the commit message #2:</span></span><br><span class="line"></span><br><span class="line">v3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Thu Sep 22 14:36:05 2022 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto b6c0387</span></span><br><span class="line"><span class="comment"># Last commands done (2 commands done):</span></span><br><span class="line"><span class="comment">#    pick b139149 v2</span></span><br><span class="line"><span class="comment">#    squash 462c44c v3</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;master&#x27; on &#x27;b6c0387&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   2.js</span></span><br><span class="line"><span class="comment">#       new file:   3.js</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>编写提交信息 :<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a combination of 2 commits.</span></span><br><span class="line"><span class="comment"># This is the 1st commit message:</span></span><br><span class="line"></span><br><span class="line">v2 &amp; v3</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please enter the commit message for your changes. Lines starting</span></span><br><span class="line"><span class="comment"># with &#x27;#&#x27; will be ignored, and an empty message aborts the commit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Date:      Thu Sep 22 14:36:05 2022 +0800</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># interactive rebase in progress; onto b6c0387</span></span><br><span class="line"><span class="comment"># Last commands done (2 commands done):</span></span><br><span class="line"><span class="comment">#    pick b139149 v2</span></span><br><span class="line"><span class="comment">#    squash 462c44c v3</span></span><br><span class="line"><span class="comment"># No commands remaining.</span></span><br><span class="line"><span class="comment"># You are currently rebasing branch &#x27;master&#x27; on &#x27;b6c0387&#x27;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#       new file:   2.js</span></span><br><span class="line"><span class="comment">#       new file:   3.js</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure></li><li>变基完成！v2 和 v3 合并成一条记录：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit a3edd69fcfb5b7fe6a58017330791a437576033e (HEAD -&gt; master)</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Thu Sep 22 14:36:05 2022 +0800</span><br><span class="line"></span><br><span class="line">    v2 &amp; v3</span><br><span class="line"></span><br><span class="line">commit b6c038759462e4e6589c934850f78b421906531f</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Thu Sep 22 14:35:44 2022 +0800</span><br><span class="line"></span><br><span class="line">    v1</span><br></pre></td></tr></table></figure></li></ol><p>注意：合并记录建议<strong>不要合并已经push到远程的记录</strong></p><h3 id="场景二：解决：多分枝合并产生分叉"><a href="#场景二：解决：多分枝合并产生分叉" class="headerlink" title="场景二：解决：多分枝合并产生分叉"></a>场景二：解决：多分枝合并产生分叉</h3><p>每次合并再 push 会让分支产生分叉，结构看上去很乱。<code>git rebase</code> 命令也可以将分叉提交历史整理成直线</p><p>语法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase &lt;分支名称&gt;</span><br></pre></td></tr></table></figure><p>场景演示：</p><p>目前有两个分支，master 和 dev，现在他们需要合并且不产生分叉</p><p>master 和 dev 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master 分支</span></span><br><span class="line">Laity@LAPTOP-H514R4JD MINGW64 /e/DevTools/Git/GitRebase (master)</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">1.js  2.js  3.js  master1.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># dev分支</span></span><br><span class="line">Laity@LAPTOP-H514R4JD MINGW64 /e/DevTools/Git/GitRebase (dev)</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">1.js  2.js  3.js  dev1.js</span><br></pre></td></tr></table></figure><ol><li>切换到 dev 分支，执行 <code>git rebase master</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git rebase master</span><br><span class="line">First, rewinding <span class="built_in">head</span> to replay your work on top of it...</span><br><span class="line">Applying: dev1</span><br></pre></td></tr></table></figure></li><li>切换到 master 分支，执行 <code>git merge dev</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating e7bc88f..ec10061</span><br><span class="line">Fast-forward</span><br><span class="line"> dev1.js | 0</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 dev1.js</span><br></pre></td></tr></table></figure></li><li>变基完成！master 和 dev 分支合并</li></ol><h3 id="场景三：解决-git-pull-默认产生的分叉"><a href="#场景三：解决-git-pull-默认产生的分叉" class="headerlink" title="场景三：解决 git pull 默认产生的分叉"></a>场景三：解决 git pull 默认产生的分叉</h3><p>当使用 <code>git pull</code> 命令从远程仓库拉取代码的时候，会默认与本地版本合并，会产生一个分叉。</p><p>解决方法：将 <code>git pull</code> 命令替换成 <code>git fetch</code> 和 <code>git rebase</code></p><p>语法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch origin 分支名称</span><br><span class="line">$ git rebase origin/分支名称</span><br></pre></td></tr></table></figure><h3 id="补充：git-rebase-冲突时解决方案"><a href="#补充：git-rebase-冲突时解决方案" class="headerlink" title="补充：git rebase 冲突时解决方案"></a>补充：git rebase 冲突时解决方案</h3><ol><li>手动解决冲突</li><li>使用 <code>git rebase --continue</code> 命令继续合并</li></ol><h1 id="Git-标签管理"><a href="#Git-标签管理" class="headerlink" title="Git 标签管理"></a>Git 标签管理</h1><p>tag 就是一个让人容易记住的有意义的名字，它跟某个 commit 绑在一起。</p><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><p>在 Git 中打标签非常简单，首先，切换到需要打标签的分支上，然后，敲命令 <code>git tag &lt;name&gt;</code> 就可以打一个新标签，可以用命令 <code>git tag</code> 查看所有标签（标签不是按时间顺序列出，而是按字母排序的）。</p><p>默认标签是打在<strong>最新提交的 <code>commit</code>（HEAD）</strong> 上的。也可以给过去的某次提交打标签，找到历史提交的 <code>commit id</code> ，然后打上就可以了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询历史提交的 commit id</span></span><br><span class="line">$ git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给指定 commit id 打标签</span></span><br><span class="line">$ git tag &lt;name&gt; &lt;commit <span class="built_in">id</span>&gt;</span><br></pre></td></tr></table></figure><p>可以用 <code>git show &lt;tagname&gt;</code> 查看某个标签信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ git show v1.0.0</span><br><span class="line">commit 6e7a0b80f7c096b071efe5b0bd4f8ff4e812eed3 (HEAD -&gt; main, tag: v1.0.0, origin/main)</span><br><span class="line">Author: Frank &lt;frank000908@gmail.com&gt;</span><br><span class="line">Date:   Sun Sep 18 23:22:33 2022 +0800</span><br><span class="line"></span><br><span class="line">    v1.0.0</span><br></pre></td></tr></table></figure><p>还可以创建<strong>带有说明的标签</strong>，用 <code>-a</code> 指定标签名，<code>-m</code> 指定说明文字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a v0.1 -m <span class="string">&quot;version 0.1 released&quot;</span> [commit <span class="built_in">id</span>]</span><br></pre></td></tr></table></figure><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><p><code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签；<br><code>git push origin --tags</code> 可以推送全部未推送过的本地标签；<br><code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签；<br><code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</p><h1 id="Git-自定义"><a href="#Git-自定义" class="headerlink" title="Git 自定义"></a>Git 自定义</h1><h2 id="Beyond-Compare"><a href="#Beyond-Compare" class="headerlink" title="Beyond Compare"></a>Beyond Compare</h2><p>Beyond Compare 是个快速解决冲突的软件</p><ol><li>安装 Beyond Compare</li><li>在 git 中配置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">local</span> merge.tool bc3</span><br><span class="line">git config --<span class="built_in">local</span> mergetool. path <span class="string">&#x27;Beyond Compare 的安装路径&#x27;</span></span><br><span class="line">git config --<span class="built_in">local</span> mergetool.keepBackup <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li>应用 Beyond Compare 解决冲突<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git mergetool</span><br></pre></td></tr></table></figure></li></ol><h2 id="Github-免密登录"><a href="#Github-免密登录" class="headerlink" title="Github 免密登录"></a>Github 免密登录</h2><p>在Github中有三种实现免密登录的方式：</p><ol><li>URL</li><li>SSH 实现（常用）</li><li>Git自动管理凭证</li></ol><h3 id="SSH-实现"><a href="#SSH-实现" class="headerlink" title="SSH 实现"></a>SSH 实现</h3><ol><li>生成公钥和私钥（默认放在 <code>~/.ssh</code> 目录下，<code>id_rsa.pub</code>公钥、<code>id_rsa</code>私钥）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure></li><li>拷贝<strong>公钥</strong>的内容，并设置到github中。</li><li>在git本地中配置ssh地址<br>git remote add origin git@github.com:xxx/xxx.git</li><li>以后使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin &lt;branch name&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Git-显示颜色"><a href="#Git-显示颜色" class="headerlink" title="Git 显示颜色"></a>Git 显示颜色</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p>在Git 工作区的根目录下创建一个特殊的 <code>.gitignore</code> 文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>gitignore 文件模板：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>强制添加被 <code>.gitignore</code> 忽略的文件，可以用 <code>-f</code> 强制添加到Git：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add -f &lt;文件名&gt;</span><br></pre></td></tr></table></figure><p>检查某个文件被 <code>.gitignore</code> 中的哪一行命令所忽略：</p><p>演示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.class    App.class <span class="comment"># Git 告诉我们，.gitignore的第3行规则忽略了该文件</span></span><br></pre></td></tr></table></figure><h2 id="配置别名"><a href="#配置别名" class="headerlink" title="配置别名"></a>配置别名</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global <span class="built_in">alias</span>.&lt;自定义别名&gt; &lt;Git命令&gt;</span><br><span class="line"><span class="comment"># 演示</span></span><br><span class="line">$ git config --global alias.st status</span><br><span class="line">$ git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit&quot;</span></span><br></pre></td></tr></table></figure><p>配置文件：</p><p>每个仓库的Git配置文件都放在 <code>.git/config</code> 文件中：<br>别名就在 <code>[alias]</code> 后面，要删除别名，直接把对应的行删掉即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> .git/config</span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = <span class="literal">false</span></span><br><span class="line">        bare = <span class="literal">false</span></span><br><span class="line">        logallrefupdates = <span class="literal">true</span></span><br><span class="line">        symlinks = <span class="literal">false</span></span><br><span class="line">        ignorecase = <span class="literal">true</span></span><br><span class="line">[remote <span class="string">&quot;origin&quot;</span>]</span><br><span class="line">        url = git@github.com:HaloBoys/LearnGit.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch <span class="string">&quot;main&quot;</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br><span class="line">[branch <span class="string">&quot;dev&quot;</span>]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/dev</span><br><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">        lg = <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --abbrev-commit</span><br></pre></td></tr></table></figure><h1 id="Git-命令速查"><a href="#Git-命令速查" class="headerlink" title="Git 命令速查"></a>Git 命令速查</h1><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td><strong>配置</strong></td></tr><tr><td>git init</td><td>新建一个Git代码库</td></tr><tr><td>git clone [url]</td><td>下载一个项目和它的整个代码历史</td></tr><tr><td>git config —list</td><td>显示当前的Git配置</td></tr><tr><td>git config [—global] user.name “[name]”</td><td>设置提交代码时的用户信息</td></tr><tr><td>git config [—global] user.email “[email address]”</td><td>设置提交代码时的用户信息</td></tr><tr><td><strong>增加/删除文件</strong></td></tr><tr><td>git add .</td><td>添加当前目录的所有文件到暂存区</td></tr><tr><td>git add [file1] [file2] …</td><td>添加指定文件到暂存区</td></tr><tr><td>git add [dir]</td><td>添加指定目录到暂存区，包括子目录</td></tr><tr><td>git rm [file1] [file2] …</td><td>删除工作区文件，并且将这次删除放入暂存区</td></tr><tr><td><strong>代码提交</strong></td></tr><tr><td>git commit -m [message]</td><td>提交暂存区到仓库区</td></tr><tr><td>git commit [file1] [file2] … -m [message]</td><td>提交暂存区的指定文件到仓库区</td></tr><tr><td>git commit -v</td><td>提交时显示所有diff信息</td></tr><tr><td><strong>分支</strong></td></tr><tr><td>git branch</td><td>列出所有本地分支</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch -a</td><td>列出所有本地分支和远程分支</td></tr><tr><td>git branch [branch-name]</td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td>git checkout -b [branch]</td><td>新建一个分支，并切换到该分支</td></tr><tr><td>git checkout -</td><td>切换到上一个分支</td></tr><tr><td>git merge [branch]</td><td>合并指定分支到当前分支</td></tr><tr><td>git cherry-pick [commit]</td><td>选择一个commit，合并进当前分支</td></tr><tr><td>git branch -d [branch-name]</td><td>删除分支</td></tr><tr><td>git push origin —delete [branch-name]</td><td>删除远程分支</td></tr><tr><td><strong>标签</strong></td></tr><tr><td>git tag</td><td>列出所有tag</td></tr><tr><td>git tag [tag]</td><td>新建一个tag在当前commit</td></tr><tr><td>git tag [tag] [commit]</td><td>新建一个tag在指定commit</td></tr><tr><td>git tag -d [tag]</td><td>删除本地tag</td></tr><tr><td>git push origin :refs/tags/[tagName]</td><td>删除远程tag</td></tr><tr><td>git show [tag]</td><td>查看tag信息</td></tr><tr><td>git push [remote] [tag]</td><td>提交指定tag</td></tr><tr><td>git push [remote] —tags</td><td>提交所有tag</td></tr><tr><td>git checkout -b [branch] [tag]</td><td>新建一个分支，指向某个tag</td></tr><tr><td><strong>查看信息</strong></td></tr><tr><td>git status</td><td>显示有变更的文件</td></tr><tr><td>git log</td><td>显示当前分支的版本历史</td></tr><tr><td>git log —stat</td><td>显示commit历史，以及每次commit发生变更的文件</td></tr><tr><td>git log -S [keyword]</td><td>搜索提交历史，根据关键词</td></tr><tr><td>git log -p [file]</td><td>显示指定文件相关的每一次diff</td></tr><tr><td>git log -5 —pretty —oneline</td><td>显示过去5次提交</td></tr><tr><td>git shortlog -sn</td><td>显示所有提交过的用户，按提交次数排序</td></tr><tr><td>git blame [file]</td><td>显示指定文件是什么人在什么时间修改过</td></tr><tr><td>git diff</td><td>显示暂存区和工作区的差异</td></tr><tr><td>git diff —shortstat “@{0 day ago}”</td><td>显示今天你写了多少行代码</td></tr><tr><td>git reflog</td><td>显示当前分支的最近几次提交</td></tr><tr><td><strong>远程同步</strong></td></tr><tr><td>git fetch [remote]</td><td>下载远程仓库的所有变动</td></tr><tr><td>git remote -v</td><td>显示所有远程仓库</td></tr><tr><td>git remote show [remote]</td><td>显示某个远程仓库的信息</td></tr><tr><td>git remote add [shortname] [url]</td><td>增加一个新的远程仓库，并命名</td></tr><tr><td>git pull [remote] [branch]</td><td>取回远程仓库的变化，并与本地分支合并</td></tr><tr><td>git push [remote] [branch]</td><td>上传本地指定分支到远程仓库</td></tr><tr><td>git push [remote] —force</td><td>强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td>git push [remote] —all</td><td>推送所有分支到远程仓库</td></tr><tr><td><strong>撤销</strong></td></tr><tr><td>git checkout .</td><td>恢复暂存区的所有文件到工作区</td></tr><tr><td>git checkout [file]</td><td>恢复暂存区的指定文件到工作区</td></tr><tr><td>git checkout [commit] [file]</td><td>恢复某个commit的指定文件到暂存区和工作区</td></tr><tr><td>git reset [file]</td><td>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</td></tr><tr><td>git reset —hard</td><td>重置暂存区与工作区，与上一次commit保持一致</td></tr><tr><td>git reset [commit]</td><td>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</td></tr><tr><td>git reset —hard [commit]</td><td>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</td></tr><tr><td>git reset —keep [commit]</td><td>重置当前HEAD为指定commit，但保持暂存区和工作区不变</td></tr><tr><td>git revert [commit]</td><td>新建一个commit，用来撤销指定commit</td></tr><tr><td>git stash</td><td>暂时将未提交的变化移除，稍后再移入</td></tr></tbody></table></div><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><div class='checkbox green'><input type="checkbox" />            <p>git 解决冲突</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>回退版本</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>多人协作的流程</p>            </div>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>云端同步存储</title>
      <link href="/2022/09/162022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E4%BA%91%E5%AD%98%E5%82%A8_%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%AD%98%E5%82%A8/f26f5ee8/"/>
      <url>/2022/09/162022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E4%BA%91%E5%AD%98%E5%82%A8_%E4%BA%91%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%AD%98%E5%82%A8/f26f5ee8/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><p>通过网盘，可以在互联网上轻松地存储、访问和保护数据，因此网盘又称网络硬盘、网络磁盘、网络空间、云端硬盘，云存储等，它可以取代即时通信软件，无需双方同时在线，亦能以更快速度将文件发送，可以存储机密及重要资料文件，以防因电脑故障或盗窃而外泄丢失，可以把文件存储于网上，方便随时随地下载使用，犹如随身携带硬盘。</p><h1 id="三方云端存储"><a href="#三方云端存储" class="headerlink" title="三方云端存储"></a>三方云端存储</h1><ol><li>DropBox</li><li>OneDrive</li><li>Google Drive</li><li>iCloud</li><li>Amazon Cloud Drive</li><li>pCloud</li></ol><h2 id="DropBox"><a href="#DropBox" class="headerlink" title="DropBox"></a>DropBox</h2><p><a href="https://www.dropbox.com/">Dropbox</a> 是适用所有的文件的强大在线存储服务，包括照片、视频、大容量 CAD 文件以及 PPT 演示文稿。Dropbox 提供一个中央存储中心，用于在线文件存储、文件共享和同步。</p><p>Dropbox 免费用户提供2GB容量，可邀请他人加入获得额外空间。</p><p>用户可以通过Dropbox桌面应用软件同步到云端，也可以通过网页浏览器来手工上传文件。支持恢复历史纪录，即使文件被删，也可以从任何一个同步计算机中得以恢复。用户可通过版本控制使得多人参与编辑、发布文件，版本纪录历史仅限于30天，付费可以实现无限版本纪录。</p><p>Dropbox同步采用SSL传输数据，而存储则通过AES-256进行加密。</p><p>作为老牌的云存储工具，Dropbox 在同步、分享方面做得很好，支持的网站、应用数最多，还提供了深度整合系统的本地应用，使用极为方便。除此之外，付费用户还可以享受更多的高级功能，例如智能同步、全文搜索等。</p><h2 id="OneDrive"><a href="#OneDrive" class="headerlink" title="OneDrive"></a>OneDrive</h2><p>Microsoft OneDrive 是微软公司所推出的网络硬盘及云端服务。用户可以上传他们的文件到网络服务器上，并且透过网络浏览器来浏览那些文件。更可直接编辑和查看 Microsoft Office 文件。同时推出同步上传软件，可于电脑直接访问和同步文件。</p><p>另外，OneDrive 并允许用户透过 Microsoft Account 来限制不同的用户访问文件，允许用户决定是否将文件与公众分享，或是限于联系菜单上的人才能访问；而对所有人公开的文件则不需要Microsoft Account即可访问。也就是说，OneDrive允许用户保持私人文件，与好友共享文件，或者把文件共享给其他用户。</p><p>Office 365订阅用户可获得1TB储存空间。免费用户则有5GB储存空间，用户除了免费空间还可以邀请新用户加入 OneDrive ，你和被邀请者都可以获得0.5GB额外的储存空间，最高10GB。用户可选择付款扩展容量。OneDrive现在支持100GB的文件。</p><h2 id="Google-Drive"><a href="#Google-Drive" class="headerlink" title="Google Drive"></a>Google Drive</h2><p>Google Drive，称为谷歌云端硬盘，是互联网巨头公司谷歌（Google）在世界范围内推出的一个在线同步存储服务。</p><p>每个 Google 帐号都提供 15 GB 的免费存储空间。该存储空间可供 Google 云端硬盘、Gmail 和 Google 相册共用，因此可以存储文件、保存电子邮件附件以及备份照片和视频。如果需要超过 15 GB 的存储空间，可以升级到 Google One，以付费形式把存储空间扩展到最大30TB。</p><p>如果你有谷歌账户的话，你就可以直接使用谷歌网盘了，默认提供15G免费空间，如果是教育版，则是不限空间。如果你是用来备份照片和影片，还可以使用google photos，它提供不限空间的备份。</p><p>Google Drive提供类似Dropbox的目录管理，在Google Drive中称为Folder location，可同步上传文件到Google Drive中。Google Drive不支持微软Office Online网页版在线编辑，另设Google文档，文件协同编辑可使用。但支持微软Office应用程序版在线编辑。</p><p>Google Drive可以让用户管理云存储，文件共享和协同编辑。所以Google Drive 不仅是一个文件存储网盘，还可以作为工作办公用的同步盘。Google Drive公开共享的文件可以被网络搜索引擎搜索到。云端硬盘能够识别图片中的物体和已扫描文档中的文字。因此，只需搜索某个字词，例如“艾菲尔铁塔”，即可查找到包含该字词的文档以及实物图片。</p><h2 id="iCloud"><a href="#iCloud" class="headerlink" title="iCloud"></a>iCloud</h2><p>iCloud是苹果公司所提供的在线同步存储服务和云端计算服务。相较于Google和亚马逊公司的云端音乐服务，苹果认为iCloud功能更强大，最主要是有“扫描配对”（scan and match）功能。iCloud服务让用户可在任何设备上访问先前从iTunes购买的音乐。iOS 5 的多项更新也是为集成iCloud 而设置。</p><p>iCloud初始空间有5GB，可以购买存储空间。用户能在iCloud中存储音乐、照片、App资料、文件、联系人和日历等，并将无线推送到用户所有支持iCloud同步的设备上，而不用使用连接线来同步。iCloud现在可以存储第三方应用的数据并同步苹果设备上。</p><h2 id="Amazon-Cloud-Drive"><a href="#Amazon-Cloud-Drive" class="headerlink" title="Amazon Cloud Drive"></a>Amazon Cloud Drive</h2><p><a href="https://www.amazon.com/clouddrive">Amazon Cloud Drive</a>，是Amazon旗下的个人网络硬盘服务。</p><p>Amazon Cloud Drive提供图片、文档、视频等各种内容的存储，并开发有网页版、Windows、Android和iOS设备的客户端，不同客户端之间可同步存储内容。Android和iOS系统的客户端命名为Cloud Drive Photos，仅可显示、存储、同步图片和视频内容。</p><p>Amazon Cloud Drive初始免费容量为5GB，用户可按年为单位，每GB0.5美元的价格，选择将容量扩充至20GB、50GB、100GB、200GB、500GB、1000GB的扩容计划。Fire Phone和Amazon Prime用户拥有无限免费容量的照片存储空间。</p><p>Amazon不同国家站点的Cloud Drive系统互相独立，所有存储数据均使用Amazon S3服务，储存和传输过程则进行AES-128的TLS加密。</p><p>Amazon Cloud Drive储存Kindle用户通过电子邮件发送的个人文档。个人文档统一储存在“我的发送至Kindle文档”文件夹中，并会占用Cloud Drive容量。用户在亚马逊网站上购买的Kindle电子书则储存于独立空间（Kindle图书馆），与Cloud Drive无关。</p><h2 id="pCloud"><a href="#pCloud" class="headerlink" title="pCloud"></a>pCloud</h2><p><a href="https://www.pcloud.com/">pCloud</a>网盘也是目前最热门的网盘应用之一，这是一款国外的云端空间储存软件，其具备了免费、稳定、上传下载效率高、空间大等诸多特点，而且支持通过虚拟硬碟来保护你的重要数据，因而广受用户的喜爱。</p><p>pCloud是一家注册于瑞士的公司，并且由思想前卫的年轻团队所组成，旨于提供全球企业与个人用户一个全方位、易于使用的云端空间储存服务。pCloud以最终使用者为技术开发导向，使他们有别于市场上其它的云端空间储存服务，因为市场上有的过于技术性而不够人性化，或是功能不够全面，令使用者无法完全享有他们对于云端储存空间所需要的服务。</p><p>pCloud非常注重用户的个人资料隐私。透过 pCloud 的资料区域选项来决定资料的存放位置就可以看出，当你注册 pCloud 时，即可选择存放档案和资料的区域 - 美国（德州达拉斯）或欧盟（卢森堡）。pCloud 所选中的资料中心一律经过严谨的风险评估，以确保其最高品质和可靠性。</p><p>如果你使用云端空间储存服务已有一段时间了，那么很可能已遇到不少限制情况，如上传档案大小限制或者是上传或下载档案速度限制，但是在pCloud，提供使用者无上限的数据服务！文件大小无限制，可在pCloud直接上传任何类型的文件（且大小不受限制）到帐户，甚至可以在云端存放HD影片集。上传与下载速度无限制，上传和下载档案的速度完全取决于网路服务提供商，不管你是免费版或升级版用户，都不会限制。</p><p>pCloud初始提供10G容量，50G月流量的免费网盘，可通过做任务升级到20G容量，再多就需要使用它的收费版本了。pCloud的主要特点有：支持繁体中文、外链分享、加密链接、远程离线传输、可在线播放视频和音乐、可共享文件夹的上传或下载权限，可同步其它网盘内容到pCloud，连接至 OneDrive 可增加至 50G 永久空间。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 云存储 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端常用组件库</title>
      <link href="/2022/09/142022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%BA%93/10d28195/"/>
      <url>/2022/09/142022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6%E5%BA%93/10d28195/</url>
      
        <content type="html"><![CDATA[<h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><ol><li>Vant <a href="https://youzan.github.io/vant">https://youzan.github.io/vant</a></li><li>Cube UI <a href="https://didi.github.io/cube-ui/#/zh-CN">https://didi.github.io/cube-ui/#/zh-CN</a></li><li>Mint UI <a href="https://mint-ui.github.io/#!/zh-cn">https://mint-ui.github.io/#!/zh-cn</a></li></ol><h1 id="PC端"><a href="#PC端" class="headerlink" title="PC端"></a>PC端</h1><ol><li>Element UI <a href="https://element.eleme.io/#/zh-CN">https://element.eleme.io/#/zh-CN</a></li><li>IView UI <a href="https://www.iviewui.com">https://www.iviewui.com</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 前端 </category>
          
          <category> 手册 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Router</title>
      <link href="/2022/09/082022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_VueRouter/976189ad/"/>
      <url>/2022/09/082022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_VueRouter/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p><p>前端路由：key是路径，value是组件。</p><p>Vue Router 是 vue 的一个插件库，专门用来实现 SPA 应用。</p><h2 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h2><ul><li>单页web应用（single page web application, SPA）。</li><li>整个应用只有一个完整的页面。</li><li>点击页面中的导航链接不会刷新页面，只会做页面的<code>局部更新</code>。</li><li>数据需要通过ajax请求获取。</li></ul><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><p>说明: vue2.x 版本需指定安装 vue-router3 版本 <code>npm i vue-router@3</code>（默认安装的是 vue-router4 版本，只能在 vue3.x 中使用）</p><h2 id="安装路由"><a href="#安装路由" class="headerlink" title="安装路由"></a>安装路由</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 <code>main.js</code> 中引入并使用 vue-router</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &#x27;vue&#x27;</span><br><span class="line"><span class="addition">+import VueRouter from &#x27;vue-router&#x27;</span></span><br><span class="line">import App from &#x27;./App.vue&#x27;</span><br><span class="line"></span><br><span class="line"><span class="addition">+Vue.use(VueRouter);</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = false</span><br><span class="line"></span><br><span class="line"><span class="addition">+import router from &#x27;./router/index&#x27;</span></span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  render: h =&gt; h(App),</span><br><span class="line"><span class="addition">+  router</span></span><br><span class="line">&#125;).$mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><p>创建：<code>router&gt;index.js</code> 编写路由匹配规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/test&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Test</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>配置完成之后就可以在组件中使用了：</p><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;xxx&quot; to=&quot;/path&quot;&gt;xxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>指定展示位置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li><code>通过切换，隐藏了的路由组件，默认是被销毁掉的</code>，需要的时候再去挂载。(keep-alive)</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个 <code>router</code> ，可以通过组件的<code>$router</code>属性获取到。</li></ol><h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="路由跳转"><a href="#路由跳转" class="headerlink" title="路由跳转"></a>路由跳转</h2><h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><p>vue 中没有使用常规的 <code>a</code> 标签，而是使用一个自定义组件 <code>router-link</code> 来创建链接。这使得 Vue Router 可以在不重新加载页面的情况下更改 URL，处理 URL 的生成以及编码。</p><div class="table-container"><table><thead><tr><th>router-link Props</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>to</td><td>RouteLocationRaw</td><td>表示目标路由的链接。</td></tr><tr><td>replace</td><td>boolean（默认false）</td><td>控制路由跳转时操作浏览器历史记录的模式。</td></tr><tr><td>active-class</td><td>string</td><td>链接激活时，应用于渲染的 <code>&lt;a&gt;</code> 的 class</td></tr></tbody></table></div><h3 id="router-push-replace-go-编程式导航"><a href="#router-push-replace-go-编程式导航" class="headerlink" title="$router.push | replace | go 编程式导航"></a>$router.push | replace | go 编程式导航</h3><p>在 Vue 实例中，你可以通过 <code>$router</code> 访问路由实例，调用相关方法。</p><h4 id="router-push"><a href="#router-push" class="headerlink" title="router.push"></a>router.push</h4><p>push 方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由，并加上参数，让路由建立 url。注意 `params` 不能与 `path` 一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">username</span>: <span class="string">&#x27;eduardo&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带 hash，结果是 /about#team</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">hash</span>: <span class="string">&#x27;#team&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="router-replace"><a href="#router-replace" class="headerlink" title="router.replace"></a>router.replace</h4><p><code>this.$router.replace</code> 的作用类似于 router.push，唯一不同的是，它在导航时不会向 history 添加新记录。</p><h4 id="router-go"><a href="#router-go" class="headerlink" title="router.go"></a>router.go</h4><p>go 方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似 <code>window.history.go(n)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在浏览器记录中前进一步，等同于 history.forward()</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后退一步记录，等同于 history.back()</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 前进 3 步记录</span></span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 history 记录不够用，那就默默地失败呗</span></span><br><span class="line">router.<span class="title function_">go</span>(-<span class="number">100</span>)</span><br><span class="line">router.<span class="title function_">go</span>(<span class="number">100</span>)</span><br></pre></td></tr></table></figure><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>在 <code>router&gt;index.js</code> 配置路由规则，使用 <code>children</code> 配置项：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Test</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/test&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Test</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;<span class="attr">path</span>: <span class="string">&#x27;childtest&#x27;</span>,<span class="attr">component</span>: <span class="title class_">ChildTest</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/test/childtest&quot;&gt;Test&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>嵌套路由中直接写路径名称，不用写 <code>/</code></li><li>使用 <code>router-link</code> 标签使用时，路径需要写完整的路径（即带上父级路径）</li></ol><h2 id="命名路由"><a href="#命名路由" class="headerlink" title="命名路由"></a>命名路由</h2><p>命名路由可以简化路由的跳转</p><p>在 <code>routes</code> 配置中给某个路由使用 <code>name</code> 属性设置名称：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">User</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简化跳转：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/demo/test/welcome&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;user&#x27;&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数(对象写法) --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">:to</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">name:&#x27;user&#x27;,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">query:&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">   id:xxx,</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">       name:&#x27;xxx&#x27;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="路由的-query-参数"><a href="#路由的-query-参数" class="headerlink" title="路由的 query 参数"></a>路由的 query 参数</h2><p>可以在路由路径后面通过：<code>?prop1=$&#123;obj.xxx&#125;&amp;prop2=$&#123;obj.xxx&#125;</code> 的方式，向组件中传递查询参数：<br>传递过去的参数可以通过：<code>$route.query.propsx</code> 的方式接收</p><p>传递参数：（有两种写法）</p><ol><li>字符串写法</li><li>对象写法</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 字符串写法: 跳转并携带query参数</span><br><span class="line">&lt;router-link :to=&quot;/path/childpath/?prop1=$&#123;obj.xxx&#125;&amp;prop2=$&#123;obj.xxx&#125;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">// 对象写法: 跳转并携带query参数</span><br><span class="line">&lt;router-link</span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">path:&#x27;/path/childpath&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">   prop1: obj.xxx,</span><br><span class="line">       prop2: obj.xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><p>组件中接收参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$route.query.propsx</span><br></pre></td></tr></table></figure><h2 id="路由的-params-参数"><a href="#路由的-params-参数" class="headerlink" title="路由的 params 参数"></a>路由的 params 参数</h2><p>可以在路由路径后面通过：<code>/$&#123;obj.xxx&#125;/$&#123;obj.xxx&#125;</code> 的方式，向组件中传递查询参数：（<code>若使用对象写法，必须使用命名路由</code>）<br>传递过去的参数可以通过：<code>$route.params.xxx</code> 的方式接收</p><p>传递 params 参数<code>需要先在路由配置中进行占位</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="comment">// 传递 params 参数需要在路径配置后加上：/:xxx 进行占位</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/xxx/:xxx&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">XXX</span>,</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 字符串写法: 跳转并携带params参数 --&gt; </span><br><span class="line">&lt;router-link</span><br><span class="line"> :to=&quot;`/path/childpath/$&#123;obj.xxx&#125;/$&#123;obj.xxx&#125;`&quot;</span><br><span class="line"> &gt;跳转&lt;/router-link</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 对象写法: 跳转并携带params参数（特别注意：不能使用path配置项，必须使用命名路由配置。） --&gt;</span><br><span class="line"></span><br><span class="line">&lt;router-link</span><br><span class="line"> :to=&quot;&#123;</span><br><span class="line">   name: &#x27;xxx&#x27;,</span><br><span class="line">   params: &#123;</span><br><span class="line">     xxx: obj.xxx,</span><br><span class="line">     xxx: obj.xxx,</span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;&quot;</span><br><span class="line"> &gt;跳转&lt;/router-link</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><p>组件中接收参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$route.params.xxx</span><br></pre></td></tr></table></figure><h2 id="路由的-props-配置"><a href="#路由的-props-配置" class="headerlink" title="路由的 props 配置"></a>路由的 props 配置</h2><p>作用：让<code>路由组件</code>更方便的收到参数（简化组件结构中的写法）</p><p>配置步骤：</p><ol><li>在 <code>routes</code> 配置中为指定路由组件添加 <code>props</code> 属性</li><li>在组件 <code>data</code> 中使用 <code>props:[&#39;xxx&#39;,&#39;xxx&#39;]</code> 接收传递过来的属性。</li></ol><p>props 有三种模式：</p><h3 id="布尔模式"><a href="#布尔模式" class="headerlink" title="布尔模式"></a>布尔模式</h3><p>props 被设置为 <code>true</code>，则把路由收到的所有 <code>params</code> 参数通过 props 传给组件（只能传递params）</p><h3 id="对象模式"><a href="#对象模式" class="headerlink" title="对象模式"></a>对象模式</h3><p>props 值为对象，该对象中所有的 <code>key-value</code> 的组合最终都会通过 props 传给组件（当 props 是<code>静态</code>的时候有用。）</p><h3 id="函数模式"><a href="#函数模式" class="headerlink" title="函数模式"></a>函数模式</h3><p>props 值为函数（可以接收到一个 route 形参，这个形参就是 $route），该函数返回的对象中每一组 <code>key-value</code> 都会通过 props 传给组件</p><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router&gt;index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    <span class="attr">children</span>: [&#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">News</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Message</span>,</span><br><span class="line">      <span class="attr">children</span>: [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;xiangqing&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;detail/:id/:name&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Detail</span>,</span><br><span class="line">        <span class="comment">// 1. props值为布尔值：布尔值为true，则把路由收到的所有 params 参数通过 props 传给Detail组件</span></span><br><span class="line">        <span class="comment">// props: true</span></span><br><span class="line">        <span class="comment">// 2. props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件（当 props 是静态的时候有用。）</span></span><br><span class="line">        <span class="comment">// props: &#123;id:&quot;001&quot;,name:&quot;wilson&quot;&#125;</span></span><br><span class="line">        <span class="comment">// 3. props值为函数（可以在形参中接收到$route），该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">        <span class="title function_">props</span>(<span class="params">$route</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>: $route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line">            <span class="attr">name</span>: $route.<span class="property">params</span>.<span class="property">name</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接收：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// Detail.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;消息编号：&#123;&#123; id &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;消息标题：&#123;&#123; name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props:[&#x27;id&#x27;,&#x27;name&#x27;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="keep-alive-缓存路由组件"><a href="#keep-alive-缓存路由组件" class="headerlink" title="keep-alive 缓存路由组件"></a>keep-alive 缓存路由组件</h2><p>作用：让不展示的路由组件保持挂载，不被销毁。<br>默认隐藏了的路由组件，是被<code>销毁</code>掉的，需要的时候再去挂载。当组件中包含表单类元素，切换会导致用户输入内容清空。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=&quot;组件名称&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>补充：</p><ol><li>注意 <code>include=&quot;组件名称&quot;</code>，是组件名称（.vue文件中使用 name 属性定义的名称），而不是 router 中定义的 name 属性</li><li>如果不加 <code>include=&quot;组件名称&quot;</code> （缓存指定组件） 默认是缓存 <code>router-view</code> 标签下所有的组件。</li><li>如果要<code>缓存多个组件</code>可以使用数组的形式：<code>include=&quot;[&#39;组件1&#39;,&#39;组件2&#39;]&quot;</code></li><li><code>keep-alive</code> 标签是加在<code>展示区</code>所在的 <code>router-view</code> 标签上。</li></ol><h2 id="路由生命周期钩子"><a href="#路由生命周期钩子" class="headerlink" title="路由生命周期钩子"></a>路由生命周期钩子</h2><p>路由组件所独有的两个钩子，用于<code>捕获路由组件的激活状态</code><br>应用场景：当路由组件被缓存之后，切换路由就不会被销毁（不会触发 destroy 事件）但是可能需要在切换之后捕获到路由的状态执行某些操作。</p><h3 id="activated"><a href="#activated" class="headerlink" title="activated"></a>activated</h3><p>路由组件被激活时触发</p><h3 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a>deactivated</h3><p>路由组件失活时触发</p><h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;News 组件&lt;/h1&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li&gt;我是news组件中的定时器&#123;&#123; count &#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;News 1&lt;/a&gt; &lt;input type=&quot;text&quot; /&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;News 2&lt;/a&gt; &lt;input type=&quot;text&quot; /&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li&gt;&lt;a href=&quot;#&quot;&gt;News 3&lt;/a&gt; &lt;input type=&quot;text&quot; /&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;News&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      count: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  // created() &#123;</span><br><span class="line">  //   this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">  //     console.log(&quot;@@ news组件中的定时器持续调用中...&quot;);</span><br><span class="line">  //     this.count++;</span><br><span class="line">  //   &#125;, 1000);</span><br><span class="line">  // &#125;,</span><br><span class="line">  // beforeDestroy() &#123;</span><br><span class="line">  //   console.log(&quot;@@ news组件中的定时器被销毁了...&quot;);</span><br><span class="line">  //   clearInterval(this.timer);</span><br><span class="line">  // &#125;,</span><br><span class="line">  activated() &#123;</span><br><span class="line">    console.log(&quot;activated!&quot;);</span><br><span class="line">    this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">      console.log(&quot;@@ 组件中的定时器持续调用中...&quot;);</span><br><span class="line">      this.count++;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">  &#125;,</span><br><span class="line">  deactivated() &#123;</span><br><span class="line">    console.log(&quot;@@ 组件中的定时器被销毁了...&quot;);</span><br><span class="line">    clearInterval(this.timer);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="HTML5-History-模式"><a href="#HTML5-History-模式" class="headerlink" title="HTML5 History 模式"></a>HTML5 History 模式</h2><p>路由器有两种工作模式：</p><ol><li>hash（默认）<ol><li>地址中永远带着#号，不美观 。(<code>#</code> 及其后面的内容就是hash值)</li><li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法。</li><li>hash 值不会包含在 HTTP 请求中，即：<code>hash 值不会带给服务器</code>。</li><li>兼容性较好。</li></ol></li><li>history<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol><p>通过 <code>mode</code> 属性来指定对应的模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  <span class="attr">routes</span>: [...]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h1><h2 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h2><p>导航守卫对路由进行<code>权限控制</code></p><h3 id="全局前置守卫"><a href="#全局前置守卫" class="headerlink" title="全局前置守卫"></a>全局前置守卫</h3><p>全局前置守卫：初始化时执行、<code>每次路由切换前执行</code>。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; ... &#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>守卫方法接收三个参数：</p><div class="table-container"><table><thead><tr><th>守卫方法参数</th><th>描述</th></tr></thead><tbody><tr><td>to: Route</td><td>即将要进入的目标 路由对象</td></tr><tr><td>from: Route</td><td>当前导航正要离开的路由</td></tr><tr><td>next: Function</td><td>resolve 钩子</td></tr></tbody></table></div><p>代码演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  //判断当前路由是否需要进行权限控制</span><br><span class="line">  if (to.meta.requiresAuth) &#123;</span><br><span class="line">    //权限控制的具体规则 </span><br><span class="line">    if (localStorage.getItem(&#x27;xxx&#x27;) === &#x27;xxx&#x27;) &#123;</span><br><span class="line">      next()</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      alert(&#x27;暂无权限查看&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next() //放行</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局后置钩子"><a href="#全局后置钩子" class="headerlink" title="全局后置钩子"></a>全局后置钩子</h3><p>全局后置钩子：初始化时执行、<code>每次路由切换后执行</code>。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>代码演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">router.afterEach((to, from) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;afterEach&#x27;, to, from)</span><br><span class="line">  if (to.name) &#123;</span><br><span class="line">    document.title = to.name</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    document.title = &#x27;xxx&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>修改文档的 title</li></ol><h3 id="路由独享守卫"><a href="#路由独享守卫" class="headerlink" title="路由独享守卫"></a>路由独享守卫</h3><p>路由独享守卫是单个路由独有的配置：可以在路由配置上直接定义 <code>beforeEnter</code> 守卫：(与全局前置守卫的方法参数是一样的)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局解析守卫"><a href="#全局解析守卫" class="headerlink" title="全局解析守卫"></a>全局解析守卫</h3><blockquote><p>2.5.0 新增</p></blockquote><p>在 2.5.0+ 可以用 router.beforeResolve 注册一个全局守卫。<br>这和 router.beforeEach 类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。</p><h3 id="组件内的守卫"><a href="#组件内的守卫" class="headerlink" title="组件内的守卫"></a>组件内的守卫</h3><p>可以在路由组件内直接定义以下路由导航守卫：</p><ul><li>beforeRouteEnter</li><li>beforeRouteUpdate (2.2 新增)</li><li>beforeRouteLeave</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="路由元信息"><a href="#路由元信息" class="headerlink" title="路由元信息"></a>路由元信息</h2><p>定义路由的时候可以配置 <code>meta</code> 字段</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Bar</span>,</span><br><span class="line">          <span class="comment">// a meta field</span></span><br><span class="line">          <span class="attr">meta</span>: &#123; <span class="attr">requiresAuth</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="路由相关面试"><a href="#路由相关面试" class="headerlink" title="路由相关面试"></a>路由相关面试</h1><h2 id="路由跳转有几种方式？"><a href="#路由跳转有几种方式？" class="headerlink" title="路由跳转有几种方式？"></a>路由跳转有几种方式？</h2><ol><li>声明式导航：<code>router-link</code> (务必要有to属性）,可以实现路由的跳转。</li><li>编程式导航：利用的是组件实例的 <code>$router.push | replace</code> 方法，可以实现路由的跳转。</li></ol><p>编程式导航：声明式导航能做的，编程式导航都能做，但是编程式导航除了可以进行路由跳转，还可以做一些<code>其他的业务逻辑</code>。</p><h2 id="路由传参，参数有几种写法？"><a href="#路由传参，参数有几种写法？" class="headerlink" title="路由传参，参数有几种写法？"></a>路由传参，参数有几种写法？</h2><p>路由传参分为：</p><ol><li>params 参数 (需要先在路由配置中进行占位)</li><li>query 参数</li></ol><p>参数有三种写法：</p><ol><li>普通字符串</li><li>模板字符串</li><li>对象写法（常用，必须使用命名路由）</li></ol><h2 id="路由传递参数（对象写法）path-是否可以结合-params-参数一起使用？"><a href="#路由传递参数（对象写法）path-是否可以结合-params-参数一起使用？" class="headerlink" title="路由传递参数（对象写法）path 是否可以结合 params 参数一起使用？"></a>路由传递参数（对象写法）path 是否可以结合 params 参数一起使用？</h2><p>不可以</p><p>跳转传参的时候，对象的写法可以是 <code>name（命名路由）</code> 或 <code>path</code> 形式。<br>因为传递 params 路由配置中进行占位的原因，<code>所以 path 这种写法不能与 params 一起使用</code>（接收不到参数）</p><h2 id="如何指定-params-参数可传可不传？-配置路由的时候，占位了params参数，但是路由跳转的时候就不传递。"><a href="#如何指定-params-参数可传可不传？-配置路由的时候，占位了params参数，但是路由跳转的时候就不传递。" class="headerlink" title="如何指定 params 参数可传可不传？(配置路由的时候，占位了params参数，但是路由跳转的时候就不传递。)"></a>如何指定 params 参数可传可不传？(配置路由的时候，占位了params参数，但是路由跳转的时候就不传递。)</h2><p>一般情况下路由要求传递 params 参数，如果不传则 URL 会有问题（缺失路径）</p><p>指定 params 参数可传可不传，需要在配置路由的时候，<code>在占位的后面加上一个问号</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">routes</span>: [&#123;</span><br><span class="line">    <span class="comment">// 占位的后面加上一个问号</span></span><br><span class="line">    <span class="attr">path</span>: <span class="string">&quot;/xxx/:xxx?&quot;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="variable constant_">XXX</span>,</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="params-参数可以传递也可以不传递，但是如果传递是空串，如何解决？"><a href="#params-参数可以传递也可以不传递，但是如果传递是空串，如何解决？" class="headerlink" title="params 参数可以传递也可以不传递，但是如果传递是空串，如何解决？"></a>params 参数可以传递也可以不传递，但是如果传递是空串，如何解决？</h2><p>如果传递是空串，会<code>导致路径缺失</code>的问题，解决方案：</p><p>使用 <code>undefined</code> 解决：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;xxx&quot;</span>,</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="comment">// 添加 || undefined 判断选项，如果前面的值是 &quot;&quot; 则传入 undefined (可以解决路径缺失的问题)</span></span><br><span class="line">    <span class="attr">xxx</span>: <span class="string">&quot;&quot;</span> || <span class="literal">undefined</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由组件能不能传递-props-数据？"><a href="#路由组件能不能传递-props-数据？" class="headerlink" title="路由组件能不能传递 props 数据？"></a>路由组件能不能传递 props 数据？</h2><p>可以</p><p>通过路由组件传递 props 数据<code>一般用于简化组件结构中的写法</code>（如：<code>params 参数：&#123;&#123; $route.params.keyword &#125;&#125;</code>【虽然这种写法不简洁但还是用的多】）有三种写法：</p><ol><li>布尔模式 (props 被设置为 true，则把路由收到的所有 params 参数通过 props 传给组件（只能传递 params）)</li><li>对象模式 (<code>额外</code>给路由组件传递一些 props)</li><li>函数模式 (params 和 query 参数都可以传递)</li></ol><h2 id="编程式导航多次执行报错-（NavigationDuplicated）"><a href="#编程式导航多次执行报错-（NavigationDuplicated）" class="headerlink" title="编程式导航多次执行报错 （NavigationDuplicated）"></a>编程式导航多次执行报错 （NavigationDuplicated）</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220927132514.png" alt="20220927132514"></p><p>原因：vue-router <code>3.1 版本</code> 以后将 $router.push()、 $router.replace() 方法改为了 <code>Promise</code>，假如没有回调函数，错误信息就会交给全局的路由错误处理。</p><p>解决方案：</p><h3 id="降版本"><a href="#降版本" class="headerlink" title="降版本"></a>降版本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router@3.0 -S</span><br></pre></td></tr></table></figure><h3 id="为每个方法增加回调函数（治标不治本）"><a href="#为每个方法增加回调函数（治标不治本）" class="headerlink" title="为每个方法增加回调函数（治标不治本）"></a>为每个方法增加回调函数（治标不治本）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/xxxx&#x27;</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;err&#125;);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/xxxx&#x27;</span>).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;err&#125;);</span><br></pre></td></tr></table></figure><h3 id="重写方法-推荐"><a href="#重写方法-推荐" class="headerlink" title="重写方法(推荐)"></a>重写方法(推荐)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router &gt; index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> originalPush = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> <span class="comment">// 保存一份原来的方法</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span> <span class="title function_">push</span>(<span class="params">location, onResolve, onReject</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (onResolve || onReject) <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, onResolve, onReject)</span><br><span class="line">  <span class="keyword">return</span> originalPush.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> originalReplace = <span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span> <span class="comment">// 保存一份原来的方法</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">VueRouter</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">replace</span> = <span class="keyword">function</span> <span class="title function_">repalce</span>(<span class="params">location, onResolve, onReject</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (onResolve || onReject) <span class="keyword">return</span> originalReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location, onResolve, onReject)</span><br><span class="line">  <span class="keyword">return</span> originalReplace.<span class="title function_">call</span>(<span class="variable language_">this</span>, location).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TEMP"><a href="#TEMP" class="headerlink" title="TEMP"></a>TEMP</h1><ol><li>解构赋值的多层写法</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex</title>
      <link href="/2022/09/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vuex/976189ad/"/>
      <url>/2022/09/062022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vuex/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Vuex官方文档: <a href="https://vuex.vuejs.org/">https://vuex.vuejs.org/</a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>在 Vue 中实现集中式状态（数据）管理的一个 <strong>Vue插件</strong>。<br>对 vue应用中多个组件的共享状态进行<strong>集中式</strong>的管理（读/写），也是一种组件间通信的方式，且适用于<strong>任意组件间通信</strong>。</p><h2 id="多组件共享数据对比"><a href="#多组件共享数据对比" class="headerlink" title="多组件共享数据对比"></a>多组件共享数据对比</h2><h3 id="全局事件总线实现"><a href="#全局事件总线实现" class="headerlink" title="全局事件总线实现"></a>全局事件总线实现</h3><p>使用全局事件总线可以勉强实现,但是随着组件增多,代码会变得越来越难以维护.</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220907161130.png" alt="20220907161130"></p><h3 id="vuex-实现"><a href="#vuex-实现" class="headerlink" title="vuex 实现"></a>vuex 实现</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220906183018.png" alt="20220906183018"></p><h2 id="Vuex-工作原理"><a href="#Vuex-工作原理" class="headerlink" title="Vuex 工作原理"></a>Vuex 工作原理</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/vuex.png" alt="vuex"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>多个组件共享同一份状态，组件的共享状态<strong>抽取</strong>出来，以一个全局单例模式管理</p><ol><li>多个组件依赖于同一状态</li><li>来自不同组件的<strong>行为</strong>需要变更同一状态</li></ol><h2 id="搭建-vuex-环境"><a href="#搭建-vuex-环境" class="headerlink" title="搭建 vuex 环境"></a>搭建 vuex 环境</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>说明: vue2.x 版本需指定安装 vuex3 版本 <code>npm i vuex@3</code>（默认安装的是 vuex4 版本，只能在 vue3.x 中使用）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vuex</span><br></pre></td></tr></table></figure><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">// 应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">// 准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"><span class="comment">// 相当于计算属性，用于加工 state 中的数据</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="传入-store"><a href="#传入-store" class="headerlink" title="传入 store"></a>传入 store</h3><p>在 <code>main.js</code> 中创建 vm 时传入 <code>store</code> 配置项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入store</span></span><br><span class="line">......</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建vm</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>安装完成后，所有组件实例上都有 <code>$store</code> 属性</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220907173131.png" alt="20220907173131"></p><p><strong>组件</strong>中读取 vuex 中的数据：<code>$store.state.xxx</code><br><strong>组件</strong>中修改 vuex 中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名【方法名建议大写】&#39;,数据)</code>【越过actions】</p><h1 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h1><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>Action 中可以书写业务逻辑，但是不能修改 state</p><h2 id="Mutation"><a href="#Mutation" class="headerlink" title="Mutation"></a>Mutation</h2><h2 id="Getter"><a href="#Getter" class="headerlink" title="Getter"></a>Getter</h2><p>当 <code>state</code> 中的数据需要经过加工后再使用时，可以使用 <code>getters</code> 加工。（可以理解为计算属性）。</p><p>在 <code>store.js</code> 中追加 <code>getters</code> 配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .....</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="comment">// state：形参可以接收到 `当前` 仓库中的 state</span></span><br><span class="line">    方法名称(state)&#123;</span><br><span class="line">        <span class="keyword">return</span> 对state的处理逻辑;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在组件中使用：<code>$store.getters.方法名称</code> 来获取 getters 加工后的结果。(可以在任意组件中<strong>复用</strong>)</p><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p>目的：让代码更好维护，让多种数据分类更加明确。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>, <span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123;...&#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    moduleA,</span><br><span class="line">    moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>在对应模块中开启命名空间 <code>namespaced: true</code> 后，可以直接在组件中读取 <code>state</code> 数据：</p><p>开启命名空间后，组件中读取 <code>state</code> 数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方式一：自己直接读取</span><br><span class="line">this.$store.state.moduleB.state中的数据名称</span><br><span class="line"></span><br><span class="line">//方式二：借助 mapState 读取：</span><br><span class="line">...mapState(&#x27;moduleA&#x27;,[&#x27;state中的数据名称&#x27;]),</span><br></pre></td></tr></table></figure><p>开启命名空间后，组件中读取 <code>getters</code> 数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方式一：自己直接读取</span><br><span class="line">this.$store.getters[&#x27;moduleB/moduleB中的getter&#x27;]</span><br><span class="line"></span><br><span class="line">//方式二：借助 mapGetters读取：</span><br><span class="line">...mapGetters(&#x27;moduleA&#x27;,[&#x27;moduleA中的getter&#x27;])</span><br></pre></td></tr></table></figure><p>开启命名空间后，组件中调用 <code>dispatch</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方式一：自己直接 dispatch</span><br><span class="line">this.$store.dispatch(&#x27;moduleB/actions中的方法名&#x27;,传递的数据)</span><br><span class="line"></span><br><span class="line">//方式二：借助 mapActions：（此处的数据可以在结构调用中传递）</span><br><span class="line">...mapActions(&#x27;moduleA&#x27;,[&#x27;actions中的方法名&#x27;])</span><br></pre></td></tr></table></figure><p>开启命名空间后，组件中调用 <code>commit</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//方式一：自己直接 commit </span><br><span class="line">this.$store.commit(&#x27;moduleB/mutations中的方法名&#x27;,传递的数据)</span><br><span class="line"></span><br><span class="line">//方式二：借助 mapMutations：（此处的数据可以在结构调用中传递）【注意！...mapMutations() 定义在 methods 节点中】</span><br><span class="line">...mapMutations(&#x27;moduleA&#x27;,[&#x27;mutations中的方法名&#x27;]),</span><br></pre></td></tr></table></figure><h1 id="四个-map方法的使用"><a href="#四个-map方法的使用" class="headerlink" title="四个 map方法的使用"></a>四个 map方法的使用</h1><p>使用前需要现在对应组件中引入: <code>import &#123;mapxxxx&#125; from &#39;vuex&#39;</code></p><h2 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h2><p>mapState 用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">   //借助 mapState 生成计算属性（对象写法）</span><br><span class="line">   ...mapState(&#123;xxx:&#x27;test&#x27;&#125;),</span><br><span class="line"></span><br><span class="line">   //借助 mapState 生成计算属性（数组写法,当属性名和属性值一致的时候）</span><br><span class="line">   ...mapState([&#x27;xxx&#x27;])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="mapGetters"><a href="#mapGetters" class="headerlink" title="mapGetters"></a>mapGetters</h2><p>mapGetters 用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">   //借助 mapGetters 生成计算属性（对象写法）</span><br><span class="line">   ...mapGetters(&#123;xxx:&#x27;test&#x27;&#125;),</span><br><span class="line"></span><br><span class="line">   //借助 mapGetters 生成计算属性（数组写法,当属性名和属性值一致的时候）</span><br><span class="line">   ...mapGetters([&#x27;xxx&#x27;])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="mapActions"><a href="#mapActions" class="headerlink" title="mapActions"></a>mapActions</h2><p>mapActions 用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">   //靠mapActions生成(对象形式)</span><br><span class="line">   ...mapActions(&#123;xxx:&#x27;test&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">   //靠mapActions生成(数组形式)</span><br><span class="line">   ...mapActions([&#x27;test&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mapMutations"><a href="#mapMutations" class="headerlink" title="mapMutations"></a>mapMutations</h2><p>mapMutations 用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">   //靠mapMutations生成(对象形式)</span><br><span class="line">   ...mapMutations(&#123;xxx:&#x27;TEST&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">   //靠mapMutations生成(数组形式)</span><br><span class="line">   ...mapMutations([&#x27;TEST&#x27;])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="求和案例"><a href="#求和案例" class="headerlink" title="求和案例"></a>求和案例</h1><h2 id="原生-vue-实现"><a href="#原生-vue-实现" class="headerlink" title="原生 vue 实现"></a>原生 vue 实现</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// App.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Count&gt;&lt;/Count&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Count from &#x27;./components/Count&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Count</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">// Count.vue</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    // 注意此处从 select 选择框中选择的值是字符串类型，这里使用 number 修饰符转换</span><br><span class="line">    &lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">      &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">      &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementOdd&quot;&gt;奇数再加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementDelay&quot;&gt;延时500ms加一&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Count&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      // 用户select中选择的数字</span><br><span class="line">      n: 1,</span><br><span class="line">      sum: 0,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment() &#123;</span><br><span class="line">      this.sum += this.n;</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement() &#123;</span><br><span class="line">      this.sum -= this.n;</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementOdd() &#123;</span><br><span class="line">      //   if (this.sum % 2 !== 0) &#123;</span><br><span class="line">      //     this.sum += this.n;</span><br><span class="line">      //   &#125;</span><br><span class="line">      if (this.sum % 2) &#123;</span><br><span class="line">        this.sum += this.n;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    incrementDelay() &#123;</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        this.sum += this.n;</span><br><span class="line">      &#125;, 500);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button &#123;</span><br><span class="line">  margin-left: 15px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="vuex-实现-1"><a href="#vuex-实现-1" class="headerlink" title="vuex 实现"></a>vuex 实现</h2><p>目标：将 Count 组件中的 sum 变量交给 vuex 托管</p><h1 id="TEMP"><a href="#TEMP" class="headerlink" title="TEMP"></a>TEMP</h1><ol><li>import 导入文件时，会执行对应文件中的代码，import 语句比普通语句先执行。（无关先后顺序）</li><li>若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写<code>dispatch</code>，直接编写<code>commit</code><ol><li>mutations 接收的参数（通过 commit 提交的参数）建议使用大写（语义化）</li></ol></li><li>actions 中 context 上下文参数中的属性：<ol><li>dispatch：当业务逻辑很复杂的时候，可以借助 dispatch 参数将业务逻辑抛给下一个 actions</li><li>commit</li><li>getters</li><li>rootGetters</li><li>rootState</li><li>state：state中的共享参数</li></ol></li><li>vue 开发者工具只检测 mutations 阶段中的数据变化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Cli</title>
      <link href="/2022/09/022022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vue-Cli/976189ad/"/>
      <url>/2022/09/022022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vue-Cli/976189ad/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Vue-Cli 官方文档：<a href="https://cli.vuejs.org/zh/guide/">https://cli.vuejs.org/zh/guide/</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装-CLI"><a href="#安装-CLI" class="headerlink" title="安装 CLI"></a>安装 CLI</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global add @vue/cli</span><br></pre></td></tr></table></figure><h2 id="升级-CLI"><a href="#升级-CLI" class="headerlink" title="升级 CLI"></a>升级 CLI</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm update -g @vue/cli</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">yarn global upgrade --latest @vue/cli</span><br></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue create hello-world</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图形化</span></span><br><span class="line">vue ui</span><br></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>├── node_modules<br>├── public<br>│   ├── favicon.ico: 页签图标<br>│   └── index.html: 主页面<br>├── src<br>│   ├── assets: 存放静态资源<br>│   │   └── logo.png<br>│   │── component: 存放组件<br>│   │   └── HelloWorld.vue<br>│   │── App.vue: 汇总所有组件<br>│   │── main.js: 入口文件<br>├── .gitignore: git版本管制忽略的配置<br>├── babel.config.js: babel的配置文件<br>├── package.json: 应用包配置文件<br>├── README.md: 应用描述文件<br>├── package-lock.json：包版本控制文件</p><h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><h3 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h3><p>使用 <code>vue inspect &gt; output.js</code> 命令可以查看到 Vue脚手架的<strong>默认配置</strong>。<br>使用 vue.config.js（项目根目录下创建） 可以对脚手架进行<strong>个性化定制</strong>，详情见：<a href="https://cli.vuejs.org/zh/config/#vue-config-js">https://cli.vuejs.org/zh/config/#vue-config-js</a></p><h3 id="自动打开浏览器"><a href="#自动打开浏览器" class="headerlink" title="自动打开浏览器"></a>自动打开浏览器</h3><p>实现使用 <code>npm run serve</code> 命令的时候自动打开浏览器：</p><p>在 <code>package.json</code> scripts 节点下配置：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line"><span class="deletion">-    &quot;serve&quot;: &quot;vue-cli-service serve&quot;,</span></span><br><span class="line"><span class="addition">+    &quot;serve&quot;: &quot;vue-cli-service serve --open&quot;,</span></span><br><span class="line">    &quot;build&quot;: &quot;vue-cli-service build&quot;,</span><br><span class="line">    &quot;lint&quot;: &quot;vue-cli-service lint&quot;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="关闭-Eslint"><a href="#关闭-Eslint" class="headerlink" title="关闭 Eslint"></a>关闭 Eslint</h3><p>vue.config.js:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line"><span class="addition">+  lintOnSave:false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-快捷路径"><a href="#配置-快捷路径" class="headerlink" title="配置 @ 快捷路径"></a>配置 @ 快捷路径</h3><p>使用 <code>@</code> 表示 src 源代码目录，从外往里查找；不要使用 <code>../../</code> 从里往外查找：</p><ol><li>在项目根目录创建：<code>jsconfig.json</code></li><li>配置<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><p>组件是用来实现局部(特定)功能效果的<strong>代码集合</strong></p><h2 id="非单文件组件"><a href="#非单文件组件" class="headerlink" title="非单文件组件"></a>非单文件组件</h2><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><ol><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ol><h4 id="定义组件"><a href="#定义组件" class="headerlink" title="定义组件"></a>定义组件</h4><p>使用 <code>Vue.extend(options)</code> 创建<br>其中 options 和 new Vue(options) 时传入的那个 options <strong>几乎</strong>一样，但也有点区别:</p><ol><li><code>el</code> 不要写 ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</li><li><code>data</code> 必须写成函数 ———— 避免组件被复用时，数据存在<strong>引用关系</strong>。</li></ol><p>补充：使用 <code>template</code> 可以配置组件结构。</p><h4 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h4><ol><li>局部注册：new Vue 的时候传入 <code>components</code> 选项</li><li>全局注册：<code>Vue.component(&#39;组件名&#39;,组件)</code></li></ol><h4 id="使用组件"><a href="#使用组件" class="headerlink" title="使用组件"></a>使用组件</h4><p><code>&lt;组件名&gt;&lt;/组件名&gt;</code></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="组件命名"><a href="#组件命名" class="headerlink" title="组件命名"></a>组件命名</h4><p>一个单词组成：</p><ol><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ol><p>多个单词组成：</p><ol><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (<strong>需要Vue脚手架支持</strong>)</li></ol><p>补充：</p><ol><li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</li><li>可以使用name配置项指定组件在开发者工具中呈现的名字。</li></ol><h4 id="组件标签"><a href="#组件标签" class="headerlink" title="组件标签"></a>组件标签</h4><p>第一种写法：<code>&lt;组件名&gt;&lt;/组件名&gt;</code></p><p>第二种写法：<code>&lt;组件名/&gt;</code></p><p>备注：不用使用脚手架时，<code>&lt;组件名/&gt;</code>单标签会导致后续组件不能渲染。</p><h4 id="组件简写"><a href="#组件简写" class="headerlink" title="组件简写"></a>组件简写</h4><p>const cpn = Vue.extend(options) 可简写为： const cpn = options</p><h3 id="组件嵌套"><a href="#组件嵌套" class="headerlink" title="组件嵌套"></a>组件嵌套</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;student&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;Frank&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">age:18</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;school&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;郑州大学&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">address:&#x27;郑州&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span>`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">msg:&#x27;Hello World!&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义app组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">hello</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:&#x27;<span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span>&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//注册组件（局部）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;app&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h2><p>文件扩展名为 <code>.vue</code> 的 就是 <code>single-file components</code> (单文件组件) </p><h2 id="VueComponent"><a href="#VueComponent" class="headerlink" title="VueComponent"></a>VueComponent</h2><ol><li>组件实例对象(vc)，本质是一个名为 <strong>VueComponent 的构造函数</strong>，是 <code>Vue.extend</code> 生成的。</li><li>只需要写 <code>&lt;组件名/&gt;</code> 或 <code>&lt;组件名&gt;&lt;/组件名&gt;</code> ，Vue 解析时会帮我们创建 对应组件的实例对象，即Vue帮我们执行的：<code>new VueComponent(options)</code>。</li><li>关于this指向：<ol><li>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的 this 均是 <strong>VueComponent实例对象</strong>。</li><li>new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的 this 均是 <strong>Vue实例对象</strong>。</li></ol></li><li>特别注意：每次调用Vue.extend，<strong>返回的都是一个全新的</strong> <code>VueComponent</code> ！</li><li>一个重要的内置关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code>，为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</li></ol><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220904221803.png" alt="20220904221803"></p><h1 id="render-函数"><a href="#render-函数" class="headerlink" title="render 函数"></a>render 函数</h1><p>因为 <code>vue.runtime.xxx.js</code> 没有模板解析器，所以不能使用 <code>template</code> 配置项，需要使用 <code>render</code> 函数接收到的 <code>createElement</code> 函数去指定具体内容。</p><p>关于不同版本的Vue：</p><p>vue.js 与 vue.runtime.xxx.js 的区别：</p><ol><li>vue.js 是完整版的 Vue，包含：核心功能+模板解析器。</li><li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li></ol><h1 id="ref-属性"><a href="#ref-属性" class="headerlink" title="ref 属性"></a>ref 属性</h1><p>ref 属性被用来给<strong>元素</strong>或<strong>子组件</strong>注册引用信息，引用信息将会注册在<code>父组件</code>的 <code>$refs</code> 对象上。（id的替代者）<br>ref 属性应用在<strong>html标签</strong>上获取的是真实DOM元素，应用在<strong>组件标签</strong>上是组件实例对象</p><p>使用：</p><p>html标签：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code><br>组件标签：<code>&lt;组件名 ref=&quot;xxx&quot;&gt;&lt;/组件名&gt;</code></p><p>获取：</p><p><code>this.$refs.xxx</code></p><h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><p>props功能：让组件接收外部传过来的数据</p><h2 id="传递数据"><a href="#传递数据" class="headerlink" title="传递数据"></a>传递数据</h2><h3 id="父传子-主要"><a href="#父传子-主要" class="headerlink" title="父传子(主要)"></a>父传子(主要)</h3><p><code>&lt;组件名称 属性名=&quot;属性值&quot;/&gt;</code></p><h3 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h3><p>如果父组件给子组件传递的是一个函数，本质其实是<code>子组件给父组件传递数据</code></p><h2 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h2><ol><li>第一种方式（只接收）：<code>props:[&#39;属性名&#39;]</code></li><li>第二种方式（限制类型）：<code>props:&#123;属性名:String&#125;</code></li><li>第三种方式（限制类型、限制必要性、指定默认值）：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意 required 属性和 default属性冲突</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">   属性名:&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">   <span class="attr">required</span>: <span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">   <span class="attr">default</span>: <span class="string">&#x27;属性值&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="props-是只读的"><a href="#props-是只读的" class="headerlink" title="props 是只读的"></a>props 是只读的</h3><p>props 是只读的，Vue底层会监测你对 props 的修改，如果进行了修改，就会<strong>发出警告</strong>。(如果对对象中的属性修改，vue不会检测到并发出警告，不过不推荐这么做。)<br>若业务需求确实需要修改，那么请<strong>复制 props的内容到 data中</strong>，然后去修改data中的数据。</p><h1 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h1><p><strong>子组件向父组件</strong>传递数据</p><p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（事件的回调在 A 中）。</p><h2 id="绑定自定义事件"><a href="#绑定自定义事件" class="headerlink" title="绑定自定义事件"></a>绑定自定义事件</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>在父组件中：</p><p><code>&lt;组件名 @自定义事件事件名称=&quot;事件处理程序&quot;/&gt;</code>  或  <code>&lt;组件名 v-on:自定义事件事件名称=&quot;事件处理程序&quot;/&gt;</code></p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>在父组件中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;组件名 ref=<span class="string">&quot;ref自定义属性&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 通过 `this.$refs.ref自定义属性.$on(&#x27;自定义事件事件名称&#x27;,回调)`绑定自定义事件时，**回调**要么配置在 `methods` 中，要么用 `箭头函数` 否则 **this 指向会出问题**！</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>自定义属性.$on(<span class="string">&#x27;自定义事件事件名称&#x27;</span>,<span class="variable language_">this</span>.事件处理程序)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义事件修饰符"><a href="#自定义事件修饰符" class="headerlink" title="自定义事件修饰符"></a>自定义事件修饰符</h2><h3 id="once-修饰符"><a href="#once-修饰符" class="headerlink" title="once 修饰符"></a>once 修饰符</h3><p>若想让自定义事件只能触发一次，可以使用 <code>once</code> 修饰符，或 <code>$once</code> 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">ref</span>自定义属性.$once(<span class="string">&#x27;自定义事件事件名称&#x27;</span>,<span class="variable language_">this</span>.事件处理程序)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="native-修饰符"><a href="#native-修饰符" class="headerlink" title="native 修饰符"></a>native 修饰符</h3><p>默认给组件加的原生事件会被系统认为是<strong>自定义事件</strong>，如果想给组件自定义事件变为<strong>原生DOM事件</strong>，需要使用<code>native</code>修饰符：</p><p>原理：给组件的根节点绑定了事件，然后利用事件委托把事件委派给组件内部元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;组件名 @click.<span class="property">native</span> = <span class="string">&quot;事件处理程序&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="sync-修饰符"><a href="#sync-修饰符" class="headerlink" title=".sync 修饰符"></a>.sync 修饰符</h3><p>.sync 也属于组件通信方式的一种，可以实现<code>父子组件数据同步</code></p><p><code>:xxx.sync</code> 主要做了两件事情：</p><ol><li>给当前子组件传递了一个 <code>props:xxx</code></li><li>给当前子组件绑定了一个自定义事件：<code>update:xxx</code></li></ol><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 自定义事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">:count</span>=<span class="string">&quot;count&quot;</span> @<span class="attr">update:count</span>=<span class="string">&quot;count = $event&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. .async 修饰符 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">:count.sync 做了两件事情：</span></span><br><span class="line"><span class="comment">1. 给当前子组件传递了一个 props：`count`</span></span><br><span class="line"><span class="comment">2. 给当前子组件绑定了一个自定义事件：`update:count`</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">:count.sync</span>=<span class="string">&quot;count&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Children&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Children</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Children.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      子组件：</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;update:count&#x27;, count - 10)&quot;</span>&gt;</span>父组件-10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;children&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;count&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="触发自定义事件"><a href="#触发自定义事件" class="headerlink" title="触发自定义事件"></a>触发自定义事件</h2><p>在子组件事件处理程序中调用 <code>$emit</code> 方法：</p><p><code>this.$emit(&#39;自定义事件事件的名称&#39;,传递给父组件的数据)</code>        </p><h2 id="解绑自定义事件"><a href="#解绑自定义事件" class="headerlink" title="解绑自定义事件"></a>解绑自定义事件</h2><h3 id="off-方法"><a href="#off-方法" class="headerlink" title="$off 方法"></a>$off 方法</h3><ol><li>解绑单个事件：<code>this.$off(&#39;事件名称&#39;)</code></li><li>解绑多个事件：<code>this.$off([&#39;事件名称1&#39;,&#39;事件名称2&#39;])</code></li><li>解绑全部事件：<code>this.$off()</code></li></ol><h3 id="销毁组件"><a href="#销毁组件" class="headerlink" title="销毁组件"></a>销毁组件</h3><p>如果一个组件调用了 <code>$destory</code> 方法，那么这个组件身上的<strong>自定义事件</strong>也就不奏效了。</p><h1 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h1><p>插槽作用：让父组件可以向子组件指定位置插入 <code>html</code> 结构，也是一种组件间通信的方式，适用于<strong>父组件向子组件传递数据</strong>。</p><h2 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>业务逻辑简单，直接在组件标签内传递插槽中的内容</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><ol><li>在子组件中使用：<code>&lt;slot&gt;[default content...]&lt;/slot&gt;</code> 标签定义插槽</li><li>在父组件中使用 <code>&lt;子组件名&gt;...填充内容...&lt;/子组件名&gt;</code> 的方式填充插槽</li></ol><h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">子组件名</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span>html结构...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">子组件名</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 子组件中</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 定义插槽 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">slot</span>&gt;</span>插槽默认内容...<span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h2><h3 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h3><p>需要向插槽中传递<strong>多段</strong> <code>html结构</code> 时</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><ol><li>在子组件中使用：<code>&lt;slot name= &quot;名称&quot;&gt;[default content...]&lt;/slot&gt;</code> 标签定义插槽</li><li>在父组件中使用 <code>&lt;template v-slot:名称&gt;...&lt;/template&gt;</code> 的方式填充插槽<ol><li>也可以使用 <code>&lt;标签名 slot = &quot;名称&quot;&gt;...&lt;/标签名&gt;</code> 的方式填充插槽</li><li><code>v-slot</code> 指令只能在 <code>template</code> 标签中使用</li></ol></li><li>具名插槽的缩写: <code>v-slot</code> 可以缩写，即把参数之前的所有内容 (<code>v-slot:</code>) 替换为字符 <code>#</code>。例如 <code>v-slot:header</code> 可以被重写为 <code>#header</code></li></ol><h3 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">   &lt;template v-slot:center&gt;</span><br><span class="line">     &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">   &lt;template v-slot:footer&gt;</span><br><span class="line">      &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">// 子组件中</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">      &lt;!-- 定义插槽 --&gt;</span><br><span class="line">      &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">      &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="作用域插槽"><a href="#作用域插槽" class="headerlink" title="作用域插槽"></a>作用域插槽</h2><h3 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h3><p>数据在组件的自身，但根据数据生成的<strong>结构</strong>需要<strong>组件的使用者</strong>来决定。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><ol><li>在子组件中使用：<code>&lt;slot :数据名=数据源&gt;[default content...]&lt;/slot&gt;</code> 标签定义插槽</li><li>在父组件中使用 <code>&lt;template v-slot:default = &quot;数据&quot;&gt;...&lt;/template&gt;</code> 的方式填充插槽<ol><li>接受到的 <code>数据</code> <strong>是一个对象</strong>,对象中保存着传递过来的数据</li><li>可以使用 <code>es6 解构赋值</code> 的方式接收数据</li><li>除了可以使用 <code>v-slot:default = &quot;数据&quot;</code> 指令语法接受数据以外,以下三种写法也奏效,<strong>不过不推荐</strong><ol><li>scope=”数据”</li><li>slot-scope=”数据”</li><li>v-slot =”数据”</li></ol></li></ol></li></ol><h3 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// 父组件中</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">// &lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">// &lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">// &lt;template v-slot =&quot;scopeData&quot;&gt;</span><br><span class="line">// 以上三种方法都奏效,官方推荐下面这种写法</span><br><span class="line">&lt;template v-slot:default =&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;game in scopeData.games&quot; :key=&quot;game&quot;&gt;&#123;&#123;game&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">// 子组件中</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">       &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">   export default &#123;</span><br><span class="line">       name:&#x27;Category&#x27;,</span><br><span class="line">       //数据在子组件自身</span><br><span class="line">       data() &#123;</span><br><span class="line">           return &#123;</span><br><span class="line">               games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="全局事件总线（GlobalEventBus）"><a href="#全局事件总线（GlobalEventBus）" class="headerlink" title="全局事件总线（GlobalEventBus）"></a>全局事件总线（GlobalEventBus）</h1><p><strong>适用于任意组件间通信</strong>。（本质是自定义事件）</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF.png" alt="全局事件总线"></p><p>实现原理：</p><ol><li>在所有组件实例对象（vc）都能访问到的地方：<strong>Vue 的原型上</strong>添加一个变量：<code>$bus</code>（因为有一个重要的内置关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code>）</li><li>接收数据的一方给 <code>$bus</code> 绑定自定义事件，事件的回调留在接收数据的组件自身</li><li>提供数据的一方使用 <code>$bus.$emit(&#39;xxxx&#39;,数据)</code> 的方式传递数据</li></ol><h2 id="安装全局事件总线"><a href="#安装全局事件总线" class="headerlink" title="安装全局事件总线"></a>安装全局事件总线</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   ......</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">//安装全局事件总线，$bus 就是当前应用的 vm</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">   &#125;,</span><br><span class="line">   ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><h2 id="使用事件总线"><a href="#使用事件总线" class="headerlink" title="使用事件总线"></a>使用事件总线</h2><h3 id="接收数据-1"><a href="#接收数据-1" class="headerlink" title="接收数据"></a>接收数据</h3><p>A 组件想接收数据，则在 A 组件中给 <code>$bus</code> <strong>绑定自定义事件</strong>，事件的回调留在 A 组件自身。</p><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 事件的回调留在 A 组件自身</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getData</span>(<span class="params">data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我获取到了数据：&quot;</span>, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 建议组件销毁前手动解绑自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 在 A 组件中给 `$bus` 绑定自定义事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&quot;my-event&quot;</span>, <span class="variable language_">this</span>.<span class="property">getData</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="提供数据"><a href="#提供数据" class="headerlink" title="提供数据"></a>提供数据</h3><p>语法：</p><p><code>this.$bus.$emit(&#39;xxxx&#39;,数据)</code></p><p>演示代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>B 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendData&quot;</span>&gt;</span>传递数据给A组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;B&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendData</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&#x27;my-event&#x27;</span>,<span class="variable language_">this</span>.<span class="property">name</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$bus</span>.$off(<span class="string">&quot;my-event&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>最好在 <code>beforeDestroy</code> 钩子中，用 <code>$off</code> 去解绑当前组件所用到的事件。(如上面演示代码：)</p><h1 id="消息订阅与发布（pubsub-js）"><a href="#消息订阅与发布（pubsub-js）" class="headerlink" title="消息订阅与发布（pubsub-js）"></a>消息订阅与发布（pubsub-js）</h1><p>适用于<strong>任意组件间通信</strong>，这个方案依赖第三方库，推荐使用：<code>pubsub-js</code></p><p>pubsub-js github 仓库：<a href="https://github.com/mroderick/PubSubJS">https://github.com/mroderick/PubSubJS</a></p><h2 id="PubSub-使用"><a href="#PubSub-使用" class="headerlink" title="PubSub 使用"></a>PubSub 使用</h2><h3 id="安装-PubSub"><a href="#安装-PubSub" class="headerlink" title="安装 PubSub"></a>安装 PubSub</h3><p><code>npm i pubsub-js</code></p><h3 id="接收数据-2"><a href="#接收数据-2" class="headerlink" title="接收数据"></a>接收数据</h3><p>A 组件想接收数据，则在 A 组件中订阅消息，<strong>订阅的回调留在A组件自身</strong>。</p><ol><li>引入<code>import pubsub from &#39;pubsub-js&#39;</code></li><li>使用 <code>pubsub.subscribe</code> 方法订阅消息（注意：pubsub 回调函数中第一个参数是消息名称，第二个参数才是数据）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">demo</span>(<span class="params">subName,data</span>)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>演示代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>A 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;A&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getData</span>(<span class="params">subName, data</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我获取到了数据：&quot;</span>, subName, data);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// this.$bus.$on(&quot;my-event&quot;, this.getData);</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">pubId</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&quot;my-sub&quot;</span>, <span class="variable language_">this</span>.<span class="property">getData</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// this.$bus.$off(&quot;my-event&quot;)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    pubsub.<span class="title function_">unsubscribe</span>(<span class="variable language_">this</span>.<span class="property">pubId</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>最好在beforeDestroy钩子中，用<code>pubsub.unsubscribe(pubId)</code>去取消订阅。(如上面演示代码：)</p><h3 id="提供数据-1"><a href="#提供数据-1" class="headerlink" title="提供数据"></a>提供数据</h3><p>B 组件想提供数据，则在 B 组件中发布消息并携带数据。</p><ol><li>引入<code>import pubsub from &#39;pubsub-js&#39;</code></li><li>提供数据：<code>pubsub.publish(&#39;xxx&#39;,数据)</code></li></ol><p>演示代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// B.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>B 组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendData&quot;</span>&gt;</span>传递数据给A组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> pubsub <span class="keyword">from</span> <span class="string">&quot;pubsub-js&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&quot;B&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">sendData</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// this.$bus.$emit(&#x27;my-event&#x27;,this.name)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      pubsub.<span class="title function_">publish</span>(<span class="string">&quot;my-sub&quot;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="组件通信高级（重点）"><a href="#组件通信高级（重点）" class="headerlink" title="组件通信高级（重点）"></a>组件通信高级（重点）</h1><h2 id="event-深入"><a href="#event-深入" class="headerlink" title="event 深入"></a>event 深入</h2><p>默认给组件加的原生事件会被系统认为是<strong>自定义事件</strong>，如果想给组件自定义事件变为<strong>原生DOM事件</strong>，需要使用<code>native</code>修饰符：</p><h2 id="v-model-深入"><a href="#v-model-深入" class="headerlink" title="v-model 深入"></a>v-model 深入</h2><p>参考：<a href="https://www.cnblogs.com/sunidol/p/13502205.html">https://www.cnblogs.com/sunidol/p/13502205.html</a></p><h3 id="v-model-原理-vue2-x"><a href="#v-model-原理-vue2-x" class="headerlink" title="v-model 原理 (vue2.x)"></a>v-model 原理 (vue2.x)</h3><p>v-model 是由 <code>:value</code> 和 <code>@input</code> 实现的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>= <span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg = $event.target.value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="string">&#x27;text..&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="v-model-父子组件通信"><a href="#v-model-父子组件通信" class="headerlink" title="v-model 父子组件通信"></a>v-model 父子组件通信</h3><p>v-model 除了在输入表单上可以使用之外，在组件上也可以使用，以实现<strong>父子组件的双向数据绑定</strong>。</p><p>组件通信案例：</p><p>App.vue :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件：&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定在组件上的: :value 是 props  @input 是自定义事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">:value</span>=<span class="string">&quot;msg&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;msg = $event&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-model 相当于上面的简化写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">v-model</span>=<span class="string">&quot;msg&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Children&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Children</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">msg</span>: <span class="string">&quot;hello..&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Children.vue :</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      子组件：</span><br><span class="line">      <span class="comment">&lt;!-- 绑定在 input 标签上的都是原生事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">        <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">input</span>=<span class="string">&quot;$emit(&#x27;input&#x27;, $event.target.value)&quot;</span></span></span><br><span class="line"><span class="tag">      /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;children&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;value&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性修饰符-sync"><a href="#属性修饰符-sync" class="headerlink" title="属性修饰符 sync"></a>属性修饰符 sync</h2><p>.sync 也属于组件通信方式的一种，可以实现<code>父子组件数据同步</code></p><p><code>:xxx.sync</code> 主要做了两件事情：</p><ol><li>给当前子组件传递了一个 <code>props:xxx</code></li><li>给当前子组件绑定了一个自定义事件：<code>update:xxx</code></li></ol><p>.sync 代码演示</p><p>App.vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>父组件：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. 自定义事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">:count</span>=<span class="string">&quot;count&quot;</span> @<span class="attr">update:count</span>=<span class="string">&quot;count = $event&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2. .async 修饰符 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">:count.sync 做了两件事情：</span></span><br><span class="line"><span class="comment">1. 给当前子组件传递了一个 props：`count`</span></span><br><span class="line"><span class="comment">2. 给当前子组件绑定了一个自定义事件：`update:count`</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">:count.sync</span>=<span class="string">&quot;count&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Children&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Children</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">100</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Children.vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">      子组件：</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;$emit(&#x27;update:count&#x27;, count - 10)&quot;</span>&gt;</span>父组件-10<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;children&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">props</span>: [<span class="string">&quot;count&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="attrs-与-listeners"><a href="#attrs-与-listeners" class="headerlink" title="$attrs 与 $listeners"></a><code>$attrs</code> 与 <code>$listeners</code></h2><p>应用场景：封装第三方组件</p><h3 id="vm-attrs"><a href="#vm-attrs" class="headerlink" title="vm.$attrs"></a>vm.$attrs</h3><p><code>$attrs</code> 属于组件的一个属性，可以获取到父组件<strong>传递过来的props数据</strong> (如果子组件通过props接收过的属性，在$attrs属性当中是获取不到的) </p><p>在子组件中可以使用：<code>v-bind= &quot;$attrs&quot;</code> 将父组件穿过来的属性绑定在子组件上（注意此处<strong>不能使用 v-bind 的简写形式</strong>）</p><h3 id="vm-listeners"><a href="#vm-listeners" class="headerlink" title="vm.$listeners"></a>vm.$listeners</h3><p><code>$listeners</code> 属于组件的一个属性，可以获取父组件<strong>传递过来的自定义事件</strong></p><p>在子组件中可以使用：<code>v-on=&quot;$listeners&quot;</code> 将父组件穿过来的自定义事件绑定在子组件上（注意此处<strong>不能使用 v-on 的简写形式</strong>）</p><h3 id="attrs-与-listeners-代码演示"><a href="#attrs-与-listeners-代码演示" class="headerlink" title="$attrs 与 $listeners 代码演示"></a><code>$attrs</code> 与 <code>$listeners</code> 代码演示</h3><p>封装 input 演示：</p><p>App.vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Children</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BUTTON&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handler&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">Children</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Children</span> <span class="keyword">from</span> <span class="string">&quot;@/components/Children&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;App&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Children</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&quot;handler!&quot;</span>,e)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Children.vue：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind</span>=<span class="string">&quot;this.$attrs&quot;</span> <span class="attr">v-on</span>=<span class="string">&quot;this.$listeners&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&quot;children&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// `$attrs` 属于组件的一个属性，可以获取到父组件**传递过来的props数据**</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#123;type: &#x27;button&#x27;, value: &#x27;BUTTON&#x27;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$attrs</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// `$listeners` 属于组件的一个属性，可以获取父组件**传递过来的自定义事件**</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#123;click: ƒ&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$listeners</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="children-与-parent"><a href="#children-与-parent" class="headerlink" title="$children 与 $parent"></a><code>$children</code> 与 <code>$parent</code></h2><h3 id="vm-children"><a href="#vm-children" class="headerlink" title="vm.$children"></a>vm.$children</h3><p><code>vm.$children</code> 可以获取到当前组件的所有子组件（注意：<code>$children</code> 并不保证顺序，也<code>不是响应式的</code>）</p><h3 id="vm-parent"><a href="#vm-parent" class="headerlink" title="vm.$parent"></a>vm.$parent</h3><p><code>vm.$parent</code> 可以获取到当前组件的父实例，如果当前实例有的话。</p><h2 id="scope-slot（作用域插槽）"><a href="#scope-slot（作用域插槽）" class="headerlink" title="scope-slot（作用域插槽）"></a>scope-slot（作用域插槽）</h2><h1 id="mixin-混入"><a href="#mixin-混入" class="headerlink" title="mixin 混入"></a>mixin 混入</h1><p>功能：可以把多个组件<strong>共用的配置</strong>提取成一个混入JS对象</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="定义混入"><a href="#定义混入" class="headerlink" title="定义混入"></a>定义混入</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mixin.js</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用混入"><a href="#使用混入" class="headerlink" title="使用混入"></a>使用混入</h3><p>全局混入</p><p>使用​全局混入时需格外小心！一旦使用全局混入，它将影响每一个之后创建的 Vue 实例。</p><p><code>Vue.mixin(xxx)</code></p><p>局部混入</p><ol><li>使用 <code>import</code> 导入混入</li><li><code>mixins:[&#39;xxx&#39;]</code> // mixins 与 data 同级</li></ol><h2 id="选项合并"><a href="#选项合并" class="headerlink" title="选项合并"></a>选项合并</h2><p>当组件和混入对象含有同名选项时，这些选项将以恰当的方式进行<strong>合并</strong></p><ol><li>数据对象（data）在内部会进行递归合并，并在发生冲突时<strong>以组件数据优先</strong>。</li><li>同名<strong>钩子函数</strong>将合并为一个数组，因此<strong>都将被调用</strong>。另外，混入对象的钩子将在组件自身钩子<strong>之前</strong>调用。</li></ol><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>插件用于增强 Vue</p><p>本质：包含 <strong>install 方法</strong> 的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者<strong>传递的数据</strong>。</p><h2 id="定义插件"><a href="#定义插件" class="headerlink" title="定义插件"></a>定义插件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins.js</span></span><br><span class="line"></span><br><span class="line">对象.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">   <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">   <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line"></span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><p>通过全局方法 <code>Vue.use()</code> 使用插件</p><h1 id="nextTick"><a href="#nextTick" class="headerlink" title="nextTick"></a>nextTick</h1><p>nextTick：在<code>下次DOM更新循环结束之后</code>执行延迟回调。在<code>修改数据之后</code>立即使用这个方法，获取更新后的DOM。<br>应用场景：当改变数据后，要<strong>基于更新后的新 DOM 进行某些操作</strong>时，要在 nextTick 所指定的回调函数中执行。</p><h2 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.$nextTick(回调函数)</span><br></pre></td></tr></table></figure><h1 id="过渡与动画-REJECTED"><a href="#过渡与动画-REJECTED" class="headerlink" title="过渡与动画 [REJECTED]"></a>过渡与动画 [REJECTED]</h1><p>过渡与动画作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p><h2 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h2><h3 id="准备好样式"><a href="#准备好样式" class="headerlink" title="准备好样式"></a>准备好样式</h3><p>元素进入的样式：</p><ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol><p>元素离开的样式：</p><ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol><h3 id="包裹元素"><a href="#包裹元素" class="headerlink" title="包裹元素"></a>包裹元素</h3><p>使用 <code>&lt;transition&gt;</code> 包裹要过渡的元素，并配置 <code>name</code> 属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure><p>若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定 <code>key</code> 值</p><h2 id="第三方动画库"><a href="#第三方动画库" class="headerlink" title="第三方动画库"></a>第三方动画库</h2><p>animate.css：<a href="https://animate.style/">https://animate.style/</a></p><p>Animate.css 是一个现成的跨浏览器动画库，可用于您的 Web 项目。非常适合强调、主页、滑块和注意力引导提示。</p><h1 id="vue-中的网络请求"><a href="#vue-中的网络请求" class="headerlink" title="vue 中的网络请求"></a>vue 中的网络请求</h1><p>目前流行的网络请求方案是 Axios,其他的了解即可。</p><ol><li>xhr</li><li>jQuery</li><li><strong>axios</strong></li><li>fetch</li><li>vue-resource (vue 1.0 官方不再维护)</li></ol><h1 id="devServer（配置代理解决跨域）"><a href="#devServer（配置代理解决跨域）" class="headerlink" title="devServer（配置代理解决跨域）"></a>devServer（配置代理解决跨域）</h1><p>官方文档：<a href="https://cli.vuejs.org/zh/config/#devserver-proxy">https://cli.vuejs.org/zh/config/#devserver-proxy</a></p><h2 id="配置单个代理"><a href="#配置单个代理" class="headerlink" title="配置单个代理"></a>配置单个代理</h2><p>编写 <code>vue.config.js</code> 配置具体代理规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: <span class="string">&#x27;http://localhost:4000&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>优点：配置简单，请求资源时直接发给前端（8080）即可。<br>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。<br>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （<strong>优先匹配前端资源</strong>）</p><h2 id="配置多个代理"><a href="#配置多个代理" class="headerlink" title="配置多个代理"></a>配置多个代理</h2><p>编写 <code>vue.config.js</code> 配置具体代理规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">      <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123; <span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123; <span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin 设置为true时（默认值），服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin 设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。<br>缺点：配置略微繁琐，请求资源时必须加前缀。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.x 基础篇</title>
      <link href="/2022/08/272022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vue%E5%9F%BA%E7%A1%80%E7%AF%87/976189ad/"/>
      <url>/2022/08/272022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Vue_Vue%E5%9F%BA%E7%A1%80%E7%AF%87/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-简介"><a href="#Vue-简介" class="headerlink" title="Vue 简介"></a>Vue 简介</h1><blockquote><p>官方文档</p><ul><li>Vue2.X：<a href="https://v2.cn.vuejs.org/v2/guide/">https://v2.cn.vuejs.org/v2/guide/</a></li><li>Vue3.X：<a href="https://staging-cn.vuejs.org/guide/introduction.html">https://staging-cn.vuejs.org/guide/introduction.html</a></li></ul></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>Vue 是一套用于<code>构建用户界面</code>的<code>渐进式</code> JavaScript 框架。（渐进式：简单应用：只需一个轻量小巧的核心库。复杂应用：可以引入各式各样的Vue插件）</li><li>采用<code>组件化模式</code>，提高代码复用率、且让代码更好维护。</li><li><code>声明式编码</code>，让编码人员无需直接操作DOM,提高开发效率。</li></ol><h2 id="初识-Vue"><a href="#初识-Vue" class="headerlink" title="初识 Vue"></a>初识 Vue</h2><ol><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；</li><li>root 容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；</li><li>root 容器里的代码被称为 <code>Vue模板</code> ；</li><li>Vue实例和容器是<code>一一对应的关系</code>；</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用；</li><li>Mustache 语法内是一个 <code>js表达式</code>，可以自动读取到data中的所有属性；</li><li>一旦data中的数据发生改变，那么模板中用到该数据的地方也会自动更新；（data 中的数据会被 Vue 数据劫持代理）</li><li>el 的两种写法 <ol><li>new Vue 时候配置 <code>el</code> 属性。<ol><li>先创建Vue实例，随后再通过 <code>实例名称.$mount(&#39;root&#39;)</code> 指定 <code>el</code> 的值</li></ol></li></ol></li><li>data 的两种写法<ol><li>对象式</li><li>函数式（推荐：Vue 组件化中必须使用函数式，否则会报错。）<ul><li>原则：由Vue管理的函数，一定<code>不要写箭头函数</code>，一旦写了箭头函数，this 就不再是 Vue 实例了</li></ul></li></ol></li></ol><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>功能：用于解析 <code>标签体</code> 内容。<br>写法：<code>&#123;&#123;xxx&#125;&#125;</code>, <code>xxx</code> 是 <code>js表达式</code> ，且可以直接读取到data中的所有属性。</p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="内置指令"><a href="#内置指令" class="headerlink" title="内置指令"></a>内置指令</h2><p>文档：<a href="https://v2.cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4">https://v2.cn.vuejs.org/v2/api/#%E6%8C%87%E4%BB%A4</a></p><p>功能：用于<code>解析标签</code>（包括：标签属性、标签体内容、绑定事件….)<br>写法：vue 中有很多指令，以 <code>v-xxx</code> 开头</p><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><p>单向数据绑定</p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>双向数据绑定：主要结合<code>表单元素</code>一起使用，收集表单数据。（文本框、复选、单选等等）</p><h3 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h3><p>作用：向其所在的节点中渲染<code>文本内容</code>。<br>与插值语法的区别：<code>v-text</code> 会<code>替换</code>掉节点中的内容（不识别 html结构），则不会。</p><h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h3><p>作用：向指定节点中渲染<code>包含html结构的内容</code>。<br>与插值语法的区别：</p><ol><li>v-html会替换掉节点中所有的内容，则不会。</li><li>v-html可以识别html结构。</li></ol><p>严重注意：v-html有安全性问题！</p><ol><li>在网站上动态渲染任意HTML是非常危险的，容易<code>导致XSS攻击</code>。</li><li>一定要在<code>可信</code>的内容上使用v-html，永不要用在用户提交的内容上！</li></ol><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>v-cloak 本质是一个特殊属性，Vue实例创建完毕并接管容器后，会<code>删掉</code>v-cloak属性。</p><p>应用场景：使用 css 配合 v-cloak 可以解决网速慢时页面展示出  未解析的问题。</p><ol><li>将可能出现延迟渲染的 DOM 结构添加 v-cloak 指令</li><li>在样式中设置：<code>[v-cloak]&#123;display: none&#125;</code></li></ol><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>v-once 所在节点在初次动态渲染后，就<code>视为静态内容</code>了。以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能。</p><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p>v-pre 会跳过其所在节点的编译过程。可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会<code>加快编译</code>。</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><h4 id="局部指令"><a href="#局部指令" class="headerlink" title="局部指令"></a>局部指令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">directives</span>:&#123;指令名: 配置对象&#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数写法</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">directives&#123;指令名: 回调函数&#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="全局指令"><a href="#全局指令" class="headerlink" title="全局指令"></a>全局指令</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象写法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名,配置对象);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数写法</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(指令名,回调函数);</span><br></pre></td></tr></table></figure><h3 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h3><ol><li><code>bind：指令与元素成功绑定时调用。</code></li><li><code>inserted：指令所在元素被插入页面时调用。</code></li><li><code>update：指令所在模板结构被重新解析时调用。</code></li><li>componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。</li><li>unbind：只调用一次，指令与元素解绑时调用。</li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>1.指令定义时不加 <code>v-</code>，但使用时要加 <code>v-</code>；<br>2.指令名如果是多个单词，要使用 <code>kebab-case</code> 命名方式。</p><h1 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h1><h2 id="单向数据绑定"><a href="#单向数据绑定" class="headerlink" title="单向数据绑定"></a>单向数据绑定</h2><p>语法：<code>v-bind:href = &quot;xxx&quot;</code> 或简写为 <code>:href = &quot;xxx&quot;</code><br>特点：数据只能从 data 流向页面</p><h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>语法：<code>v-mode:value= &quot;xxx&quot;</code> 或简写为 <code>v-model=&quot;xxx&quot;</code><br>特点：数据不仅能从 data 流向页面，还能从页面流向 data</p><p>补充：双向绑定一般都应用在表单类元素（输入类）上（如：input、select等）</p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><ol><li>M:模型（Model): data中的数据</li><li>V:视图（View): 模板代码（el所指定标签所包裹的元素）</li><li>VM:视图模型（ViewModel): Vue实例</li></ol><p>Vue 特性：</p><p>data 中所有的属性，最后都出现在了 <code>vm（实例对象）</code> 身上。<br>vm（实例对象） 身上<code>所有的属性</code> 及 <code>Vue原型</code> 上所有属性，在 <code>Vue模板</code> 中都可以直接使用。</p><h2 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h2><p>数据代理图示：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20230105165824.png" alt="20230105165824"></p><h3 id="Object-defineProperty-方法"><a href="#Object-defineProperty-方法" class="headerlink" title="Object.defineProperty 方法"></a>Object.defineProperty 方法</h3><p>数据代理底层是使用了 Object.defineProperty 这个方法来实现的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;origin&#x27;</span>,&#123;</span><br><span class="line">   <span class="attr">value</span>: <span class="string">&#x27;xinyang&#x27;</span>,</span><br><span class="line">   <span class="comment">// enumerable: true</span></span><br><span class="line">   <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">   <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weight = <span class="number">60</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,<span class="string">&#x27;weight&#x27;</span>,&#123;</span><br><span class="line">   <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取了 obj 的 weight 属性！&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> weight;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;修改取了 obj 的 weight 属性！值是：&quot;</span> + value);</span><br><span class="line">       weight = value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="简单的数据代理"><a href="#简单的数据代理" class="headerlink" title="简单的数据代理"></a>简单的数据代理</h3><p>通过一个对象代理对另一个对象中属性的操作(读/写)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">   <span class="attr">a</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">   <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, <span class="string">&#x27;a&#x27;</span>, &#123;</span><br><span class="line">   <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> obj1.<span class="property">a</span>;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">       obj1.<span class="property">a</span> = value;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">控制台运行结果：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">obj2</span></span><br><span class="line"><span class="comment">&#123;b: 2&#125;</span></span><br><span class="line"><span class="comment">obj2.a</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">obj2.a = 10</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">obj2.a</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">obj1</span></span><br><span class="line"><span class="comment">&#123;a: 10&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Vue-中的数据代理"><a href="#Vue-中的数据代理" class="headerlink" title="Vue 中的数据代理"></a>Vue 中的数据代理</h3><ol><li>Vue 中的数据代理：<br>通过vm对象来代理data对象中属性的操作（读/写）</li><li>Vue 中数据代理的好处：<br>更加方便的操作data中的数据</li><li>基本原理：<br>通过 object.defineProperty() 把 data 对象中所有属性添加到vm上。<br>为每一个添加到vm上的属性，都指定一个 getter/setter。<br>在 getter/setter 内部去操作（读/写）data 中对应的属性。</li></ol><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><h2 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h2><ol><li>v-on:xxx=”fun” 或 @xxx=”fun”</li><li><code>@xxx=&quot;fun(参数,[$event])&quot;</code></li><li>默认事件形参: <code>event</code></li><li>隐含属性对象: <code>$event</code></li><li>事件的回调需要配置在 <code>methods</code> 对象中，最终会在vm上；<ol><li>methods 中配置的函数，<code>不要用箭头函数</code>！否则this就不是vm了；</li><li>methods 中配置的函数，都是被Vue所管理的函数，this的指向是 <code>vm</code> 或 <code>组件实例对象</code>；</li></ol></li></ol><h2 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h2><p>Vue.js 为 <code>v-on</code> 提供了事件修饰符（修饰符可以链式调用）</p><ol><li>prevent：阻止默认事件（常用）；</li><li>stop：阻止事件冒泡（常用）；</li><li>once：事件只触发一次（常用）；</li><li>capture：使用事件的捕获模式；(在捕获阶段开始处理事件，就是嵌套结构中从外向内依次触发事件，默认是从内向外)</li><li>self：只有event.target是当前操作的元素时才触发事件；</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</li></ol><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Vue中的事件修饰符：</span></span><br><span class="line"><span class="comment">1.prevent：阻止默认事件（常用）；</span></span><br><span class="line"><span class="comment">2.stop：阻止事件冒泡（常用）；</span></span><br><span class="line"><span class="comment">3.once：事件只触发一次（常用）；</span></span><br><span class="line"><span class="comment">4.capture：使用事件的捕获模式；</span></span><br><span class="line"><span class="comment">5.self：只有event.target是当前操作的元素时才触发事件；</span></span><br><span class="line"><span class="comment">6.passive：事件的默认行为立即执行，无需等待事件回调执行完毕；</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止事件冒泡（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以连续写 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;a href=&quot;http://www.atguigu.com&quot; @click.prevent.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件只触发一次（常用） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">div2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕； --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;FRANK&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// console.log(e.target)</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="常用按键别名"><a href="#常用按键别名" class="headerlink" title="常用按键别名"></a>常用按键别名</h3><ol><li>回车 =&gt; enter</li><li>删除 =&gt; delete (捕获“删除”和“退格”键)</li><li>退出 =&gt; esc</li><li>空格 =&gt; space</li><li>换行 =&gt; tab (特殊，必须配合 <code>keydown</code> 去使用)</li><li>上 =&gt; up</li><li>下 =&gt; down</li><li>左 =&gt; left</li><li>右 =&gt; right</li></ol><p>Vue 未提供别名的按键，可以<code>使用按键原始的key值</code>（<code>通过事件对象.keyCode</code> 获取）去绑定，但注意要转为 kebab-case（短横线命名）</p><ul><li>如：CapsLock 需要转换为：caps-lock</li></ul><h3 id="系统修饰键（用法特殊）"><a href="#系统修饰键（用法特殊）" class="headerlink" title="系统修饰键（用法特殊）"></a>系统修饰键（用法特殊）</h3><ol><li>ctrl</li><li>alt</li><li>shift</li><li>meta (win键)</li></ol><p>特殊：</p><ul><li>配合 keyup 使用：按下修饰键的同时，<code>再按下其他键</code>，随后释放其他键，事件才被触发。</li><li>配合 keydown 使用：正常触发事件。</li></ul><p><code>Vue.config.keyCodes.自定义键名 = 键码</code> 可以去定制按键别名: <code>Vue.config.keyCodes.huiche = 13</code></p><h1 id="计算属性和监视属性"><a href="#计算属性和监视属性" class="headerlink" title="计算属性和监视属性"></a>计算属性和监视属性</h1><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p>定义：要用的属性不存在，要通过<code>已有属性</code>计算得来。<br>原理：底层借助了 <code>Objcet.defineproperty</code> 方法提供的 <code>getter</code> 和 <code>setter</code> 。<br>get函数什么时候执行？</p><ol><li>初次读取时会执行一次。</li><li>当依赖的数据发生改变时会被再次调用。</li></ol><p>备注：</p><ol><li>计算属性最终会出现在 <code>vm</code> 上，直接读取使用即可。（会直接将计算属性执行的结果放在vm身上）</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时<code>依赖的数据</code>发生改变。</li><li>优势：与 methods 实现相比，内部有<code>缓存机制</code>（复用），效率更高，调试方便（vue-devtools 工具中可以调试计算属性）。</li></ol><p>计算属性两种写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line"><span class="comment">//完整写法</span></span><br><span class="line"><span class="comment">/* fullName:&#123;</span></span><br><span class="line"><span class="comment">get()&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;get被调用了&#x27;)</span></span><br><span class="line"><span class="comment">return this.firstName + &#x27;-&#x27; + this.lastName</span></span><br><span class="line"><span class="comment">&#125;,</span></span><br><span class="line"><span class="comment">set(value)&#123;</span></span><br><span class="line"><span class="comment">console.log(&#x27;set&#x27;,value)</span></span><br><span class="line"><span class="comment">const arr = value.split(&#x27;-&#x27;)</span></span><br><span class="line"><span class="comment">this.firstName = arr[0]</span></span><br><span class="line"><span class="comment">this.lastName = arr[1]</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简写 (只考虑读取，不考虑修改)</span></span><br><span class="line"><span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get被调用了&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="监视属性"><a href="#监视属性" class="headerlink" title="监视属性"></a>监视属性</h2><p>watch 监视允许开发者<code>监视数据的变化</code>，从而针对数据的变化做特定的操作。</p><ul><li><p>语法<br>监视被监视的属性有两种写法：函数写法和对象写法，区别是：对象写法可以选择配置：<code>deep</code> <code>immediate</code> … 选项。</p><ul><li><p>函数写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">attribute</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"><span class="title function_">attribute</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">attribute</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line"><span class="attr">attribute</span>:&#123;</span><br><span class="line"><span class="title function_">handler</span>(<span class="params">newVal,oldVal</span>)&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// immediate: true</span></span><br><span class="line"><span class="comment">// deep:true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>补充<ol><li>监视的属性<code>必须存在</code>，才能进行监视！</li><li>监视有定义方式：<ol><li>new Vue 时传入 <code>watch</code> 配置</li><li>通过 <code>vm.$watch</code> 监视</li></ol></li><li>watch 也可以监听路由的变化</li></ol></li></ul></li><li><p>深度监视（deep）<br>watch <code>默认不监测对象内部属性的改变</code>，想要监视可以配置deep选项。<br>用法：在对象写法中配置 <code>deep:true</code> 可以监测对象内部值改变（多层）。</p></li><li><p>立即触发（immediate）<br>用法：在对象写法中配置 <code>immediate: true</code>，可以让侦听器初次加载自动触发一次。</p></li></ul><h2 id="计算属性和监视属性的区别"><a href="#计算属性和监视属性的区别" class="headerlink" title="计算属性和监视属性的区别"></a>计算属性和监视属性的区别</h2><p>computed和watch之间的区别：</p><ol><li>computed 能完成的功能，watch 都可以完成。</li><li>watch 能完成的功能，computed 不一定能完成，例如：<code>watch 可以进行异步操作</code>。</li></ol><p>两个重要的小原则：</p><ol><li>所被 Vue 管理的函数，最好写成普通函数，这样 this 的指向才是 vm 或 组件实例对象。</li><li>所有不被 Vue 所管理的函数最好写成箭头函数，这样 this 的指向才是 vm 或 组件实例对象。如：<ol><li>定时器的回调函数</li><li>ajax 的回调函数</li><li>Promise 的回调函数</li><li>…</li></ol></li></ol><h1 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h1><h2 id="Class-样式"><a href="#Class-样式" class="headerlink" title="Class 样式"></a>Class 样式</h2><p>写法 <code>:class=&quot;xxx&quot;</code> xxx 可以是字符串、对象、数组。</p><ol><li>字符串写法 适用于：类名不确定，要动态获取。</li><li>对象写法 适用于：要绑定多个样式，个数不确定，名字也不确定。</li><li>数组写法 适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</li></ol><h2 id="Style-样式"><a href="#Style-样式" class="headerlink" title="Style 样式"></a>Style 样式</h2><ol><li><code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code> 其中xxx是动态值。</li><li><code>:style=&quot;[a,b]&quot;</code> 其中a、b是样式对象。</li></ol><h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><h2 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h2><p>写法：</p><ol><li>v-if = “表达式” </li><li>v-else-if = “表达式”</li><li>v-else = “表达式”</li></ol><p>适用于：切换频率较低的场景。<br>特点：不展示的DOM元素直接被移除。<br>注意：v-if可以和:v-else-if、v-else一起使用，但要求<code>结构不能被打断</code>。</p><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><p>写法：</p><p>v-show = “表达式”</p><p>适用于：切换频率较高的场景。<br>特点：不展示的DOM元素未被移除，仅仅是使用样式<code>隐藏</code></p><p>备注：使用 v-if的时，元素可能无法获取到，而使用v-show一定可以获取到</p><h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ol><li>用于展示列表数据</li><li>语法：<code>v-for=&quot;(item, index) in xxx&quot; :key=&quot;index&quot;</code></li><li>可遍历：数组、对象、字符串（用的很少）、指定次数（用的很少)</li></ol><h2 id="key-的内部原理"><a href="#key-的内部原理" class="headerlink" title="key 的内部原理"></a>key 的内部原理</h2><p>面试：vue中的key有什么作用？（key的内部原理）</p><p>虚拟DOM中key的作用：</p><p>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue会根据<code>新数据</code>生成<code>新的虚拟 DOM</code><br>随后Vue进行<code>新虚拟DOM</code>与<code>旧虚拟DOM</code>的差异比较，比较规则如下：</p><ol><li>旧虚拟DOM中找到了与新虚拟DOM相同的 key<ol><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM！</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。</li></ol></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的 key<ol><li>创建新的真实DOM，随后渲染到到页面。</li></ol></li></ol><p>用index作为key可能会引发的问题：</p><ol><li>若对数据进行：逆序添加、逆序删除等破坏顺序操作: 会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。</li><li>如果结构中还包含输入类的DOM：会产生错误DOM更新 ==&gt; 界面有问题。</li></ol><p>开发中如何选择key?</p><ol><li>最好使用每条数据的<code>唯一标识作为key</code>, 比如id、手机号、身份证号、学号等唯一值。</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用index作为key是没有问题的。</li></ol><h2 id="Vue-数据检测原理"><a href="#Vue-数据检测原理" class="headerlink" title="Vue 数据检测原理"></a>Vue 数据检测原理</h2><p>vue 会监视 <code>data</code> 中<code>所有层次的数据</code></p><h3 id="模拟一个数据检测"><a href="#模拟一个数据检测" class="headerlink" title="模拟一个数据检测"></a>模拟一个数据检测</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line"><span class="attr">city</span>:<span class="string">&#x27;郑州&#x27;</span>,</span><br><span class="line"><span class="attr">school</span>:<span class="string">&#x27;郑州大学&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个监视的实例对象，用于监视data中属性的变化</span></span><br><span class="line"><span class="keyword">const</span> obs = <span class="keyword">new</span> <span class="title class_">Observer</span>(data)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obs)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备一个vm实例对象</span></span><br><span class="line"><span class="keyword">let</span> vm = &#123;&#125;</span><br><span class="line">vm.<span class="property">_data</span> = data = obs</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Observer</span>(<span class="params">obj</span>)&#123;</span><br><span class="line"><span class="comment">//汇总对象中所有的属性形成一个数组</span></span><br><span class="line"><span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">keys.<span class="title function_">forEach</span>(<span class="function">(<span class="params">k</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>,k,&#123;</span><br><span class="line"><span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> obj[k]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;k&#125;</span>被改了，我要去解析模板，生成虚拟DOM.....我要开始忙了`</span>)</span><br><span class="line">obj[k] = val</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监测对象中的数据"><a href="#监测对象中的数据" class="headerlink" title="监测对象中的数据"></a>监测对象中的数据</h3><p>通过 setter 实现监视，且要在 new Vue 时就传入要监测的数据。</p><ol><li>对象中后追加的属性，Vue 默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API：</li></ol><ul><li>Vue.set(target，propertyName/index，value) 或 </li><li>vm.$set(target，propertyName/index，value)</li></ul><h3 id="监测数组中的数据"><a href="#监测数组中的数据" class="headerlink" title="监测数组中的数据"></a>监测数组中的数据</h3><p>通过包裹数组更新元素的方法实现，本质就是做了两件事</p><ol><li>调用原生对应的方法对数组进行更新。</li><li>重新解析模板，进而更新页面。</li></ol><h2 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a>数组更新检测</h2><h3 id="变更方法"><a href="#变更方法" class="headerlink" title="变更方法"></a>变更方法</h3><p>Vue 将被侦听的数组的变更方法（<code>影响原数组的方法</code>）进行了包装（先调用原生对应的方法，然后再重新解析模板）所以它们也将会触发视图更新。这些被包裹过的方法包括：</p><ol><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ol><h3 id="替换数组"><a href="#替换数组" class="headerlink" title="替换数组"></a>替换数组</h3><p>替换数组指不会变更原始数组，而总是返回一个新数组。当使用非变更方法时，可以<code>用新数组替换旧数组</code></p><ol><li>filter()</li><li>concat()</li><li>slice()</li></ol><h2 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set"></a>Vue.set</h2><p>主要用于解决 Vue <code>无法检测到属性添加</code>的限制</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(object, key, value)</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">vm.<span class="title function_">set</span>(object, key, value)</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>Vue.set() 和 vm.$set() 不能给 <code>vm</code> 或 <code>vm的根数据对象</code> <code>添加属性</code></p><h1 id="表单输入绑定"><a href="#表单输入绑定" class="headerlink" title="表单输入绑定"></a>表单输入绑定</h1><h2 id="收集表单数据"><a href="#收集表单数据" class="headerlink" title="收集表单数据"></a>收集表单数据</h2><ol><li>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则v-model收集的是value值，用户输入的就是value值。</li><li>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则v-model收集的是value值，且要给标签配置value值。</li><li>若：<code>&lt;input type=&quot;checkbox&quot;/&gt;</code><ol><li>没有配置input的value属性，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>配置input的value属性:<ol><li>v-model的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li>v-model的初始值是<code>数组</code>，那么收集的的就是value组成的数组</li></ol></li></ol></li></ol><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ol><li>lazy：失去焦点再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首尾空格过滤</li></ol><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><p>定义：对要显示的数据进行<code>特定格式化后再显示</code>（适用于一些简单逻辑的处理）。过滤器可以用在两个地方：<code>插值表达式</code> 和 <code>v-bind</code> 属性绑定。</p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><h3 id="注册过滤器"><a href="#注册过滤器" class="headerlink" title="注册过滤器"></a>注册过滤器</h3><ol><li>全局过滤器：<code>Vue.filter(&#39;filterName&#39;,callback)</code> （多个 vue 实例之间共享）</li><li>局部过滤器：<code>new Vue&#123;filters:&#123;&#125;&#125;</code></li></ol><h3 id="使用过滤器"><a href="#使用过滤器" class="headerlink" title="使用过滤器"></a>使用过滤器</h3><ol><li>双花括号插值：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code></li><li>v-bind 表达式：<code>v-bind:属性 = &quot;xxx | 过滤器名&quot;</code></li></ol><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><ol><li>过滤器本质是一个函数（函数第一个形参是管道符前的值），必须有返回值</li><li>过滤器也可以接收额外参数、多个过滤器也可以串联</li><li>过滤器并没有改变原本的数据, 是<code>基于原始数据</code>加工产生新的数据</li><li>组件优先访问局部过滤器（就近原则）</li><li>过滤器也可以传递参数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用时传递参数</span></span><br><span class="line">&#123;&#123; message | filterA (arg1, arg2)&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收参数（注意函数第一个形参是管道符前的值）</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;filterA&#x27;</span>,<span class="function">(<span class="params">value, arg1, arg2</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>生命周期又名：生命周期回调函数、生命周期函数、生命周期钩子。是 Vue在关键时刻帮我们调用的一些特殊名称的函数。<br>生命周期函数的名字不可更改，但函数的具体内容是根据需求编写的。<br>生命周期函数中的 <code>this</code> 指向是 <code>vm</code> 或 <code>组件实例对象</code>。</p><h2 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><h2 id="常用的生命周期钩子"><a href="#常用的生命周期钩子" class="headerlink" title="常用的生命周期钩子"></a>常用的生命周期钩子</h2><ol><li>mounted: 发送ajax请求、启动定时器、绑定自定义事件、订阅消息等<code>初始化操作</code>。</li><li>beforeDestroy: 清除定时器、解绑自定义事件、取消订阅消息等<code>收尾工作</code>。</li></ol><h2 id="关于销毁-Vue实例"><a href="#关于销毁-Vue实例" class="headerlink" title="关于销毁 Vue实例"></a>关于销毁 Vue实例</h2><ol><li>销毁后借助 Vue开发者工具看不到任何信息。</li><li>销毁后<code>自定义事件会失效，但原生DOM事件依然有效</code>。</li><li>一般不会在 beforeDestroy操作数据，因为即便操作数据，也<code>不会再触发更新流程</code>了。</li></ol><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><div class='checkbox yellow'><input type="checkbox" />            <p>Vue TodoList 案例做出来，上传到 github</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>github 用户名搜索案例</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>张天禹老师讲的太好了，回头再刷一遍！</p>            </div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebPack</title>
      <link href="/2022/08/222022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_WebPack/976189ad/"/>
      <url>/2022/08/222022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_WebPack/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>官方文档：<a href="https://www.webpackjs.com">https://www.webpackjs.com</a><br>参考文档：<a href="http://xxpromise.gitee.io/webpack5-docs">http://xxpromise.gitee.io/webpack5-docs</a></p><h2 id="为什么需要打包工具？"><a href="#为什么需要打包工具？" class="headerlink" title="为什么需要打包工具？"></a>为什么需要打包工具？</h2><p>开发时，我们会使用框架（React、Vue),ES6模块化语法，Less/Sass等cs预处理器等语法进行开发。这样的代码要想在浏览器运行<strong>必须经过编译成浏览器能识别的JS、Css等语法</strong>，才能运行。所以我们需要打包工具帮我们做完这些事。除此之外，打包工具还能<strong>压缩代码、做兼容性处理、提升代码性能</strong>等。</p><h2 id="有哪些打包工具？"><a href="#有哪些打包工具？" class="headerlink" title="有哪些打包工具？"></a>有哪些打包工具？</h2><ul><li>Grunt</li><li>Gulp</li><li>Parcel</li><li>Webpack</li><li>Rollup</li><li>Vite</li><li>…</li></ul><h2 id="Webpack-介绍与快速开始"><a href="#Webpack-介绍与快速开始" class="headerlink" title="Webpack 介绍与快速开始"></a>Webpack 介绍与快速开始</h2><p>Webpack是一个静态资源打包工具。它会以一个或多个文件作为打包的入口，将我们整个项目所有文件编译组合成一个或多个文件输出出去。<br>Webpack输出的文件叫做 <code>bundle</code></p><p>WebPack 安装：<a href="https://www.webpackjs.com/guides/installation/">https://www.webpackjs.com/guides/installation/</a></p><ol><li>项目根目录运行 <code>npm init -y</code> 初始化 <code>package.json</code> 文件</li><li><code>npm install --save-dev webpack</code></li><li><code>npm install --save-dev webpack-cli</code> 【 webpack 4+ 版本，需要安装 CLI】</li><li>执行 <code>npx webpack ./src/main.js --mode=[development/production]</code></li></ol><h1 id="五大概念"><a href="#五大概念" class="headerlink" title="五大概念"></a>五大概念</h1><h2 id="entry-入口）"><a href="#entry-入口）" class="headerlink" title="entry(入口）"></a>entry(入口）</h2><p>指示Webpack从哪个文件开始打包</p><h2 id="output-输出）"><a href="#output-输出）" class="headerlink" title="output(输出）"></a>output(输出）</h2><p>指示Webpack打包完的文件输出到哪里去，如何命名等</p><h2 id="loader-加载器）"><a href="#loader-加载器）" class="headerlink" title="loader(加载器）"></a>loader(加载器）</h2><p>Webpack本身只能处理 <code>js、json</code> 等资源，其他资源需要借助 loader, Webpack才能解析</p><h2 id="plugins-插件）"><a href="#plugins-插件）" class="headerlink" title="plugins(插件）"></a>plugins(插件）</h2><p>扩展Webpack的功能</p><h2 id="mode-模式）"><a href="#mode-模式）" class="headerlink" title="mode(模式）"></a>mode(模式）</h2><h3 id="mode-development"><a href="#mode-development" class="headerlink" title="mode: development"></a>mode: development</h3><p>开发模式主要做两件事：</p><ol><li>编译代码，使浏览器能识别运行<br>开发时我们有样式资源、字体图标、图片资源、html资源等，webpack默认都不能处理这些资源，所以我们要<strong>加载配置</strong>来编译这些资源</li><li>代码质量检查，树立代码规范<br>提前检查代码的一些隐患，让代码运行时能更加健壮。<br>提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</li></ol><h3 id="mode-production"><a href="#mode-production" class="headerlink" title="mode: production"></a>mode: production</h3><p>生产模式是开发完成代码后，生成代码将来部署上线。这个模式下我们主要对代码进行优化，让其运行性能更好。</p><p>主要从两个角度出发:</p><ol><li>优化代码运行性能</li><li>优化代码打包速度</li></ol><h3 id="模式配置"><a href="#模式配置" class="headerlink" title="模式配置"></a>模式配置</h3><h4 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h4><p>需要分别准备两个配置文件来放不同的配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">├── webpack (项目根目录)</span><br><span class="line">    ├── config (Webpack配置文件目录)</span><br><span class="line">    │    ├── webpack.dev.js(开发模式配置文件)</span><br><span class="line">    │    └── webpack.prod.js(生产模式配置文件)</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack --config ./config/webpack.prod.js</span><br></pre></td></tr></table></figure><h4 id="配置运行指令"><a href="#配置运行指令" class="headerlink" title="配置运行指令"></a>配置运行指令</h4><p>为了方便运行不同模式的指令，可以将指令定义在 <code>package.json</code> 中 <code>scripts</code> 里面</p><p>快捷启动指令：</p><ul><li>开发模式：npm start 或 npm run dev</li><li>生产模式：npm run build</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack serve --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npx webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="配置-configuration"><a href="#配置-configuration" class="headerlink" title="配置(configuration)"></a>配置(configuration)</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><p>在项目根目录下新建文件：<strong>webpack.config.js</strong></p><p>配置完成后直接在终端运行：<code>npx webpack</code> 即可，它会找到 webpack.config.js 文件中的入口进行打包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   <span class="comment">// 入口</span></span><br><span class="line">   <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">   <span class="comment">// 输出</span></span><br><span class="line">   <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="comment">// 绝对路径</span></span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&#x27;foo.bundle.js&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 加载器</span></span><br><span class="line">   <span class="attr">module</span>: &#123;</span><br><span class="line">      <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 模块规则（配置 loader、解析器等选项）</span></span><br><span class="line">    ],</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 插件</span></span><br><span class="line">   <span class="attr">plugins</span>: [</span><br><span class="line">     <span class="comment">//...</span></span><br><span class="line">   ],</span><br><span class="line">   <span class="comment">// 模式</span></span><br><span class="line">   <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="入口文件打包输出文件名"><a href="#入口文件打包输出文件名" class="headerlink" title="入口文件打包输出文件名"></a>入口文件打包输出文件名</h2><p>默认所有文件都是打包在一个目录中，显得结构非常乱，可以配置不同文件的打包路径</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">```javascript</span><br><span class="line">const path = require(&#x27;path&#x27;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">   // 入口</span><br><span class="line">   entry: &#x27;./src/main.js&#x27;,</span><br><span class="line">   // 输出</span><br><span class="line">   output: &#123;</span><br><span class="line">    // 绝对路径</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line"><span class="deletion">-    filename: &#x27;foo.bundle.js&#x27;</span></span><br><span class="line"><span class="addition">+    filename: &#x27;static/js/foo.bundle.js&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   // 加载器</span><br><span class="line">   module: &#123;</span><br><span class="line">      rules: [</span><br><span class="line">    # 如图片静态资源</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+       test:/\.(png|jpe?g|gif|webp|svg)$/,</span></span><br><span class="line"><span class="addition">+       type:&quot;asset&quot;,</span></span><br><span class="line"><span class="addition">+       parser:&#123;</span></span><br><span class="line"><span class="addition">+           dataUr1Condition:&#123;</span></span><br><span class="line"><span class="addition">+           # 小于10kb的图片转base64</span></span><br><span class="line"><span class="addition">+           # 优点：减少请求数量缺点：体积会更大</span></span><br><span class="line"><span class="addition">+           maxSize:10*1024,//10kb</span></span><br><span class="line"><span class="addition">+           &#125;,</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="addition">+    generator: &#123;</span></span><br><span class="line"><span class="addition">+       # 输出图片名称及路径</span></span><br><span class="line"><span class="addition">+       # [hash:10] hash 值取前 10 位</span></span><br><span class="line"><span class="addition">+       filename: &#x27;static/images/[hash:10][ext][query]&#x27;,</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    ],</span><br><span class="line">   &#125;,</span><br><span class="line">   // 插件</span><br><span class="line">   plugins: [</span><br><span class="line">     //...</span><br><span class="line">   ],</span><br><span class="line">   // 模式</span><br><span class="line">   mode: &#x27;development&#x27;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自动清空上次打包内容"><a href="#自动清空上次打包内容" class="headerlink" title="自动清空上次打包内容"></a>自动清空上次打包内容</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">   output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, &#x27;dist&#x27;),</span><br><span class="line">    filename: &#x27;static/js/foo.bundle.js&#x27;,</span><br><span class="line"><span class="addition">+   # 原理：在打包前，将path整个目录内容清空，再进行打包</span></span><br><span class="line"><span class="addition">+   clean: true,</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h1><p>文档：<a href="https://www.webpackjs.com/loaders/">https://www.webpackjs.com/loaders/</a></p><p>如果遇到 webpack 不能处理的资源，都需要找到对应的 loader 对其进行转换。</p><h2 id="使用-loader"><a href="#使用-loader" class="headerlink" title="使用 loader"></a>使用 loader</h2><p>有<strong>三种</strong>使用 loader 的方式：</p><h3 id="配置（推荐）"><a href="#配置（推荐）" class="headerlink" title="配置（推荐）"></a>配置（推荐）</h3><p>在 webpack.config.js 文件中指定 loader</p><p><strong>module.rules</strong> 允许在 webpack 配置中指定多个 loader：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">&#x27;style-loader&#x27;</span> &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">modules</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><p>见文档</p><h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><p>见文档</p><h2 id="loader-特性"><a href="#loader-特性" class="headerlink" title="loader 特性"></a>loader 特性</h2><ol><li>loader 支持链式传递。能够对资源使用流水线(pipeline)。<strong>多个 loader 执行顺序：从右到左</strong>。loader 链中的第一个 loader 返回值给下一个 loader。在最后一个 loader，返回 webpack 所预期的 JavaScript。</li><li>loader 可以是同步的，也可以是异步的。</li><li>loader 运行在 Node.js 中，并且能够执行任何可能的操作。</li><li>loader 接收查询参数。用于对 loader 传递配置。</li><li>loader 也能够使用 options 对象进行配置。</li><li>除了使用 package.json 常见的 main 属性，还可以将普通的 npm 模块导出为 loader，做法是在 package.json 里定义一个 loader 字段。</li><li>插件(plugin)可以为 loader 带来更多特性。</li><li>loader 能够产生额外的任意文件。</li></ol><h2 id="处理样式资源"><a href="#处理样式资源" class="headerlink" title="处理样式资源"></a>处理样式资源</h2><p>Webpack本身是不能识别样式资源的，所以我们需要借助 Loader 来处理 <strong>Css、Less、Sass、Scss、Styl</strong> 样式资源</p><h3 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev css-loader</span><br><span class="line">npm install --save-dev style-loader</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>webpack.config.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line"><span class="addition">+    rules: [</span></span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.css$/,</span></span><br><span class="line">        #  注意执行顺序是从后往前</span><br><span class="line"><span class="addition">+        use: [ &#x27;style-loader&#x27;, &#x27;css-loader&#x27; ]</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    ]</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a>less-loader</h3><p>less-loader：<a href="https://www.webpackjs.com/loaders/less-loader/">https://www.webpackjs.com/loaders/less-loader/</a></p><h3 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a>sass-loader</h3><p>sass-loader：<a href="https://www.webpackjs.com/loaders/sass-loader/">https://www.webpackjs.com/loaders/sass-loader/</a></p><h2 id="处理图片资源"><a href="#处理图片资源" class="headerlink" title="处理图片资源"></a>处理图片资源</h2><p>过去在Webpack4时，我们处理图片资源通过 <code>file-loader</code> 和 <code>url-loader</code> 进行处理<br>现在Webpack5已经将两个Loader功能内置到Webpack里了，我们只需要简单配置即可处理图片资源</p><p>拓展：</p><p>一般<strong>体积较小的图片会将其转换为 base64 格式</strong>，优点：减少请求数量缺点：体积会更大</p><p>webpack.config.js:</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    // 加载器</span><br><span class="line">    module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      // 模块规则（配置 loader、解析器等选项）</span><br><span class="line"><span class="addition">+   &#123;</span></span><br><span class="line"><span class="addition">+       test:/\.(png|jpe?g|gif|webp|svg)$/,</span></span><br><span class="line"><span class="addition">+       type:&quot;asset&quot;,</span></span><br><span class="line"><span class="addition">+       parser:&#123;</span></span><br><span class="line"><span class="addition">+           dataUr1Condition:&#123;</span></span><br><span class="line"><span class="addition">+           # 小于10kb的图片转base64</span></span><br><span class="line"><span class="addition">+           # 优点：减少请求数量缺点：体积会更大</span></span><br><span class="line"><span class="addition">+           maxSize:10*1024,//10kb</span></span><br><span class="line"><span class="addition">+           &#125;,</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+   &#125;,</span></span><br><span class="line"><span class="addition">+    generator: &#123;</span></span><br><span class="line"><span class="addition">+       # 输出图片名称及路径</span></span><br><span class="line"><span class="addition">+       # [hash:10] hash 值取前 10 位</span></span><br><span class="line"><span class="addition">+       filename: &#x27;static/images/[hash:10][ext][query]&#x27;,</span></span><br><span class="line"><span class="addition">+    &#125;,</span></span><br><span class="line">    ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="处理字体图标资源和其他资源"><a href="#处理字体图标资源和其他资源" class="headerlink" title="处理字体图标资源和其他资源"></a>处理字体图标资源和其他资源</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        # `type: &quot;asset/resource&quot;` 和 `type: &quot;asset&quot;`的区别：</span><br><span class="line">        # 1. `type: &quot;asset/resource&quot;` 相当于`file-loader`, 将文件转化成 Webpack 能识别的资源，其他不做处理</span><br><span class="line">        # 2. `type: &quot;asset&quot;` 相当于`url-loader`, 将文件转化成 Webpack 能识别的资源，同时小于某个大小的资源会处理成 data URI 形式</span><br><span class="line"><span class="addition">+      &#123;</span></span><br><span class="line"><span class="addition">+        test: /\.(ttf|woff2?|map4|map3|avi)$/,</span></span><br><span class="line"><span class="addition">+        type: &quot;asset/resource&quot;,</span></span><br><span class="line"><span class="addition">+        generator: &#123;</span></span><br><span class="line"><span class="addition">+          filename: &quot;static/media/[hash:8][ext][query]&quot;,</span></span><br><span class="line"><span class="addition">+        &#125;,</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="处理-js-资源"><a href="#处理-js-资源" class="headerlink" title="处理 js 资源"></a>处理 js 资源</h2><blockquote><ol><li>团队对代码格式是有严格要求的，我们不能由肉眼去检测代码格式，需要使用专业的工具（<code>Eslint</code>）来检测。</li><li>Webpack 对 js 处理是有限的，只能编译 js 中 ES 模块化语法，不能编译其他语法，导致 js 不能在低版本浏览器中运行。（<code>Babel</code>）</li></ol></blockquote><h3 id="Eslint-（代码格式）"><a href="#Eslint-（代码格式）" class="headerlink" title="Eslint （代码格式）"></a>Eslint （代码格式）</h3><p>参考：<a href="http://xxpromise.gitee.io/webpack5-docs/base/javascript.html#eslint">http://xxpromise.gitee.io/webpack5-docs/base/javascript.html#eslint</a></p><h4 id="在-Webpack-中使用"><a href="#在-Webpack-中使用" class="headerlink" title="在 Webpack 中使用"></a>在 Webpack 中使用</h4><h5 id="下载包"><a href="#下载包" class="headerlink" title="下载包"></a>下载包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i eslint-webpack-plugin eslint -D</span><br></pre></td></tr></table></figure><h5 id="创建-eslintrc-js-配置文件"><a href="#创建-eslintrc-js-配置文件" class="headerlink" title="创建.eslintrc.js 配置文件"></a>创建.eslintrc.js 配置文件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 继承 Eslint 规则</span></span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&quot;eslint:recommended&quot;</span>],</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// 启用node中全局变量</span></span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 启用浏览器中全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">2</span>, <span class="comment">// 不能使用 var 定义变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line"><span class="addition">+    new ESLintWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+      # 指定检查文件的根目录</span></span><br><span class="line"><span class="addition">+      context: path.resolve(__dirname, &quot;src&quot;),</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h5><p>推荐在 vscode 中安装 Eslint 插件，即可不用编译就能看到错误，可以提前解决。<br>但是此时就会对项目<strong>所有文件</strong>默认进行 Eslint 检查了，dist 目录下的打包后文件就会报错。<br>但是我们<strong>只需要检查 src 下面的文件</strong>，不需要检查 dist 下面的文件。所以可以使用 <strong>Eslint 忽略文件</strong>解决。<br>在项目根目录新建 <code>.eslintignore</code> 文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 忽略dist目录下所有文件</span><br><span class="line">dist</span><br></pre></td></tr></table></figure><h3 id="Babel-（兼容性处理）"><a href="#Babel-（兼容性处理）" class="headerlink" title="Babel （兼容性处理）"></a>Babel （兼容性处理）</h3><p>参考：<a href="http://xxpromise.gitee.io/webpack5-docs/base/javascript.html#babel">http://xxpromise.gitee.io/webpack5-docs/base/javascript.html#babel</a></p><h2 id="处理-Html-资源"><a href="#处理-Html-资源" class="headerlink" title="处理 Html 资源"></a>处理 Html 资源</h2><p>默认 html 中需要我们手动地去引入打包好的资源，随着项目复杂程度越来越高，手动引入效率低，容易出错。webpack 中可以通过插件来自动引入。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>webpack.config.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line"><span class="addition">+    new HtmlWebpackPlugin(&#123;</span></span><br><span class="line"><span class="addition">+      # 以 public/index.html 为模板创建文件</span></span><br><span class="line"><span class="addition">+      # 新的html文件有两个特点：1. 内容和源文件一致 2. 自动引入打包生成的js等资源</span></span><br><span class="line"><span class="addition">+      template: path.resolve(__dirname, &quot;public/index.html&quot;),</span></span><br><span class="line"><span class="addition">+    &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="自动化（devServer）"><a href="#自动化（devServer）" class="headerlink" title="自动化（devServer）"></a>自动化（devServer）</h1><p>每次改完源代码都需要手动输入指令才能编译代码，效率低。可以通过 <code>webpack-dev-server</code> 实现自动化编译。所有代码都会在<strong>内存中编译打包</strong>，并不会输出到 dist 目录下</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><h2 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h2><p>webpack.config.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 开发服务器（不会输出资源，在内存中编译打包的）</span><br><span class="line"><span class="addition">+  devServer: &#123;</span></span><br><span class="line"><span class="addition">+    host: &quot;localhost&quot;, // 启动服务器域名</span></span><br><span class="line"><span class="addition">+    port: &quot;3000&quot;, // 启动服务器端口号</span></span><br><span class="line"><span class="addition">+    open: true, // 是否自动打开浏览器</span></span><br><span class="line"><span class="addition">+  &#125;,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运行指令"><a href="#运行指令" class="headerlink" title="运行指令"></a>运行指令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx webpack serve</span><br></pre></td></tr></table></figure><h1 id="Css-处理"><a href="#Css-处理" class="headerlink" title="Css 处理"></a>Css 处理</h1><h2 id="提取-Css-成单独文件"><a href="#提取-Css-成单独文件" class="headerlink" title="提取 Css 成单独文件"></a>提取 Css 成单独文件</h2><p>Css 文件目前被打包到 js 文件中，当 js 文件加载时，会创建一个 style 标签来生成样式。这样对于网站来说，会出现<strong>闪屏现象</strong>，用户体验不好，我们应该是单独的 Css 文件，<strong>通过 link 标签加载</strong>性能才好。webpack 中有 <code>mini-css-extract-plugin</code> 插件可以帮助我们做到。</p><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h3><p>webpack.prod.js</p><p><strong>注意：所有使用 <code>&quot;style-loader&quot;</code> 的地方都要替换成：<code>MiniCssExtractPlugin.loader</code></strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const MiniCssExtractPlugin = require(&quot;mini-css-extract-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  plugins: [</span><br><span class="line"><span class="addition">+    // 提取css成单独文件</span></span><br><span class="line"><span class="addition">+    new MiniCssExtractPlugin(&#123;</span></span><br><span class="line"><span class="addition">+      // 定义输出文件名和目录</span></span><br><span class="line"><span class="addition">+      filename: &quot;static/css/main.css&quot;,</span></span><br><span class="line"><span class="addition">+    &#125;),</span></span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Css-兼容性处理"><a href="#Css-兼容性处理" class="headerlink" title="Css 兼容性处理"></a>Css 兼容性处理</h2><h3 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-loader postcss postcss-preset-env -D</span><br></pre></td></tr></table></figure><h3 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h3><p>webpack.prod.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="addition">+            loader: &quot;postcss-loader&quot;,</span></span><br><span class="line"><span class="addition">+            options: &#123;</span></span><br><span class="line"><span class="addition">+              postcssOptions: &#123;</span></span><br><span class="line"><span class="addition">+                plugins: [</span></span><br><span class="line"><span class="addition">+                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+              &#125;,</span></span><br><span class="line"><span class="addition">+            &#125;,</span></span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="addition">+            loader: &quot;postcss-loader&quot;,</span></span><br><span class="line"><span class="addition">+            options: &#123;</span></span><br><span class="line"><span class="addition">+              postcssOptions: &#123;</span></span><br><span class="line"><span class="addition">+                plugins: [</span></span><br><span class="line"><span class="addition">+                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+              &#125;,</span></span><br><span class="line"><span class="addition">+            &#125;,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;less-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="addition">+            loader: &quot;postcss-loader&quot;,</span></span><br><span class="line"><span class="addition">+            options: &#123;</span></span><br><span class="line"><span class="addition">+              postcssOptions: &#123;</span></span><br><span class="line"><span class="addition">+                plugins: [</span></span><br><span class="line"><span class="addition">+                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+              &#125;,</span></span><br><span class="line"><span class="addition">+            &#125;,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;sass-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line">        use: [</span><br><span class="line">          MiniCssExtractPlugin.loader,</span><br><span class="line">          &quot;css-loader&quot;,</span><br><span class="line">          &#123;</span><br><span class="line"><span class="addition">+            loader: &quot;postcss-loader&quot;,</span></span><br><span class="line"><span class="addition">+            options: &#123;</span></span><br><span class="line"><span class="addition">+              postcssOptions: &#123;</span></span><br><span class="line"><span class="addition">+                plugins: [</span></span><br><span class="line"><span class="addition">+                  &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span></span><br><span class="line"><span class="addition">+                ],</span></span><br><span class="line"><span class="addition">+              &#125;,</span></span><br><span class="line"><span class="addition">+            &#125;,</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &quot;stylus-loader&quot;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="合并配置"><a href="#合并配置" class="headerlink" title="合并配置"></a>合并配置</h3><p>将上面配置中地重复性代码抽离出来</p><p>webpack.prod.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">// 获取处理样式的 Loaders</span><br><span class="line"><span class="addition">+ const getStyleLoaders = (preProcessor) =&gt; &#123;</span></span><br><span class="line"><span class="addition">+   return [</span></span><br><span class="line"><span class="addition">+     MiniCssExtractPlugin.loader,</span></span><br><span class="line"><span class="addition">+     &quot;css-loader&quot;,</span></span><br><span class="line"><span class="addition">+     &#123;</span></span><br><span class="line"><span class="addition">+       loader: &quot;postcss-loader&quot;,</span></span><br><span class="line"><span class="addition">+       options: &#123;</span></span><br><span class="line"><span class="addition">+         postcssOptions: &#123;</span></span><br><span class="line"><span class="addition">+           plugins: [</span></span><br><span class="line"><span class="addition">+             &quot;postcss-preset-env&quot;, // 能解决大多数样式兼容性问题</span></span><br><span class="line"><span class="addition">+           ],</span></span><br><span class="line"><span class="addition">+         &#125;,</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+     &#125;,</span></span><br><span class="line"><span class="addition">+     preProcessor,</span></span><br><span class="line"><span class="addition">+   ].filter(Boolean);</span></span><br><span class="line"><span class="addition">+ &#125;;</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 用来匹配 .css 结尾的文件</span><br><span class="line">        test: /\.css$/,</span><br><span class="line">        // use 数组里面 Loader 执行顺序是从右到左</span><br><span class="line"><span class="addition">+        use: getStyleLoaders(),</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.less$/,</span><br><span class="line"><span class="addition">+        use: getStyleLoaders(&quot;less-loader&quot;),</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.s[ac]ss$/,</span><br><span class="line"><span class="addition">+        use: getStyleLoaders(&quot;sass-loader&quot;),</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: /\.styl$/,</span><br><span class="line"><span class="addition">+        use: getStyleLoaders(&quot;stylus-loader&quot;),</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="控制兼容性"><a href="#控制兼容性" class="headerlink" title="控制兼容性"></a>控制兼容性</h3><p>可以在 <code>package.json</code> 文件中添加 <code>browserslist</code> 来控制样式的兼容性做到什么程度</p><p>更多 browserslist 配置，查看 <a href="https://github.com/browserslist/browserslist">browserslist 文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;last 2 version&quot;</span><span class="punctuation">,</span> <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span> <span class="string">&quot;not dead&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Css-压缩"><a href="#Css-压缩" class="headerlink" title="Css 压缩"></a>Css 压缩</h2><h3 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i css-minimizer-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ const CssMinimizerPlugin = require(&quot;css-minimizer-webpack-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">    // css压缩</span><br><span class="line"><span class="addition">+    new CssMinimizerPlugin(),</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Webpack-优化"><a href="#Webpack-优化" class="headerlink" title="Webpack 优化"></a>Webpack 优化</h1><p>主要从从以下角度来进行优化：</p><ol><li>提升开发体验</li><li>提升打包构建速度</li><li>减少代码体积</li><li>优化代码运行性能</li></ol><h2 id="提升开发体验"><a href="#提升开发体验" class="headerlink" title="提升开发体验"></a>提升开发体验</h2><h3 id="配置-快捷路径"><a href="#配置-快捷路径" class="headerlink" title="配置 @ 快捷路径"></a>配置 @ 快捷路径</h3><p>使用 <code>@</code> 表示 src 源代码目录，从外往里查找；不要使用 <code>../../</code> 从里往外查找</p><ol><li>在 webpack.config.js 中配置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">resolve</span>: &#123;</span><br><span class="line">  <span class="attr">alias</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@&quot;</span>: path.<span class="title function_">join</span>(__dirname,<span class="string">&#x27;./src/&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在项目中直接使用 <code>@</code> 表示 src 源代码目录</li></ol><h3 id="SourceMap"><a href="#SourceMap" class="headerlink" title="SourceMap"></a>SourceMap</h3><p>开发时我们运行的代码是经过 webpack 编译后的所有 css 和 js 合并成了一个文件，并且多了其他代码。此时如果代码运行出错则很难去发现错误出现在哪里<br>SourceMap（源代码映射）是一个用来生成源代码与构建后代码一一映射的文件的方案。它会生成一个 xxx.map 文件，里面包含源代码和构建后代码每一行、每一列的映射关系。当构建后代码出错了，会通过 xxx.map 文件，从构建后代码出错位置<strong>找到映射后源代码出错位置</strong>，从而让浏览器提示源代码文件出错位置，<strong>帮助我们更快的找到错误根源和调试</strong>。</p><p>SourceMap 的值有很多种情况，详情可以查看 <a href="https://webpack.js.org/configuration/devtool/#root">Webpack DevTool 文档</a></p><p>实际开发时我们只需要关注两种情况即可：</p><h4 id="开发模式：cheap-module-source-map"><a href="#开发模式：cheap-module-source-map" class="headerlink" title="开发模式：cheap-module-source-map"></a>开发模式：cheap-module-source-map</h4><p>优点：<strong>打包编译速度快，只包含行映射</strong><br>缺点：没有列映射</p><p>webpack.dev.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &quot;development&quot;,</span><br><span class="line"><span class="addition">+  devtool: &quot;cheap-module-source-map&quot;,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：开发环境下建议把 devtool 的值设置为 <code>eval-source-map</code> 好处：<strong>可以精准定位到具体的错误行</strong></p><h4 id="生产模式：source-map"><a href="#生产模式：source-map" class="headerlink" title="生产模式：source-map"></a>生产模式：source-map</h4><p>优点：<strong>包含行/列映射</strong><br>缺点：打包编译速度更慢</p><p>webpack.prod.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  mode: &quot;production&quot;,</span><br><span class="line"><span class="addition">+  devtool: &quot;source-map&quot;,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>提示：生产模式下为了<strong>安全性考虑</strong>建议将 devtool 的值设置为：<code>nosources-source-map</code> 或关闭 <code>source-map</code> 好处：防止源码泄露，提高网站的安全性</p><h2 id="提升打包构建速度"><a href="#提升打包构建速度" class="headerlink" title="提升打包构建速度"></a>提升打包构建速度</h2><h3 id="HMR"><a href="#HMR" class="headerlink" title="HMR"></a>HMR</h3><p>HotModuleReplacement（HMR/热模块替换）：在程序运行中，替换、添加或删除模块，而无需重新加载整个页面。</p><p>开发时我们修改了其中一个模块代码，Webpack 默认会将所有模块全部重新打包编译，速度很慢。所以我们需要做到修改某个模块代码，就只有这个模块代码需要重新打包编译，其他模块不变，这样打包速度就能变快。</p><h4 id="配置-6"><a href="#配置-6" class="headerlink" title="配置"></a>配置</h4><p>webpack.dev.js</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  // 其他省略</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &quot;localhost&quot;, // 启动服务器域名</span><br><span class="line">    port: &quot;3000&quot;, // 启动服务器端口号</span><br><span class="line">    open: true, // 是否自动打开浏览器</span><br><span class="line"><span class="addition">+    hot: true, // 开启HMR功能（只能用于开发环境，生产环境不需要了）</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>css 样式经过 style-loader 处理，已经具备 HMR 功能了。 但是 js 还不行</p><h4 id="JS-配置"><a href="#JS-配置" class="headerlink" title="JS 配置"></a>JS 配置</h4><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否支持HMR功能</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(<span class="string">&quot;./js/xxx.js&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这样写会很麻烦，所以实际开发我们会使用其他 loader 来解决</p><p>如：</p><ol><li><a href="https://github.com/vuejs/vue-loader">vue-loader</a></li><li><a href="https://github.com/gaearon/react-hot-loader">react-hot-loader</a></li></ol><h3 id="OneOf"><a href="#OneOf" class="headerlink" title="OneOf"></a>OneOf</h3><p>打包时每个文件都会经过所有 loader 处理，虽然因为 test 正则原因实际没有处理上，但是都要过一遍，比较慢。<br>OneOf 顾名思义就是只能匹配上一个 loader, 剩下的就不匹配了（开发模式和生产模式都可以使用）</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">oneOf</span>: [</span><br><span class="line">        <span class="comment">// 将所有的 loader 放到这个里面</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Include-Exclude"><a href="#Include-Exclude" class="headerlink" title="Include/Exclude"></a>Include/Exclude</h3><p>开发时我们需要使用第三方的库或插件，所有文件都下载到 <code>node_modules</code> 中了。而这些文件是不需要编译可以直接使用的。<br>所以我们在对 js 文件处理时，要排除 <code>node_modules</code> 下面的文件。<code>Include / Exclude</code> 只能使用一个。<br>include：包含，只处理 xxx 文件<br>exclude：排除，除了 xxx 文件以外其他文件都处理</p><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">   <span class="comment">// exclude: /node_modules/, // 排除node_modules代码不编译</span></span><br><span class="line">   <span class="attr">include</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;../src&quot;</span>), <span class="comment">// 也可以用包含</span></span><br><span class="line">   <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3><p>每次打包时 js 文件都要经过 Eslint 检查 和 Babel 编译，速度比较慢。我们<strong>可以缓存之前的 Eslint 检查 和 Babel 编译结果</strong>，这样第二次打包时速度就会更快了。</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&quot;path&quot;);</span><br><span class="line">const ESLintWebpackPlugin = require(&quot;eslint-webpack-plugin&quot;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">       &#123;</span><br><span class="line">         test: /\.js$/,</span><br><span class="line">         // exclude: /node_modules/, // 排除node_modules代码不编译</span><br><span class="line">         include: path.resolve(__dirname, &quot;../src&quot;), // 也可以用包含</span><br><span class="line">         loader: &quot;babel-loader&quot;,</span><br><span class="line"><span class="addition">+         options: &#123;</span></span><br><span class="line"><span class="addition">+           cacheDirectory: true, // 开启babel编译缓存</span></span><br><span class="line"><span class="addition">+           cacheCompression: false, // 缓存文件不要压缩</span></span><br><span class="line"><span class="addition">+         &#125;,</span></span><br><span class="line">       &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    new ESLintWebpackPlugin(&#123;</span><br><span class="line">      // 指定检查文件的根目录</span><br><span class="line">      context: path.resolve(__dirname, &quot;../src&quot;),</span><br><span class="line">      exclude: &quot;node_modules&quot;, // 默认值</span><br><span class="line"><span class="addition">+      cache: true, // 开启缓存</span></span><br><span class="line"><span class="addition">+      // 缓存目录</span></span><br><span class="line"><span class="addition">+      cacheLocation: path.resolve(</span></span><br><span class="line"><span class="addition">+        __dirname,</span></span><br><span class="line"><span class="addition">+        &quot;../node_modules/.cache/.eslintcache&quot;</span></span><br><span class="line">      ),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Thead"><a href="#Thead" class="headerlink" title="Thead"></a>Thead</h3><p>当项目越来越庞大时，打包速度越来越慢，甚至于需要一个下午才能打包出来代码。这个速度是比较慢的。<br>我们想要继续提升打包速度，其实就是要提升 js 的打包速度，因为其他文件都比较少。<br>而对 js 文件处理主要就是 eslint 、babel、Terser 三个工具，所以我们要提升它们的运行速度。<br>我们可以开启多进程同时处理 js 文件，这样速度就比之前的单进程打包更快了。</p><p>深入：<a href="http://xxpromise.gitee.io/webpack5-docs/senior/liftingSpeed.html#thead">http://xxpromise.gitee.io/webpack5-docs/senior/liftingSpeed.html#thead</a></p><h2 id="减少代码体积"><a href="#减少代码体积" class="headerlink" title="减少代码体积"></a>减少代码体积</h2><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><p>Tree Shaking 是一个术语，通常用于描述移除 JavaScript 中的<strong>没有使用上的代码</strong>。Webpack 已经默认开启了这个功能，无需其他配置。</p><p>注意：它依赖 ES Module</p><h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>Babel 为编译的每个文件都插入了辅助代码，使代码体积过大！<br>Babel 对一些公共方法使用了非常小的辅助代码，比如 _extend。默认情况下会被添加到每一个需要它的文件中。<br>你可以将这些辅助代码作为一个独立模块，来避免重复引入。<br><code>@babel/plugin-transform-runtime</code>: 禁用了 Babel 自动对每个文件的 runtime 注入，而是引入 <code>@babel/plugin-transform-runtime</code> 并且使所有辅助代码从这里引用</p><h4 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @babel/plugin-transform-runtime -D</span><br></pre></td></tr></table></figure><h4 id="配置-7"><a href="#配置-7" class="headerlink" title="配置"></a>配置</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    loader: &quot;babel-loader&quot;,</span><br><span class="line">    options: &#123;</span><br><span class="line"><span class="addition">+        plugins: [&quot;@babel/plugin-transform-runtime&quot;], // 减少代码体积</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="Image-Minimizer"><a href="#Image-Minimizer" class="headerlink" title="Image Minimizer"></a>Image Minimizer</h3><p><code>image-minimizer-webpack-plugin</code> 是用来压缩图片的插件。如果项目中引用了较多图片，那么图片体积会比较大，将来请求速度比较慢。我们可以对图片进行压缩，减少图片体积。<br>注意：如果项目中图片都是在线链接，那么就不需要了。本地项目静态图片才需要进行压缩。</p><h4 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h4><p>下载包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i image-minimizer-webpack-plugin imagemin -D</span><br></pre></td></tr></table></figure><p>两种压缩模式：</p><p><a href="https://baike.baidu.com/item/%E6%97%A0%E6%8D%9F%E3%80%81%E6%9C%89%E6%8D%9F%E5%8E%8B%E7%BC%A9">有损/无损压缩的区别</a></p><p>无损压缩：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imagemin-gifsicle imagemin-jpegtran imagemin-optipng imagemin-svgo -D</span><br></pre></td></tr></table></figure><p>有损压缩：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install imagemin-gifsicle imagemin-mozjpeg imagemin-pngquant imagemin-svgo -D</span><br></pre></td></tr></table></figure><h4 id="配置-8"><a href="#配置-8" class="headerlink" title="配置"></a>配置</h4><p>无损压缩配置为例：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+const ImageMinimizerPlugin = require(&quot;image-minimizer-webpack-plugin&quot;);</span></span><br><span class="line"></span><br><span class="line">optimization: &#123;</span><br><span class="line">// 压缩图片</span><br><span class="line">new ImageMinimizerPlugin(&#123;</span><br><span class="line"><span class="addition">+minimizer: &#123;</span></span><br><span class="line"><span class="addition">+ implementation: ImageMinimizerPlugin.imageminGenerate,</span></span><br><span class="line"><span class="addition">+ options: &#123;</span></span><br><span class="line"><span class="addition">+   plugins: [</span></span><br><span class="line"><span class="addition">+     [&quot;gifsicle&quot;, &#123; interlaced: true &#125;],</span></span><br><span class="line"><span class="addition">+     [&quot;jpegtran&quot;, &#123; progressive: true &#125;],</span></span><br><span class="line"><span class="addition">+     [&quot;optipng&quot;, &#123; optimizationLevel: 5 &#125;],</span></span><br><span class="line"><span class="addition">+     [</span></span><br><span class="line"><span class="addition">+       &quot;svgo&quot;,</span></span><br><span class="line"><span class="addition">+       &#123;</span></span><br><span class="line"><span class="addition">+         plugins: [</span></span><br><span class="line"><span class="addition">+           &quot;preset-default&quot;,</span></span><br><span class="line"><span class="addition">+           &quot;prefixIds&quot;,</span></span><br><span class="line"><span class="addition">+           &#123;</span></span><br><span class="line"><span class="addition">+             name: &quot;sortAttrs&quot;,</span></span><br><span class="line"><span class="addition">+             params: &#123;</span></span><br><span class="line"><span class="addition">+               xmlnsOrder: &quot;alphabetical&quot;,</span></span><br><span class="line"><span class="addition">+             &#125;,</span></span><br><span class="line"><span class="addition">+           &#125;,</span></span><br><span class="line"><span class="addition">+         ],</span></span><br><span class="line"><span class="addition">+       &#125;,</span></span><br><span class="line"><span class="addition">+     ],</span></span><br><span class="line"><span class="addition">+   ],</span></span><br><span class="line"><span class="addition">+ &#125;,</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="优化代码运行性能"><a href="#优化代码运行性能" class="headerlink" title="优化代码运行性能"></a>优化代码运行性能</h2><h3 id="Code-Split"><a href="#Code-Split" class="headerlink" title="Code Split"></a>Code Split</h3><p>打包代码时会将所有 js 文件打包到一个文件中，体积太大了。我们如果只要渲染首页，就应该只加载首页的 js 文件，其他文件不应该加载<br>所以我们需要将打包生成的文件进行代码分割，生成多个 js 文件，渲染哪个页面就只加载某个 js 文件，这样加载的资源就少，速度就更快</p><p>代码分割（Code Split）主要做了两件事：</p><ol><li>分割文件：将打包生成的文件进行分割，生成多个 js 文件</li><li>按需加载：需要哪个文件就加载哪个文件</li></ol><h3 id="Preload-Prefetch"><a href="#Preload-Prefetch" class="headerlink" title="Preload / Prefetch"></a>Preload / Prefetch</h3><p>前面已经做了代码分割，同时会使用 import 动态导入语法来进行代码按需加载（我们也叫懒加载，比如路由懒加载就是这样实现的）<br>但是加载速度还不够好，比如：是用户点击按钮时才加载这个资源的，<strong>如果资源体积很大，那么用户会感觉到明显卡顿效果</strong><br>我们想在浏览器空闲时间，加载后续需要使用的资源。我们就需要用上 Preload 或 Prefetch 技术。</p><p><code>Preload</code>：告诉浏览器<strong>立即加载</strong>资源<br><code>Prefetch</code>：告诉浏览器在<strong>空闲时才开始加载</strong>资源</p><p>共同点：</p><p>都只会加载资源，并不执行<br>都有缓存<br>兼容性较差。(Preload 相对于 Prefetch 兼容性好一点。)</p><p>区别：</p><p>Preload加载优先级高，Prefetch加载优先级低<br>Preload只能加载当前页面需要使用的资源，Prefetch可以加载当前页面资源，也可以加载下一个页面需要使用的资源</p><p>总结：</p><p>当前页面优先级高的资源用 Preload 加载<br>下一个页面需要使用的资源用 Prefetch 加载</p><h3 id="Network-Cache"><a href="#Network-Cache" class="headerlink" title="Network Cache"></a>Network Cache</h3><p>将来开发时我们对静态资源会使用缓存来优化，这样浏览器第二次请求资源就能读取缓存了，速度很快。<br>但是这样的话就会有一个问题, 因为前后输出的文件名是一样的，都叫 main.js，一旦将来发布新版本，因为文件名没有变化导致浏览器会直接读取缓存，不会加载新资源，项目也就没法更新了。<br>所以我们从文件名入手，确保更新前后文件名不一样，这样就可以做缓存了。</p><h3 id="Core-js"><a href="#Core-js" class="headerlink" title="Core-js"></a>Core-js</h3><p>过去我们使用 babel 对 js 代码进行了兼容性处理，其中使用@babel/preset-env 智能预设来处理兼容性问题。<br>它能将 ES6 的一些语法进行编译转换，比如箭头函数、点点点运算符等。但是如果是 async 函数、promise 对象、数组的一些方法（includes）等，它没办法处理。<br>所以此时我们 js 代码仍然存在兼容性问题，一旦遇到低版本浏览器会直接报错。所以我们想要将 js 兼容性问题彻底解决</p><p>core-js 是专门用来做 ES6 以及以上 API 的 polyfill<br>polyfill 翻译过来叫做垫片/补丁。就是用社区上提供的一段代码，让我们在不兼容某些新特性的浏览器上，使用该新特性。</p><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><p>开发 Web App 项目，项目一旦处于网络离线情况，就没法访问了。我们希望给项目提供离线体验。<br>渐进式网络应用程序(progressive web application - PWA)：是一种可以提供类似于 native app(原生应用程序) 体验的 Web App 的技术。其中最重要的是，在 <strong>离线(offline) 时应用程序能够继续运行功能</strong>。内部通过 Service Workers 技术实现的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> WebPack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>220819</title>
      <link href="/2022/08/192022%20%E5%BD%92%E6%A1%A3/Diary/2022/220819/94a71e9c/"/>
      <url>/2022/08/192022%20%E5%BD%92%E6%A1%A3/Diary/2022/220819/94a71e9c/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="6db70fbb7c44c3e747cafc16dd4d805ad377f39c041b45a3bb3145c85fe41bd0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Axios</title>
      <link href="/2022/08/172022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Axios/976189ad/"/>
      <url>/2022/08/172022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Axios/976189ad/</url>
      
        <content type="html"><![CDATA[<p>Axios 官方文档：<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a></p><p>CDN：<code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></p><h1 id="Json-Server"><a href="#Json-Server" class="headerlink" title="Json-Server"></a>Json-Server</h1><p>JSON-Server 是一个 Node 模块，运行 Express 服务器，你可以指定一个 json 文件作为 api 的数据源，详情戳Github。</p><p>Github：<a href="https://github.com/typicode/json-server">https://github.com/typicode/json-server</a></p><h2 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>npm install -g json-server</code></p><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>Create a db.json file with some data</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;posts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-server&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span> <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span> <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="string">&quot;some comment&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;postId&quot;</span><span class="punctuation">:</span> <span class="number">1</span> <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;profile&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typicode&quot;</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="开启"><a href="#开启" class="headerlink" title="开启"></a>开启</h3><p>Start JSON Server</p><p><code>json-server --watch db.json</code></p><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>通过：<code>http://localhost:3000/</code> 地址访问</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220821204547.png" alt="20220821204547"></p><h1 id="Axios-特性"><a href="#Axios-特性" class="headerlink" title="Axios 特性"></a>Axios 特性</h1><ol><li>基于 xhr + promise 的异步 ajax 请求库</li><li>浏览器端 /node 端都可以使用</li><li>支持请求／响应拦截器</li><li>支持请求取消</li><li>请求 / 响应数据转换</li><li>批量发送多个请求</li></ol><h1 id="Axios-API"><a href="#Axios-API" class="headerlink" title="Axios API"></a>Axios API</h1><ol><li><code>axios(config)</code>: 通用/最本质的发任意类型请求的方式</li><li>axios(url[, config]): 可以只指定 url 发 get 请求</li><li>axios.request(config): 等同于 axios(config)</li><li>axios.get(url[, config]): 发 get 请求</li><li>axios.delete(url[, config]): 发 delete 请求</li><li>axios.post(url[, data, config]): 发 post 请求</li><li>axios.put(url[, data, config]): 发 put 请求</li></ol><h1 id="请求配置"><a href="#请求配置" class="headerlink" title="请求配置"></a>请求配置</h1><p>这些是创建请求时可以用的配置选项。<code>只有 url 是必需的</code>。如果没有指定 method，请求将默认使用 GET 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;/user&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">  <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">  <span class="comment">// 它只能用于 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">  <span class="comment">// 数组中最后一个函数必须返回一个字符串， 一个Buffer实例，ArrayBuffer，FormData，或 Stream</span></span><br><span class="line">  <span class="comment">// 你可以修改请求头。</span></span><br><span class="line">  <span class="attr">transformRequest</span>: [<span class="keyword">function</span> (<span class="params">data, headers</span>) &#123;</span><br><span class="line">    <span class="comment">// 对发送的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">  <span class="attr">transformResponse</span>: [<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="comment">// 对接收的 data 进行任意转换处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">  &#125;],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 自定义请求头</span></span><br><span class="line">  <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `params` 是与请求一起发送的 URL 参数</span></span><br><span class="line">  <span class="comment">// 必须是一个简单对象或 URLSearchParams 对象</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">ID</span>: <span class="number">12345</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `paramsSerializer`是可选方法，主要用于序列化`params`</span></span><br><span class="line">  <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">  <span class="attr">paramsSerializer</span>: <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Qs</span>.<span class="title function_">stringify</span>(params, &#123;<span class="attr">arrayFormat</span>: <span class="string">&#x27;brackets&#x27;</span>&#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `data` 是作为请求体被发送的数据</span></span><br><span class="line">  <span class="comment">// 仅适用 &#x27;PUT&#x27;, &#x27;POST&#x27;, &#x27;DELETE 和 &#x27;PATCH&#x27; 请求方法</span></span><br><span class="line">  <span class="comment">// 在没有设置 `transformRequest` 时，则必须是以下类型之一:</span></span><br><span class="line">  <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">  <span class="comment">// - 浏览器专属: FormData, File, Blob</span></span><br><span class="line">  <span class="comment">// - Node 专属: Stream, Buffer</span></span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送请求体数据的可选语法</span></span><br><span class="line">  <span class="comment">// 请求方式 post</span></span><br><span class="line">  <span class="comment">// 只有 value 会被发送，key 则不会</span></span><br><span class="line">  <span class="attr">data</span>: <span class="string">&#x27;Country=Brasil&amp;City=Belo Horizonte&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `timeout` 指定请求超时的毫秒数。</span></span><br><span class="line">  <span class="comment">// 如果请求时间超过 `timeout` 的值，则请求会被中断</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>, <span class="comment">// 默认值是 `0` (永不超时)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `adapter` 允许自定义处理请求，这使测试更加容易。</span></span><br><span class="line">  <span class="comment">// 返回一个 promise 并提供一个有效的响应 （参见 lib/adapters/README.md）。</span></span><br><span class="line">  <span class="attr">adapter</span>: <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `auth` HTTP Basic Auth</span></span><br><span class="line">  <span class="attr">auth</span>: &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;janedoe&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;s00pers3cret&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseType` 表示浏览器将要响应的数据类型</span></span><br><span class="line">  <span class="comment">// 选项包括: &#x27;arraybuffer&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">  <span class="comment">// 浏览器专属：&#x27;blob&#x27;</span></span><br><span class="line">  <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `responseEncoding` 表示用于解码响应的编码 (Node.js 专属)</span></span><br><span class="line">  <span class="comment">// 注意：忽略 `responseType` 的值为 &#x27;stream&#x27;，或者是客户端请求</span></span><br><span class="line">  <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">  <span class="attr">responseEncoding</span>: <span class="string">&#x27;utf8&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfCookieName` 是 xsrf token 的值，被用作 cookie 的名称</span></span><br><span class="line">  <span class="attr">xsrfCookieName</span>: <span class="string">&#x27;XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `xsrfHeaderName` 是带有 xsrf token 值的http 请求头名称</span></span><br><span class="line">  <span class="attr">xsrfHeaderName</span>: <span class="string">&#x27;X-XSRF-TOKEN&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onUploadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">  <span class="comment">// 浏览器专属</span></span><br><span class="line">  <span class="attr">onDownloadProgress</span>: <span class="keyword">function</span> (<span class="params">progressEvent</span>) &#123;</span><br><span class="line">    <span class="comment">// 处理原生进度事件</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxContentLength` 定义了node.js中允许的HTTP响应内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxContentLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxBodyLength`（仅Node）定义允许的http请求内容的最大字节数</span></span><br><span class="line">  <span class="attr">maxBodyLength</span>: <span class="number">2000</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `validateStatus` 定义了对于给定的 HTTP状态码是 resolve 还是 reject promise。</span></span><br><span class="line">  <span class="comment">// 如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，</span></span><br><span class="line">  <span class="comment">// 则promise 将会 resolved，否则是 rejected。</span></span><br><span class="line">  <span class="attr">validateStatus</span>: <span class="keyword">function</span> (<span class="params">status</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// 默认值</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `maxRedirects` 定义了在node.js中要遵循的最大重定向数。</span></span><br><span class="line">  <span class="comment">// 如果设置为0，则不会进行重定向</span></span><br><span class="line">  <span class="attr">maxRedirects</span>: <span class="number">5</span>, <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `socketPath` 定义了在node.js中使用的UNIX套接字。</span></span><br><span class="line">  <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; 发送请求到 docker 守护进程。</span></span><br><span class="line">  <span class="comment">// 只能指定 `socketPath` 或 `proxy` 。</span></span><br><span class="line">  <span class="comment">// 若都指定，这使用 `socketPath` 。</span></span><br><span class="line">  <span class="attr">socketPath</span>: <span class="literal">null</span>, <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// `httpAgent` and `httpsAgent` define a custom agent to be used when performing http</span></span><br><span class="line">  <span class="comment">// and https requests, respectively, in node.js. This allows options to be added like</span></span><br><span class="line">  <span class="comment">// `keepAlive` that are not enabled by default.</span></span><br><span class="line">  <span class="attr">httpAgent</span>: <span class="keyword">new</span> http.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">  <span class="attr">httpsAgent</span>: <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123; <span class="attr">keepAlive</span>: <span class="literal">true</span> &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `proxy` 定义了代理服务器的主机名，端口和协议。</span></span><br><span class="line">  <span class="comment">// 您可以使用常规的`http_proxy` 和 `https_proxy` 环境变量。</span></span><br><span class="line">  <span class="comment">// 使用 `false` 可以禁用代理功能，同时环境变量也会被忽略。</span></span><br><span class="line">  <span class="comment">// `auth`表示应使用HTTP Basic auth连接到代理，并且提供凭据。</span></span><br><span class="line">  <span class="comment">// 这将设置一个 `Proxy-Authorization` 请求头，它会覆盖 `headers` 中已存在的自定义 `Proxy-Authorization` 请求头。</span></span><br><span class="line">  <span class="comment">// 如果代理服务器使用 HTTPS，则必须设置 protocol 为`https`</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="attr">protocol</span>: <span class="string">&#x27;https&#x27;</span>,</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">9000</span>,</span><br><span class="line">    <span class="attr">auth</span>: &#123;</span><br><span class="line">      <span class="attr">username</span>: <span class="string">&#x27;mikeymike&#x27;</span>,</span><br><span class="line">      <span class="attr">password</span>: <span class="string">&#x27;rapunz3l&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// see https://axios-http.com/zh/docs/cancellation</span></span><br><span class="line">  <span class="attr">cancelToken</span>: <span class="keyword">new</span> <span class="title class_">CancelToken</span>(<span class="keyword">function</span> (<span class="params">cancel</span>) &#123;</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `decompress` indicates whether or not the response body should be decompressed </span></span><br><span class="line">  <span class="comment">// automatically. If set to `true` will also remove the &#x27;content-encoding&#x27; header </span></span><br><span class="line">  <span class="comment">// from the responses objects of all decompressed responses</span></span><br><span class="line">  <span class="comment">// - Node only (XHR cannot turn off decompression)</span></span><br><span class="line">  <span class="attr">decompress</span>: <span class="literal">true</span> <span class="comment">// 默认值</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h1><p>可以指定默认配置，简化代码，它将作用于每个请求。</p><h2 id="全局-axios-默认值"><a href="#全局-axios-默认值" class="headerlink" title="全局 axios 默认值"></a>全局 axios 默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="自定义实例默认值"><a href="#自定义实例默认值" class="headerlink" title="自定义实例默认值"></a>自定义实例默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建实例时配置默认值</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实例后修改默认值</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br></pre></td></tr></table></figure><h2 id="配置的优先级"><a href="#配置的优先级" class="headerlink" title="配置的优先级"></a>配置的优先级</h2><p>配置将会按优先级进行合并。它的顺序是：（后面的优先级要高于前面的）</p><ol><li>在 <code>lib/defaults.js</code> 中找到的库默认值</li><li>实例的 <code>defaults</code> 属性</li><li>请求的 <code>config</code> 参数</li></ol><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><p>拦截器分为请求拦截器和响应拦截器</p><p>请求拦截器：在发送请求之前，对请求的参数作一些处理和检测。<br>响应拦截器：在处理结果之前，可以对返回的数据作一些预处理。</p><h2 id="添加拦截器"><a href="#添加拦截器" class="headerlink" title="添加拦截器"></a>添加拦截器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="移除拦截器"><a href="#移除拦截器" class="headerlink" title="移除拦截器"></a>移除拦截器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(myInterceptor);</span><br></pre></td></tr></table></figure><h2 id="实例的拦截器"><a href="#实例的拦截器" class="headerlink" title="实例的拦截器"></a>实例的拦截器</h2><p>可以给自定义的 axios 实例添加拦截器。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>();</span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="取消请求"><a href="#取消请求" class="headerlink" title="取消请求"></a>取消请求</h1><h2 id="AbortController"><a href="#AbortController" class="headerlink" title="AbortController"></a>AbortController</h2><p>从 v0.22.0 开始，Axios 支持以 fetch API 方式—— AbortController 取消请求：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> controller = <span class="keyword">new</span> <span class="title class_">AbortController</span>();</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;/foo/bar&#x27;</span>, &#123;</span><br><span class="line">   <span class="attr">signal</span>: controller.<span class="property">signal</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">   <span class="comment">//...</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 取消请求</span></span><br><span class="line">controller.<span class="title function_">abort</span>()</span><br></pre></td></tr></table></figure><h2 id="CancelToken【已弃用】"><a href="#CancelToken【已弃用】" class="headerlink" title="CancelToken【已弃用】"></a>CancelToken【已弃用】</h2><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="源码目录结构"><a href="#源码目录结构" class="headerlink" title="源码目录结构"></a>源码目录结构</h2><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220821230707.png" alt="20220821230707"></p><h1 id="二次封装"><a href="#二次封装" class="headerlink" title="二次封装"></a>二次封装</h1><blockquote><p>参考：<a href="https://juejin.cn/post/7085253512572960781">https://juejin.cn/post/7085253512572960781</a></p></blockquote><p>针对项目大小的程度不同，对axios封装的需求也全然不同。<br>axios本身就是封装很不错的了，所以对于一般小项目而言完全没有二次封装的意义。<br>二次封装往往也会配合<code>api的统一管理</code>来进行使用。</p><h2 id="尚品汇项目二次封装"><a href="#尚品汇项目二次封装" class="headerlink" title="尚品汇项目二次封装"></a>尚品汇项目二次封装</h2><blockquote><p>主要是利用axios的<code>拦截器（请求拦截器和响应拦截器）</code>进行封装:</p></blockquote><ol><li>项目中安装 axios</li><li>项目中新建 <code>src/api/request.js</code> 文件</li><li>在 request.js 文件中编写：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/api/request.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line"><span class="comment">// 1. 利用axios对象的方法create,去创建一个axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">// 基础路径(发请求的时候，路径当中会出现api)</span></span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;/api&#x27;</span>,</span><br><span class="line">  <span class="comment">// 请求超时的时间 5S </span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 请求拦截器：在发请求之前，请求拦截器可以检测到，可以在请求发出去之前做一些事情</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 响应拦截器：所有的请求在响应之后都会走这个</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="comment">// 成功的回调函数：服务器相应数据回来以后，响应拦截器可以检测到，可以做一些事情</span></span><br><span class="line">  <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="property">data</span>;</span><br><span class="line">  &#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//响应失败的回调函数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;faile&#x27;</span>));</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure></li><li>API 统一管理<ol><li>项目中新建 <code>src/api/index.js</code> 文件，并导入二次封装好的 axios</li><li>基于二次封装好的 axios 发送请求：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/api/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&#x27;./request&#x27;</span></span><br><span class="line"><span class="comment">// getBaseCategoryList </span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getBaseCategoryList</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/product/getBaseCategoryList&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>解决跨域问题（devServer）<br>项目根目录新建 <code>vue.config.js</code> 文件 :<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 配置此项，打包时不生成 map 文件</span></span><br><span class="line">  <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://gmall-h5-api.atguigu.cn&#x27;</span>, <span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="comment">// pathRewrite: &#123;</span></span><br><span class="line">        <span class="comment">//   &#x27;^/api&#x27;: &#x27;&#x27;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Axios </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/2022/08/162022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Ajax/976189ad/"/>
      <url>/2022/08/162022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_Ajax/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="网络传输协议"><a href="#网络传输协议" class="headerlink" title="网络传输协议"></a>网络传输协议</h1><h2 id="常见协议"><a href="#常见协议" class="headerlink" title="常见协议"></a>常见协议</h2><ol><li>HTTP HTTPS 超文本传输协议 </li><li>FTP 文件传输协议</li><li>SMTP 简单邮件传输协议</li></ol><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>HTTP协议是超文本传输协议，网站是基于HTTP协议的，例如网站的图片、CSS、JS等都是基于HTTP协议进行传输的。</p><p>HTTP协议主要由<code>请求</code>和<code>响应</code>构成（HTTP协议是由从客户机到服务器的请求(Request)和从服务器到客户机的响应(Response)<strong>进行了约束和规范</strong>）</p><h3 id="常用请求方法"><a href="#常用请求方法" class="headerlink" title="常用请求方法"></a>常用请求方法</h3><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>特性</p><ol><li>GET请求是放在url中，<strong>POST则放在body中</strong></li></ol><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>特性</p><ol><li>GET 比POST更不安全，因为参数直接<strong>暴露在URL上</strong>，所以不能用来传递敏感信息。</li><li>GET 请求在URL中传送的参数是有长度限制的，而POST没有</li></ol><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><h4 id="常见"><a href="#常见" class="headerlink" title="常见"></a>常见</h4><ol><li>200代表成功</li><li>304文档未修改</li><li>403没有权限</li><li>404未找到</li><li>500服务器错误</li></ol><div class="table-container"><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>100~199</td><td>表示成功接收请求，要求客户端继续提交下一次请求才能完成整个处理过程</td></tr><tr><td>200~299</td><td>表示成功接收请求并已完成整个处理过程</td></tr><tr><td>300~399</td><td>为完成请求，客户需进一步细化请求。例如，请求的资源已经移动一个新地址</td></tr><tr><td>400~499</td><td>客户端的请求有错误</td></tr><tr><td>500~599</td><td>服务器端出现错误</td></tr></tbody></table></div><h3 id="请求-请求报文"><a href="#请求-请求报文" class="headerlink" title="请求/请求报文"></a>请求/请求报文</h3><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220817151947.png" alt="20220817151947"></p><p>规范格式：请求行、请求头、请求主体</p><p>简单概括：请求报文包括：请求行、请求头、请求主体，主要有送的方法，浏览器的信息，和发送的数据。</p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>由 请求方式、请求URL、协议版本 构成</p><h4 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h4><p>Host：localhost请求的主机<br>Cache-Control：max-age=0控制缓存<br>Accept：<em>/</em> 接受的文档MIME类型<br>User-Agent：很重要<br>Referer：从哪个URL跳转过来的<br>Accept-Encoding：可接受的压缩格式</p><h4 id="请求主体"><a href="#请求主体" class="headerlink" title="请求主体"></a>请求主体</h4><p>传递给服务端的数据</p><p>注：以post形式提交表单的时候，请求头里会设置 <code>Content-Type: application/x-www-form-urlencoded</code>，以get形式当不需要。</p><h3 id="响应-响应报文"><a href="#响应-响应报文" class="headerlink" title="响应/响应报文"></a>响应/响应报文</h3><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220817152129.png" alt="20220817152129"></p><p>规范格式：状态行、响应头、响应主体 </p><p>简单概括：响应报文包括：状态行、响应头、响应主体，主要是服务器的信息浏览器中直接可以看到的内容。</p><h4 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h4><p>由协议版本号、<strong>状态码</strong>和状态信息构成</p><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><p>Date：响应时间<br>Server：服务器信息<br>Content-Length：响应主体长度<br>Content-Type：响应资源的MIME类型</p><h4 id="响应主体"><a href="#响应主体" class="headerlink" title="响应主体"></a>响应主体</h4><p>服务端返回给客户端的内容</p><h1 id="XML-了解"><a href="#XML-了解" class="headerlink" title="XML (了解)"></a>XML (了解)</h1><blockquote><ul><li>XML是一种标记语言，很类似 HTML，其宗旨是用来<strong>传输数据</strong>，具有自我描述性（固定的格式的数据）</li><li>虽然可以描述和传输复杂数据，但是其<strong>解析过于复杂</strong>并且体积较大，<strong>实际开发很少使用</strong></li></ul></blockquote><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ol><li>必须有一个根元素</li><li>不可有空格、不可以数字或 <code>.</code> 开头、大小写敏感</li><li>不可交叉嵌套</li><li>属性双引号（浏览器自动修正成双引号了）</li><li>特殊符号要使用实体</li><li>注释和HTML一样</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">customeTagName</span>&gt;</span>...<span class="tag">&lt;/<span class="name">customeTagName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p>解析步骤类似使用 JS 获取 DOM 元素。</p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON">JSON</a> (JavaScript Object Notation) 是一种语法，用来序列化<strong>对象、数组、数值、字符串、布尔值和 null</strong>，是一种轻量级的文本数据交换格式。</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ol><li>JSON 的载体是<strong>字符串</strong></li><li>JSON 数据的<code>属性名、属性值，</code>必须使用<strong>双引号</strong>包裹。</li><li>JSON 对象键值对之间使用逗号（<code>,</code>）分隔。</li></ol><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><h1 id="AJAX-编程"><a href="#AJAX-编程" class="headerlink" title="AJAX 编程"></a>AJAX 编程</h1><blockquote><ul><li>AJAX 即 <code>Asynchronous Javascript And XML</code>，利用 <code>XMLHttpRequest</code> 发送请求。</li><li>AJAX 不是一门的新的语言，而是对现有持术的综合利用。本质是在HTTP协议的基础上<strong>以异步的方式与服务器进行通信</strong>。</li></ul></blockquote><h2 id="面试问题：用过Ajax吗？"><a href="#面试问题：用过Ajax吗？" class="headerlink" title="面试问题：用过Ajax吗？"></a>面试问题：用过Ajax吗？</h2><p>用过，用在不刷新页面获取数据，用法是创建异步对象、请求行、请求头、回调函数、请求主体，请求响应回来之后会触发<strong>回调函数</strong>而我们渲染页面的操作就是写在回调函数中<br>在我写的项目里面结合ajax基本是这么用的：</p><ol><li>发送之前修改页面结构</li><li>数据回来之后 修改页面结构</li></ol><p>我从后台拿到的数据一般是 JSON,曾经碰到过用 XML 的不知道贵公司用的是哪种方式交互数据？<br>每次都自己写，太过于重复。于是试着自己封装了ajax，可以设置 get post data url success<br>后来发现 jQuery有ajax 开始使用 jQuery的ajax。jQuery的 ajax中帮我们实现了：自动转化数据的操作<br>试着修改了一下自己封装的 ajax工具函数也实现了自动转化数据的功能，原理就是获取返回的 content-type做判断即可。<br>所以我在项目中如果用了jQuery的ajax直接使用jQuery的ajax的ajax如果不需要用jQuery的ajax那么我就用自己封装的 Ajax<br>随着数据的复杂程度变高我发现修改 dom元素很繁琐，找到了模板引擎这个东西对比了一下用 art-template（原理是正则替换文本）</p><h2 id="GET-和-POST请求区别（面试）"><a href="#GET-和-POST请求区别（面试）" class="headerlink" title="GET 和 POST请求区别（面试）"></a>GET 和 POST请求区别（面试）</h2><ol><li>GET 没有请求主体，使用 xhr.send(null)</li><li>GET 可以通过在请求 URL上添加请求参数</li><li>GET 大小限制约 4K，POST则没有限制</li><li>POST 可以通过 xhr.send(‘xxx=xxx&amp;xxx=xxx’)</li><li>POST 发送数据时需要设置请求头 <code>xhr.setRequestHeader(&quot;Content-type&quot;,&quot;application/x-www-form-urlencoded&quot;);</code></li></ol><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ol><li>xhr.open() 规定请求的类型、URL 以及是否异步处理请求</li><li>xhr.setRequestHeader() 设置请求头</li><li>xhr.send() 发送请求主体get方式使用xhr.send(null)</li><li>xhr.onreadystatechange = function () {} 监听响应状态<ol><li>xhr.readyState = 0 时，UNSENT open尚未调用</li><li>xhr.readyState = 1 时，OPENED open已调用</li><li>xhr.readyState = 2 时，HEADERS_RECEIVED 接收到头信息</li><li>xhr.readyState = 3 时，LOADING 接收到响应主体</li><li><strong>xhr.readyState = 4 时，DONE 响应完成</strong></li></ol></li><li>xhr.status表示响应码，如200</li><li>xhr.statusText表示响应信息，如OK</li><li>xhr.getAllResponseHeaders() 获取全部响应头信息</li><li>xhr.getResponseHeader(‘key’) 获取指定头信息</li><li>xhr.responseText、xhr.responseXML都表示响应主体</li></ol><p>补充：onreadystatechange 事件 是 onload 事件的兼容性方案。</p><h2 id="AJAX-封装"><a href="#AJAX-封装" class="headerlink" title="AJAX 封装"></a>AJAX 封装</h2><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 格式化请求参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatParams</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> name <span class="keyword">in</span> data) &#123;</span><br><span class="line">        arr.<span class="title function_">push</span>(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(data[name]))</span><br><span class="line">    &#125;</span><br><span class="line">    arr.<span class="title function_">push</span>((<span class="string">&#x27;v=&#x27;</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>()).<span class="title function_">replace</span>(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">join</span>(<span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装 ajax</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用函数时如果options没有指定，就给它赋值&#123;&#125;,一个空的Object</span></span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line">    <span class="comment">// 请求格式GET、POST，默认为GET</span></span><br><span class="line">    options.<span class="property">method</span> = (options.<span class="property">method</span> || <span class="string">&#x27;GET&#x27;</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">    <span class="comment">// 响应数据格式，默认 json</span></span><br><span class="line">    options.<span class="property">dataType</span> = options.<span class="property">dataType</span> || <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    options.<span class="property">timeout</span> = options.<span class="property">timeout</span> || <span class="number">30000</span></span><br><span class="line">    <span class="comment">// options.data请求的数据</span></span><br><span class="line">    <span class="keyword">let</span> params = <span class="title function_">formatParams</span>(options.<span class="property">data</span>)</span><br><span class="line">    <span class="keyword">let</span> xhr</span><br><span class="line">    <span class="comment">// 考虑兼容性</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">ActiveObject</span>) &#123;</span><br><span class="line">        <span class="comment">// 兼容IE6以下版本</span></span><br><span class="line">        xhr = <span class="keyword">new</span> <span class="title class_">ActiveXobject</span>(<span class="string">&#x27;Microsoft.XMLHTTP&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动并发送一个请求</span></span><br><span class="line">    <span class="keyword">if</span> (options.<span class="property">method</span> == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, options.<span class="property">url</span> + <span class="string">&#x27;?&#x27;</span> + params, <span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">method</span> == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;post&#x27;</span>, options.<span class="property">url</span>, <span class="literal">true</span>)</span><br><span class="line">        <span class="comment">// 设置表单提交时的内容类型</span></span><br><span class="line">        <span class="comment">// Content-type数据请求的格式</span></span><br><span class="line">        xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line">        xhr.<span class="title function_">send</span>(params)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置有效时间</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readySate</span> != <span class="number">4</span>) &#123;</span><br><span class="line">            xhr.<span class="title function_">abort</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, options.<span class="property">timeout</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      接收</span></span><br><span class="line"><span class="comment">      options.success成功之后的回调函数  options.error失败后的回调函数</span></span><br><span class="line"><span class="comment">      xhr.responseText,xhr.responseXML  获得字符串形式的响应数据或者XML形式的响应数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> status = xhr.<span class="property">status</span></span><br><span class="line">            <span class="keyword">if</span> ((status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) || status == <span class="number">304</span>) &#123;</span><br><span class="line">                options.<span class="property">success</span> &amp;&amp; options.<span class="title function_">success</span>(xhr.<span class="property">responseText</span>, xhr.<span class="property">responseXML</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                options.<span class="property">error</span> &amp;&amp; options.<span class="title function_">error</span>(status)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://localhost:3000/test_get&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data, <span class="string">&#x27;asdasdsa&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="jQuery-Ajax"><a href="#jQuery-Ajax" class="headerlink" title="jQuery Ajax"></a>jQuery Ajax</h1><p>jQuery 为我们提供了更强大的 <strong><a href="https://www.jq22.com/chm/jquery/index.html">Ajax 封装</a></strong> 详情查文档。</p><p>常用：</p><p>jQuery.ajax(url,[settings]) </p><div class="table-container"><table><thead><tr><th>settings 常用参数</th><th>Description</th></tr></thead><tbody><tr><td>dataType</td><td>预期服务器返回的数据类型，当服务器没有指定返回的数据格式时，可以前端来指定。</td></tr></tbody></table></div><h1 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h1><p><a href="https://aui.github.io/art-template/zh-cn/">art-template</a> 是一个简约、超快的模板引擎</p><p>原理：利用正则表达式，替换模板当中预先定义好的标签</p><h1 id="瀑布流"><a href="#瀑布流" class="headerlink" title="瀑布流"></a>瀑布流</h1><p>瀑布流是一种布局方案，用于实现元素内容宽度相同但是高度不同的效果。视觉表现为参差不齐的多栏布局，随着页面滚动条向下滚动，这种布局还会不断加载数据块并附加至当前尾部。</p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220820182858.png" alt="20220820182858"></p><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="Masonry"><a href="#Masonry" class="headerlink" title="Masonry"></a>Masonry</h3><p><a href="https://masonry.desandro.com/">Masonry</a> is a JavaScript grid layout library. It works by placing elements in optimal position based on available vertical space, sort of like a mason fitting stones in a wall. You’ve probably seen it in use all over the Internet.</p><h1 id="同源与跨域"><a href="#同源与跨域" class="headerlink" title="同源与跨域"></a>同源与跨域</h1><h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><p>同源策略是浏览器的一种安全策略，所谓同源是指，<code>域名</code>，<code>协议</code>，<code>端口</code>完全相同</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p><code>域名</code>，<code>协议</code>，<code>端口</code> 有一个不同则跨域（不同网站之间发送请求则称之跨域，浏览器默认是限制了跨域访问的）</p><p>例如：<a href="http://www.example.com/">http://www.example.com/</a></p><div class="table-container"><table><thead><tr><th>域名</th><th>是否同源</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://api.example.com/detail.html">http://api.example.com/detail.html</a></td><td>不同源</td><td>域名不同</td></tr><tr><td>https//www.example.com/detail.html</td><td>不同源</td><td>协议不同</td></tr><tr><td><a href="http://www.example.com:8080/detail.html">http://www.example.com:8080/detail.html</a></td><td>不同源</td><td>端口不同</td></tr><tr><td><a href="http://api.example.com:8080/detail.html">http://api.example.com:8080/detail.html</a></td><td>不同源</td><td>域名、端口不同</td></tr><tr><td><a href="https://api.example.com/detail.html">https://api.example.com/detail.html</a></td><td>不同源</td><td>协议、域名不同</td></tr><tr><td><a href="https://www.example.com:8080/detail.html">https://www.example.com:8080/detail.html</a></td><td>不同源</td><td>端口、协议不同</td></tr><tr><td><a href="http://www.example.com/detail/index.html">http://www.example.com/detail/index.html</a></td><td>同源</td><td>只是目录不同</td></tr></tbody></table></div><h2 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h2><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><blockquote><p>CORS（ cross origin resource sharing 跨域资源共享 ）<strong>HTML5 +</strong></p></blockquote><p>普通跨域请求：只服务端设置 <code>Access-Control-Allow-Origin</code> 即可，前端无须设置，若要带cookie请求：前后端都需要设置。</p><p>例如php设置:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin: *&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><p>有 src 属性的标签没有跨域限制。（如：img script iframe）<br><strong>JSONP（JSON with Padding）的原理就是使用 script 标签的 src 属性支持跨域访问</strong></p><h4 id="原生实现"><a href="#原生实现" class="headerlink" title="原生实现"></a>原生实现</h4><p>浏览器端：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">   script.<span class="property">type</span> = <span class="string">&#x27;text/javascript&#x27;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 传参一个回调函数名给后端，方便后端返回时执行这个在前端定义的回调函数</span></span><br><span class="line">   script.<span class="property">src</span> = <span class="string">&#x27;http://www.xxx.com:80/backData.php?callback = doSomething&#x27;</span>;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 回调执行函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">doSomething</span>(<span class="params">data</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">   &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>服务器端：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// backData.php:</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$methodName</span> = <span class="variable">$_GET</span>(<span class="string">&#x27;callback&#x27;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$methodName</span>.<span class="string">&#x27;(&#123;&quot;name&quot;:&quot;frank&quot;,&quot;age&quot;:18&#125;)&#x27;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h4 id="面试常问"><a href="#面试常问" class="headerlink" title="面试常问"></a>面试常问</h4><h5 id="JSONP-原理"><a href="#JSONP-原理" class="headerlink" title="JSONP 原理"></a>JSONP 原理</h5><ol><li>利用 script 标签的 src 属性支持跨域访问</li><li>script 标签的后面写上需要请求服务器的页面，并携带一个方法的名作为参数</li><li>服务器接收到名字之后<strong>拼接一个方法的调用在参数中</strong> 传入需要给浏览器的数据</li><li>返回给浏览器，浏览器把他当做 js 解析</li></ol><h5 id="JSONP可以发post请求吗？"><a href="#JSONP可以发post请求吗？" class="headerlink" title="JSONP可以发post请求吗？"></a>JSONP可以发post请求吗？</h5><p>只能发送 get 请求，不能发送 post 请求</p><h5 id="JSONP跟ajax有没有关系？"><a href="#JSONP跟ajax有没有关系？" class="headerlink" title="JSONP跟ajax有没有关系？"></a>JSONP跟ajax有没有关系？</h5><p>没有</p><h5 id="jQuery中的JSONP跟ajax有没有关系？"><a href="#jQuery中的JSONP跟ajax有没有关系？" class="headerlink" title="jQuery中的JSONP跟ajax有没有关系？"></a>jQuery中的JSONP跟ajax有没有关系？</h5><p>没有，虽然 jQuery 中的 JSONP 是在 Ajax 函数中添加<code>dataType: &#39;jsonp&#39;</code>属性来完成跨域的，但是 jQuery 内部是动态创建script 标签追加到DOM树，只是为了方便调用才这么封装的，跟 Ajax 没有关系</p><h1 id="XHR-2-0"><a href="#XHR-2-0" class="headerlink" title="XHR 2.0"></a>XHR 2.0</h1><p>官方文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest</a></p><p>新特性：</p><h2 id="快速格式化表单数据"><a href="#快速格式化表单数据" class="headerlink" title="快速格式化表单数据"></a>快速格式化表单数据</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData">FormData</a></p><p>FormData 接口提供了一种表示表单数据的键值对 key/value 的构造方式，并且可以轻松的将数据通过 XMLHttpRequest.send() 方法发送出去</p><h2 id="ajax上传文件"><a href="#ajax上传文件" class="headerlink" title="ajax上传文件"></a>ajax上传文件</h2><p>表单中使用 file 表单，然后使用 FormData 接口将数据直接上传，服务器端接收。</p><h2 id="上传进度监控"><a href="#上传进度监控" class="headerlink" title="上传进度监控"></a>上传进度监控</h2><p>使用 XMLHttpRequest 的 onprogress 事件实现</p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><div class='checkbox green'><input type="checkbox" />            <p>能熟练讲出 ajax 原理</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>后面回过头有空把人员管理案例敲一遍（最好使用vue或者另一种方式实现）</p>            </div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自考计划</title>
      <link href="/2022/08/082022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_Hobby_Scheme_%E8%87%AA%E8%80%83%E8%AE%A1%E5%88%92%20copy/f75e92e9/"/>
      <url>/2022/08/082022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_Hobby_Scheme_%E8%87%AA%E8%80%83%E8%AE%A1%E5%88%92%20copy/f75e92e9/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="add380308e5c685e72308878a6600da8f758d6a340ea4c7f52d02e685a3b8af2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 规划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom</title>
      <link href="/2022/08/072022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Software_Atom/450a1492/"/>
      <url>/2022/08/072022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Software_Atom/450a1492/</url>
      
        <content type="html"><![CDATA[<h1 id="Atom-Install"><a href="#Atom-Install" class="headerlink" title="Atom Install"></a>Atom Install</h1><p>官方地址：<a href="https://atom.io/">https://atom.io/</a></p><p>软件界面：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807141422.png" alt="20220807141422"></p><h1 id="Atom-Plugin"><a href="#Atom-Plugin" class="headerlink" title="Atom Plugin"></a>Atom Plugin</h1><p>安装 Atom Plugin 需要本地安装 Node + git 环境，这里使用命令行来安装 Atom 插件（Atom提供的使用 <code>apm install</code> 指令的安装方式依然是依赖于npm）</p><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><p><code>apm install [packages]</code></p><h2 id="插件安装路径"><a href="#插件安装路径" class="headerlink" title="插件安装路径"></a>插件安装路径</h2><p><code>C:\Users\&lt;UserName&gt;\.atom\packages</code></p><h1 id="Plugin-Recommend"><a href="#Plugin-Recommend" class="headerlink" title="Plugin Recommend"></a>Plugin Recommend</h1><h2 id="Atom-中文汉化"><a href="#Atom-中文汉化" class="headerlink" title="Atom 中文汉化"></a>Atom 中文汉化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install simplified-chinese-menu</span><br></pre></td></tr></table></figure><h2 id="代码地图"><a href="#代码地图" class="headerlink" title="代码地图"></a>代码地图</h2><p>功能：</p><p>此拓展让 Atom 像 VsCode 一样有一个代码预览地图，拖动地图快速滑动。</p><p>效果：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807144108.png" alt="20220807144108"></p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install minimap</span><br></pre></td></tr></table></figure><h2 id="代码自动排版"><a href="#代码自动排版" class="headerlink" title="代码自动排版"></a>代码自动排版</h2><blockquote><p>atom-beautify 文档：<a href="https://github.com/Glavin001/atom-beautify">https://github.com/Glavin001/atom-beautify</a></p></blockquote><p>功能：</p><p>在 Atom 中美化 HTML、CSS、JavaScript、PHP、Python、Ruby、Java、C、C++、C#、Objective-C、CoffeeScript、TypeScript、Coldfusion、SQL 等</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install atom-beautify</span><br></pre></td></tr></table></figure><h2 id="图标美化"><a href="#图标美化" class="headerlink" title="图标美化"></a>图标美化</h2><p>功能：</p><p>不同拓展名的文件，显示不同的图标</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install file-type-icons</span><br></pre></td></tr></table></figure><h2 id="颜色显示"><a href="#颜色显示" class="headerlink" title="颜色显示"></a>颜色显示</h2><p>功能：</p><p>在项目和文件中显示颜色</p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install pigments</span><br></pre></td></tr></table></figure><h2 id="Atom-终端"><a href="#Atom-终端" class="headerlink" title="Atom 终端"></a>Atom 终端</h2><p>功能：</p><p>在 Atom 里集成了一个 Terminal 窗口</p><p>效果：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/Terminal.gif" alt="Terminal"></p><p>命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install terminal-tab</span><br></pre></td></tr></table></figure><h2 id="Markdown-增强"><a href="#Markdown-增强" class="headerlink" title="Markdown　增强"></a>Markdown　增强</h2><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install markdown-preview-enhanced</span><br></pre></td></tr></table></figure><h2 id="HTML-Preview"><a href="#HTML-Preview" class="headerlink" title="HTML Preview"></a>HTML Preview</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apm install atom-html-preview</span><br></pre></td></tr></table></figure><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><h3 id="atom-picgo"><a href="#atom-picgo" class="headerlink" title="atom-picgo"></a>atom-picgo</h3><h3 id="qiniu-uploader"><a href="#qiniu-uploader" class="headerlink" title="qiniu-uploader"></a>qiniu-uploader</h3><h1 id="Shortcut"><a href="#Shortcut" class="headerlink" title="Shortcut"></a>Shortcut</h1><h2 id="Software-Shortcut"><a href="#Software-Shortcut" class="headerlink" title="Software Shortcut"></a>Software Shortcut</h2><div class="table-container"><table><thead><tr><th>Shortcut</th><th>Description</th></tr></thead><tbody><tr><td>Ctrl + Shift + P</td><td>命令面板</td></tr><tr><td>Ctrl + \</td><td>展示隐藏目录树</td></tr><tr><td>Ctrl + Shift + M</td><td>Markdown 预览</td></tr><tr><td>Ctrl + \</td><td>展示隐藏目录树</td></tr><tr><td>Ctrl + \</td><td>展示隐藏目录树</td></tr></tbody></table></div><h2 id="Plugin-Shortcut"><a href="#Plugin-Shortcut" class="headerlink" title="Plugin Shortcut"></a>Plugin Shortcut</h2><div class="table-container"><table><thead><tr><th>Plugin</th><th>Shortcut</th></tr></thead><tbody><tr><td>terminal-tab</td><td>Win + Shift + T</td></tr></tbody></table></div><h1 id="Custom"><a href="#Custom" class="headerlink" title="Custom"></a>Custom</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><p>个人觉得自带的字体看起来有点不舒服，同步使用 VsCode 字体。</p><p><code>Consolas, &#39;黑体&#39;, &#39;Courier New&#39;, monospace</code></p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807143915.png" alt="20220807143915"></p><h1 id="Sync-Settings"><a href="#Sync-Settings" class="headerlink" title="Sync-Settings"></a>Sync-Settings</h1><blockquote><p>sync-settings 是一款备份插件，可以备份ATOM的全局设置、插件、按键绑定(keymaps)、界面样式、代码片段(snippets )、 init script。有了这项功能以后再次恢复插件就十分方便。</p></blockquote><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="安装-sync-settings"><a href="#安装-sync-settings" class="headerlink" title="安装 sync-settings"></a>安装 sync-settings</h3><ol><li><code>Ctrl + ,</code></li><li>安装<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807161221.png" alt="20220807161221"></li></ol><h3 id="配置sync-settings"><a href="#配置sync-settings" class="headerlink" title="配置sync-settings"></a>配置sync-settings</h3><ol><li>打开Setting可以看到我们需要配置 GistID 和 token<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807161656.png" alt="20220807161656"></li><li>打开 Github 创建 GistID 和 token<ol><li>创建 GistID<ol><li><a href="https://gist.github.com/">https://gist.github.com/</a> </li><li>新建 gist<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807163740.png" alt="20220807163740"></li><li>保存地址栏的 GistID<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807163855.png" alt="20220807163855"></li></ol></li><li>创建 token<ol><li>Settings —&gt; Developer settings —&gt; Personal access tokens —&gt; Generate new token</li><li>填写 token 名称，勾上gist权限。</li></ol></li></ol></li><li>将 GistID 和 token 填入即可。</li></ol><h2 id="备份与还原"><a href="#备份与还原" class="headerlink" title="备份与还原"></a>备份与还原</h2><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>备份命令：</p><ol><li>Ctrl + shift + P 打开命令面板</li><li>输入 <code>Sync Settings: Backup</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807164225.png" alt="20220807164225"></p><p>备份成功</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807164256.png" alt="20220807164256"></p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807164734.png" alt="20220807164734"></p><h3 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h3><ol><li>Ctrl + shift + P 打开命令面板</li><li>输入 <code>Sync Settings: Restore</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>220801</title>
      <link href="/2022/08/012022%20%E5%BD%92%E6%A1%A3/Diary/2022/220801/94a71e9c/"/>
      <url>/2022/08/012022%20%E5%BD%92%E6%A1%A3/Diary/2022/220801/94a71e9c/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="85d0590480fda90088c36e89ab2665d11b9aa5d0ebc4c59cdbccda03afd09a67">176af5f71c6ac5419ca35683f9a93d1d819f5123c82a71229f8220c490e8855ae6534cab1d9c708182a956b3839479239c62bab7d6c61eff58abdb3185c2a60c88b0ccad83a1c989026dc2199333157969e2f21ccccb61075c2c268977217842d37a18c77ea669812a77bc097254ea6f3e56545f2202f0a43b7f2aaffb4052f2815ba78d194a02f562fb8bcc78b01f07eebf814f04b8ebead4feac787d73edc08e2a2e80160dcf6506bdbcb76c1e876ed8061b217ec6a363fdea9c53a838eb3c739663e7cd564bd5509a5c4fe0e7adf02829111994c64c6f675ecdec85dceadfa2339ad5296d7a496e045c6f3c2d02cef960562b50ec976bd75a6bbe9173bbae784201c5558e43793456a4322a312c52961bc3010be23940ae5bd03937cb86ea004f9378168264c441489288f4535bc20196dd3552684513ea7f206f218631acb86ed43c8d119274fda0939b46ebe1cd6e00ee6bdde9dddec33efdba15a37534c459eac8b1b0ad9adfd812097f9175b0acbb23a20051231657ba4cbe4e4d6a1fd958791c9a7243ba4f29911ccc999459348253e8c55e056b177ffdefb338b3a19e8e2e790e12a20ddea1ae0870b07c669b2d4cc7a42d5a4d97a85d5a97b0a8134e797ef25a72d08a02991d882ea562d815594cf5dfa0ba81d084cf8d9ddeeee1427b67e458ac62b58b8565cbeca8e2b55de3b1733a7741ca0907431ab5f61adb5212153c28e22ed04102420ac1774c00b537b9813901b84f9e1cfa47342a54bf399894c185027e0c9f3f782bc227edc5768afc4e4d98895f51e3af35c56299cece65376d32132a558ea2343dd3b8ec1e81ad7eb5909371fea75a67309a6e9b8bfc90597680e838b2a0970fe118f06934d1a29e7edca70207988767a749678b8aeabc223320bbe69d180c5a52e5e5d10a4144fefefff671721b2b62c8dbade134e7c336e339b78b4e3e94fb548c310c3c800eaf6ff1c30b340b73e051c923f84e51418ada7e3bc9b9064ae901919a8d436e28799f270617baaf2a1e5d6b59f515053393583d558b279d85ddc53485085533976efa3502ce842e708dfb7e49e5b5c80101e6ea4267ad1ff76117e094a891d85740fd7efc35e346c8baaaa5a7f3f79dbbb1f8f00676366f033b7a2cbbcfaf37e53552f17ecca0d08e63db4e730827c2ee0339a13d9ccb9949d484e6126f1508c94108096d6385e41c546a1c6b227aec50ed7559009c48bb19ff4a5a89db73b0efa16c3bbe3f2fa31849bc1478b71175fb1bc1c35cd093b82d26d22473c53cc7ed5b060a7facc182594440cc5d6ad2b287bfe18fe8b14403229a289f78b826fd14f22b35ecc7ebd0e88b208ad0f148ba74eb4ceeebd1f1c45c001a083bb29876b4f954d7497179a70b39572e658e89a579443aeaa95345b8dab9454eed27620aa08e286304f03de06d92fb02797363380c80670a4074879f0c447de24d3f298e795cf707b020fb4c35df950c150414a9b099f28f121c2e74cfcb4ac2a6d26c0be6b42ba1a05adda393a3480e6d9829b0253e36ee1c0a1b5ee57357da996a2f33eefdfcc1e59224428770730f51d29851fb44d338af347b71aaec9c1d812b999c96eec524046385ba7b49b1ba6d996ba07335d1b184ac7d198d94e319ed4b04ff8708f5ba58b91b57533995962f14a606cb7df5b5688e45d325cdb28fca16133478e5e8470951e7cfdfe61e8ac58035ce2b36970562475d2e7a57f7c6ee7b50114866f0c87cc32978c26b54bf8d2d60</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220730</title>
      <link href="/2022/07/302022%20%E5%BD%92%E6%A1%A3/Diary/2022/220730/94a71e9c/"/>
      <url>/2022/07/302022%20%E5%BD%92%E6%A1%A3/Diary/2022/220730/94a71e9c/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="14026df27d05d441d50582e090b1712672164774f32e21089ae3e0ae4d3dcb86"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印机专题</title>
      <link href="/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E6%89%93%E5%8D%B0%E6%9C%BA%E4%B8%93%E9%A2%98/efc61b2v/"/>
      <url>/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E6%89%93%E5%8D%B0%E6%9C%BA%E4%B8%93%E9%A2%98/efc61b2v/</url>
      
        <content type="html"><![CDATA[<h1 id="无法打开添加打印机"><a href="#无法打开添加打印机" class="headerlink" title="无法打开添加打印机"></a>无法打开添加打印机</h1><p>打开计算机管理打开此服务：<code>Print Spooler</code><br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230629104355.png" alt="20230629104355"></p><h1 id="打印机共享搜索不到"><a href="#打印机共享搜索不到" class="headerlink" title="打印机共享搜索不到"></a>打印机共享搜索不到</h1><ol><li>在 <code>控制面板\网络和 Internet\网络和共享中心\高级共享设置</code> 中打开：<ol><li>启用文件和打印机共享</li><li>关闭密码保护共享</li></ol></li><li><code>本地安全策略中</code>—&gt; 安全选项 —&gt; <code>网络访问：本地账户的共享和安全模型</code>设置为经典</li></ol><h1 id="访问共享打印机会断开"><a href="#访问共享打印机会断开" class="headerlink" title="访问共享打印机会断开"></a>访问共享打印机会断开</h1><blockquote><p>场景：打印机在A电脑共享，目前有两台电脑 B 和 C 访问，B电脑可以正常访问打印，C电脑首次连接打印机可以打印，重启后再打印就不行。</p></blockquote><p>解决方案：手动添加凭据</p><ol><li>在 windows 凭据管理器中手动新增凭据</li><li>填写A电脑的计算机名和用户密码<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230728172713.png" alt="微信图片_20230728172713"></li></ol><h1 id="Print-Spooler-服务总是自动断开"><a href="#Print-Spooler-服务总是自动断开" class="headerlink" title="Print Spooler 服务总是自动断开"></a>Print Spooler 服务总是自动断开</h1><h1 id="已经安装驱动了改端口号？"><a href="#已经安装驱动了改端口号？" class="headerlink" title="已经安装驱动了改端口号？"></a>已经安装驱动了改端口号？</h1>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript ES6+</title>
      <link href="/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20ES6+/f75e92e9/"/>
      <url>/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20ES6+/f75e92e9/</url>
      
        <content type="html"><![CDATA[<h1 id="let-和-const-命令"><a href="#let-和-const-命令" class="headerlink" title="let 和 const 命令"></a>let 和 const 命令</h1><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>不允许重复声明</li><li>不存在变量提升</li><li>块级作用域</li><li>不影响作用域链</li></ol><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ol><li>一定要赋初始值</li><li>一般常量使用大写（潜规则）</li><li>常量的值不能修改</li><li>块级作用域</li><li>对于数组和对象的元素修改，不算做对常量的修改【常量的地址没有改变】</li></ol><h2 id="globalThis-对象"><a href="#globalThis-对象" class="headerlink" title="globalThis 对象"></a>globalThis 对象</h2><p>ES2020 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都<strong>可以从它拿到顶层对象，指向全局环境下的 this</strong></p><h3 id="顶层对象"><a href="#顶层对象" class="headerlink" title="顶层对象"></a>顶层对象</h3><ul><li>浏览器里面，顶层对象是 window</li><li>Node 里面，顶层对象是 global</li><li>浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有 self</li></ul><h1 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a>变量的解构赋值</h1><h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><blockquote><p>数组的元素是按次序排列的，变量的取值由它的位置决定；</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>let [a, b, c] = [1, 2, 3];</code></p><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><blockquote><p>对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p></blockquote><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p><code>let &#123; foo, bar &#125; = &#123; foo: &#39;aaa&#39;, bar: &#39;bbb&#39; &#125;;</code></p><h1 id="字符串的扩展"><a href="#字符串的扩展" class="headerlink" title="字符串的扩展"></a>字符串的扩展</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p><strong>反引号（`）标识</strong></p><h3 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h3><ol><li>模板字符串的空格和换行，都是被保留的</li><li>模板字符串中嵌入变量，需要将变量名写在<code>$&#123;&#125;</code>之中</li></ol><h2 id="字符串的新增方法"><a href="#字符串的新增方法" class="headerlink" title="字符串的新增方法"></a>字符串的新增方法</h2><h3 id="实例方法：trimStart-，trimEnd"><a href="#实例方法：trimStart-，trimEnd" class="headerlink" title="实例方法：trimStart()，trimEnd()"></a>实例方法：trimStart()，trimEnd()</h3><p>ES2019 对字符串实例新增了trimStart()和trimEnd()这两个方法。它们返回的都是新字符串，<strong>不会修改原始字符串</strong>。</p><p>trimStart() 消除字符串头部的空格<br>trimEnd() 消除尾部的空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s = <span class="string">&#x27;  abc  &#x27;</span>;</span><br><span class="line"></span><br><span class="line">s.<span class="title function_">trim</span>() <span class="comment">// &quot;abc&quot;</span></span><br><span class="line">s.<span class="title function_">trimStart</span>() <span class="comment">// &quot;abc  &quot;</span></span><br><span class="line">s.<span class="title function_">trimEnd</span>() <span class="comment">// &quot;  abc&quot;</span></span><br></pre></td></tr></table></figure><h3 id="实例方法：matchAll"><a href="#实例方法：matchAll" class="headerlink" title="实例方法：matchAll()"></a>实例方法：matchAll()</h3><p>matchAll()方法返回一个正则表达式在当前字符串的所有匹配，<strong>返回的是一个遍历器（Iterator）</strong>可以用for…of循环取出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">&#x27;test1test2test3&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> regex = <span class="regexp">/t(e)(st(\d?))/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> match <span class="keyword">of</span> string.<span class="title function_">matchAll</span>(regex)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [&quot;test1&quot;, &quot;e&quot;, &quot;st1&quot;, &quot;1&quot;, index: 0, input: &quot;test1test2test3&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;test2&quot;, &quot;e&quot;, &quot;st2&quot;, &quot;2&quot;, index: 5, input: &quot;test1test2test3&quot;]</span></span><br><span class="line"><span class="comment">// [&quot;test3&quot;, &quot;e&quot;, &quot;st3&quot;, &quot;3&quot;, index: 10, input: &quot;test1test2test3&quot;]</span></span><br></pre></td></tr></table></figure><h1 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h1><h2 id="s-修饰符：dotAll-模式"><a href="#s-修饰符：dotAll-模式" class="headerlink" title="s 修饰符：dotAll 模式"></a>s 修饰符：dotAll 模式</h2><blockquote><ul><li>点（<code>.</code>）是一个特殊字符，代表除换行外任意的单个字符，但是，很多时候我们希望匹配的是任意单个字符。</li><li>ES2018 引入 <code>s</code> 修饰符，使得 . 可以匹配任意单个字符。这被称为dotAll模式，即点（dot）代表一切字符。所以，正则表达式还引入了一个<code>dotAll属&gt; 性</code>，<strong>返回一个布尔值</strong>，表示该正则表达式是否处在dotAll模式。</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> re = <span class="regexp">/foo.bar/</span>s;</span><br><span class="line">        </span><br><span class="line">re.<span class="title function_">test</span>(<span class="string">&#x27;foo\nbar&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">re.<span class="property">dotAll</span> <span class="comment">// true</span></span><br><span class="line">re.<span class="property">flags</span> <span class="comment">// &#x27;s&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><p>先行断言指的是， x 只有在 y 前面才匹配，必须写成<code>/x(?=y)/</code>。如: 只匹配百分号之前的数字，要写成<code>/\d+(?=%)/</code><br>先行否定断言指的是， x 只有不在 y 前面才匹配，必须写成<code>/x(?!y)/</code>。如: 只匹配不在百分号之前的数字，要写成<code>/\d+(?!%)/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/\d+(?=%)/.<span class="title function_">exec</span>(<span class="string">&#x27;100% of US presidents have been male&#x27;</span>)  <span class="comment">// [&quot;100&quot;]</span></span><br><span class="line">/\d+(?!%)/.<span class="title function_">exec</span>(<span class="string">&#x27;that’s all 44 of them&#x27;</span>)                 <span class="comment">// [&quot;44&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h3><p>后行断言与先行断言相反， x 只有在 y 后面才匹配，必须写成<code>/(?&lt;=y)x/</code>。如: 只匹配美元符号之后的数字，要写成<code>/(?&lt;=\$)\d+/</code><br>后行否定断言与先行否定断言相反， x 只有不在 y 后面才匹配，必须写成<code>/(?&lt;!y)x/</code>。如: 只匹配不在美元符号后面的数字，要写成<code>/(?&lt;!\$)\d+/</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/(?&lt;=\$)\d+<span class="regexp">/.exec(&#x27;Benjamin Franklin is on the $100 bill&#x27;)  /</span>/ [<span class="string">&quot;100&quot;</span>]</span><br><span class="line">/(?&lt;!\$)\d+<span class="regexp">/.exec(&#x27;it’s is worth about €90&#x27;)                /</span>/ [<span class="string">&quot;90&quot;</span>]</span><br></pre></td></tr></table></figure><h2 id="具名组匹配"><a href="#具名组匹配" class="headerlink" title="具名组匹配"></a>具名组匹配</h2><p>ES2018 引入了具名组匹配（Named Capture Groups），允许<strong>为每一个组匹配指定一个名字</strong>，既便于阅读代码，又便于引用</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p><code>具名组匹配</code>在圆括号内部，模式的头部添加 <code>问号 + 尖括号 + 组名</code>，然后就可以在 exec 方法返回结果的 <strong><code>groups 属性</code>上引用该组名</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">RE_DATE</span> = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matchObj = <span class="variable constant_">RE_DATE</span>.<span class="title function_">exec</span>(<span class="string">&#x27;1999-12-31&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> year = matchObj.<span class="property">groups</span>.<span class="property">year</span>; <span class="comment">// &quot;1999&quot;</span></span><br><span class="line"><span class="keyword">const</span> month = matchObj.<span class="property">groups</span>.<span class="property">month</span>; <span class="comment">// &quot;12&quot;</span></span><br><span class="line"><span class="keyword">const</span> day = matchObj.<span class="property">groups</span>.<span class="property">day</span>; <span class="comment">// &quot;31&quot;</span></span><br></pre></td></tr></table></figure><h1 id="数值的扩展"><a href="#数值的扩展" class="headerlink" title="数值的扩展"></a>数值的扩展</h1><h2 id="二进制和八进制表示法"><a href="#二进制和八进制表示法" class="headerlink" title="二进制和八进制表示法"></a>二进制和八进制表示法</h2><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 <code>0b</code> 和 <code>0o</code> 表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b111110111</span> === <span class="number">503</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0o767</span> === <span class="number">503</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Number-isFinite-Number-isNaN"><a href="#Number-isFinite-Number-isNaN" class="headerlink" title="Number.isFinite(), Number.isNaN()"></a>Number.isFinite(), Number.isNaN()</h2><p>Number.isFinite()用来检查一个数值是否为有限的（finite），即不是Infinity</p><p>Number.isNaN()用来检查一个值是否为NaN</p><h2 id="Number-parseInt-Number-parseFloat"><a href="#Number-parseInt-Number-parseFloat" class="headerlink" title="Number.parseInt(), Number.parseFloat()"></a>Number.parseInt(), Number.parseFloat()</h2><p>ES6 将全局方法parseInt()和parseFloat()，移植到Number对象上面，行为完全保持不变。这样做的目的，是逐步减少全局性方法，使得语言逐步<strong>模块化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;12.34&#x27;</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="string">&#x27;123.45#&#x27;</span>) <span class="comment">// 123.45</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;12.34&#x27;</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;123.45#&#x27;</span>) <span class="comment">// 123.45</span></span><br></pre></td></tr></table></figure><h2 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h2><p>Number.isInteger()用来判断一个数值是否为整数</p><p>注意：如果对数据<strong>精度</strong>的要求较高，<strong>不建议</strong>使用Number.isInteger()判断</p><h2 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h2><p>Number.EPSILON 是 ES6 在Number对象上面，新增一个极小的常量，是 JavaScript 能够表示的<strong>最小精度</strong>。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">equal</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Math-对象的扩展"><a href="#Math-对象的扩展" class="headerlink" title="Math 对象的扩展"></a>Math 对象的扩展</h2><h3 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h3><p>Math.trunc方法用于去除一个数的小数部分，返回整数部分</p><h3 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h3><p>Math.sign方法用来判断一个数到底是正数、负数、还是零。对于非数值，会先将其转换为数值。</p><p>它会返回五种值：</p><ol><li>参数为正数，返回 +1</li><li>参数为负数，返回 -1</li><li>参数为 0，返回 0</li><li>参数为 -0，返回 -0</li><li>其他值，返回 NaN</li></ol><h2 id="BigInt-数据类型"><a href="#BigInt-数据类型" class="headerlink" title="BigInt 数据类型"></a>BigInt 数据类型</h2><p>ES2020 引入了一种新的数据类型 BigInt（大整数），来解决精度范围限制的问题，这是 ECMAScript 的第八种数据类型。</p><h3 id="BigInt"><a href="#BigInt" class="headerlink" title="BigInt"></a>BigInt</h3><p>BigInt 类型的数据必须添加后缀 <code>n</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1234</span> <span class="comment">// 普通整数</span></span><br><span class="line"><span class="number">1234n</span> <span class="comment">// BigInt</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="number">1234n</span> <span class="comment">// &#x27;bigint&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// BigInt 的运算</span></span><br><span class="line"><span class="number">1n</span> + <span class="number">2n</span> <span class="comment">// 3n</span></span><br></pre></td></tr></table></figure><h3 id="BigInt-函数"><a href="#BigInt-函数" class="headerlink" title="BigInt 函数"></a>BigInt 函数</h3><p>JavaScript 原生提供BigInt函数，可以用它生成 BigInt 类型的数值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">BigInt</span>(<span class="number">123</span>) <span class="comment">// 123n</span></span><br></pre></td></tr></table></figure><h1 id="函数的扩展"><a href="#函数的扩展" class="headerlink" title="函数的扩展"></a>函数的扩展</h1><h2 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h2><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>();</span><br><span class="line">p <span class="comment">// &#123; x: 0, y: 0 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h3><ol><li>形参初始值 具有默认值的参数，一般位置要靠后（潜规则）</li><li>与解构赋值结合</li></ol><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><p><code>function (...变量名) &#123;&#125;</code> （rest 参数获取的是一个数组，可以使用数组的一系列方法。）</p><h3 id="特性-4"><a href="#特性-4" class="headerlink" title="特性"></a>特性</h3><ol><li>当有多个形参时，rest 参数必须要放到参数最后（且rest 参数之后不能再有其他参数）</li><li>函数的 length属性，不包括 rest 参数</li></ol><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p>ES6 允许使用箭头（<code>=&gt;</code>）定义函数。（箭头函数适合与this无关的回调，定时器，数组的方法回调）</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = v =&gt; v;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="特性-5"><a href="#特性-5" class="headerlink" title="特性"></a>特性</h3><ol><li><strong>箭头函数没有自己的 this对象。（this总是指向函数定义生效时所在的对象）</strong></li><li>不可以当作构造函数实例化对象</li><li>不可以使用 arguments对象</li><li>不可以使用 yield命令</li></ol><h1 id="数组的扩展"><a href="#数组的扩展" class="headerlink" title="数组的扩展"></a>数组的扩展</h1><h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><p>扩展运算符（spread）是三个点（<code>...</code>）将一个<strong>数组转为用逗号分隔的参数序列</strong>。</p><h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 数组合并</span></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...arr1, ...arr2]); <span class="comment">// (6) [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 数组的克隆（浅拷贝）</span></span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr3_copy = [...arr3];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3_copy); <span class="comment">// (3) [&#x27;yellow&#x27;, &#x27;green&#x27;, &#x27;pink&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将伪数组转换为真数组</span></span><br><span class="line"><span class="keyword">let</span> divs = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> divsArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divsArr); <span class="comment">// (3) [div, div, div]</span></span><br></pre></td></tr></table></figure><h2 id="实例方法：includes"><a href="#实例方法：includes" class="headerlink" title="实例方法：includes()"></a>实例方法：includes()</h2><p>Array.prototype.includes方法返回一个布尔值，表示某个数组是否包含给定的值，该方法的第二个参数表示搜索的起始位置。</p><h2 id="实例方法：flat-，flatMap"><a href="#实例方法：flat-，flatMap" class="headerlink" title="实例方法：flat()，flatMap()"></a>实例方法：flat()，flatMap()</h2><h3 id="flat"><a href="#flat" class="headerlink" title="flat()"></a>flat()</h3><p>flat() 将<strong>多维数组转化为低位数组</strong>，该方法返回一个新数组，对原数据没有影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].<span class="title function_">flat</span>()</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].<span class="title function_">flat</span>()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].<span class="title function_">flat</span>(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].<span class="title function_">flat</span>(<span class="title class_">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>补充：</p><ol><li>flat()方法的参数为深度表示想要拉平的层数，默认为 1</li><li>如果不管有多少层嵌套，都要转成一维数组，可以用 <code>Infinity</code> 关键字作为参数</li></ol><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h3><p>flatMap()方法对原数组的每个成员执行一个函数（相当于执行Array.prototype.map()），然后对返回值组成的数组执行flat()方法。该方法返回一个新数组，不改变原数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">flatMap</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><p>补充：</p><ol><li>flatMap() 只能展开一层数组</li><li>flatMap() 方法还可以有第二个参数，用来绑定遍历函数里面的 this</li></ol><h1 id="对象的扩展"><a href="#对象的扩展" class="headerlink" title="对象的扩展"></a>对象的扩展</h1><h2 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h2><p>ES6允许在大括号里面，<strong>直接写入变量和函数</strong>，作为对象的属性和方法。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;Frank&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line">   name,</span><br><span class="line">   sayHello,</span><br><span class="line">   <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我的名字是：&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayHello</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><h2 id="对象的方法拓展"><a href="#对象的方法拓展" class="headerlink" title="对象的方法拓展"></a>对象的方法拓展</h2><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h3><p>Object.is 判断两个值是否完全相等</p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>Object.assign 用于对象合并</p><p>应用场景</p><ol><li>配置合并</li></ol><h3 id="Object-set-get-PrototypeOf"><a href="#Object-set-get-PrototypeOf" class="headerlink" title="Object.set[get]PrototypeOf"></a>Object.set[get]PrototypeOf</h3><p>Object.set[get]PrototypeOf 设置/获取原型对象</p><hr/><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><p>Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键名</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="comment">// [&quot;foo&quot;, &quot;baz&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values"></a>Object.values</h3><p>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的<strong>键值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">values</span>(obj)</span><br><span class="line"><span class="comment">// [&quot;bar&quot;, 42]</span></span><br></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries"></a>Object.entries</h3><p>Object.entries()方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)</span><br><span class="line"><span class="comment">// [ [&quot;foo&quot;, &quot;bar&quot;], [&quot;baz&quot;, 42] ]</span></span><br></pre></td></tr></table></figure><hr/><h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors"></a>Object.getOwnPropertyDescriptors</h3><p>Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非继承属性）的<strong>描述对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">bar</span>() &#123; <span class="keyword">return</span> <span class="string">&#x27;abc&#x27;</span> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; foo:</span></span><br><span class="line"><span class="comment">//    &#123; value: 123,</span></span><br><span class="line"><span class="comment">//      writable: true,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125;,</span></span><br><span class="line"><span class="comment">//   bar:</span></span><br><span class="line"><span class="comment">//    &#123; get: [Function: get bar],</span></span><br><span class="line"><span class="comment">//      set: undefined,</span></span><br><span class="line"><span class="comment">//      enumerable: true,</span></span><br><span class="line"><span class="comment">//      configurable: true &#125; </span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>对象克隆</li></ol><h3 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries"></a>Object.fromEntries</h3><p>Object.fromEntries()方法是 Object.entries()的<strong>逆操作</strong>，用于将一个键值对数组<strong>转为对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">  [<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>],</span><br><span class="line">  [<span class="string">&#x27;baz&#x27;</span>, <span class="number">42</span>]</span><br><span class="line">])</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: 42 &#125;</span></span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>配合URLSearchParams对象，将查询字符串转为对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(<span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="string">&#x27;foo=bar&amp;baz=qux&#x27;</span>))</span><br><span class="line"><span class="comment">// &#123; foo: &quot;bar&quot;, baz: &quot;qux&quot; &#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h2><p>ES2018 将扩展运算符引入了对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line">z <span class="comment">// &#123; a: 3, b: 4 &#125;</span></span><br></pre></td></tr></table></figure><h1 id="运算符的扩展"><a href="#运算符的扩展" class="headerlink" title="运算符的扩展"></a>运算符的扩展</h1><h2 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符"></a>指数运算符</h2><p>ES2016 新增了一个指数运算符（<code>**</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">// 4</span></span><br><span class="line"><span class="number">2</span> ** <span class="number">3</span> <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="链判断运算符"><a href="#链判断运算符" class="headerlink" title="链判断运算符"></a>链判断运算符</h2><p>编程实务中，如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。这样的层层判断非常麻烦。<br>因此 ES2020 引入了链判断运算符（optional chaining operator）<code>?.</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">config</span>) &#123;</span><br><span class="line">   <span class="comment">// 传统判断非常麻烦</span></span><br><span class="line">   <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 链判断运算符</span></span><br><span class="line">   <span class="keyword">const</span> dbHost = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(dbHost); <span class="comment">// 192.168.0.1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>(&#123;</span><br><span class="line">   <span class="attr">db</span>: &#123;</span><br><span class="line">       <span class="attr">host</span>: <span class="string">&#x27;192.168.0.1&#x27;</span>,</span><br><span class="line">       <span class="attr">username</span>: <span class="string">&#x27;admin&#x27;</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">cache</span>: &#123;</span><br><span class="line">       <span class="attr">host</span>: <span class="string">&#x27;192.168.10.1&#x27;</span>,</span><br><span class="line">       <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. Symbol 值通过Symbol()函数生成</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="keyword">typeof</span> s</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 可以接受一个字符串作为参数，表示对 Symbol 实例的描述。(可以通过实例属性description，直接返回 Symbol 值的描述。)</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">s1.<span class="title function_">toString</span>() <span class="comment">// &quot;Symbol(foo)&quot;</span></span><br><span class="line">s1.<span class="property">description</span> <span class="comment">// foo</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-prototype-description"><a href="#Symbol-prototype-description" class="headerlink" title="Symbol.prototype.description"></a>Symbol.prototype.description</h3><p>Symbol()函数创建 Symbol 值时，可以用参数添加一个描述。ES2019 提供了一个 Symbol 值的实例属性 description，直接<strong>返回 Symbol 值的描述</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sym = <span class="title class_">Symbol</span>(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">sym.<span class="property">description</span> <span class="comment">// &quot;foo&quot;</span></span><br></pre></td></tr></table></figure><h3 id="作为属性名的-Symbol"><a href="#作为属性名的-Symbol" class="headerlink" title="作为属性名的 Symbol"></a>作为属性名的 Symbol</h3><p>Symbol 值作为标识符，用于对象的属性名，就能保证不会出现同名的属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 场景一：为对象拓展方法</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line">   <span class="attr">up</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;原生up方法&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 创建一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line">   <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">   <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2. 为 game 对象拓展</span></span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;up 拓展方法&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;down&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line">game.<span class="title function_">up</span>(); <span class="comment">// 调用原生方法</span></span><br><span class="line">game[methods.<span class="property">up</span>](); <span class="comment">// 调用拓展方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景二：为对象添加独一无二的方法</span></span><br><span class="line"><span class="keyword">let</span> sayHello = <span class="title class_">Symbol</span>(<span class="string">&#x27;sayHello&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;frank&#x27;</span>,</span><br><span class="line">   [sayHello]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello,world!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person);</span><br><span class="line">person[sayHello]() <span class="comment">// 调用</span></span><br></pre></td></tr></table></figure><h3 id="内置的-Symbol-值"><a href="#内置的-Symbol-值" class="headerlink" title="内置的 Symbol 值"></a>内置的 Symbol 值</h3><h4 id="Symbol-hasInstance"><a href="#Symbol-hasInstance" class="headerlink" title="Symbol.hasInstance"></a>Symbol.hasInstance</h4><p>对象的Symbol.hasInstance属性，指向一个内部方法。当其他对象使用instanceof运算符，判断是否为该对象的实例时，会调用这个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](foo) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(foo); <span class="comment">// (3) [1, 2, 3]</span></span><br><span class="line">       <span class="keyword">return</span> foo <span class="keyword">instanceof</span> <span class="title class_">Array</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>()); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="Symbol-isConcatSpreadable"><a href="#Symbol-isConcatSpreadable" class="headerlink" title="Symbol.isConcatSpreadable"></a>Symbol.isConcatSpreadable</h4><p>对象的Symbol.isConcatSpreadable属性等于一个布尔值，表示该对象用于Array.prototype.concat()时，是否可以展开。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2)); <span class="comment">// (4) [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br><span class="line">arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span> <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2)); <span class="comment">// (3) [&#x27;a&#x27;, &#x27;b&#x27;, Array(2)]</span></span><br></pre></td></tr></table></figure><h1 id="Set-和-Map-数据结构"><a href="#Set-和-Map-数据结构" class="headerlink" title="Set 和 Map 数据结构"></a>Set 和 Map 数据结构</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。</p><h3 id="Set-实例的属性"><a href="#Set-实例的属性" class="headerlink" title="Set 实例的属性"></a>Set 实例的属性</h3><div class="table-container"><table><thead><tr><th>Set 实例的属性</th><th>Description</th></tr></thead><tbody><tr><td>Set.prototype.constructor</td><td>构造函数，默认就是Set函数</td></tr><tr><td>Set.prototype.size</td><td>返回Set实例的成员总数</td></tr></tbody></table></div><h3 id="Set-实例的方法"><a href="#Set-实例的方法" class="headerlink" title="Set 实例的方法"></a>Set 实例的方法</h3><h4 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h4><div class="table-container"><table><thead><tr><th>Set 实例的操作方法</th><th>Description</th></tr></thead><tbody><tr><td>Set.prototype.add(value)</td><td>添加某个值，返回 Set 结构本身。</td></tr><tr><td>Set.prototype.delete(value)</td><td>删除某个值，返回一个布尔值，表示删除是否成功</td></tr><tr><td>Set.prototype.has(value)</td><td>表示该值是否为Set的成员</td></tr><tr><td>Set.prototype.clear()</td><td>清除所有成员，没有返回值</td></tr></tbody></table></div><h4 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h4><div class="table-container"><table><thead><tr><th>Set 实例的遍历方法</th><th>Description</th></tr></thead><tbody><tr><td>Set.prototype.keys()</td><td>返回键名的遍历器</td></tr><tr><td>Set.prototype.values()</td><td>返回键值的遍历器</td></tr><tr><td>Set.prototype.entries()</td><td>返回键值对的遍历器</td></tr><tr><td>Set.prototype.forEach()</td><td>使用回调函数遍历每个成员</td></tr></tbody></table></div><h3 id="Set-实践"><a href="#Set-实践" class="headerlink" title="Set 实践"></a>Set 实践</h3><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> res = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// (3) [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h4><p>两个集合中的公共部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">// (2) [4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="并集"><a href="#并集" class="headerlink" title="并集"></a>并集</h4><p>两个集合合并之后的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr1, ...arr2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(union); <span class="comment">// (6) [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h4 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h4><p>A集合在B集合中没有的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> diff = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(diff); <span class="comment">// (3) [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。也就是说，Object 结构提供了“字符串—值”的对应，Map 结构提供了“值—值”的对应，是一种更完善的 Hash 结构实现。</p><h3 id="Map-实例的属性"><a href="#Map-实例的属性" class="headerlink" title="Map 实例的属性"></a>Map 实例的属性</h3><div class="table-container"><table><thead><tr><th>Map 实例的属性</th><th>Description</th></tr></thead><tbody><tr><td>size</td><td>返回 Map 结构的成员总数</td></tr></tbody></table></div><h3 id="Map-实例的方法"><a href="#Map-实例的方法" class="headerlink" title="Map 实例的方法"></a>Map 实例的方法</h3><h4 id="操作方法-1"><a href="#操作方法-1" class="headerlink" title="操作方法"></a>操作方法</h4><div class="table-container"><table><thead><tr><th>Map 实例的操作方法</th><th>Description</th></tr></thead><tbody><tr><td>Map.prototype.set(key, value)</td><td>设置键名key对应的键值为value，然后返回整个 Map 结构</td></tr><tr><td>Map.prototype.get(key)</td><td>读取key对应的键值，如果找不到key，返回undefined</td></tr><tr><td>Map.prototype.has(key)</td><td>返回一个布尔值，表示某个键是否在当前 Map 对象之中</td></tr><tr><td>Map.prototype.delete(key)</td><td>删除某个键，返回true。如果删除失败，返回false</td></tr><tr><td>Map.prototype.clear()</td><td>清除所有成员，没有返回值</td></tr></tbody></table></div><h4 id="遍历方法-1"><a href="#遍历方法-1" class="headerlink" title="遍历方法"></a>遍历方法</h4><div class="table-container"><table><thead><tr><th>Map 实例的遍历方法</th><th>Description</th></tr></thead><tbody><tr><td>Map.prototype.keys()</td><td>返回键名的遍历器</td></tr><tr><td>Map.prototype.values()</td><td>返回键值的遍历器</td></tr><tr><td>Map.prototype.entries()</td><td>返回所有成员的遍历器</td></tr><tr><td>Map.prototype.forEach()</td><td>遍历 Map 的所有成员</td></tr></tbody></table></div><h1 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="三个状态"><a href="#三个状态" class="headerlink" title="三个状态"></a>三个状态</h3><ol><li>pending（进行中）</li><li>fulfilled（已成功）</li><li>rejected（已失败）</li></ol><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>Promise对象是一个构造函数，用来生成Promise实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// let sucess = &#x27;sucess!&#x27;</span></span><br><span class="line">       <span class="comment">// resolve(sucess);</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">let</span> error = <span class="string">&#x27;error&#x27;</span>;</span><br><span class="line">       <span class="title function_">reject</span>(error);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;,<span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h2><p>then 方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）因此可以采用链式写法，即then方法后面再调用另一个then方法。(解决回调地狱的问题)</p><ol><li>如果 then 回调函数中返回的结果是非 promise 类型的属性，状态为成功，返回值为 promise 成功的值</li><li>如果 then 回调函数中返回的结果是 promise，内部返回 promise 的状态决定了 then 方法的状态</li><li>如果 then 回调函数中抛出错误，状态为失败，错误值为抛出错误的值</li></ol><h2 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h2><p>一般来说，不要在then()方法里面定义 Reject 状态的回调函数（即then的第二个参数），总是使用catch方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不推荐</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line"> <span class="comment">// success</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line"> <span class="comment">// error</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">data</span>) &#123; <span class="comment">//cb</span></span><br><span class="line"> <span class="comment">// success</span></span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line"> <span class="comment">// error</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h2><p>ES2020 引入了Promise.allSettled()方法，用来确定一组异步操作是否都结束了（不管成功或失败）</p><p>Promise.allSettled()方法接受一个数组作为参数，数组的每个成员都是一个 Promise 对象，并返回一个新的 Promise 对象。一旦发生状态变更，<strong>状态总是</strong><code>fulfilled</code>，不会变成rejected。状态变成fulfilled后，它的回调函数会接收到一个数组作为参数，该数组的每个成员对应前面数组的每个 Promise 对象</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node fs 模块</span></span><br><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./12-file.md&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="读取多个文件"><a href="#读取多个文件" class="headerlink" title="读取多个文件"></a>读取多个文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./12-file1.md&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./12-file2.md&#x27;</span>, <span class="keyword">function</span> (<span class="params">err, data</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="封装-Ajax-请求"><a href="#封装-Ajax-请求" class="headerlink" title="封装 Ajax 请求"></a>封装 Ajax 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个Promise对象</span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1.创建对象</span></span><br><span class="line">  <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.初始化,设置请求方式和接口地址</span></span><br><span class="line">  xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;./text.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 3.发送请求</span></span><br><span class="line">  xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.绑定事件，处理响应结果</span></span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 判断</span></span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="comment">// 判断响应状态码 200~299</span></span><br><span class="line">          <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">              <span class="comment">// 获取成功</span></span><br><span class="line">              <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">// 获取失败</span></span><br><span class="line">              <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理状态</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功:&quot;</span>, value);</span><br><span class="line">&#125;, <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败：&quot;</span>, reason);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="Iterator（遍历器）和-for…of"><a href="#Iterator（遍历器）和-for…of" class="headerlink" title="Iterator（遍历器）和 for…of"></a>Iterator（遍历器）和 for…of</h1><blockquote><ol><li>Iterator（遍历器）是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作，Iterator 接口主要供 for…of消费。</li><li>ES6 规定 默认的 Iterator 接口部署在数据结构的 <code>Symbol.iterator属性</code>，或者说，一个数据结构只要具有Symbol.iterator属性，就可以认为是可遍历的</li></ol></blockquote><h2 id="Iterator-遍历原理"><a href="#Iterator-遍历原理" class="headerlink" title="Iterator 遍历原理"></a>Iterator 遍历原理</h2><ol><li>创建一个指针对象，指向当前数据结构的起始位置。（遍历器对象本质上，就是一个指针对象）</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用 next方法返回一个包含 value和 done属性的对象（value属性是当前成员的值，done属性是一个布尔值，表示遍历是否结束）</li></ol><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> names = [<span class="string">&#x27;frank&#x27;</span>, <span class="string">&#x27;wilson&#x27;</span>, <span class="string">&#x27;iron&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = names[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator); <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对象 next 方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;frank&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;wilson&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;iron&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="原生具备-iterator-接口的数据"><a href="#原生具备-iterator-接口的数据" class="headerlink" title="原生具备 iterator 接口的数据"></a>原生具备 iterator 接口的数据</h2><blockquote><p>可用 for…of 遍历</p></blockquote><ol><li>Array</li><li>Maps</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ol><h2 id="对象添加-Iterator-接口"><a href="#对象添加-Iterator-接口" class="headerlink" title="对象添加 Iterator 接口"></a>对象添加 Iterator 接口</h2><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">   <span class="attr">data</span>: [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>],</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">       <span class="comment">// 获取 this</span></span><br><span class="line">       <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">       <span class="comment">// 索引变量</span></span><br><span class="line">       <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">return</span> &#123;</span><br><span class="line">           <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (index &lt; _this.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                   <span class="keyword">return</span> &#123;</span><br><span class="line">                       <span class="attr">value</span>: _this.<span class="property">data</span>[index++],</span><br><span class="line">                       <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">                   &#125;;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">return</span> &#123;</span><br><span class="line">                   <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">                   <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">               &#125;;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> iterator = obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;hello&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: &#x27;world&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><blockquote><p>一个数据结构只要部署了Symbol.iterator属性，就被视为具有 iterator 接口，就可以用for…of循环遍历它的成员。（for…of循环内部调用的是数据结构的Symbol.iterator方法）</p></blockquote><h3 id="使用范围"><a href="#使用范围" class="headerlink" title="使用范围"></a>使用范围</h3><ol><li>数组</li><li>Set 和 Map 结构</li><li>类似数组的对象（比如arguments对象、DOM NodeList 对象）</li><li>Generator 对象</li><li>字符串</li></ol><h1 id="Generator-生成器"><a href="#Generator-生成器" class="headerlink" title="Generator 生成器"></a>Generator 生成器</h1><h2 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h2><p><code>function* foo(x, y) &#123; ··· &#125;</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">   <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()); <span class="comment">// foo &#123;&lt;suspended&gt;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// yield表达式是暂停执行的标记，而next方法可以恢复执行。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// for of 遍历</span></span><br><span class="line"><span class="comment">// for (const v of iterator) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(v);</span></span><br><span class="line"><span class="comment">//     // 1 hello 2 world 3</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h2><p>yield表达式是暂停执行的标记，而next方法可以恢复执行</p><h2 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a>next 方法的参数</h2><p>yield表达式本身没有返回值，或者说总是返回 undefined。next方法可以带一个参数，该参数就会<strong>被当作上一个yield表达式的返回值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arg); <span class="comment">// AAA</span></span><br><span class="line">   <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(one); <span class="comment">// BBB</span></span><br><span class="line">   <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(two); <span class="comment">// CCC</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">foo</span>(<span class="string">&#x27;AAA&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// &#123;value: 111, done: false&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// next方法可以带一个参数，该参数就会被当作上一个yield表达式的返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;BBB&#x27;</span>)); <span class="comment">// &#123;value: 222, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&#x27;CCC&#x27;</span>)); <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Generator-生成器的异步应用"><a href="#Generator-生成器的异步应用" class="headerlink" title="Generator 生成器的异步应用"></a>Generator 生成器的异步应用</h1><h2 id="模拟异步"><a href="#模拟异步" class="headerlink" title="模拟异步"></a>模拟异步</h2><p>解决回调地狱的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1s 后控制台输出 1 2s后输出 2 3s后输出 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">       iterator.<span class="title function_">next</span>();</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">       iterator.<span class="title function_">next</span>();</span><br><span class="line">   &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">       iterator.<span class="title function_">next</span>();</span><br><span class="line">   &#125;, <span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// -----------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">   <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">   <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><p>模拟获取数据:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用户数据 --&gt; 订单数据 --&gt; 商品数据 （注意顺序不能乱，有用户才可以获取到订单，有订单才可以获取到商品数据）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> data = <span class="string">&#x27;用户数据&#x27;</span>;</span><br><span class="line">       iterator.<span class="title function_">next</span>(data);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> data = <span class="string">&#x27;订单数据&#x27;</span>;</span><br><span class="line">       iterator.<span class="title function_">next</span>(data);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">let</span> data = <span class="string">&#x27;商品数据&#x27;</span>;</span><br><span class="line">       iterator.<span class="title function_">next</span>(data);</span><br><span class="line">   &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(users); <span class="comment">// 用户数据</span></span><br><span class="line">   <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(orders); <span class="comment">// 订单数据</span></span><br><span class="line">   <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(goods); <span class="comment">// 商品数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>(); </span><br></pre></td></tr></table></figure><h1 id="async-函数"><a href="#async-函数" class="headerlink" title="async 函数"></a>async 函数</h1><p>async 函数是 Generator 函数的<strong>语法糖</strong>，使得异步操作变得更加方便。</p><h2 id="特性-6"><a href="#特性-6" class="headerlink" title="特性"></a>特性</h2><ol><li>async 函数的<strong>返回值为 promise 对象</strong></li><li>promise 对象的结果由 async 函数执行的返回值决定</li></ol><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><h3 id="特性-7"><a href="#特性-7" class="headerlink" title="特性"></a>特性</h3><ol><li>await 必须写在 async 函数中</li><li>await 右侧的表达式一般为 promise 对象</li><li>await 返回的是 promise 成功的值</li><li>await 的 promise 失败了，就会抛出异常，需要通过 <code>try...catch</code> 捕获处理</li></ol><h2 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h2><h3 id="读取文件-1"><a href="#读取文件-1" class="headerlink" title="读取文件"></a>读取文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./12-file1.md&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readFile2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./12-file2.md&#x27;</span>,<span class="keyword">function</span>(<span class="params">err,data</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> file1 = <span class="keyword">await</span> <span class="title function_">readFile1</span>();</span><br><span class="line">    <span class="keyword">let</span> file2 = <span class="keyword">await</span> <span class="title function_">readFile2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file1.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(file2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="封装-Ajax-请求-1"><a href="#封装-Ajax-请求-1" class="headerlink" title="封装 Ajax 请求"></a>封装 Ajax 请求</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sendAjax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">       <span class="comment">// 1.创建对象</span></span><br><span class="line">       <span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.初始化,设置请求方式和接口地址</span></span><br><span class="line">       xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 3.发送请求</span></span><br><span class="line">       xhr.<span class="title function_">send</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 4.绑定事件，处理响应结果</span></span><br><span class="line">       xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">           <span class="comment">// 判断</span></span><br><span class="line">           <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span><br><span class="line">               <span class="comment">// 判断响应状态码 200~299</span></span><br><span class="line">               <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                   <span class="comment">// 获取成功</span></span><br><span class="line">                   <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   <span class="comment">// 获取失败</span></span><br><span class="line">                   <span class="title function_">reject</span>(xhr.<span class="property">status</span>);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// async 和 await 测试</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sendAjax</span>(</span><br><span class="line">       <span class="string">&#x27;https://v0.yiketianqi.com/api?unescape=1&amp;version=v91&amp;appid=43656176&amp;appsecret=I42og6Lm&amp;ext=&amp;cityid=&amp;city=&#x27;</span></span><br><span class="line">   );</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>ES6 的class可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。</p><h2 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义方法</span></span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;(&#x27;</span> + <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;)&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="constructor-方法"><a href="#constructor-方法" class="headerlink" title="constructor() 方法"></a>constructor() 方法</h2><p>constructor()方法是类的默认方法，<strong>通过new命令生成对象实例时，自动调用该方法</strong>。一个类必须有constructor()方法，如果没有显式定义，一个空的constructor()方法会被默认添加。</p><h2 id="取值函数（getter）和存值函数（setter）"><a href="#取值函数（getter）和存值函数（setter）" class="headerlink" title="取值函数（getter）和存值函数（setter）"></a>取值函数（getter）和存值函数（setter）</h2><p>在 <code>类</code> 的内部可以使用 get和 set关键字，对某个属性设置存值函数和取值函数，<strong>拦截该属性的存取行为</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">prop</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;getter&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">prop</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setter: &#x27;</span>+value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> inst = <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span> = <span class="number">123</span>;</span><br><span class="line"><span class="comment">// setter: 123</span></span><br><span class="line"></span><br><span class="line">inst.<span class="property">prop</span></span><br><span class="line"><span class="comment">// &#x27;getter&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="静态方法和静态属性"><a href="#静态方法和静态属性" class="headerlink" title="静态方法和静态属性"></a>静态方法和静态属性</h2><p>对于 <code>static</code> 关键字标注的属性和方法，属于类（只能类调用），而不属于实例对象（不会被实例继承）。</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ol><li>如果静态方法包含this关键字，这个this指的是类，而不是实例</li><li>父类的静态方法，可以被子类继承</li></ol><h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>静态属性指的是 Class 本身的属性，即Class.propName，而不是定义在实例对象（this）上的属性。</p><h2 id="私有方法和私有属性"><a href="#私有方法和私有属性" class="headerlink" title="私有方法和私有属性"></a>私有方法和私有属性</h2><p>ES2022 正式为 class添加了私有属性，方法是在属性名之前使用 <code>#</code> 表示</p><p>私有属性，只能在类的内部使用（<code>this.#属性名</code>）。<strong>如果在类的外部使用，就会报错。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   name;</span><br><span class="line">   #age;</span><br><span class="line">   #weight;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">name,age,weight</span>)&#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">       <span class="variable language_">this</span>.#age = age;</span><br><span class="line">       <span class="variable language_">this</span>.#weight = weight;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">intro</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;frank&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;60kg&#x27;</span>);</span><br><span class="line"><span class="comment">// 外部访问私有属性报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">name</span>); <span class="comment">// frank</span></span><br><span class="line"><span class="comment">// console.log(p.#age); // Uncaught SyntaxError: Private field &#x27;#age&#x27; must be declared in an enclosing class</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能在类的内部使用（this.#属性名）访问</span></span><br><span class="line">p.<span class="title function_">intro</span>(); <span class="comment">// frank 18 60kg</span></span><br></pre></td></tr></table></figure><h1 id="Class-的继承"><a href="#Class-的继承" class="headerlink" title="Class 的继承"></a>Class 的继承</h1><p>Class 可以通过extends关键字实现继承，让子类继承父类的属性和方法</p><h2 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Foo</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> <span class="title class_">Bar</span>();</span><br><span class="line"><span class="comment">// 1  // 子类构造函数调用super()时，会执行一次父类构造函数。</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="特性-8"><a href="#特性-8" class="headerlink" title="特性"></a>特性</h2><ol><li>子类必须在constructor()方法中调用super()，否则就会报错。（子类自己的this对象，必须先通过父类的构造函数完成塑造）</li><li>在子类的构造函数中，只有调用super()之后，才可以使用this关键字，否则会报错。</li><li>如果子类没有定义constructor()方法，这个方法会默认添加，并且里面会调用super()</li></ol><h2 id="重写父类方法"><a href="#重写父类方法" class="headerlink" title="重写父类方法"></a>重写父类方法</h2><p>直接在子类中重写父类的方法，子类会覆盖父类中的同名方法。</p><h1 id="Module-模块化"><a href="#Module-模块化" class="headerlink" title="Module 模块化"></a>Module 模块化</h1><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>ES6 的模块自动采用严格模式，不管你有没有在模块头部加上 <code>&quot;use strict&quot;</code>;</p><h2 id="export"><a href="#export" class="headerlink" title="export"></a>export</h2><p>export 命令用于规定模块的对外接口</p><p>拓展：</p><ol><li>如果希望外部能够读取模块内部的某个变量，就必须使用export关键字输出该变量</li><li>在export命令后面，可以使用<strong>大括号指定所要输出的一组变量</strong>。</li><li>export语句输出的接口，与其对应的值是<strong>动态绑定关系</strong>，即通过该接口，可以取到模块内部实时的值</li></ol><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>import 命令用于输入其他模块提供的功能</p><p>拓展：</p><ol><li>导入的时候可以使用 <code>as</code> 关键字重命名，避免命名冲突</li><li>import 命令输入的<strong>变量</strong>都是只读的，因为它的本质是输入接口。也就是说，不允许在加载模块的脚本里面，改写接口。</li><li>如果加载的是一个对象，改写对象的属性是允许的</li><li>import 后面的 from 指定模块文件的位置，<strong>可以是相对路径，也可以是绝对路径。</strong></li></ol><h2 id="export-default"><a href="#export-default" class="headerlink" title="export default"></a>export default</h2><p>export default命令，为模块指定默认输出</p><p>拓展：</p><ol><li>其他模块加载该模块时，import 命令可以为该匿名函数<strong>指定任意名字</strong>。</li><li>export default 命令其实只是输出一个叫做 default 的变量，所以它后面不能跟<strong>变量声明语句</strong>。</li></ol><h2 id="import-1"><a href="#import-1" class="headerlink" title="import()"></a>import()</h2><p>ES2020提案 引入import()函数，支持<strong>动态加载模块</strong></p><p>import()返回一个 Promise 对象，需要使用then()方法指定处理函数。考虑到代码的清晰，更推荐使用await命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;main&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span>(<span class="string">`./section-modules/<span class="subst">$&#123;someVariable&#125;</span>.js`</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">loadPageInto</span>(main);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    main.<span class="property">textContent</span> = err.<span class="property">message</span>;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>按需加载</li><li>条件加载</li><li>动态的模块路径</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ol><li><a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></li><li>ES6+ 新特性汇总：<a href="https://juejin.cn/post/6844904066930180103">https://juejin.cn/post/6844904066930180103</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript BOM</title>
      <link href="/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20BOM/f75e92e9/"/>
      <url>/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20BOM/f75e92e9/</url>
      
        <content type="html"><![CDATA[<h1 id="BOM-概述"><a href="#BOM-概述" class="headerlink" title="BOM 概述"></a>BOM 概述</h1><blockquote><p>BOM(Browser Object Model 浏览器对象模型) 它提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。通过BOM可以操作浏览器窗口，比如弹出框、控制浏览器跳转、获取分辨率等。</p></blockquote><h2 id="BOM-构成"><a href="#BOM-构成" class="headerlink" title="BOM 构成"></a>BOM 构成</h2><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220805215100.png" alt="20220805215100"></p><h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><p>window 对象是浏览器的顶级对象</p><ol><li>它是 JS 访问浏览器窗口的一个接口。</li><li>它是一个全局对象。<strong>定义在全局作用域中</strong>的变量、函数都会变成 window 对象的属性和方法。（调用的时候可以省略 window）</li></ol><h2 id="window-常见事件"><a href="#window-常见事件" class="headerlink" title="window 常见事件"></a>window 常见事件</h2><h3 id="window-onload"><a href="#window-onload" class="headerlink" title="window.onload"></a>window.onload</h3><p>window.onload 是窗口（页面）加载事件，当文档内容完全加载完成会触发该事件（<strong>包括图像、脚本文件、CSS文件等</strong>）</p><p>下面三种情况都会都会触发 load 事件</p><ol><li>a标签的超链接</li><li>F5或者刷新按钮（强制刷新）</li><li>前进后退按钮</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 传统方式注册【不推荐，只能写一次。】</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. addEventListener 方法注册【推荐】</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>补充：DOMContentLoaded</p><p>DOMContentLoaded 事件，<strong>仅当DOM加载完成</strong>时触发，不包括样式表，图片，flash 等等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="window-pageshow"><a href="#window-pageshow" class="headerlink" title="window.pageshow"></a>window.pageshow</h3><blockquote><p>当一条会话历史记录被执行的时候将会触发页面显示 (pageshow) 事件。(<strong>包括了后退/前进按钮操作</strong>，同时 pageshow 会在 load 事件触发后触发)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pageshow:&#x27;</span>,e);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展: e.persisted 返回布尔值 表示网页是否是来自缓存 </span></span><br></pre></td></tr></table></figure><h3 id="window-onresize"><a href="#window-onresize" class="headerlink" title="window.onresize"></a>window.onresize</h3><blockquote><p>window.onresize 是调整窗口大小加载事件，只要窗口大小发生像素变化，就会触发这个事件。【】</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 传统方式注册【不推荐，只能写一次。】</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. addEventListener 方法注册【推荐】</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>应用场景：</p><ol><li>响应式布局。（window.innerWidth 当前屏幕的宽度）</li></ol><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><h2 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(callback[delay]);</span><br></pre></td></tr></table></figure><p>停止 setTimeout 定时器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// timeoutID 由相应的 setTimeout() 调用返回</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearTimeout</span>(timeoutID)</span><br></pre></td></tr></table></figure><h2 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval()"></a>setInterval()</h2><blockquote><p>setInterval() 方法<strong>重复调用一个函数</strong>，每隔指定时间，就去调用一次回调函数。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(callback[delay]);</span><br></pre></td></tr></table></figure><p>停止 setInterval 定时器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// timeoutID 由相应的 setInterval() 调用返回</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="built_in">clearInterval</span>(timeoutID)</span><br></pre></td></tr></table></figure><h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><blockquote><p>一般情况下 this 的最终指向的是那个调用它的对象</p></blockquote><ol><li>全局作用域或普通函数中的 this 指向全局对象 <strong>window</strong></li><li>方法中，<strong>谁调用 this 就指向谁</strong></li><li>构造函数中 this 指向构造函数的<strong>实例</strong></li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="短信验证码倒计时"><a href="#短信验证码倒计时" class="headerlink" title="短信验证码倒计时"></a>短信验证码倒计时</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Send Message<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> second = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            btn.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (second &gt;= <span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">innerText</span> = <span class="string">&quot;Wait...&quot;</span> + second + <span class="string">&quot;S&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    second--;</span></span><br><span class="line"><span class="language-javascript">                &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">disabled</span> = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                    btn.<span class="property">innerText</span> = <span class="string">&quot;Send Message Again..&quot;</span></span></span><br><span class="line"><span class="language-javascript">                    second = <span class="number">3</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JS-执行机制"><a href="#JS-执行机制" class="headerlink" title="JS 执行机制"></a>JS 执行机制</h1><h2 id="JS-是单线程"><a href="#JS-是单线程" class="headerlink" title="JS 是单线程"></a>JS 是单线程</h2><p>JavaScript 语言的一大特点就是单线程，也就是说，<strong>同一个时间只能做一件事。</strong></p><h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>为了解决单线程问题，利用多核CPU的计算能力，HTML5提出 WebWorker 标准，允许 JavaScript 脚本创建多个线程。</p><h3 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h3><p>同步任务都在主线程上执行，形成一个<strong>执行栈</strong>。</p><h3 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h3><p>JS的异步是通过<strong>回调函数</strong>实现的。异步任务主要有以下三种类型：</p><ol><li>普通事件，如 click、resize 等</li><li>资源加载，如 load、error 等</li><li>定时器，包括 setInterval、setTimeout 等</li></ol><p>异步任务相关回调函数添加到<strong>任务队列</strong>中（也称为<strong>消息队列</strong>）</p><h2 id="执行机制"><a href="#执行机制" class="headerlink" title="执行机制"></a>执行机制</h2><ol><li>先执行执行栈中的同步任务</li><li>异步任务（回调函数）放入任务队列中</li><li>执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，被读取的异步任务结束等待状态，进入执行栈，开始执行</li></ol><h3 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h3><p>主线程不断的重复获得任务、执行任务、再获取任务、再执行</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220806004611.png" alt="Javascript-event-loop"></p><h1 id="location-对象"><a href="#location-对象" class="headerlink" title="location 对象"></a>location 对象</h1><blockquote><p>window 对象给我们提供了一个 location 属性用于获取或设置窗体的 URL,并且可以用于解析 URL</p></blockquote><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><blockquote><p>URL 统一资源定位符（Uniform Resource Locator,URL)是互联网上标准资源的地址。</p></blockquote><p>语法格式：</p><p><code>protocol://host[:port]/path/[?query]#fragment</code></p><div class="table-container"><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>protocol</td><td>通信协议常用的 http, ftp, maito 等</td></tr><tr><td>host</td><td>主机（域名）</td></tr><tr><td>port</td><td>端口号【可选，默认端口为80】</td></tr><tr><td>path</td><td>路径由零或多个 / 符号隔开的字符串，一般用来表示主机上的一个目录或文件地址</td></tr><tr><td>query</td><td>参数以键值对的形式，通过 &amp; 符号分隔开来</td></tr><tr><td>fragment</td><td>片段 # 后面内容常见于链接锚点</td></tr></tbody></table></div><h2 id="location-对象属性"><a href="#location-对象属性" class="headerlink" title="location 对象属性"></a>location 对象属性</h2><div class="table-container"><table><thead><tr><th>location 对象属性</th><th>返回值</th></tr></thead><tbody><tr><td><strong>location.href</strong></td><td>获取或者设置整个URL</td></tr><tr><td>location.host</td><td>返回主机（域名）</td></tr><tr><td>location.port</td><td>返回端口号 （如果未写返回空字符串）</td></tr><tr><td>location.pathname</td><td>返回路径</td></tr><tr><td><strong>location.search</strong></td><td>返回参数</td></tr><tr><td>location.hash</td><td>返回片段 # 后面内容 常见于链接锚点</td></tr></tbody></table></div><h2 id="location-对象方法"><a href="#location-对象方法" class="headerlink" title="location 对象方法"></a>location 对象方法</h2><div class="table-container"><table><thead><tr><th>location 对象方法</th><th>返回值</th></tr></thead><tbody><tr><td>location.assign()</td><td>跳转页面（跟 href 功能一样，也称为重定向页面）</td></tr><tr><td>location.replace()</td><td>跳转页面（不记录历史）</td></tr><tr><td>location.reload()</td><td>重新加载页面（相当于f5刷新，如果参数为 <code>true</code> 相当于ctrl+f5 强制刷新）</td></tr></tbody></table></div><h2 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h2><h3 id="延时跳转效果"><a href="#延时跳转效果" class="headerlink" title="延时跳转效果"></a>延时跳转效果</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>跳转首页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> info = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;info&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">disabled</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> timer = <span class="number">5</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (timer == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    location.<span class="property">href</span> = <span class="string">&#x27;https://haloboys.github.io/&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    info.<span class="property">innerHTML</span> = <span class="string">&#x27;将在&#x27;</span> + timer + <span class="string">&#x27;秒后跳转...&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    timer--;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="navigator-对象"><a href="#navigator-对象" class="headerlink" title="navigator 对象"></a>navigator 对象</h1><p>navigator对象包含有关浏览器的信息，详情查文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator">https://developer.mozilla.org/en-US/docs/Web/API/Navigator</a></p><h2 id="navigator-对象属性"><a href="#navigator-对象属性" class="headerlink" title="navigator 对象属性"></a>navigator 对象属性</h2><div class="table-container"><table><thead><tr><th>navigator 对象属性</th><th>返回值</th></tr></thead><tbody><tr><td><strong>navigator.userAgent</strong></td><td>返回由客户机发送服务器的 user-agent 头部的值</td></tr></tbody></table></div><h2 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h2><h3 id="判断用户使用什么设备"><a href="#判断用户使用什么设备" class="headerlink" title="判断用户使用什么设备"></a>判断用户使用什么设备</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((navigator.<span class="property">userAgent</span>.<span class="title function_">match</span>(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>))) &#123;</span><br><span class="line">    <span class="comment">//跳转到手机端的页面</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//跳转到pc端的页面</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="获取用户使用什么浏览器"><a href="#获取用户使用什么浏览器" class="headerlink" title="获取用户使用什么浏览器"></a>获取用户使用什么浏览器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 各主流浏览器</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBrowser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> bws = [&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;sgssapp&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: <span class="regexp">/sogousearch/i</span>.<span class="title function_">test</span>(u)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;wechat&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: <span class="regexp">/MicroMessenger/i</span>.<span class="title function_">test</span>(u)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;weibo&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/Weibo/i</span>)</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;uc&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: !!u.<span class="title function_">match</span>(<span class="regexp">/UCBrowser/i</span>) || u.<span class="title function_">indexOf</span>(<span class="string">&#x27; UBrowser&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;sogou&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;MetaSr&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Sogou&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;xiaomi&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;MiuiBrowser&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;baidu&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Baidu&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;BIDUBrowser&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;360&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;360EE&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;360SE&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;2345&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;2345Explorer&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;edge&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Edge&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ie11&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Trident&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; u.<span class="title function_">indexOf</span>(<span class="string">&#x27;rv:11.0&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;ie&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;compatible&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; u.<span class="title function_">indexOf</span>(<span class="string">&#x27;MSIE&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;firefox&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Firefox&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;safari&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Safari&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>) === -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;qqbrowser&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;MQQBrowser&#x27;</span>) &gt; -<span class="number">1</span> &amp;&amp; u.<span class="title function_">indexOf</span>(<span class="string">&#x27; QQ&#x27;</span>) === -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;qq&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;QQ&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;chrome&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Chrome&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;CriOS&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;opera&#x27;</span>,</span><br><span class="line">        <span class="attr">it</span>: u.<span class="title function_">indexOf</span>(<span class="string">&#x27;Opera&#x27;</span>) &gt; -<span class="number">1</span> || u.<span class="title function_">indexOf</span>(<span class="string">&#x27;OPR&#x27;</span>) &gt; -<span class="number">1</span></span><br><span class="line">    &#125;];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bws.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (bws[i].<span class="property">it</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bws[i].<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;other&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取用户使用什么系统"><a href="#获取用户使用什么系统" class="headerlink" title="获取用户使用什么系统"></a>获取用户使用什么系统</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getOS</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> u = navigator.<span class="property">userAgent</span>;</span><br><span class="line">    <span class="keyword">if</span> (!!u.<span class="title function_">match</span>(<span class="regexp">/compatible/i</span>) || u.<span class="title function_">match</span>(<span class="regexp">/Windows/i</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;windows&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!!u.<span class="title function_">match</span>(<span class="regexp">/Macintosh/i</span>) || u.<span class="title function_">match</span>(<span class="regexp">/MacIntel/i</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;macOS&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!!u.<span class="title function_">match</span>(<span class="regexp">/iphone/i</span>) || u.<span class="title function_">match</span>(<span class="regexp">/Ipad/i</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;ios&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!!u.<span class="title function_">match</span>(<span class="regexp">/android/i</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;android&#x27;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;other&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="history-对象"><a href="#history-对象" class="headerlink" title="history 对象"></a>history 对象</h1><h2 id="history-对象方法"><a href="#history-对象方法" class="headerlink" title="history 对象方法"></a>history 对象方法</h2><div class="table-container"><table><thead><tr><th>history 对象方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>后退功能</td></tr><tr><td>forward()</td><td>前进功能</td></tr><tr><td>go()</td><td>前进后退功能（参数是1前进1个页面，-1后退1个页面）</td></tr></tbody></table></div><h1 id="cookies-对象"><a href="#cookies-对象" class="headerlink" title="cookies 对象"></a>cookies 对象</h1><h1 id="客户端存储-WebStorage"><a href="#客户端存储-WebStorage" class="headerlink" title="客户端存储(WebStorage)"></a>客户端存储(WebStorage)</h1><p>sessionStorage 约5M、localStorage 约20M <strong>存储数据时</strong>会自动调用 <code>toStrting()</code> 方法将<strong>值</strong>转换成字符串类型，如果传入的是一个对象，需要使用 <code>JSON.Stringify</code> 方法编码后存储。<br>SessionStorage存储的内容会随着浏览器窗口关闭而消失。<br>LocalStorage存储的内容，需要手动清除才会消失。<br><code>xxxxxStorage.getItem(xxx)</code> 如果 xxx 对应的 value <strong>获取不到</strong>，那么 getItem 的返回值是 <strong>null</strong>。<br><code>JSON.parse(null)</code> 的结果依然是null。 </p><h2 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h2><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>生命周期为关闭浏览器窗口</li><li>在同一个窗口（页面）下数据可以共享</li><li>以键值对的形式存储使用</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h4><p><code>sessionStorage.setItem(key,value)</code></p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p><code>sessionStorage.getItem(key)</code></p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><p><code>sessionStorage.removeItem(key)</code></p><h4 id="删除所有数据"><a href="#删除所有数据" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><p><code>sessionStorage.clear()</code></p><h2 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h2><h3 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h3><ol><li>生命周期永久生效，除非手动删除否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ol><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><h4 id="存储数据-1"><a href="#存储数据-1" class="headerlink" title="存储数据"></a>存储数据</h4><p><code>localStorage.setItem(key,value)</code></p><h4 id="获取数据-1"><a href="#获取数据-1" class="headerlink" title="获取数据"></a>获取数据</h4><p><code>localStorage.getItem(key)</code></p><h4 id="删除数据-1"><a href="#删除数据-1" class="headerlink" title="删除数据"></a>删除数据</h4><p><code>localStorage.removeItem(key)</code></p><h4 id="删除所有数据-1"><a href="#删除所有数据-1" class="headerlink" title="删除所有数据"></a>删除所有数据</h4><p><code>localStorage.clear()</code></p><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><h4 id="记住用户名"><a href="#记住用户名" class="headerlink" title="记住用户名"></a>记住用户名</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span> 记住用户名</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> username = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> remember = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">            username.<span class="property">value</span> = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            remember.<span class="property">checked</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        remember.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>, username.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript DOM</title>
      <link href="/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20DOM/f75e92e9/"/>
      <url>/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20DOM/f75e92e9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>DOM（Document Object Model 文档对象模型) 是W3C组织推荐的处理可扩展标记语言的标准编程接口。通过DOM提供的接口可以对页面上的各种元素进行操作（大小、位置、颜色等）。</p></blockquote><h1 id="DOM-树"><a href="#DOM-树" class="headerlink" title="DOM 树"></a>DOM 树</h1><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220802211554.png" alt="20220802211554"></p><p>文档：一个页面就是一个文档，DOM中使用document表示<br>元素：页面中的所有标签都是元素，DOM中使用element表示<br>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）,DOM中使用 node 表示</p><h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><p>官方文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">https://developer.mozilla.org/en-US/docs/Web/API/Document</a></p><h2 id="getElementByld"><a href="#getElementByld" class="headerlink" title="getElementByld()"></a>getElementByld()</h2><p>获取带有 ID 的元素对象</p><h2 id="getElementsByTagName"><a href="#getElementsByTagName" class="headerlink" title="getElementsByTagName()"></a>getElementsByTagName()</h2><p>返回带有指定标签名的对象的集合【伪数组的形式存储】</p><p>注意：</p><ol><li>得到的是一个对象的集合，所以想要操作里面的元素就需要遍历</li><li>得到元素对象是动态的</li></ol><h2 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h2><p>根据类名返回元素对象集合</p><h2 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h2><p>返回指定选择器（里面的参数必须是有效的 CSS 选择器字符串）第一个元素对象，如果找不到匹配项，则返回null。</p><h2 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h2><p>返回指定选择器（里面的参数必须是有效的 CSS 选择器字符串）所有元素对象</p><h2 id="document-body"><a href="#document-body" class="headerlink" title="document.body"></a>document.body</h2><p>获取当前文档中的<code>&lt;body&gt;</code>元素或者<code>&lt;frameset&gt;</code>元素.</p><h2 id="document-documentElement"><a href="#document-documentElement" class="headerlink" title="document.documentElement"></a>document.documentElement</h2><p>获取 HTML 文档的 <code>&lt;html&gt;</code> 元素</p><h1 id="操作元素"><a href="#操作元素" class="headerlink" title="操作元素"></a>操作元素</h1><blockquote><p>JavaScript的DOM操作可以改变网页内容、结构和样式。</p></blockquote><h2 id="操作元素内容"><a href="#操作元素内容" class="headerlink" title="操作元素内容"></a>操作元素内容</h2><ul><li><strong>Element.innerHTML</strong></li><li>Element.innerText （特点：不识别 html 标签，去除空格和换行。【非标准】）</li></ul><h2 id="操作常见元素属性"><a href="#操作常见元素属性" class="headerlink" title="操作常见元素属性"></a>操作常见元素属性</h2><ul><li>src</li><li>href</li><li>title</li><li>alt</li><li>…</li></ul><h2 id="操作表单元素属性"><a href="#操作表单元素属性" class="headerlink" title="操作表单元素属性"></a>操作表单元素属性</h2><p>利用DOM可以操作如下表单元素的属性：</p><ul><li>type</li><li>value</li><li>checked</li><li>selected</li><li>disabled</li></ul><h2 id="操作元素样式属性"><a href="#操作元素样式属性" class="headerlink" title="操作元素样式属性"></a>操作元素样式属性</h2><p>可以通过JS修改元素的大小、颜色、位置等样式</p><ul><li>element.style<ul><li>应用场景：样式属性较少的时候（产生的是行内样式，<strong>css 权重比较高</strong>）</li></ul></li><li>element.className<ul><li>应用场景：CSS 样式比较复杂的时候，单独定义一个类，然后给元素添加类名</li><li>注意：<ul><li>className 会直接更改元素的类名，会覆盖原先的类名。</li><li>如想要保留原先的类名，可以使用多类名选择器，补充原先的类名。（如：<code>this.className =&#39;原类名 类名1 类名2&#39;;</code>）</li></ul></li></ul></li></ul><h2 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h2><blockquote><p>自定义属性目的：是为了保存并使用数据。有些数据可以保存到页面中而不用保存到数据库中。</p></blockquote><ul><li>Element.getAttribute(‘属性’);</li><li>Element.setAttribute(‘属性’, ‘属性值’);</li><li>Element.removeAttribute(‘属性’);</li></ul><p>拓展：<br>命名规范：H5规定自定义属性 <code>data-</code> 开头做为属性名并且赋值。<br>以 <code>data-</code> 开头的属性，可以通过 H5新增语法： <code>element.dataset.属性名</code> 或 <code>element.dataset[&#39;属性名&#39;]</code> 的方式获取属性值。</p><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><h3 id="循环精灵图："><a href="#循环精灵图：" class="headerlink" title="循环精灵图："></a>循环精灵图：</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">首先精灵图图片排列有规律的（如：竖向排列）</span></span><br><span class="line"><span class="comment">核心思路：</span></span><br><span class="line"><span class="comment">1. 利用 for 循环修改精灵图片的背景位置 background-position</span></span><br><span class="line"><span class="comment">2. 让循环里面的 i索引号 * 精灵图之间的间隔 就是每个图片的 y 坐标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// index: y 坐标</span></span><br><span class="line">    <span class="keyword">let</span> index = i * 精灵图之间的间隔;</span><br><span class="line">    elements[i].<span class="property">style</span>.<span class="property">bacgroundPosition</span> = <span class="string">&#x27;0 -&#x27;</span> + index + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"></span><br><span class="line">如果有同一组元素，我们想要某一个元素实现某种样式，需要用到循环的排他思想算法：</span><br><span class="line">1.所有元素全部清除样式（干掉其他人）</span><br><span class="line">2.给当前元素设置样式（留下我自己）</span><br><span class="line">注意：顺序不能颠倒，首先干掉其他人，再设置自己</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">// 排他思想案例：批量为元素添加事件，点击元素背景高亮效果。</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> btns = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            btns[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 排他思想：循环清除掉所有样式。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btns.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    btns[i].<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;pink&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="全选反选"><a href="#全选反选" class="headerlink" title="全选反选"></a>全选反选</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;check_all&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>全选<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tbody</span> <span class="attr">id</span>=<span class="string">&quot;tb&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        元素</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        元素</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                        元素</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        分析：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        1.全选和取消全选做法：让下面所有复选框的checked属性（选中状态）跟随全选按钮即可</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        2.下面复选框需要全部选中，上面全选才能选中做法：给下面所有复选框绑定点击事件，每次点击，都要循环查看下面所有的复选框是否有没选中的，如果有一个没选中的，上面全选就不选中。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        3.可以设置一个变量，来控制全选是否选中</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> check_all = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;check_all&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> elements = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;tb&#x27;</span>).<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 全选和取消全选</span></span></span><br><span class="line"><span class="language-javascript">        check_all.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                elements[i].<span class="property">checked</span> = <span class="variable language_">this</span>.<span class="property">checked</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 下面复选框需要全部选中，上面全选才能选中</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            elements[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 检查按钮是否被全选中</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elements.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 只要有一个按钮没被选中，全选按钮不勾选</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(!elements[i].<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        flag = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    check_all.<span class="property">checked</span> = flag;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Tab-栏切换"><a href="#Tab-栏切换" class="headerlink" title="Tab 栏切换"></a>Tab 栏切换</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">15px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.elem</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkolivegreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;current&quot;</span>&gt;</span>Tab1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Tab3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;index1 elem&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: block;&quot;</span>&gt;</span>Content1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;index2 elem&quot;</span>&gt;</span>Content2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;index3 elem&quot;</span>&gt;</span>Content3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> lis = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> contents = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;elem&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    lis[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; contents.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                    contents[i].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                contents[index].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h1><h2 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h2><blockquote><p>一般地，节点至少拥有nodeType(节点类型）、nodeName(节点名称）和nodeValue(节点值）这三个基本属性。</p></blockquote><p>nodeType：</p><ul><li><strong>元素节点 nodeType 为 1</strong></li><li>属性节点 nodeType 为 2</li><li>文本节点 nodeType 为 3 (文本节点包含文字、空格、换行等）</li></ul><h2 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h2><blockquote><p>DOM树可以把节点划分为不同的层级关系，<strong>常见的是父子兄层级关系。</strong></p></blockquote><ul><li>Node.parentNode<ul><li>返回某节点的最近一个父节点（没有父节点则返回null）</li></ul></li><li>Node.childNodes 【标准】<ul><li>返回指定节点的子节点的集合，该集合为即时更新的集合</li><li>包括元素节点，和文本节点等。（如只想获取元素节点，可通过遍历判断：<code>Node.childNodes[i].nodeType==1</code>）</li></ul></li><li><strong>Element.children</strong><ul><li><strong>返回所有的子元素节点</strong></li></ul></li><li>Node.firstChild<ul><li>返回第一个子节点，找不到则返回 null</li><li>包括元素节点，和文本节点等</li></ul></li><li>Node.lastChild<ul><li>返回最后一个子节点，找不到则返回 null</li><li>包括元素节点，和文本节点等</li></ul></li><li><strong>Element.firstElementChild</strong><ul><li><strong>返回第一个子元素节点</strong>，找不到则返回 null</li></ul></li><li><strong>Element.lastElementChild</strong><ul><li><strong>返回最后一个子元素节点</strong>，找不到则返回 null</li></ul></li><li>Node.nextSibling<ul><li>返回当前元素的下一个兄弟节点，找不到则返回 null</li><li>包括元素节点，和文本节点等</li></ul></li><li>Node.previousSibling<ul><li>返回当前元素的上一个兄弟节点，找不到则返回 null</li><li>包括元素节点，和文本节点等</li></ul></li><li>Node.nextElementSibling<ul><li><strong>返回当前元素下一个兄弟元素节点</strong>，找不到则返回 null</li></ul></li><li>Node.previousElementSibling<ul><li><strong>返回当前元素上一个兄弟元素节点</strong>，找不到则返回 null</li></ul></li></ul><h2 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h2><ul><li>document.createElement(‘tagName’)</li><li>document.write(‘str’)<ul><li>直接将内容写入页面的内容流，<strong>但如果文档流执行完毕，则它会导致页面全部重绘</strong></li></ul></li><li>Element.innerHTML<ul><li>将内容写入某个DOM节点，不会导致页面全部重绘</li></ul></li></ul><p>拓展：</p><p>innerHTML 创建多个元素效率更高（<strong>不要拼接字符串，采取数组形式拼接【将字符串push 到数组中，然后用数组的join方法】</strong>）, createElement()创建多个元素效率稍低一点点，但是结构更清晰</p><h2 id="添加节点"><a href="#添加节点" class="headerlink" title="添加节点"></a>添加节点</h2><ul><li>Node.appendChild (child)<ul><li>将一个节点添加到指定父节点的子节点列表末尾</li></ul></li><li>Node.insertBefore(child,指定元素）<ul><li>将一个节点添加到父节点的指定子节点前面</li></ul></li></ul><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><ul><li>Node.removechild(child)<ul><li>从DOM中删除一个子节点，返回删除的节点</li></ul></li></ul><h2 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h2><ul><li>Node.cloneNode()<ul><li>返回调用该方法的节点的一个副本<ul><li>括号参数为 <code>空</code> 或 <code>false</code>,则是<strong>浅拷贝</strong>，即只克隆复制节点本身，不克隆里面的子节点。</li><li>括号参数为 <code>true</code> ,则是<strong>深度拷贝</strong>，会复制节点本身以及里面所有的子节点。</li></ul></li></ul></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="动态创建表格"><a href="#动态创建表格" class="headerlink" title="动态创建表格"></a>动态创建表格</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&#x27;1&#x27;</span> <span class="attr">cellspacing</span>=<span class="string">&#x27;0&#x27;</span> <span class="attr">width</span>=<span class="string">&#x27;500px&#x27;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> stuInfo = [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;庆生&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;数学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">100</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>: <span class="string">&#x27;小黄&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">subject</span>: <span class="string">&#x27;管理&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">score</span>: <span class="number">120</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tbody = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;tbody&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据数据渲染表格</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1. 遍历数组创建行</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; stuInfo.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> tr = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;tr&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 2. 根据数组对象中对象的属性个数创建列</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> stuInfo[i]) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> td = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 3. 遍历对象，将对象中的数据填充到单元格中</span></span></span><br><span class="line"><span class="language-javascript">                td.<span class="property">innerHTML</span> = stuInfo[i][k];</span></span><br><span class="line"><span class="language-javascript">                tr.<span class="title function_">appendChild</span>(td)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建删除按钮</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> td_del = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            td_del.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href = &#x27;javascript:;&#x27;&gt;删除&lt;/a&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">            tr.<span class="title function_">appendChild</span>(td_del);</span></span><br><span class="line"><span class="language-javascript">            tbody.<span class="title function_">appendChild</span>(tr);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除按钮绑定删除事件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> a_del = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;a&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; a_del.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            a_del[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                tbody.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">parentNode</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><h2 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h2><ol><li>事件源</li><li>事件类型</li><li>事件处理程序</li></ol><h2 id="注册事件（绑定事件）"><a href="#注册事件（绑定事件）" class="headerlink" title="注册事件（绑定事件）"></a>注册事件（绑定事件）</h2><h3 id="onclick"><a href="#onclick" class="headerlink" title="onclick"></a>onclick</h3><p>特点：同一个元素同一个事件只能设置一个处理函数。（最后注册的处理函数将会覆盖前面注册的处理函数）</p><h3 id="addEventListener"><a href="#addEventListener" class="headerlink" title="addEventListener"></a>addEventListener</h3><p>语法：<code>target.addEventListener(type, listener, options);</code></p><p>特点：同一个元素同一个事件可以注册多个监听器。（按注册顺序依次执行）</p><h3 id="注册事件兼容方案【了解】"><a href="#注册事件兼容方案【了解】" class="headerlink" title="注册事件兼容方案【了解】"></a>注册事件兼容方案【了解】</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容性处理的原则：首先照顾大多数浏览器，再处理特殊浏览器。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">   <span class="comment">//判断当前浏览器是否支持 addEventListener 方法</span></span><br><span class="line">   <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">       <span class="comment">//第三个参数默认是false</span></span><br><span class="line">       element.<span class="title function_">addEventListener</span>(eventName, fn);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">       element.<span class="title function_">attachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">//相当于element.onclick=fn;</span></span><br><span class="line">       element[<span class="string">&#x27;on&#x27;</span> + eventName] = fn;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除事件（解绑事件）"><a href="#删除事件（解绑事件）" class="headerlink" title="删除事件（解绑事件）"></a>删除事件（解绑事件）</h2><h3 id="传统事件解绑"><a href="#传统事件解绑" class="headerlink" title="传统事件解绑"></a>传统事件解绑</h3><p>思路：执行完毕之后，将事件引用设置为 <code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">elemet.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 逻辑代码</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 逻辑代码执行完毕删除事件引用</span></span><br><span class="line">    elemet.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="addEventListener-解绑"><a href="#addEventListener-解绑" class="headerlink" title="addEventListener 解绑"></a>addEventListener 解绑</h3><p>target.removeEventListener(type, listener[, options]);</p><h3 id="删除事件兼容方案【了解】"><a href="#删除事件兼容方案【了解】" class="headerlink" title="删除事件兼容方案【了解】"></a>删除事件兼容方案【了解】</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">removeEventListener</span>(<span class="params">element, eventName, fn</span>) &#123;</span><br><span class="line">   <span class="comment">//判断当前浏览器是否支持removeEventListener方法</span></span><br><span class="line">   <span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">       <span class="comment">//第三个参数默认是false</span></span><br><span class="line">       element.<span class="title function_">removeEventListener</span>(eventName, fn);</span><br><span class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">       element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span> + eventName, fn);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       element[<span class="string">&#x27;on&#x27;</span> + eventName] = <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h2><blockquote><p>事件发生时会在元素节点之间按照特定的顺序传播，这个传播过程即DOM事件流。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208051523755.png" alt="事件流"></p><p>DOM事件流分为3个阶段：</p><ol><li>捕获阶段</li><li>当前目标阶段</li><li>冒泡阶段</li></ol><p>注意：</p><ol><li><strong>JS代码中只能执行捕获或冒泡其中一个</strong></li><li>onclick 和 attachEvent 只能得到冒泡阶段</li><li>addEventListener<ul><li>第三个参数如果是 true,表示在事件捕获阶段调用事件处理程序</li><li>第三个参数如果是 false,表示在冒泡捕获阶段调用事件处理程序（默认false）</li></ul></li><li>有些事件是没有冒泡的。（如：onblur、onfocus、onmouseenter、onmouseleave）</li></ol><h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><blockquote><p>事件对象写到我们侦听函数的小括号里面当<strong>形参</strong>来看。事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象 <code>event</code>，它有很多属性和方法。</p></blockquote><h3 id="事件对象常见属性和方法"><a href="#事件对象常见属性和方法" class="headerlink" title="事件对象常见属性和方法"></a>事件对象常见属性和方法</h3><div class="table-container"><table><thead><tr><th>事件对象属性方法</th><th>说明</th></tr></thead><tbody><tr><td><strong>e.target</strong></td><td><strong>返回触发事件的对象【标准】</strong></td></tr><tr><td>e.srcElement</td><td>返回触发事件的对象【非标准，IE】</td></tr><tr><td><strong>e.type</strong></td><td><strong>返回事件的类型</strong></td></tr><tr><td><strong>e.stopPropagation()</strong></td><td><strong>该方法阻止冒泡【标准】</strong></td></tr><tr><td>e.cancelBubble</td><td>该属性阻止冒泡【非标准，IE】</td></tr><tr><td>e.returnValue</td><td>该属性阻止默认事件（默认行为） 【非标准，IE】</td></tr><tr><td><strong>e.preventDefault()</strong></td><td><strong>该方法阻止默认事件（默认行为）</strong></td></tr></tbody></table></div><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="事件对象兼容【了解思路】"><a href="#事件对象兼容【了解思路】" class="headerlink" title="事件对象兼容【了解思路】"></a>事件对象兼容【了解思路】</h4><p><code>e = e || window.event</code>; 【IE 需要通过 window.event 才能获取事件对象。】</p><h4 id="e-target-和-this-的区别"><a href="#e-target-和-this-的区别" class="headerlink" title="e.target 和 this 的区别"></a>e.target 和 this 的区别</h4><ul><li>e.target 返回的是<strong>触发事件的对象</strong>（元素）</li><li>this 返回的是<strong>绑定事件的对象</strong>（元素）</li></ul><p>补充：跟 this 非常相似的属性：<code>currentTarget</code> 【了解】</p><h4 id="阻止A链接默认行为"><a href="#阻止A链接默认行为" class="headerlink" title="阻止A链接默认行为"></a>阻止A链接默认行为</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="阻止事件冒泡"><a href="#阻止事件冒泡" class="headerlink" title="阻止事件冒泡"></a>阻止事件冒泡</h4><p>兼容性方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(e &amp;&amp; e.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">    <span class="comment">// 标准</span></span><br><span class="line">    e.<span class="title function_">stopPropagation</span>();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// IE</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">event</span>.<span class="property">cancelBubble</span> = <span class="literal">true</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="事件委托（代理、委派）"><a href="#事件委托（代理、委派）" class="headerlink" title="事件委托（代理、委派）"></a>事件委托（代理、委派）</h2><blockquote><p>原理：不是每个子节点单独设置事件监听器，而是<strong>事件监听器设置在其父节点上</strong>，然后<strong>利用冒泡原理</strong>影响设置每个子节点。<br>作用: 只操作了一次DOM,提高了程序的性能。</p></blockquote><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>利用事件委托给 li 绑定事件:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;ul&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">ul.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><h3 id="常用鼠标事件"><a href="#常用鼠标事件" class="headerlink" title="常用鼠标事件"></a>常用鼠标事件</h3><div class="table-container"><table><thead><tr><th>鼠标事件</th><th>触发事件</th></tr></thead><tbody><tr><td>onclick</td><td>鼠标点击左键触发</td></tr><tr><td>onmouseover</td><td>鼠标经过触发（子盒子也会触发）</td></tr><tr><td>onmouseenter</td><td>鼠标经过自身盒子触发（不会冒泡）</td></tr><tr><td>onmouseleave</td><td>鼠标离开自身盒子触发（不会冒泡）</td></tr><tr><td>onmouseout</td><td>鼠标离开触发</td></tr><tr><td>onfocus</td><td>获得鼠标焦点触发</td></tr><tr><td>onblur</td><td>失去鼠标焦点触发</td></tr><tr><td>onmousemove</td><td>鼠标移动触发</td></tr><tr><td>onmouseup</td><td>鼠标弹起触发</td></tr><tr><td>onmousedown</td><td>鼠标按下触发</td></tr><tr><td>onscroll</td><td>对象<strong>内部内容区</strong>的滚动事件</td></tr><tr><td>onwheel</td><td>鼠标滚轮旋转</td></tr><tr><td>contextmenu</td><td>用户交互（例如右键点击）时出现的菜单</td></tr><tr><td>selectstart</td><td>用户开始一个新的选择时候触发</td></tr></tbody></table></div><h3 id="鼠标事件对象"><a href="#鼠标事件对象" class="headerlink" title="鼠标事件对象"></a>鼠标事件对象</h3><blockquote><p>MouseEvent 鼠标事件对象</p></blockquote><div class="table-container"><table><thead><tr><th>鼠标事件对象</th><th>说明</th></tr></thead><tbody><tr><td>e.clientX</td><td>返回鼠标相对于浏览器窗口<strong>可视区</strong>的 X 坐标</td></tr><tr><td>e.clientY</td><td>返回鼠标相对于浏览器窗口<strong>可视区</strong>的 Y 坐标</td></tr><tr><td>e.pageX</td><td>返回鼠标相对于<strong>文档页面</strong>的 X 坐标</td></tr><tr><td>e.pageY</td><td>返回鼠标相对于<strong>文档页面</strong>的 Y 坐标</td></tr><tr><td>e.screenX</td><td>返回鼠标相对于<strong>电脑屏幕</strong>的 X 坐标</td></tr><tr><td>e.screenY</td><td>返回鼠标相对于<strong>电脑屏幕</strong>的 Y 坐标</td></tr></tbody></table></div><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><h4 id="元素跟随鼠标移动"><a href="#元素跟随鼠标移动" class="headerlink" title="元素跟随鼠标移动"></a>元素跟随鼠标移动</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/元素跟随鼠标移动.gif" alt="元素跟随鼠标移动"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208051850439.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> elem = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;img&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            elem.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            elem.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> + <span class="string">&#x27;px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="禁止鼠标右键菜单"><a href="#禁止鼠标右键菜单" class="headerlink" title="禁止鼠标右键菜单"></a>禁止鼠标右键菜单</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// contextmenu 主要控制应该何时显示上下文菜单</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="禁止鼠标选中文字"><a href="#禁止鼠标选中文字" class="headerlink" title="禁止鼠标选中文字"></a>禁止鼠标选中文字</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;selectstart&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><h3 id="常用键盘事件"><a href="#常用键盘事件" class="headerlink" title="常用键盘事件"></a>常用键盘事件</h3><div class="table-container"><table><thead><tr><th>键盘事件</th><th>说明</th></tr></thead><tbody><tr><td>onkeyup</td><td>某个键盘按键被松开时触发</td></tr><tr><td>onkeydown</td><td>某个键盘按键被按下时触发</td></tr><tr><td>onkeypress</td><td>某个键盘按键被按下时触发(不识别功能键.如 ctrl shift 箭头等)</td></tr></tbody></table></div><p>补充:</p><ol><li>使用 addEventListener <strong>不需要加 on</strong></li><li>三个事件执行顺序: <strong>keydown —&gt; keypress —&gt; keyup</strong></li></ol><h3 id="键盘事件对象"><a href="#键盘事件对象" class="headerlink" title="键盘事件对象"></a>键盘事件对象</h3><div class="table-container"><table><thead><tr><th>键盘事件对象属性</th><th>说明</th></tr></thead><tbody><tr><td>keyCode</td><td>返回该键的 ASCII 值</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208052126999.png" alt="ASCII 码"></p><p>补充：</p><ol><li><strong>onkeydown 事件 监听 keyCode 不区分大小写，onkeypress 事件监听 keyCode 区分大小写。</strong></li></ol><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><p>监听键盘事件聚焦表单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(e.<span class="property">keyCode</span> === <span class="number">83</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                input.<span class="title function_">focus</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="PC-特效"><a href="#PC-特效" class="headerlink" title="PC 特效"></a>PC 特效</h1><h2 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h2><blockquote><p>使用 offset 系列相关属性可以<strong>动态</strong>的得到该元素的位置（偏移）、大小等。</p></blockquote><h3 id="offset-常用属性"><a href="#offset-常用属性" class="headerlink" title="offset 常用属性"></a>offset 常用属性</h3><div class="table-container"><table><thead><tr><th>offset 常用属性</th><th>作用</th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回作为该元素<strong>带有定位的父级元素。</strong>（父级没有定位则返回 body）</td></tr><tr><td>element.offsetTop</td><td>返回元素<strong>相对带有定位父元素上方的偏移</strong></td></tr><tr><td>element.offsetLeft</td><td>返回元素<strong>相对带有定位父元素左边框的偏移</strong></td></tr><tr><td>element.offsetWidth</td><td>返回自身<strong>包括padding、边框、内容区的宽度</strong>，返回数值不带单位</td></tr><tr><td>element.offsetHeight</td><td>返回自身<strong>包括padding、边框、内容区的高度</strong>，返回数值不带单位</td></tr></tbody></table></div><h3 id="offset-与-style-区别"><a href="#offset-与-style-区别" class="headerlink" title="offset 与 style 区别"></a>offset 与 style 区别</h3><p>offset：</p><ul><li>offset 可以得到<strong>任意样式表中的样式值</strong></li><li>offset 系列获得的数值是没有单位的</li><li>offsetWidth 包含 padding + border + width</li><li>offsetWidth 等属性是<strong>只读属性</strong>，只能获取不能赋值<br>总结：想要获取元素大小位置，用 offset 更合适</li></ul><p>style：</p><ul><li>style <strong>只能得到行内样式表中的样式值</strong></li><li>style.width 获得的是带有单位的字符串</li><li>style.width 获得不包含 padding 和 border 的值</li><li>style.width 是<strong>可读写属性</strong>，可以获取也可以赋值<br>总结：想要给元素更改值，则需要用style改变</li></ul><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><h4 id="计算鼠标在盒子内的坐标"><a href="#计算鼠标在盒子内的坐标" class="headerlink" title="计算鼠标在盒子内的坐标"></a>计算鼠标在盒子内的坐标</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208062354748.gif" alt="计算鼠标在盒子内的坐标"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">400px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkslategray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 思路：鼠标位置 - 盒子边框距左侧的距离 = 鼠标在盒子内的坐标</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> x = e.<span class="property">pageX</span> - <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> y = e.<span class="property">pageY</span> - <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">innerHTML</span> = <span class="string">&quot;X：&quot;</span> + x + <span class="string">&quot;Y:&quot;</span> + y;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="拖拽（模态框）"><a href="#拖拽（模态框）" class="headerlink" title="拖拽（模态框）"></a>拖拽（模态框）</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/拖拽.gif" alt="拖拽"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">512px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">280px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">999</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span> <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-title</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: move;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input-content</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-button</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-bg</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-button</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input</span> <span class="selector-tag">input</span><span class="selector-class">.list-input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> <span class="number">1px</span> solid;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-input</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.login-title</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: -<span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">#ebebeb</span> solid <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:;&quot;</span>&gt;</span>点击，弹出登录框<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-title&quot;</span>&gt;</span>登录会员</span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;closeBtn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">class</span>=<span class="string">&quot;close-login&quot;</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-input-content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span> <span class="attr">name</span>=<span class="string">&quot;info[username]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login-input&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span>&gt;</span>登录密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入登录密码&quot;</span> <span class="attr">name</span>=<span class="string">&quot;info[password]&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-input&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;loginBtn&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-button&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:void(0);&quot;</span> <span class="attr">id</span>=<span class="string">&quot;login-button-submit&quot;</span>&gt;</span>登录会员<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 遮盖层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;login-bg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        拖拽效果需要使用三个事件实现：mousedown mouseup mousemove</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        原理：拖拽过程：鼠标移动过程中，获得最新的值赋值给模态框的left和top值，这样模态框可以跟着鼠标走了</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> link = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#link&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> login = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.login&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> title = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#title&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> closeBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#closeBtn&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> bg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#bg&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        link.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            bg.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        closeBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            login.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            bg.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 按下标题</span></span></span><br><span class="line"><span class="language-javascript">        title.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousedown&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 获取当前鼠标在盒子中的距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> x = e.<span class="property">pageX</span> - login.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> y = e.<span class="property">pageY</span> - login.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                login.<span class="property">style</span>.<span class="property">left</span> = e.<span class="property">pageX</span> - x + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                login.<span class="property">style</span>.<span class="property">top</span> = e.<span class="property">pageY</span> - y + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseup&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">document</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, move);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="放大镜效果（京东）"><a href="#放大镜效果（京东）" class="headerlink" title="放大镜效果（京东）"></a>放大镜效果（京东）</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/放大镜效果.gif" alt="放大镜效果"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;preview_img&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mask&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;big&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;big_img&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview_img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">352px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">451px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.preview_img</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.mask</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#FEDE4F</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.big</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">412px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">352px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">451px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.big</span> <span class="selector-class">.big_img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> preview_img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.preview_img&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> mask = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.mask&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> big = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.big&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> big_img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.big_img&#x27;</span>);</span><br><span class="line"></span><br><span class="line">preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">    big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    big.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">&#125;)</span><br><span class="line">preview_img.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得鼠标在页面中的坐标</span></span><br><span class="line">    <span class="keyword">var</span> mouseX = e.<span class="property">pageX</span>;</span><br><span class="line">    <span class="keyword">var</span> mouseY = e.<span class="property">pageY</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得preview_img盒子在页面中的位置</span></span><br><span class="line">    <span class="keyword">var</span> boxLeft = preview_img.<span class="property">offsetLeft</span>;</span><br><span class="line">    <span class="keyword">var</span> boxTop = preview_img.<span class="property">offsetTop</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得鼠标在preview_img盒子里面的坐标</span></span><br><span class="line">    <span class="keyword">var</span> x = mouseX - boxLeft;</span><br><span class="line">    <span class="keyword">var</span> y = mouseY - boxTop;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 让遮罩层跟着鼠标移动，最好让鼠标位于遮罩层盒子的中间</span></span><br><span class="line">    <span class="keyword">var</span> moveX = x - mask.<span class="property">offsetLeft</span> / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> moveY = y - mask.<span class="property">offsetHeight</span> / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里实现了遮罩层跟着鼠标移动，但是要注意限制遮罩层的移动范围在preview_img盒子里面</span></span><br><span class="line">    <span class="keyword">if</span> (moveX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        moveX = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moveX &gt;= preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>) &#123;</span><br><span class="line">        moveX = preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 纵轴上同理</span></span><br><span class="line">    <span class="keyword">if</span> (moveY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        moveY = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (moveY &gt;= preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>) &#123;</span><br><span class="line">        moveY = preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">top</span> = moveY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    mask.<span class="property">style</span>.<span class="property">left</span> = moveX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//放大镜的功能核心公式: 大图片的移动距离 = 遮挡层移动距离 * 大图片最大移动距离 / 遮挡层的最大移动距离</span></span><br><span class="line">    <span class="comment">// 遮挡层移动的最大距离</span></span><br><span class="line">    <span class="keyword">var</span> maskMaxX = preview_img.<span class="property">offsetWidth</span> - mask.<span class="property">offsetWidth</span>;</span><br><span class="line">    <span class="keyword">var</span> maskMaxY = preview_img.<span class="property">offsetHeight</span> - mask.<span class="property">offsetHeight</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 大图片的最大移动距离</span></span><br><span class="line">    <span class="keyword">var</span> bigImgMaxX = big_img.<span class="property">offsetWidth</span> - big.<span class="property">offsetWidth</span>;</span><br><span class="line">    <span class="keyword">var</span> bigImgMaxY = big_img.<span class="property">offsetHeight</span> - big.<span class="property">offsetHeight</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遮挡层移动的距离 moveX 和 moveY</span></span><br><span class="line">    <span class="comment">// 大图片的移动距离</span></span><br><span class="line">    <span class="keyword">var</span> bigX = moveX * bigImgMaxX / maskMaxX;</span><br><span class="line">    <span class="keyword">var</span> bigY = moveY * bigImgMaxY / maskMaxY;</span><br><span class="line"></span><br><span class="line">    big_img.<span class="property">style</span>.<span class="property">left</span> = - bigX + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    big_img.<span class="property">style</span>.<span class="property">top</span> = - bigY + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><blockquote><p>使用 client 相关属性来获取元素<strong>可视区</strong>的相关信息。可以动态的得到该元素的边框大小、元素大小等。</p></blockquote><h3 id="client-常用属性"><a href="#client-常用属性" class="headerlink" title="client 常用属性"></a>client 常用属性</h3><div class="table-container"><table><thead><tr><th>client 常用属性</th><th>作用</th></tr></thead><tbody><tr><td>element.clientTop</td><td>返回元素<strong>上边框</strong>的大小</td></tr><tr><td>element.clientLeft</td><td>返回元素<strong>左边框</strong>的大小</td></tr><tr><td><strong>element.clientWidth</strong></td><td>返回自身包括 padding、内容区的宽度，<strong>不含边框</strong>，返回数值不带单位</td></tr><tr><td><strong>element.clientHeight</strong></td><td>返回自身包括 padding、内容区的高度，<strong>不含边框</strong>，返回数值不带单位</td></tr></tbody></table></div><h2 id="scroll"><a href="#scroll" class="headerlink" title="scroll"></a>scroll</h2><blockquote><p>使用 scroll 相关属性可以动态的得到<strong>元素的大小、滚动距离等</strong>。</p></blockquote><h3 id="scroll常用属性"><a href="#scroll常用属性" class="headerlink" title="scroll常用属性"></a>scroll常用属性</h3><div class="table-container"><table><thead><tr><th>scroll常用属性</th><th>作用</th></tr></thead><tbody><tr><td><strong>element.scrollTop</strong></td><td>返回<strong>对象内部内容</strong>被卷去的上侧距离，返回数值不带单位</td></tr><tr><td><strong>element.scrollLeft</strong></td><td>返回<strong>对象内部内容</strong>被卷去的左侧距离，返回数值不带单位</td></tr><tr><td>element.scrollWidth</td><td>返回自身实际的宽度，不含边框，返回数值不带单位</td></tr><tr><td>element.scrollHeight</td><td>返回自身实际的高度，不含边框，返回数值不带单位</td></tr></tbody></table></div><p>图解：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220807215407.png" alt="20220807215407"></p><p>拓展：</p><div class="table-container"><table><thead><tr><th>属性</th><th>Description</th></tr></thead><tbody><tr><td>window.pageYOffset</td><td>页面（document）被卷去的上侧距离</td></tr><tr><td>window.pageXOffset</td><td>页面（document）被卷去的左侧距离</td></tr></tbody></table></div><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><h4 id="固定侧边栏"><a href="#固定侧边栏" class="headerlink" title="固定侧边栏"></a>固定侧边栏</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/固定侧边栏.gif" alt="固定侧边栏"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.slider-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">130px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.w</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    1、需要用到页面滚动事件scroll因为是页面滚动，所以事件源是 document</span></span><br><span class="line"><span class="comment">    2、滚动到某个位置，就是判断页面被卷去的上部值</span></span><br><span class="line"><span class="comment">    3、页面卷去的头部：可以通过 window.pageYOffset 获得  页面卷去的左侧：可以通过 window.pageXOffset 获得</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slider-bar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;goBack&quot;</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header w&quot;</span>&gt;</span>头部区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner w&quot;</span>&gt;</span>banner区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main w&quot;</span>&gt;</span>主体部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1、 获取元素</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sliderbar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.slider-bar&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> banner = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.banner&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// banner.offsetTop就是被卷去头部的大小   一定要写在滚动的外面</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> bannerTop = banner.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当侧边栏固定定位之后应该变化的数值</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> sliderbarTop = sliderbar.<span class="property">offsetTop</span> - bannerTop;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//    获取主体main</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> main = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.main&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> goBack = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.goBack&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> mainTop = main.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2、页面滚动事件 scroll</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// window.pageYOffset页面被卷去头部</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// console.log(window.pageYOffset);</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 3、当页面被卷去头部大于等于172此时  侧边栏就要改为固定定位</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= bannerTop) &#123;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;fixed&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">top</span> = sliderbarTop + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                sliderbar.<span class="property">style</span>.<span class="property">top</span> = <span class="string">&#x27;300px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 4、当页面滚动到 main盒子，就显示 goback 模块</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">pageYOffset</span> &gt;= mainTop) &#123;</span></span><br><span class="line"><span class="language-javascript">                goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                goBack.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><h3 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h3><h4 id="简单动画函数"><a href="#简单动画函数" class="headerlink" title="简单动画函数"></a>简单动画函数</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/动画函数调用效果.gif" alt="动画函数调用效果"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkslategray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>点击我！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">element, target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// bug: 防止多次调用动画的时候发生速度累计</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 优化：将定时器的应用设置为元素的属性</span></span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (element.<span class="property">offsetLeft</span> &gt;= target) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">style</span>.<span class="property">left</span> = element.<span class="property">offsetLeft</span> + <span class="number">1</span> + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">100</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animation</span>(<span class="variable language_">this</span>, <span class="number">600</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缓动动画"><a href="#缓动动画" class="headerlink" title="缓动动画"></a>缓动动画</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/缓动动画函数调用效果.gif" alt="缓动动画函数调用效果"><br></p>              </div>            </details></p><p>核心算法：<strong>(目标值-现在的位置）/ 10 作为每次移动的距离步长</strong></p><ol><li>(100 - 0 ) /10 = 10</li><li>(100 - 10 ) /10 = 9</li><li>(100 - 19 ) /10 = 8.1</li></ol><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkslategray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>点击我！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">element, target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 防止多次调用动画的时候发生累计</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将定时器的应用设置为元素的属性</span></span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 缓动动画核心算法：(目标值-现在的位置）/ 10 作为每次移动的距离步长</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> step = (target - element.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 优化：取整</span></span></span><br><span class="line"><span class="language-javascript">                step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (element.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">style</span>.<span class="property">left</span> = element.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animation</span>(<span class="variable language_">this</span>, <span class="number">800</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缓动动画添加回调函数"><a href="#缓动动画添加回调函数" class="headerlink" title="缓动动画添加回调函数"></a>缓动动画添加回调函数</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/缓动动画函数添加回调函数.gif" alt="缓动动画函数添加回调函数"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkslategray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>点击我！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">element, target, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 防止多次调用动画的时候发生累计</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将定时器的应用设置为元素的属性</span></span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 缓动动画核心算法：(目标值-现在的位置）/ 10 作为每次移动的距离步长</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> step = (target - element.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 优化：取整</span></span></span><br><span class="line"><span class="language-javascript">                step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (element.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 如果 callback 函数存在，则执行 callback 函数</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (callback) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">style</span>.<span class="property">left</span> = element.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">20</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        div.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animation</span>(<span class="variable language_">this</span>, <span class="number">800</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                div.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;skyblue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缓动动画封装JS函数"><a href="#缓动动画封装JS函数" class="headerlink" title="缓动动画封装JS函数"></a>缓动动画封装JS函数</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/animate函数调用效果.gif" alt="animate函数调用效果"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// animate.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">element, target, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 防止多次调用动画的时候发生累计</span></span><br><span class="line">    <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>);</span><br><span class="line">    <span class="comment">// 将定时器的应用设置为元素的属性</span></span><br><span class="line">    element.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 缓动动画核心算法：(目标值-现在的位置）/ 10 作为每次移动的距离步长</span></span><br><span class="line">        <span class="keyword">let</span> step = (target - element.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 优化：取整</span></span><br><span class="line">        step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span><br><span class="line">        <span class="keyword">if</span> (element.<span class="property">offsetLeft</span> == target) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>)</span><br><span class="line">            <span class="comment">// 如果 callback 函数存在，则执行 callback 函数</span></span><br><span class="line">            <span class="comment">// if (callback) &#123;</span></span><br><span class="line">            <span class="comment">//     callback();</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">            <span class="comment">// 这种写法(短路)等同于上面的 if 语句</span></span><br><span class="line">            callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        element.<span class="property">style</span>.<span class="property">left</span> = element.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkslategray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.slide</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">999</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./animate.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;arrow&quot;</span>&gt;</span>&amp;lt<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slide&quot;</span>&gt;</span>🎄🎋🎇🎁🎎🎀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;box&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> arrow = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;arrow&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> slide = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;slide&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animation</span>(slide, -<span class="number">160</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                arrow.<span class="property">innerHTML</span> = <span class="string">&#x27;&amp;gt&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        box.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">animation</span>(slide, <span class="number">0</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                arrow.<span class="property">innerHTML</span> = <span class="string">&#x27;&amp;lt&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="手写轮播图"><a href="#手写轮播图" class="headerlink" title="手写轮播图"></a>手写轮播图</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208100236605.gif" alt="手写轮播图"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/index.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/animate.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            user-select: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* position: relative; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">720px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">270px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.focus</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow_l</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow_r</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ffa500</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow_l</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.arrow_r</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.focus_main</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 使用 animate 函数必须有定位 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">3800px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.focus_main</span> <span class="selector-tag">li</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">720px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.list_point</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">220px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.list_point</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.list_point</span> <span class="selector-class">.current</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;focus&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 1. 左右箭头 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow_l&quot;</span>&gt;</span>&amp;lt<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;arrow_r&quot;</span>&gt;</span>&amp;gt<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 2. 主体区域 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;focus_main&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/focus1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/focus2.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/focus3.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/focus4.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 3. 小圆点 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list_point&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">功能：</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  1. 鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</span></span><br><span class="line"><span class="comment">  2. 动态生成小圆圈(循环图片张数，动态生成。)</span></span><br><span class="line"><span class="comment">     1. 小圆圈的排他思想（添加点击事件）</span></span><br><span class="line"><span class="comment">     2. 点击小圆圈滚动图片</span></span><br><span class="line"><span class="comment">        1. 用到animate动画函数，focus_main 元素必须有定位</span></span><br><span class="line"><span class="comment">        2. 滚动图片的核心算法：小圆圈的索引号乘以图片的宽度作为移动距离</span></span><br><span class="line"><span class="comment">  3. 点击右侧按钮一次，图片往左播放一张，以此类推，左侧按钮同理。</span></span><br><span class="line"><span class="comment">     1. 声明一个变量arrow_count,点击一次，自增1,让这个变量乘以图片宽度，就是ul的滚动距离。</span></span><br><span class="line"><span class="comment">     2. 无缝滚动</span></span><br><span class="line"><span class="comment">        1. cloneNode()加true深克隆复制里面的子节点</span></span><br><span class="line"><span class="comment">        2. 添加到ul最后面 appendChild</span></span><br><span class="line"><span class="comment">     3. 把ul第一个li复制一份，放到ul的最后面</span></span><br><span class="line"><span class="comment">     4. 当图片滚动到克隆的最后一张图片时，让ul快速的、不做动画的跳到最左侧：left 为 0</span></span><br><span class="line"><span class="comment">     5. 同时arrow_count赋值为0.可以从新开始滚动图片了</span></span><br><span class="line"><span class="comment">  4. 图片播放的同时，下面小圆圈模块跟随一起变化。</span></span><br><span class="line"><span class="comment">     1. 声明一个全局变量 circle_control 控制小圆圈的播放</span></span><br><span class="line"><span class="comment">     2. 如果circle_control == list_point.children.length 说明走到最后我们克隆的这张图片了我们就复原小圆点</span></span><br><span class="line"><span class="comment">  5. 点击小圆圈，可以播放相应图片。</span></span><br><span class="line"><span class="comment">  6. 鼠标不经过轮播图，轮播图也会自动播放图片。</span></span><br><span class="line"><span class="comment">     1. 使用定时器</span></span><br><span class="line"><span class="comment">     2. 定时器内手动调用 right按钮的点击事件：arrow_r.click();</span></span><br><span class="line"><span class="comment">  7. 鼠标经过，轮播图模块，自动播放停止。 鼠标离开，开启定时器</span></span><br><span class="line"><span class="comment">  8. 节流（优化：防止轮播图按钮连续点击造成播放过快。）</span></span><br><span class="line"><span class="comment">     1. 原理：当上一个函数动画内容执行完毕，再去执行下一个函数动画，让事件无法连续触发。</span></span><br><span class="line"><span class="comment">     2.  利用回调函数，添加一个变量来控制，锁住函数和解锁函数。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> focus = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;focus&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> arrow_l = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;arrow_l&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> arrow_r = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;arrow_r&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> focus_main = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;focus_main&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> list_point = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;list_point&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 轮播图的宽度</span></span><br><span class="line">    <span class="keyword">let</span> item_width = focus.<span class="property">offsetWidth</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标经过轮播图模块，左右按钮显示，离开隐藏左右按钮。</span></span><br><span class="line">    focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">        <span class="comment">// 停止定时器</span></span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">    focus.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseout&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        arrow_l.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        arrow_r.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">        <span class="comment">// 开启定时器</span></span><br><span class="line">        timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 手动调用right按钮的点击事件：</span></span><br><span class="line">            arrow_r.<span class="title function_">click</span>();</span><br><span class="line">        &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动态获取轮播图的数量，动态生成小圆点</span></span><br><span class="line">    <span class="keyword">let</span> count_focus = focus_main.<span class="property">children</span>.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count_focus; i++) &#123;</span><br><span class="line">        <span class="comment">// 创建小圆点</span></span><br><span class="line">        <span class="keyword">let</span> list_point_elem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">        <span class="comment">// 设置自定义属性（小圆圈的索引号）</span></span><br><span class="line">        list_point_elem.<span class="title function_">setAttribute</span>(<span class="string">&#x27;index&#x27;</span>, i);</span><br><span class="line">        list_point.<span class="title function_">appendChild</span>(list_point_elem)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小圆圈的排他思想 绑定点击事件</span></span><br><span class="line">        list_point_elem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list_point.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                list_point.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 点击小圆圈移动图片（ul）【核心算法：小圆圈的索引号乘以图片的宽度】</span></span><br><span class="line">            <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;index&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解决小圆圈跟箭头点击不同步的 bug</span></span><br><span class="line">            arrow_count = index;</span><br><span class="line">            circle_control = index;</span><br><span class="line"></span><br><span class="line">            <span class="title function_">animation</span>(focus_main, -index * item_width);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第一个小圆点默认选中</span></span><br><span class="line">    list_point.<span class="property">children</span>[<span class="number">0</span>].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复制容器中的第一张图片，并追加到容器尾部。（为了实现后面的无缝滚动）</span></span><br><span class="line">    <span class="keyword">let</span> first_node = focus_main.<span class="property">children</span>[<span class="number">0</span>].<span class="title function_">cloneNode</span>(<span class="literal">true</span>);</span><br><span class="line">    focus_main.<span class="title function_">appendChild</span>(first_node);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 右侧按钮绑定事件</span></span><br><span class="line">    <span class="comment">// 声明一个变量 arrow_count,点击一次，自增 1,让这个变量乘以图片宽度，就是ul的滚动距离</span></span><br><span class="line">    <span class="keyword">let</span> arrow_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明一个全局变量circle_control 控制小圆圈的播放</span></span><br><span class="line">    <span class="keyword">let</span> circle_control = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 节流阀</span></span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    arrow_r.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 无缝滚动</span></span><br><span class="line">            <span class="keyword">if</span> (arrow_count == focus_main.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                focus_main.<span class="property">style</span>.<span class="property">left</span> = <span class="number">0</span>;</span><br><span class="line">                arrow_count = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arrow_count++;</span><br><span class="line">            <span class="title function_">animation</span>(focus_main, -arrow_count * item_width, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 回调函数中打开节流阀</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 右侧按钮点击下面小圆圈模块跟随一起变化（声明一个全局变量控制小圆圈的播放）</span></span><br><span class="line">            circle_control++;</span><br><span class="line">            <span class="comment">// 判断长度</span></span><br><span class="line">            <span class="keyword">if</span> (circle_control == list_point.<span class="property">children</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                circle_control = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小圆圈排他思想</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list_point.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                list_point.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list_point.<span class="property">children</span>[circle_control].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左侧按钮绑定事件</span></span><br><span class="line"></span><br><span class="line">    arrow_l.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 无缝滚动</span></span><br><span class="line">            <span class="keyword">if</span> (arrow_count == <span class="number">0</span>) &#123;</span><br><span class="line">                arrow_count = focus_main.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">                focus_main.<span class="property">style</span>.<span class="property">left</span> = -arrow_count * item_width + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arrow_count--;</span><br><span class="line">            <span class="title function_">animation</span>(focus_main, -arrow_count * item_width, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 回调函数中打开节流阀</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 右侧按钮点击下面小圆圈模块跟随一起变化（声明一个全局变量控制小圆圈的播放）</span></span><br><span class="line">            circle_control--;</span><br><span class="line">            <span class="comment">// 判断长度</span></span><br><span class="line">            <span class="keyword">if</span> (circle_control &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                circle_control = list_point.<span class="property">children</span>.<span class="property">length</span> - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小圆圈排他思想</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list_point.<span class="property">children</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                list_point.<span class="property">children</span>[i].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            list_point.<span class="property">children</span>[circle_control].<span class="property">className</span> = <span class="string">&#x27;current&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自动播放</span></span><br><span class="line">    <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 手动调用right按钮的点击事件：</span></span><br><span class="line">        arrow_r.<span class="title function_">click</span>();</span><br><span class="line">    &#125;, <span class="number">1500</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="动画函数运用筋斗云案例"><a href="#动画函数运用筋斗云案例" class="headerlink" title="动画函数运用筋斗云案例"></a>动画函数运用筋斗云案例</h4><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202208102253341.gif" alt="动画函数运用筋斗云"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">46</span>, <span class="number">52</span>, <span class="number">64</span>, .<span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cloud</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: .<span class="number">5</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: -<span class="number">20</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.cloud</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;cloud&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/CLOUD.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ITEM-1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ITEM-2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ITEM-3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ITEM-4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ITEM-5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>ITEM-6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        功能描述：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. 鼠标经过某个小li,筋斗云跟这到当前小li位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 鼠标离开这个小li,筋斗云复原为原来的位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 鼠标点击了某个小li,筋斗云就会留在点击这个小li的位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">               思路：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">               点击了某个小li,就把li当前的位置存储起来，做为筋斗云的起始位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;nav&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> cloud = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;cloud&#x27;</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> lis = nav.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 存储li的当前的位置</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> current_position = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lis.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">animation</span>(cloud, <span class="variable language_">this</span>.<span class="property">offsetLeft</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">animation</span>(cloud, current_position);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">            lis[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                current_position = <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">animation</span>(cloud, current_position);</span></span><br><span class="line"><span class="language-javascript">            &#125;)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 动画函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">animation</span>(<span class="params">element, target, callback</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 防止多次调用动画的时候发生累计</span></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将定时器的应用设置为元素的属性</span></span></span><br><span class="line"><span class="language-javascript">            element.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 缓动动画核心算法：(目标值-现在的位置）/ 10 作为每次移动的距离步长</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> step = (target - element.<span class="property">offsetLeft</span>) / <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 优化：取整</span></span></span><br><span class="line"><span class="language-javascript">                step = step &gt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(step) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(step);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (element.<span class="property">offsetLeft</span> == target) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(element.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 如果 callback 函数存在，则执行 callback 函数</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (callback) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">callback</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 等同于上面的 if 语句</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// callback &amp;&amp; callback();</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="property">style</span>.<span class="property">left</span> = element.<span class="property">offsetLeft</span> + step + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="移动特效"><a href="#移动特效" class="headerlink" title="移动特效"></a>移动特效</h1><h2 id="touch-触屏事件"><a href="#touch-触屏事件" class="headerlink" title="touch 触屏事件"></a>touch 触屏事件</h2><h3 id="常用触屏事件"><a href="#常用触屏事件" class="headerlink" title="常用触屏事件"></a>常用触屏事件</h3><div class="table-container"><table><thead><tr><th>触屏事件</th><th>说明</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸到一个DOM元素时触发</td></tr><tr><td>touchmove</td><td>手指在一个DOM元素上滑动时触发</td></tr><tr><td>touchend</td><td>手指从一个DOM元素上移开时触发</td></tr></tbody></table></div><h3 id="常用触屏事件对象"><a href="#常用触屏事件对象" class="headerlink" title="常用触屏事件对象"></a>常用触屏事件对象</h3><div class="table-container"><table><thead><tr><th>事件对象</th><th>说明</th></tr></thead><tbody><tr><td>touches</td><td>正在触摸屏幕的所有手指的一个列表</td></tr><tr><td><strong>targetTouches</strong></td><td>正在触摸当前DOM元素上的手指的一个列表</td></tr><tr><td>changedTouches</td><td>手指状态发生了改变的列表，从无到有，从有到无变化</td></tr></tbody></table></div><h2 id="click-延时解决方案"><a href="#click-延时解决方案" class="headerlink" title="click 延时解决方案"></a>click 延时解决方案</h2><blockquote><p>移动端click事件会有300ms的延时，原因是移动端屏幕双击会缩放（double tap to zoom)页面</p></blockquote><p>解决方案:</p><ol><li>禁用缩放（禁用默认的双击缩放行为并且去掉300ms的点击延迟）【缺点:禁用了所有的缩放，局限性太大。】<br><code>&lt;meta name=&quot;viewport&quot;content=&quot;user-scalable=no&quot;&gt;</code></li><li>利用touch封装tap函数解决click300ms延时<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">原理：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.手指触摸屏幕，记录当前触摸时间</span></span><br><span class="line"><span class="comment">2.手指离开屏幕，用离开的时间减去触摸的时间</span></span><br><span class="line"><span class="comment">3.时间小于150ms,并且没有滑动过屏幕，那么我们就定义为点击 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tap</span> (obj, callback) &#123;</span><br><span class="line">    <span class="keyword">var</span> isMove = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 记录当前触摸时间变量</span></span><br><span class="line">    <span class="keyword">var</span> startTime = <span class="number">0</span>;</span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 手指触摸屏幕，记录当前触摸时间</span></span><br><span class="line">        startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断是否有滑动</span></span><br><span class="line">        isMove = <span class="literal">true</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    obj.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>,<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="comment">// 手指触摸和离开时间小于150ms算点击</span></span><br><span class="line">        <span class="keyword">if</span> (!isMove &amp;&amp; (<span class="title class_">Date</span>.<span class="title function_">now</span>()-startTime) &lt; <span class="number">150</span>)&#123;</span><br><span class="line">        <span class="comment">// 执行回调函数</span></span><br><span class="line">        callback &amp;&amp; <span class="title function_">callback</span>();</span><br><span class="line">        <span class="comment">// 取反重置</span></span><br><span class="line">        isMove = <span class="literal">false</span>;</span><br><span class="line">        startTime = <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><a href="https://github.com/ftlabs/fastclick">fastclick 插件</a><ol><li>将 <a href="https://github.com/ftlabs/fastclick/blob/main/lib/fastclick.js">https://github.com/ftlabs/fastclick/blob/main/lib/fastclick.js</a> 文件下载到项目并引用</li><li>实例化 FastClick<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;addEventListener&#x27;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title class_">FastClick</span>.<span class="title function_">attach</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">   &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="视频插件-zyMedia"><a href="#视频插件-zyMedia" class="headerlink" title="视频插件 zyMedia"></a>视频插件 zyMedia</h3><p><a href="https://github.com/ireaderlab/zyMedia">zyMedia</a> <a href="https://github.com/ireaderlab/zyMedia">https://github.com/ireaderlab/zyMedia</a></p><h2 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h2><h3 id="拖拽（移动端）"><a href="#拖拽（移动端）" class="headerlink" title="拖拽（移动端）"></a>拖拽（移动端）</h3><details class="folding-tag" ><summary> 实现效果 </summary>              <div class='content'>              <p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/拖拽_移动端.gif" alt="拖拽_移动端"><br></p>              </div>            </details></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: royalblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            1. 触摸元素touchstart: 获取手指初始坐标，同时获得盒子原来的位置</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            2. 移动手指touchmove: 计算手指的滑动距离，并且移动盒子</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            3. 离开手指 touchend:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            当前手指的坐标值： targetTouches[0] 里面的 pageX 和 pageY</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            原理：手指移动中，计算出手指移动的距离。然后用盒子原来的位置 + 手指移动的距离（手指滑动中的位置减去手指刚开始触摸的位置）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 获取手指初始坐标</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> startX = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> startY = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="comment">// 盒子原来的位置</span></span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> x = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">let</span> y = <span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> elem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        elem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            startX = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span>;</span></span><br><span class="line"><span class="language-javascript">            startY = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span>;</span></span><br><span class="line"><span class="language-javascript">            x = <span class="variable language_">this</span>.<span class="property">offsetLeft</span>;</span></span><br><span class="line"><span class="language-javascript">            y = <span class="variable language_">this</span>.<span class="property">offsetTop</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        elem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 计算手指移动的距离</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> moveX = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageX</span> - startX;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> moveY = e.<span class="property">targetTouches</span>[<span class="number">0</span>].<span class="property">pageY</span> - startY;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 移动盒子</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">left</span> = x + moveX + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">top</span> = y + moveY + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 阻止默认的屏幕滚动 e.preventDefault();</span></span></span><br><span class="line"><span class="language-javascript">            e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        elem.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchend&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;&#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 基础篇（ECMA）</title>
      <link href="/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88ECMA%EF%BC%89/91e69759/"/>
      <url>/2022/07/282022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_JavaScript_JavaScript%20%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%88ECMA%EF%BC%89/91e69759/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript-初识"><a href="#JavaScript-初识" class="headerlink" title="JavaScript 初识"></a>JavaScript 初识</h1><blockquote><p>JavaScript 是一种运行在<strong>客户端</strong>的脚本语言(脚本语言：不需要编译，运行过程中由js解释器（js引擎）逐行来进行解释并执行) 现在也可以基于Node.js技术进行服务器端编程</p></blockquote><p>JavaScript 可以做的：</p><ol><li>表单动态校验（密码强度检测）(JS产生最初的目的）</li><li>网页特效</li><li>服务端开发（Node.js)</li><li>桌面程序（Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网（Ruff)</li><li>游戏开发（cocos2d-js)</li></ol><p>JavaScript 是解释型语言：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220729143248.png" alt="20220729143248"></p><h1 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>有 3 个关键字可以声明变量：<strong>var、const 和 let</strong>。</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="简单数据类型（值类型）"><a href="#简单数据类型（值类型）" class="headerlink" title="简单数据类型（值类型）"></a>简单数据类型（值类型）</h3><ol><li>Undefined</li><li>Null</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li></ol><h4 id="Undefined"><a href="#Undefined" class="headerlink" title="Undefined"></a>Undefined</h4><p>声明后没有被赋值的变量会有一个默认值 undefined (如果进行相连或者相加时，注意结果。）</p><h4 id="Null"><a href="#Null" class="headerlink" title="Null"></a>Null</h4><p>简单数据类型 null 返回的是一个空的对象 object</p><p>应用场景：</p><p>如果有个变量我们以后打算存储为对象，暂时没想好放啥，可以赋值为 null</p><h4 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h4><p>true 的值为 1 false 的值为 0</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p>Number 范围：</p><ul><li>Number.MIN_VALUE</li><li>Number.MAX_VALUE</li></ul><p>数字型三个特殊值：</p><ul><li>Infinity: 代表无穷大，大于任何数值</li><li>-Infinity: 代表无穷小，小于任何数值</li><li>NaN: Not a number,代表一个非数值</li></ul><p>拓展：</p><p>isFinite();<br>isNaN();</p><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>字符串长度:</p><p><code>length</code> 属性可以获取整个字符串的长度。(一个空格也算一个单位长度)</p><p>字符串拼接:</p><blockquote><p>拼接前会把与字符串相加的任何类型<strong>转成字符串</strong>，再拼接成一个新的字符串</p></blockquote><p><strong>字符串 + 任何类型 = 拼接之后的新字符串</strong> </p><p>经常会将字符串和<strong>变量</strong>来拼接，因为变量可以很方便地修改里面的值。</p><h4 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h4><h3 id="复合数据类型（引用类型）"><a href="#复合数据类型（引用类型）" class="headerlink" title="复合数据类型（引用类型）"></a>复合数据类型（引用类型）</h3><p>简单类型与复杂类型<br>堆和栈<br>简单类型的内存分配<br>复杂类型的内存分配<br>简单类型传参<br>复杂类型传参</p><h3 id="堆和栈"><a href="#堆和栈" class="headerlink" title="堆和栈"></a>堆和栈</h3><blockquote><p>JavaScript中没有堆栈的概念【此处举例纯粹便于理解】</p></blockquote><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><blockquote><p>简单数据类型存放到栈里，变量直接指向存放在栈中的值。</p></blockquote><p>简单数据类型传参：传的是值</p><h4 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h4><blockquote><p>复杂数据类型存放到堆里，变量指向栈中的地址，地址指向堆里面的数据</p></blockquote><p>复杂数据类型传参：传的是地址</p><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof 操作符返回一个字符串，表示未经计算的操作数的类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// object</span></span><br></pre></td></tr></table></figure><h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><blockquote><p>数据类型转换就是把一种数据类型的变量<strong>转换成另外一种数据类型</strong>。</p></blockquote><ol><li>转换为字符串类型</li><li>转换为数字型</li><li>转换为布尔型</li></ol><h4 id="转换为字符串"><a href="#转换为字符串" class="headerlink" title="转换为字符串"></a>转换为字符串</h4><div class="table-container"><table><thead><tr><th>转换方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>toString()</td><td>转成字符串</td><td>var num=1; alert(num.toString());</td></tr><tr><td>String()强制转换</td><td>转成字符串</td><td>var num = 1; alert( String ( num ) ) ;</td></tr><tr><td><strong>加号拼接字符串</strong></td><td>和字符串拼接的结果都是字符串</td><td>var num=1; alert(num+”我是字符串”);</td></tr></tbody></table></div><h4 id="转换为数字型"><a href="#转换为数字型" class="headerlink" title="转换为数字型"></a>转换为数字型</h4><div class="table-container"><table><thead><tr><th>转换方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>parseInt(string)函数</td><td>将string类型转成整数数值型</td><td>parseInt(‘78’)</td></tr><tr><td>parseFloat(string)函数</td><td>将string类型转成浮点数数值型</td><td>parseFloat(‘78.21’)</td></tr><tr><td>Number()强制转换函数</td><td>将string类型转换为数值型</td><td>Number(‘12’)</td></tr><tr><td>js隐式转换（- * /）</td><td>利用算术运算隐式转换为数值型</td><td>‘12’-0</td></tr></tbody></table></div><h4 id="转换为布尔型"><a href="#转换为布尔型" class="headerlink" title="转换为布尔型"></a>转换为布尔型</h4><div class="table-container"><table><thead><tr><th>转换方式</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>Boolean()函数</td><td>其他类型转成布尔值</td><td>Boolean(‘true’);</td></tr></tbody></table></div><p>空、否定的值会被转换为 false。如: <strong>“ “、0、NaN、null、undefined</strong> 。其余值都会被转换为 true</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><div class="table-container"><table><thead><tr><th>算数运算符</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 20 = 30</td></tr><tr><td>-</td><td>减</td><td>10 - 20 = -10</td></tr><tr><td>*</td><td>乘</td><td>10 * 20 = 200</td></tr><tr><td>/</td><td>除</td><td>10 / 20 = 0.5</td></tr><tr><td>%</td><td>取余数（取模）</td><td>9 % 2 = 1</td></tr></tbody></table></div><p>拓展：</p><ol><li>判断一个数能够被整除<br>余数是 0 就说明这个数能被整除，这就是 <code>%</code> 取余运算符的主要用途</li><li>浮点数的精度问题<br>浮点数值的最高精度是17位小数，但在进行算术计算时其精确度远远不如整数。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="number">0.1</span> + <span class="number">0.2</span>; <span class="comment">//结果不是0.3,而是：0.300000000000004</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.07</span> * <span class="number">100</span>); <span class="comment">//结果不是7,而是：7.0000000000001</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="递增和递减运算符"><a href="#递增和递减运算符" class="headerlink" title="递增和递减运算符"></a>递增和递减运算符</h3><p>需要反复给数字变量添加或减去 1,可以使用<strong>递增（++)和递减（—)运算符</strong></p><p>注意：</p><ol><li>递增和递减运算符<strong>必须和变量配合使用</strong>。</li><li>前置自增和后置自增如果<strong>单独使用效果是一样的</strong>。</li></ol><h4 id="前置递增-递减"><a href="#前置递增-递减" class="headerlink" title="前置递增(递减)"></a>前置递增(递减)</h4><blockquote><p>先自加(减)，后返回值</p></blockquote><p>++num 前置递增，就是自加1。（类似于 num = num + 1）</p><h4 id="后置递增-递减"><a href="#后置递增-递减" class="headerlink" title="后置递增(递减)"></a>后置递增(递减)</h4><blockquote><p>先返回值，后自加(减)</p></blockquote><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><blockquote><p>比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个<strong>布尔值</strong>作为比较结果。</p></blockquote><div class="table-container"><table><thead><tr><th>比较运算符</th><th>说明</th><th>举例</th><th>结果</th></tr></thead><tbody><tr><td>&lt;</td><td>小于号</td><td>1&lt;2</td><td>true</td></tr><tr><td>&gt;</td><td>大于号</td><td>1&gt;2</td><td>false</td></tr><tr><td>&gt;=</td><td>大于等于号（大于或者等于）</td><td>2&gt;=2</td><td>true</td></tr><tr><td>&lt;=</td><td>小于等于号（小于或者等于）</td><td>3&lt;=2</td><td>false</td></tr><tr><td>==</td><td>判等号（会转型）</td><td>37==’37’</td><td>true</td></tr><tr><td>!=</td><td>不等号</td><td>37!=37</td><td>false</td></tr><tr><td>=== 和 !==</td><td>全等（要求值和数据类型都一致）</td><td>37===’37’</td><td>false</td></tr></tbody></table></div><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><blockquote><p>逻辑运算符是用来进行布尔值运算的运算符，其返回值也是布尔值。<strong>经常用于多个条件的判断。</strong></p></blockquote><div class="table-container"><table><thead><tr><th>逻辑运算符</th><th>说明</th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>“逻辑与”，简称“与” and</td></tr><tr><td><i>\\</i></td><td>“逻辑或”，简称“或” or</td></tr><tr><td>!</td><td>“逻辑非”，简称“非” not</td></tr></tbody></table></div><p>&amp;&amp; 逻辑与</p><p>两侧都为 true 结果才是 true 只要有一侧为 false 结果就为 false</p><p>|| 逻辑或</p><p>两侧都为 false 结果才 false 只要有一侧为 true 结果就是 true</p><p>! 逻辑非</p><p>逻辑非（!)也叫作取反符，用来取一个布尔值相反的值</p><p>拓展：</p><p>短路运算（逻辑中断）</p><blockquote><p>短路运算的原理：当有多个表达式（值）时，<strong>左边的表达式值可以确定结果时，就不再继续运算右边的表达式的值</strong></p></blockquote><ol><li>&amp;&amp; 逻辑与 短路运算<br>语法：<br><strong>表达式1 &amp;&amp; 表达式2</strong><br>如果第一个表达式的值为真，则返回 表达式 2<br>如果第一个表达式的值为假，则返回 表达式 1</li><li>|| 逻辑或 短路运算<br>语法：<br><strong>表达式1 || 表达式2</strong><br>如果第一个表达式的值为真，则返回 表达式 1<br>如果第一个表达式的值为假，则返回 表达式 2</li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><div class="table-container"><table><thead><tr><th>赋值运算符</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>直接赋值</td></tr><tr><td>+= 和 -=</td><td>加、减一个数后在赋值</td></tr><tr><td>*= 和 /= 和 %=</td><td>乘、除、取模后在赋值</td></tr></tbody></table></div><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><div class="table-container"><table><thead><tr><th>优先级</th><th>运算符</th><th>顺序</th></tr></thead><tbody><tr><td>1</td><td>小括号</td><td>()</td></tr><tr><td>2</td><td>一元运算符</td><td>++ — !</td></tr><tr><td>3</td><td>算数运算符</td><td>先 * / % 后 + -</td></tr><tr><td>4</td><td>关系运算符</td><td>&gt; &gt;= &lt; &lt;=</td></tr><tr><td>5</td><td>相等运算符</td><td>== != === !==</td></tr><tr><td>6</td><td>逻辑运算符</td><td>先 &amp;&amp; 后 <i>\\</i></td></tr><tr><td>7</td><td>赋值运算符</td><td>=</td></tr><tr><td>8</td><td>逗号运算符</td><td>,</td></tr></tbody></table></div><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote><p>流程控制主要有三种结构，分别是<strong>顺序结构、分支结构和循环结构</strong></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220729175456.png" alt="20220729175456"></p><h3 id="IF-分支结构"><a href="#IF-分支结构" class="headerlink" title="IF (分支结构)"></a>IF (分支结构)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1) &#123;</span><br><span class="line">   code to run <span class="keyword">if</span> condition1 is <span class="literal">true</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(condition2) &#123;</span><br><span class="line">   code to run <span class="keyword">if</span> condition2 is <span class="literal">true</span> and condition1 is <span class="literal">false</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">   run some other code instead</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Switch-分支结构"><a href="#Switch-分支结构" class="headerlink" title="Switch (分支结构)"></a>Switch (分支结构)</h3><blockquote><p>主要针对变量设置一系列的特定值的选项时使用。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (expression) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="attr">choice1</span>:</span><br><span class="line">    run <span class="variable language_">this</span> code;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="attr">choice2</span>:</span><br><span class="line">    run <span class="variable language_">this</span> code instead;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attr">default</span>:</span><br><span class="line">    actually, just run <span class="variable language_">this</span> code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Switch 注意事项：</p><ol><li>表达式的值和 case 选项中的值是<strong>全等</strong>（必须值和数据类型一致才可以。）</li><li>如果 case 选项中没有 break 语句，会有<strong>穿透现象</strong>出现。</li><li>switch 语句进行条件判断后直接执行到程序的条件语句，效率比 if 语句更高。</li></ol><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件表达式结果为真则返回表达式1的值。如果条件表达式结果为假则返回表达式2的值。</span></span><br><span class="line">( 条件表达式 ) ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化变量;条件表达式;操作表达式）&#123;</span><br><span class="line">  <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拓展：双重for循环<br>特点：外层循环循环一次，内层循环执行全部。</p><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (exit-condition) &#123;</span><br><span class="line">  <span class="comment">// code to run</span></span><br><span class="line"></span><br><span class="line">  final-expression</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先再执行循环体，再判断，do...while循环语句至少会执行一次循环体代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">  <span class="comment">// code to run</span></span><br><span class="line"></span><br><span class="line">  final-expression</span><br><span class="line">&#125; <span class="keyword">while</span> (exit-condition)</span><br></pre></td></tr></table></figure><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h3><p>break:<br>立即跳出整个循环（循环结束）</p><p>continue:<br>跳过当前循环继续执行剩余的循环</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><ol><li>断点调试：<br>控制台中点击：sources—&gt;找到需要调试的文件—&gt;在程序的某一行设置断点。<br>Watch: 监视：通过watch可以监视变量的值的变化。</li></ol><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><blockquote><p>JavaScript 作用域: 就是代码名字（变量）在某个范围内起作用和效果。目的是为了提高程序的可靠性，减少命名从冲突。</p></blockquote><h2 id="全局和局部-函数-作用域"><a href="#全局和局部-函数-作用域" class="headerlink" title="全局和局部(函数)作用域"></a>全局和局部(函数)作用域</h2><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><p>变量分类：</p><ol><li>全局变量<ol><li>在全局作用域下的变量</li><li>在函数内部没有声明直接赋值的变量</li></ol></li><li>局部变量<ol><li>在局部作用域（函数内部）的变量</li><li>函数的形参也可以看做是局部变量</li></ol></li></ol><p>补充：</p><ol><li>全局变量：只有浏览器关闭的时候才会销毁，比较占内存资源</li><li>局部变量：当我们程序执行完毕就会销毁，比较节约内存资源</li></ol><h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能内部函数访问，就称作作用域链。（就近原则）</p><h1 id="JavaScript-预解析"><a href="#JavaScript-预解析" class="headerlink" title="JavaScript 预解析"></a>JavaScript 预解析</h1><p>JavaScript 引擎运行分为两步：</p><ol><li>预解析</li><li>代码执行</li></ol><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><blockquote><p>JavaScript 引擎会把里面所有的 <code>var(变量提升)</code> 和 <code>function(函数提升)</code> 提升到当前作用域的最前面</p></blockquote><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>变量提升就是把所有的<strong>变量声明</strong>提升到当前作用域的最前面，<strong>不提升赋值操作</strong>。</p><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升就是把所有的<strong>函数声明</strong>提升到当前作用域的最前面，<strong>不调用函数</strong>。</p><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><p>从上往下执行顺序执行</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    这里 b 和 c 直接赋值没有 var 声明当全局变量看</span></span><br><span class="line"><span class="comment">    注意此处与集体声明的区别，集体声明是 逗号 隔开 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> a = b = c = <span class="number">9</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出结果：99999 a is not defined</span></span><br></pre></td></tr></table></figure><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><blockquote><p>数组可以把一组相关的<strong>任意类型数据</strong>一起存放，并提供方便的访问（获取）方式。</p></blockquote><h2 id="基操"><a href="#基操" class="headerlink" title="基操"></a>基操</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p>数组字面量创建：let arr = [];</p><h3 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h3><p>数组名 [索引号]<br>补充：</p><ol><li>索引从 0 开始</li><li>索引越界输出 undefinde</li></ol><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>使用for循环 + 数组名 [索引号] 的方式遍历</p><h3 id="数组长度"><a href="#数组长度" class="headerlink" title="数组长度"></a>数组长度</h3><p>数组名.<strong>length</strong><br>补充：</p><ol><li>length 属性是可读写的。<ol><li>可以通过修改 length 长度来实现<strong>数组扩容</strong></li><li>数组扩容默认值就是 undefined</li></ol></li></ol><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><blockquote><p>函数就是封装了一段可以被重复执行调用的代码块,让大量代码重复使用。</p></blockquote><h2 id="基操-1"><a href="#基操-1" class="headerlink" title="基操"></a>基操</h2><h3 id="先声明后调用"><a href="#先声明后调用" class="headerlink" title="先声明后调用"></a>先声明后调用</h3><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><div class="table-container"><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>形参</td><td>形式上的参数函数。定义的时候传递的参数当前并不知道是什么</td></tr><tr><td>实参</td><td>实际上的参数函数。调用的时候传递的参数实参是传递给形参的</td></tr></tbody></table></div><p>函数形参和实参个数不匹配：</p><div class="table-container"><table><thead><tr><th>参数个数</th><th>说明</th></tr></thead><tbody><tr><td>实参个等于形参个数</td><td>输出正确结果</td></tr><tr><td>实参个数多于形参个数</td><td>实参多余部分将被忽略</td></tr><tr><td>实参个数小于形参个数</td><td>形参默认值为 undefined</td></tr></tbody></table></div><h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><blockquote><p>希望函数将值返回给调用者，使用 return 语句可以实现。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// return 将结果 返回给函数的调用者</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> 函数名() &#123;</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：</p><ol><li>return 语句之后的代码不被执行。</li><li>return 只能返回一个值。如果用逗号隔开多个值，<strong>以最后一个为准</strong>。</li><li>函数没有 return 返回 undefined 。</li></ol><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><blockquote><p>当不确定有多少个参数传递的时候，可以用arguments来获取。在JavaScript中，arguments实际上它是当前函数的一个内置对象。所有函数都内置了一个arguments对象，<strong>arguments对象中存储了传递的所有实参</strong>。</p></blockquote><p>arguments 展示形式是一个<strong>伪数组</strong>，因此可以进行遍历。伪数组具有以下特点：</p><ol><li>具有 length 属性</li><li>按索引方式储存数据</li><li>不具有数组的 push ,pop 等方法</li></ol><h2 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h2><blockquote><p>主要作用：创建一个<strong>独立的作用域</strong>。避免了命名冲突问题</p></blockquote><p>写法：</p><ol><li><code>(function()&#123;&#125;)()</code></li><li><code>(function()&#123;&#125;())</code></li></ol><h2 id="防抖与节流（220928）"><a href="#防抖与节流（220928）" class="headerlink" title="防抖与节流（220928）"></a>防抖与节流（220928）</h2><p>防抖与节流函数底层使用延时器 + 闭包实现</p><p>防抖：前面的所有的触发都<strong>被取消</strong>，最后一次执行在规定的时间之后才会触发，也就是说如果<strong>连续快速的触发只会执行一次</strong><br>节流：在规定的<strong>间隔时间范围内</strong>不会重复触发回调，<strong>只有大于这个时间间隔才会触发回调，把频繁触发变为少量触发</strong></p><p>解决方案：</p><p><a href="https://www.lodashjs.com/">lodashjs</a> 已经封装好了防抖（<em>.debounce）与节流（</em>.throttle）函数</p><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><blockquote><p>对象是一个具体的事物。由一组无序的相关属性和方法的集合组成。</p></blockquote><h2 id="基操-2"><a href="#基操-2" class="headerlink" title="基操"></a>基操</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><ol><li>字面量创建对象<br>let obj = {};</li><li>new Object创建对象<br>let obj = new Object();</li><li>构造函数创建对象<br>构造函数主要用来初始化对象，就是把对象里面一些<strong>公共的属性和方法抽象出来封装到函数里面。</strong><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明构造函数（函数名首字母一般大写）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> 构造函数名() &#123;</span><br><span class="line">  <span class="variable language_">this</span>.属性 = 值;</span><br><span class="line">  <span class="variable language_">this</span>.方法 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> 构造函数名();</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 关键字执行原理</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">new</span> 构造函数在内存中创建了一个空的对象</span><br><span class="line"><span class="number">2.</span> <span class="variable language_">this</span> 就会指向刚才创建的空对象</span><br><span class="line"><span class="number">3.</span> 执行构造函数里面的代码，给这个空对象添加属性和方法</span><br><span class="line"><span class="number">4.</span> 返回这个对象（不需要写 <span class="keyword">return</span> 关键字）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="调用对象"><a href="#调用对象" class="headerlink" title="调用对象"></a>调用对象</h3><p>调用对象属性：</p><ol><li><code>对象名.属性名</code></li><li><code>对象名[&#39;属性名&#39;]</code></li></ol><p>调用对象方法：</p><ol><li><code>对象名.方法名();</code></li></ol><p>区别总结:</p><ol><li>变量：单独声明赋值，单独存在</li><li>对象属性：对象里面的变量称为属性</li><li>函数：单独存在的，通过<code>函数名()</code>的方式就可以调用</li><li>对象方法：对象里面的函数称为方法，方法不需要声明，使用<code>对象名.方法名()</code>的方式就可以调用</li></ol><h3 id="遍历对象"><a href="#遍历对象" class="headerlink" title="遍历对象"></a>遍历对象</h3><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h4><blockquote><p><code>for...in 语句</code> 用于对数组或者对象的属性进行循环操作。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable <span class="keyword">in</span> object) &#123;</span><br><span class="line">  statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><blockquote><p>JavaScript中的对象分为3种：自定义对象、内置对象、浏览器对象。内置对象就是指JS语言自带的一些对象，这些对象供开发者使用，并提供了一些常用的或最基本而必要的功能（属性和方法）。</p></blockquote><p>学会查文档：<a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>Math.round(x)<ul><li>注意：其他数字都是四舍五入，但是小数部分为.5时它往大了取。如：Math.round(-1.5)); //这个结果是 -1</li></ul></li><li>Math.random()</li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><blockquote><p>Date 是一个构造函数，需要实例化后才能使用</p></blockquote><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><div class="table-container"><table><thead><tr><th>Date方法</th><th>说明</th></tr></thead><tbody><tr><td>getFullYear()</td><td>获取当年</td></tr><tr><td>getMonth()</td><td>获取当月（0-11)</td></tr><tr><td>getDate()</td><td>获取当天日期</td></tr><tr><td>getDay()</td><td>获取星期几（周日0到周六6)</td></tr><tr><td>getHours()</td><td>获取当前小时</td></tr><tr><td>getMinutes()</td><td>获取当前分钟</td></tr><tr><td>getSeconds()</td><td>获取当前秒钟</td></tr></tbody></table></div><h4 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h4><blockquote><p>时间戳是基于1970年1月1日（世界标准时间）起的毫秒数</p></blockquote><p>四种获取方式：</p><ol><li>+new Date();</li><li>Date.now();</li><li>new Date().valueOf();</li><li>new Date().getTime();</li></ol><p>应用：</p><ol><li>加密（时间戳不会重复）</li><li>处理不同时区的时间</li></ol><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><p>封装日期函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装一个函数返回当前的时分秒格式 08:08:08</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">let</span> h = date.<span class="title function_">getHours</span>();</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">let</span> m = date.<span class="title function_">getMinutes</span>();</span><br><span class="line">    <span class="keyword">let</span> s = date.<span class="title function_">getSeconds</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;h&#125;</span>:<span class="subst">$&#123;m&#125;</span>:<span class="subst">$&#123;s&#125;</span>`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>倒计时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 核心算法：输入的时间减去现在的时间就是剩余的时间，即倒计时，但是不能拿着时分秒相减，比如05分减去25分，结果会是负数的。</span></span><br><span class="line"><span class="comment">2. 用时间戳来做。用户输入时间总的毫秒数减去现在时间的总的毫秒数，得到的就是剩余时间的毫秒数。</span></span><br><span class="line"><span class="comment">3. 把剩余时间总的毫秒数转换为天、时、分、秒（时间戳转换为时分秒）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">转换公式如下：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    d = parseInt(总秒数/60/60/24); //计算天数</span></span><br><span class="line"><span class="comment">    h = parseInt(总秒数/60/60%24); //计算小时</span></span><br><span class="line"><span class="comment">    m = parseInt(总秒数/60%60); //计算分数</span></span><br><span class="line"><span class="comment">    s = parseInt(总秒数%60); //计算当前秒数 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">countDown</span>(<span class="params">time</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">let</span> inputTime = <span class="keyword">new</span> <span class="title class_">Date</span>(time);</span><br><span class="line">    <span class="comment">// times：剩余时间总秒数</span></span><br><span class="line">    <span class="keyword">let</span> times = (inputTime - nowTime) / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">let</span> d = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>);</span><br><span class="line">    d = d &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + d : d;</span><br><span class="line">    <span class="keyword">let</span> h = <span class="built_in">parseInt</span>(times / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">    h = h &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + h : h;</span><br><span class="line">    <span class="keyword">let</span> m = <span class="built_in">parseInt</span>(times / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">    m = m &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + m : m;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">parseInt</span>(times % <span class="number">60</span>);</span><br><span class="line">    s = s &lt; <span class="number">10</span> ? <span class="string">&#x27;0&#x27;</span> + s : s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;d&#125;</span>天<span class="subst">$&#123;h&#125;</span>时<span class="subst">$&#123;m&#125;</span>分<span class="subst">$&#123;s&#125;</span>秒`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">countDown</span>(<span class="string">&#x27;2022-08-02 1:00:00&#x27;</span>));</span><br></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h4><div class="table-container"><table><thead><tr><th>常用方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>push(参数1….)</td><td>未尾添加一个或多个元素，会修改原数组</td><td>并返回新的长度</td></tr><tr><td>pop()</td><td>删除数组最后一个元素，数组长度减1，无参数、会修改原数组</td><td>返回它删除的元素的值</td></tr><tr><td>unshift(参数1…)</td><td>向数组的开头添加一个或更多元素，会修改原数组</td><td>并返回新的长度</td></tr><tr><td>shift()</td><td>删除数组的第一个元素，数组长度减1，无参数、会修改原数组</td><td>并返回第一个元素的值</td></tr><tr><td>sort([compareFunction])</td><td>对数组的元素进行排序(默认比较元素的 UTF-16 代码单元值)</td><td>排序后的数组</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>索引方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>数组中查找第一个给定元素的索引</td><td>存在返回索引号 不存在，则返回-1</td></tr><tr><td>lastIndexOf()</td><td>在数组中的最后一个给定元素的索引</td><td>存在返回索引号 不存在，则返回-1</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>转字符串方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>toString()</td><td>把数组转换成字符串，逗号分隔每一项</td><td>返回一个字符串</td></tr><tr><td>join(‘分隔符’)</td><td>把数组转换成字符串，分隔符分隔每一项</td><td>返回一个字符串</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>操作数组</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>concat()</td><td>连接两个或多个数组，不影响原数组</td><td>返回一个新的数组</td></tr><tr><td>slice()</td><td>数组截取slice(begin,end) 【包括 begin，不包括end】</td><td>返回含有被提取元素的新数组</td></tr><tr><td>splice()</td><td>数组删除splice(第几个开始，要删除个数）</td><td>返回被删除项目的新数组，会修改原数组</td></tr></tbody></table></div><h4 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h4><p>instanceof 检测是否为数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>数组去重：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">目标：把旧数组里面不重复的元素选取出来放到新数组中，重复的元素只保留一个，放到新数组中去重。</span></span><br><span class="line"><span class="comment">核心算法：遍历旧数组，然后拿着旧数组元素去查询新数组，如果该元素在新数组里面没有出现过，我们就添加，否则不添加。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) &#123;</span><br><span class="line">            newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> res = <span class="title function_">unique</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br></pre></td></tr></table></figure><h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><blockquote><p>String、Number、Boolean。基本包装类型就是把简单数据类型包装成为复杂数据类型，这样<strong>基本数据类型就有了属性和方法</strong>。</p></blockquote><p>包装执行过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.生成临时变量，把简单类型包装为复杂数据类型</span></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;andy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.赋值给我们声明的字符变量</span></span><br><span class="line">str = temp;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.销毁临时变量</span></span><br><span class="line">temp = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h3><blockquote><p>字符串的不可变: 指的是里面的值不可变，强行赋值可以改变内容，但其实是地址引用变了，指向内存中新开辟了一个内存，原来的引用还存在于内存中。【所以不要大量的拼接字符串】</p></blockquote><h4 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h4><blockquote><p>字符串所有的方法，<strong>都不会修改字符串本身</strong>（字符串是不可变的），操作完成会返回一个新的字符串。</p></blockquote><div class="table-container"><table><thead><tr><th>索引方法</th><th>说明</th><th>返回值</th></tr></thead><tbody><tr><td>indexOf()</td><td>字符串中查找第一个给定元素的索引</td><td>存在返回索引号 不存在，则返回-1</td></tr><tr><td>lastIndexOf()</td><td>字符串中的最后一个给定元素的索引</td><td>存在返回索引号 不存在，则返回-1</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>根据位置返回字符方法</th><th>说明</th></tr></thead><tbody><tr><td>charAt(index)</td><td>返回指定位置的字符（index字符串的索引号）</td></tr><tr><td>str[index]</td><td>获取指定位置处字符（【IE8+】和charAt等效）</td></tr><tr><td>charCodeAt(index)</td><td>获取指定位置处字符的ASCII码（index索引号）</td></tr></tbody></table></div><p>charCodeAt 应用：判断用户按下了哪个键</p><div class="table-container"><table><thead><tr><th>操作字符串方法</th><th>说明</th></tr></thead><tbody><tr><td>concat(str1,str2,str3…)</td><td>concat()方法用于连接两个或多个字符串。拼接字符串，等效于 +</td></tr><tr><td>slice(start,end)</td><td>从start位置开始，截取到end位置 （不包括end）</td></tr><tr><td>substring(start, end)</td><td>从start位置开始，截取到end位置 （不包括end）【不接受负值】</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>其他方法</th><th>说明</th></tr></thead><tbody><tr><td>replace(‘被替换的字符’,’替换为的字符’)</td><td>替换字符串</td></tr><tr><td>split(‘分隔符’)</td><td>字符串转为数组</td></tr><tr><td>toUpperCase()</td><td>转换大写</td></tr><tr><td>toLowerCase()</td><td>转换小写</td></tr></tbody></table></div><h4 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h4><p>查找字符在字符串中出现的位置及总次数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">核心算法：先查找第一个字符出现的位置</span></span><br><span class="line"><span class="comment">然后只要 indexOf 返回的结果不是 -1就继续往后查找</span></span><br><span class="line"><span class="comment">因为 indexOf 只能查找到第一个，所以后面的查找，利用第二个参数，当前索引加 1,从而继续查找 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcdefgabcdefga&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (index !== -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index);</span><br><span class="line">    count++;</span><br><span class="line">    index = str.<span class="title function_">indexOf</span>(<span class="string">&#x27;a&#x27;</span>, index + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现的次数：&#x27;</span> + count);</span><br></pre></td></tr></table></figure><p>统计字符串中出现次数最多的字符及次数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">核心算法：利用charAt() 遍历这个字符串</span></span><br><span class="line"><span class="comment">把每个字符都存储给对象，如果对象没有该属性，就为1,如果存在了就 +1</span></span><br><span class="line"><span class="comment">遍历对象，得到最大值和该字符 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;abcabca&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> charts = str.<span class="title function_">charAt</span>(i);</span><br><span class="line">    <span class="keyword">if</span>(obj[charts]) &#123;</span><br><span class="line">        obj[charts] ++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj[charts] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> ch = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> k <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span>(obj[k] &gt; max)&#123;</span><br><span class="line">        max = obj[k];</span><br><span class="line">        ch = k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出现最多的字符是：&#x27;</span> + ch + <span class="string">&#x27;出现了&#x27;</span> +max+ <span class="string">&#x27;次。&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Number-1"><a href="#Number-1" class="headerlink" title="Number"></a>Number</h3><h3 id="Boolean-1"><a href="#Boolean-1" class="headerlink" title="Boolean"></a>Boolean</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>摘抄</title>
      <link href="/2022/07/272022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E9%98%85%E8%AF%BB_%E6%91%98%E6%8A%84/639b053d/"/>
      <url>/2022/07/272022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E9%98%85%E8%AF%BB_%E6%91%98%E6%8A%84/639b053d/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="c7e24b0af5783c84d68a5ea60d8bf98bd5975fc7710c3d921d8a353eb5f98e5e">176af5f71c6ac5419ca35683f9a93d1dcd2899269e20d9804e62c5de4432615a87ba3a91d33fac342da17a848450f4f669f65f114005ae48ecadd224a8a477744694175b37f131bcd67776729c437f8e5d2e10d799fb7e14da3c53c38c50230178e1e6e78f7a8f99ea698776712551539872117437f2869384a3be3d5de8fa033d5c1d5d3626905286566c2eab8f79f049b117b2ae31e750cade368e86b029bfdc48c8c7fdadf965f2519a7cd2be76bc0b5b27bed4fceef1fdebe416cba0f8963eb25e8a68619ccc047fbec692bce01dc2c1af2e56251b907b4140355b36f4feea646ca6635f68a8e8102f8c92c0f50395bd8894efb5d88e6882771e1ac6f62a932bfc8f2bc414836f1f94df85d45200593a12bd8c8ba44f017032489262ac76299731c5b8858e4625cb53416a50a110a4f1962e5e01c7b3a54718503a9dd48bfe4cb090a785a2c752cd62404a5dd07df90630a164987c094c11a9832f8eb58001692d4d139f5688be0e834565d9dde8761b03bb45cd2afb6488f02b221856418d1a327ee0b18596eaa8688e8b561deb57d71921b37f02f24bbf2df97ddf5690a0ac176a3bc92211de41ae4f6c4d4987d5f627704459dbc7a7fcc8546fcacc5dd65b37b25fa7eb14bdb8cc91b388c9d0ba3bf4a8355662732b271b2d8b0607b962ed2bcd56411b73d653e5406fd0bbdbe81c4f4f6cfb1bf068823b5dc0581bd5e118a1f26260801b69f6310f648e90d9984f82d3e8772582965da09499bddae88c39c564527b8cef5af4d9d5babf82622f1581e58e2ca2a89c7e14091d9e6161a3f9b0396cf185a79b655bac044eb758805216c70d9fd13269d049dc279681383288c3b14405b36f816077cb76e4d5aed3c2fab1f8a325de19dfcfe8aae6d5ed0ac36be533e16a176804508c07adf1698fa3033081d799a7097bc573be13ee4de165c52e3907802757165bbf6aa759f789622df19f488c63ed40af1b8896c0957c50b273ffe80d12ffe78aba250693203e54115490f1a993be8aceabf1aafc742c4261f84e297a18946d0b9d069429c451ed165a5db28b474180d2992f962af7f9056b5d1a6695faf1d5f782ac92961260efe29ef7698c1fdff92bf4d28e1e744b1fa77ad57b8b52847eb5730c6227e45a7d62131dabef50a9d79b8c72f5ceefe40cb4d47d40a1d4afea9aab6513b6bcaf1445e60f98ae55bbcced56c57235500e084dd508b8325e22d0b33c36e9041a2864ce7b45d5ab5a0a3c6da3e6245277820a1704043db5d4bfcd7965ec77ce14c9d5ad5f2e76772217ac763379a32d099e5a7b8355f3ed1d3bd253d90955693518babe0272baa00eb7ddd52d4df681cde5800d9f87a721ddc942e781d16307e22323cd2a2bde82a7c44bfc354ab8fd6d44ef273f08babf0da3c3a7c378c4023813caa2ce8d91c557601b5d0fca082d958b8119cf6358fd747a269a6a11542f0b10692e971c728db1aac973b70e951bc9397e835e3aa72391498ba2bdbfe8dda8104791680b7de6822e9bff32dd2e545850bf48dd59b65a594b397ee4a0fd9513a248b427539708d3fa4771a4c3d854cc65657046556cf6676042f216002a4630000feaf16fc78812de172dcffd2c975243c02977a9ec3aecc7b641d0b1b233784504197d4fa138b14f222714c12344cbe5ffb997a38b7dd4aa464d669dec10d50cdb4d5e38abfeee8f0ea71d031931f7665f6fffb6d61399a06217ce1551ff97ec6c02f86ec2de632e73d8d8614fb02fdc205ed9e23a516e360bc5a7fcc43cfdee237ad2681068044de9cc8280f9ab95fc52225612015802a077e75a9ede5a839a1532513e8d0059b196e8033e3a92a337f27a2ab5d879f1b7860facc7577c720c5941b67790cd80f6996011a430f27f3a469c4d6d11063c86749433731a418f2803fe403f884cec6e5048544ad46b28c8be4967b14ea0f57cfe6fa9f11b7fa8abcdd39b550574b3eee2e26de0dea4826a1f918995211c389cdb0faad0c96ac1d0205aa36c5298cff410abf005d1dadb1a99566a28817fbb831f28ca9e0c5416b7066255262c28f38a54211b161beb1f2c576ac4decc3c640d29903f81c68a8870a98341bda0c19d3a697c272f70ea05b5536eec83ba1ab1610b4a1b372b3c78d44899c8814ca55d16f1bb8f23c6ceeee6ed717ce405d85f30033c05bbc8af2a08cd1eb1222e9c0f7b037be037cdcec77bb8d4c3849f965f7420516efa59840918ffe575d249a41396b31a458d010e5838a179154970bd04a7925f3b9e40790730ea1506dabd98bf6f8973b080282078e03799a871dd9404c32e35d5ce1fc813268d3ead6d6c63da809160df9adaba992bf58ffdb9b011139a3f87423b7385ee73a311be8d4fc2a616fce58de1cfcf945ca9a7bfdf76dfcc08136a6cfbd5de05c320c80c92d5e7d627831b35a21ef481066ca644cc9fd99309c525f9a1273e5c7019bff040e2c33a1826aa66ffdc4ad06e9a8177dd539eb060d9d08abd2c8fe051f0f670cebac151fa98e22811771f84db63c66d6638cd5aa48071e6b18d9444973cc739245ce52c85125911dc3155bc7d787ce9e9183aa60a20055d3d6dfbda7e689e40fce304cdef44557b9bcc852cb1c50d0d20d92a486fa7d9fa84827f4ad476a1cbfa121d94266a34e0cc34f53f00e29490ed49546e184e3d6174ef0a4b05d47631e793111ba6daedd6e4ef7bda32950f6c71f7276e64cc671a8540dc1aa32a422e41492252535869693e7c7aa1eff31a846cae80b627af4f7dcd529ab79ca6a5b0a5891c75007807cdebe2e1adb7ff32f6256c96f08eb0cb7115096a4a3b6127e0e1a6442eea72bf07ffe12c1725f7dbf3a6206938a24b07567f74a510d0511fb389d5dc58e4fcda2528287a79e2e6fdf92b26674906aadb6387680e49097a0dad8eaa4ad444a820d967a28067e9ac7bcf59a88b3f9bf8531a31a19ec64535c760a09a4f5c981b4fa89229a28907546dbf60d6c2d674aa194cb0fd7e09ec2358c3fedecc533e81340a6dc8b3ab0faebb94507d5ed08fd5ef4ccb51052105a086092e31de86d706131e6a54de0a2c86a6ccac9f05ddd3326cc43400cff9b39735580f5841429bed2353757d48321a4a8baca8b66adae3dc34220bbfe5b26d2eefa2c8825e0a7639c84eadf68ba7de6289809f5f0fccce4dfdbbb7fe181503ff5d0196cb11bd01e67032fc29a2f4c18cef3a4725354bcae48aa23dd21a5c672188709522e55942caa3a74039e4fa9b8a34b602a081c8e732da3d8c6b2bbda545c626751ac922d09f36ae34fe26da88d9e3a26494fb1cec55f63c809342cd1227ca40b24f4179ef69d2431f2eebbc7295ca7d302ae554f5eae454f7c0d4592acaafcfe15b3cebff2ebd0f567abe797d8b3b1c69289c640e241ab5be72d1bab1a3e0c24684899c3c6a8ebae2cbb5cbde5dbf8fd8815b6456fe242840c07751201efb4e51047af1bfb9104fbe0b66f3e6e30eacdeb0474c758296b37c1569dc26cb7831963ca677437e2f5cfc42126388c604184d7d4c426c7dd6a43af2ec326fc7149b962b40dadc008c95a273476499c3312c5ef0cb9499dc62b7aa002e36e93fb20aff21a89d8718ed055716ad2103af6efbe9d27a53d1fbcbdfd7f026a62ad2d1979eb6aa3ff1baaa5c4a54b1750ef7d2b950511df86b4659257e9ec2894155c842c960209c46781bf2065d75f173e7a79e20d5597f7d774c08fed16ea3362e8bae1cf096af76ba5de291ecfb34cbdfb70bb1d28d77d8dd7787a719370e797704f541e24183bec4a3426b69dc891c2fc555962988c7654f39f4a76663020a422e1a29843023112f5d6dfed66b3b7c0d4a81c2d88ef0d24763fa204e2ee546c5d05b087f973d84bbac6ec528e2053f25687883706d10476169c2eefab885a22845c5e2ac6978f74af33900e1262c62cfccbeec184e066d59e27653607a68d9c90a4e0aee49ad4689633ecc237995fee48eb62f638a7db13dd46f691205090fe7764144b28c5f7572d7b5ec1b3fead2169b421a275dc4f55b2c0d60010ce55ca92b1b9f025eae3dd9189547c5bc4be434158b873cfa5bf4b65adb364035d361fb28998da2e5179688e99e8ffd7288ee117d72e2f8e8f94e8fcb72e58553164ac1777fba9e79a52ac655b8f1186c278c57347af5cf33c6be7d7be80e12cdac3c994d2d68eab41e17cb7c3e37d0d2ed73502430e2c5c32e6d54a6b8645164a9ab3eda20817a657576aea800d547a244d58be8d615e7bbfd633bb8b995875481aa554e646177902c42dfdfe98fb0e8f5f0be2208d52237e5fb1116e81c860e9d98ea5c64e2f82e9b021fb06fd60eab582673b0bb18d5182bcb34c52d80e7fc60026886d91855d5ba61418ce62a4b7445d7536ed412ce12a24a9f5ac9cd40330dabd236227e4ec7f601ee8d908f2000a201cbce43264ad1c79730e243e4a2a6387f82f4591315793482f9184c03af2607885141728aabf771469540077839b9a0dd863e97523f1a634749b95544787258b77e06e7411076113a74750dcd970c9752d12dab4e7c6ca9532251bc6b0259d6db4b731c8b614496d6f6c31f0b2b49306ffa6108629e95bafd26f36e66be130b99dff3305d77a9ff064256af9e85111d2e932b1dacbb7e90bf857c22c8bd78c2163247f334e48e365b67dba67042bc64f0756b2f15e41c4ba0d2741413a3a9693726a9fabd09503a461ac20d17fa0429878a43b401538e82ac20410dd647b60db944d5a7f4dccbdc13f9438900a5c6d9ba2857df10314cd9201e58073d12ab94e1cd5851822d4e2f0baf76752dfb2ab287734056e2ce5eec1a2c1043bf9ca5f9d62651a6c040ea35d0a60bada6fbd1c929a98f1ae64d2a04cd1126bb05cc835eac89aff2b18dc84924758a916920a544c02aa15ed6af82cf9e07293e9b03241a331349dc54722a609477102f41048f7437f67dd60b2656a814a8c185ee4303d9f299b45566fa02bdc0b662baeac44831574b2ed72b6980ec914c90d5e8e60f20c3b1c21762612f6dfd34ec3048bd5080f8b3a6d203c02dfcaa16c89d24d4aeb9bb43ee97a03c56383d3e7db263af07f406f11737f6bc644356d35c98d0953849cbe029791d7908d72b827af0d0fb9b234f7e7bdcabb8b44b8df1c9e9f56ffce4b6ab9abde69907048c73f923b46e1424c2d6ec578d1da26238f560adbdf775a23e6ce4268d9d19d340889afdea559ba0e99afb170b9537190110573456354d462ebb19fd29a594fff2b9f3926836b4b62549110814b0cf50d58af28c0332f9fc35afb17606383ceba1618dd4b2ee4405a2583f018456e700369d9a7ab611db26bbd8198ce3809fee387596c0fecf930e0937758830e8c4d562101d7251daa5b8033e808e7443b4ac3301e6fa1aca2ffc57c36a59edf619fe9e4eebadf54f68968192868118af1d9c6ad259db445ea9e110ef1ab484ce14ca0a9ee81ecae5ca7a8416ee5f19c91e6ee26fe67d9726e4c72c2a4cdffe3dfbee73a853cde91647154424ab04913acc1431d1af6328fb6ec6368f26c676c38e66149d30f9009297db6e1612e8a99606c533b93d6b6258da1aea281461b91014b60600a3af331a6021d396b9be3444a013489bce92f9bc65a4d67b9585ff198bc49661fb07d1998936afdf537b59942e7e9c40b6b439488b057a8f5877a3332c8b5c7b0087a771f4a973f1a880924a2af15c0e7c060e1d9bd9f03b0f5dd73c40ebd824e0d9b509be251c15530ad9fb204f7e0f6040a9d82d66bf66601331fd1e87f72c2a65a50f01150f608e7cf672c7dde42d8c8af7adf73665c2ab7961715237b0249411ea44b6596be436c9c0e00d82684e9cc2522194069db50ac51c6f20fd83fe7781062184275324cbeab5c5c1fb8920d060c3b53514bca1c0b4d6ed766428afd166c8dedffc7fd5af127705e787c11e836b69eddd96ff8382d2b0c64d9c8330fa52b8e8020f2cbc79090463b9a89481d6693014ffe9ac149ce7bff22b27701e5e9e359b077ae4b629c947de01ea41291f5eba829e7d47d51529995bc701d7229bcce5df826ccc8e1300ffd0ea4c015a33bf0c0f522e47daf2a5bdc36d733cfa982b0d961582e12d04d6a651ee1d42f0a8200f409d4df864dde44c730dc550ad2fa7a145da431ac1f1ac4964e4fd4d7cd5adafa1ceb211916aba0e212b65f619356253d5b62c599fd00a35fa279903f641fb1bc96649d72617c892c12dc783bd51f9fe9eec5ae8a6996af6658b541ce02e9d23753a2e5c2f2c84afdccc8097712b0faf33b27ee82d634d023676e4e3846b5d759b54de02ee96da003640e12b5b8f556feb89af39ad4c01e29ae2403b049c6fe0ca3cee0ec947df08f35c9239429caf3fa7ae9d2323d7f44d8355078758f01b1ca597edb42f3d0466683d0528aa92f1dc4918935bf49ccc912de4e427e72d7abebe798092cb8d3b7a77cc8f5a6856365cd19d4d11f1d7980e2b9ca661f3b8c01edd41bbd1421a0128d3b53adecced708d5350680643a1b6d7d1807d1e5cf6259c2177b996a2a211b61146324356074d0d41e97f96764860390f59ec1120f58643e9c922968b3bf3d26ec22fef21a0203c7fdf4eccec14c3c8e0f89981a6f970d3bebf89ad1e19d2f5406602d727ccb31b12f49869b310cb53e0c57e61a478110b4e617f244e887859214aa56f9933da696dd90403f457c3ce0962f92903b05f681a35fe50d984df97a6a595e5ab14d551bf15b8bc0f5c7702981dc1ef8b3556741a77ec25acb1467e085dc2b8cc24aad898adafe43f1726aa3553a55952c650f1056cfe1748324741fdca171be53db3110e804646ddf3faf341f44b2c0f9e2c48502782ffe1a35d91477b0a337af299fac17a8344558b55ce018fbde7e41365cbb70dce387f08cf62195eb8aa24ee7dad3a82a827553cc00d646ae06b53b15cb6f82f23827a6f75d80ca29ae2ece99e77696dc9c57519b5134e0ea5aa20410d3f65c62e95b7f8caa40d3f6f4b808524ca6b2a9d97b09dec751c63f6f7fa00d3ee54e1074c964b94b02e44665d3dd8a00e476cc391cbb11c7d1d537ed82cf838fda3bb4fe7272ed3ada78117330a533cdd5371981559a6541cb3bd03da282bdc8e663ec3cb5567f1796c8c1bc3ee41f8c738b7098d077ff214e64799a8ef97bb5b12d480895e763855ddfb4563423c8fe2b84fbdbcd0bd71c552eed2684ba9b2d6988fa1a78355532b97fead2813838a7985792b749f6babe5acbb8d7c4b82762c3db7a82cd539112a292dfb326e8f8f22db1c27497808ad2aa5bc8bb8f2e5b206c8ae8eb5737d878c555f06c32137ae202887d30f890009c2282d68c92d324d02720e45ce655dcd2e9d5938d9a03b48c8b5dba17a53f06d004e837015abcfb9ebc9679384ce4c982c13d0d7cc8f5ea29bc56f46ea953ed46dcbb36e659c9fe7b695010933ce5dd38cab2732c1f81efadfe45a42992158968f45693bac9a709a8a69f905d4bd4abe7420d5324c4e60ecb19ef243f8ae1f22a5438448e189517071d6194c0dacc90bc94d37d5e3fd85ab9c6758cbe1c3954c3749d19d079239582ffa856aac8eac83e5406e73fa0c14c7e45b9e48e702adfcdb4391fdbee6be54766c838bee0bea6b6b3b83eb41c3b408968f7a66be37d4d0aa783d90e82204745c5cb6da7574c2eadff30ab96d349e0cf78823b2f5655cf4a81c4c6626d915b5b6f879c46121ed7d869efa1fddbfdb9e69431b3fc8f518221fa0512b30ef081c93137f467a859cac4eec9e4e88dc4131b6b7c5bee40f4367d62de058a534322a41ea8ec25aef9e20afbc8f9df0fbef7e51e4a8a66e68b693123e2486f78642b39403e6eeb2f14f8c888b5ef441204aae996b5b6bf11dbf7bf79b1feca64eb15431116901b34e020b08050c72eb54175e7cb5711aaba8eba55f0fbb93d11932e61f5d2cb70cd2830bd5485ccd61d763c293e6369dc7b4dc221c878b1f4522bf00331396317df36ced3d0634dbb016f7c9ff8234c2ceb6d29c5801c7b18ad51a61f0f18957aec0fb50d0fd5eb26d848f57656b6353d2ab6c2553bec841b84e8cc860f5731e37db72d6fdbc6bc6f550216c1b641ec01cd14b007365620395234899b3057cf2ad2ba550771fece2a08b38f3932d58318bd74519c0260e961cbabf7423d055f58bb5ece59e6dfcce8c61f6d40c6c36c2739818a2006c7c70bec28020c3804b5d5945c5843b1f379e52620a499351171411aa15c7008b2c537ac952d98c656c301f9d65e4cd29c788145222e943ec804163104d2e2225ef87ee482e9a57d650dcc7fa50db844815a3eade1c8b81ee15502602e4606a9380d333189a857d51f57143d762ffaa91e15c76e499b36b3ac074952bb06a8c66abd6c64e64ab1a4198cd1cd64ea81ae7dd351d4b4795c772d4e1d86b2842b9a0651add7000d8638688111f0c9ce6d99e5e97a50d179e62ef41957bdc8a440fe0a8f2b0ba4972ea721f355d4bb6c566648ad83b9fb018b11e501a72a5910ff346180b28cd39bce3ac06e7787701c520d78777667830bf90d693e3478f22993efd83f09fe9f332634ec23ef4ab0388cada36f34df512a22deda7ad09603b09580336423dd0c491ce9e33e8aee643ad3929c1c922fd4b6d1a2fcb3bf5430b787a60b76a3f14d06734e634c238f09fdc875100d56758e30c69eeded505cc06590806b3e4d6d8fe6f91efe5d5f6c14ca98bbd44ed665357ac02c5bc11b3a9cef7ca49784dfa8e47e99bb51c74542c235788bfc10d658324c0fac12588839a1c287d2c3b7beb4e551d370a480436a8ef4528999ae9ac40489c30a11f6bc253185faaf74e85d18dec33c61ed6d85d40ca9813f22d8d0a7d612ae708ec3c263f0f49338768267990632be7fb5a139b91751795bacf751ea89a44514d2b38d0cd95281607893c49aacac073421326d6be5dad16a1fb6ace88a7426d388b8686939e26f3dd991d74b4625020e633b60cbdb295d46d769a9184cd6fec08e375b08e2ffde60adf4e10f073452b3a9cb65becbe6cc0750e89be7f57d7b898ebf349aafe52e2f66e2359e55624088fde056092d213afdb572b70aa9a326e47fcec0abbab6dd7307961547fdfb2b40060968a9b5753409147267d00c9ac716e1af9003f6c8ec280faa97b2c35ed6475a2781099d1105264699796b1795bddf8809aaeac03bbc54d04a4732eb00e0edcb51d87acaf42c544b8511d2ae3417bffa9b8cb3104f0575eb8689c01c60393aeb4c4cfbe3e1e48b2151a2ca4ecb04425df63792bcc1ea26be4472bb5748401455697d3cdea4b98981536d3075ade0e040770c959695a68c073d0d2e8bc5563403f780ef7d53f82e3f91d3904aa621df5ab1789b96ddceaa99ae1d4ec1a8fb5e7f2c763841143653a201af56f995ea34b79ebb84f0153ad00573e4a2df141b5149f22ef3c4c2028ab8a5c3cb6140555b4d5590f1de988569b9e365adee18616b43beb2bfa4a8afccb9554f28f2863b1f694bbbc8082b30700829f5df67dc2d85685606969d490fa384dfd1b0e0250344581f4da8871b5b7231872e0e386c9846a85f455f748fc1a9e998ffb5ad0ec40f04d729c2644732c8d20045f92fa4b48bf3b962fc37bbb3461b9928576412281831a51f1b0edd3da441e8768ba5041461fafeff8ab130798047935382b28b7379c5cd7f9d663ef0fc0f4a24fd30b33d9ecfb461af6755638301b1dbc0cd78ded3bc35381c47b718aa3b93c1600a694544d850f4f4acacbf672dd12204c3e5aa439c66c8a2c098878b713a190a5c272939491f809de17ba857e46f9db2476f8a297ec343d50982a7c5cb410ba4138debd56275d8b76bf913f9901c9e34fc6b342cefb3b00c646da81fecf4efc84de16846bb9a43c545c005ee57ed7f64bd01de7436c2556bd9ea24825dd29ddf3555286e6d99aca3d390da08ab335dee6aad6b2f10b064177b1d40da5aa919e5f7c5def8f488a20281a183e6b429feece6855e677f50d06480c8a78bfd8b102df3f4cf95b68f124d30899ca851ef0161e3d7912e6e7b70e9047ac469d2bad388a8cf286948e350262a14308b113a9d230673ed3b1ca2edc15b9152d0047680f6a77844863cbf14d2beab9221c4896e0320336b6d31f18af861d7a589ae951916fe318b7a9a50e89f94cbcdd90a966375fe19e445125cf8123fdfa99868e8cb31027cb19c38ae7a5c19e0fa247d91c0f2d6e912cd27c4ef6709debcc1c262bb6c05f79afdf3fddff52a71a538b3a0b123dc4d7e24e68810e885db957c2bd2b399bf68efb3ba96e588845a8cd38830614e3796c1252018d1517e2666ba4e7d153cc3bf26e179e045cc366ead9530e89b9c22ce820d9a1fc2aff4a2545325210510f466791c6ee74ed66b391054af5893a2ac4c5298b57ca620debd7019911484c27ed714f69966cafc65854346dbdf0cc74856d3b7133fa65ae0dce55036dd011159eb9d49ee01707d1d14b67417f00814a2e8fc6ee2862dd4c434fda666782e8b5a07ebfa558717695a5b6f8b087b864f14558818c8c0a5d43e8c830007d69503c1158f4e009fbdd1ee480c419d902fd61fd75ebb90d9b53e2b9775fbce118b8cee03c0b92a2a329fc6d6e4a4284d09ebc118a61fbab79043d2f820784f5143a1c406e667b03f3f1a6532e98a1328a4a4e96f7087d0ac8648f6fb8d0fae7f3318fc141a2a66430993c1d9461ef490fae937ae262705f9a405099b4b285d5af6e00511b7ab9ceebb1c8bf5b609b73a16feae9d03f3ea634df80341a10ac504860e1f1608415ebcde8f6ab288b1b73e3b3449fc9c724399c94c5a4cdfac2c2a5813b5728fc26c09e1b9a91f9f4045875539a25442da248e3a2f129a904a7e29990b678acc6b90d8d40f6cc600d8c54d667584ef91a3e692a5f49027b3286a287b159607c0a4b95280e219cb5bd19260b82f96cf1d859431967fa4374f34eb3800776bcb63463b7027e66d24d0ed84d04852a6b95f992da268b61b30478eae0c021887b308a8802390199af51f98c3ace250a74f92496394b85d13006ae421f611fe98d80be107d732b22ef5c9d41c17be247c4f8b5d6b279f16e3219934ff836e9824b2da380c31bf6c42da53cfa105c85a9b67e391b14b346bd233d72a89038b084e56df3e20e40bf68ddac6e41dace65c0f3eebcf2c27b77701a42c41857f6a26f5054215dcd736d8071939479ee2e21888005856824d4acca7b5b283c22b93dc52ef5ca33ba9c6e97d07f546837e65ab5dc0792fc76db785f773ab1d3cac74838e9fccf15cd1ec6f5eaf5de3d94cd86dc401a2fa65651d5c989a08087c87705c0804e4f9b60e55908f970b57ea972c070a8cacaf725fb49d63a7eae9b6b57d2316e41745f5a12e2bcb313c88c0b173da849843c0965d6c9e5e2477f894591a8475b46ba38074a59b5d6cc3b63cb4910c2ad427748960d66e5e334d5783e7e7a8056b023e18e900f30736c036423f09d18bf1ec88fe76a4803e261f77170ae3c555615d5fad004eb20286947a4b778bf212a1fcd4984889ef85e3e935dfe9e9091c6c97748b616637cd523e448563f31cdd075ccbad65a74a96f922432ff48608d1f417e02553b93a6cdeaff8df5069815972dca43f75d1761a7d6368dcc21772f965672bd9e4a366e67f7889afc6476128b9dea128063845843bdeaf5092019c032c27c0b00d9631d34b5bc3498a47823f5a4a32bd30fc0581c4ba67f86441360f9bac0b38d32d67337c61e1c35f04b04be164f7bc49b175be6403ff08cfdc2eb47c1e34c8be85ab4958163a79db25766b4d4a8d012321b83e740f5663fa74ae27fa10dfe49e9432cee8670b5ba42dc91456e77abf9e64105efe1672109f6862c16ded53a81e6fc60218ea25e5aef9f47629bbe4eb15097ee3029dd6aa71d5fe023945fb631926b89eb777fa2869020596a15ce5d9e2364d26e8f7e5885bfd0138afc83b707a418eff475518183179e07bee2fbd1ddf66bb68e3b6464042862e558aecd272dd81e4bdddafad566ad288eea740e13eea4479fbaa0a2a0d4b155e8781f619e1fea9ddc4dd8ff2b15c4efe83d508970ca46f4aa7fdb18c1f09eab8cf360ce623960f2efd8d8f7bce76f2e40aacf5bc5156ac85308017087eb49648714b6fb5d783608463e79e406573272e51943bf00f2707a51fea18a391c8ed60f17acdc7564784ddf1a29cbfcef264f929a7eabc6f616e851185d5e00db0557a9035e918951c553d7787baaab699fb5b4f6ce5cd8c40ad6f45536c96676b5df4f06f80a91ba7248dea7668ef4019067a192441150fdd62f6888c6cceb7f3a5b07b6fd3535f49e54bae01daeba81748f7f2daef31d18a7cc5eec4365dd02602c9a255181711f69450bb08855e45340514b54befade70e00233957be4f3544c68d1a1a4b8293a988a27723077fdd01c4903cc2bd5ffaddebf95c07fa6cd1fa42a0a50780c588f8a5e4767edc5040ce53c720c87d160c51a4ea51c094695c67d1930840fb11b30d66a90a27399170a6c080fad046f6fb646e9d65f26be763da51d6bba0e1cc3bc660a42fb1b3988d3ec9bb86d35c0708ea0b4647da7ca8400639a44a67b0cd4844abd5cef01ae5be61e62b8f6ad16655b7b4a55a1e6c99e4d6c4183da673de7ed8a50fce57184c29670361a04c7485df23d3471412691fa29c1a49ee321815023e718bcd7c01e88efefa647fd484ed434de4f38234dd2baa3e87f881d5f9beff4b4270d3e7107133a3175b65f990a2381cdca83234ac68771393700bfe39bf89b78e73654f02a5cda713de49b90ad3631ebf2f6c90de211e6138e37edbe65d6a9f4c0d32b5f935faed21d7e25c900f9a1818e3e92836b1b403b80a281287567cce4dc49371dab8d82c894c2232cf233656471fc9868b6c78920e34ce33d283addc64b93c29dc4799cb27633f6727e0b84c85c1557f952cb31fde0cd34ee7884e7c585b0eefdf428e354fc271c1a506d66e789359c7bb6b01af405fadb65c9b2804f306762394a8643003e1d7ffcc906eab41f754cdd1aa61e9d1ea070ac7d070dc27664c9c658223fac639a53c3d168e801cc6667988494fa976f934dc2dc23c64d1c85ece30c8f49bd4799a36a4aedcac477efbd5bb90d4810f2e59626b061fda108b4c0fef711f2a76a7ed6fba1731c747c0157756bbc711198503f8c8ad3f807d693b96471b2d6b03522e0db4c03c0e8cdc87a9152cd9664be1afd71ec9f638c42db359dc90e73dcdfeece7063f9db3c4452000164acbe4b019f0bddf6a5b1ab12b5de0bad433fa9cc587f12b3a0518392729698af5b25ac3f30c3ad794f51b9447115598e38c8b4675455035f0609db7cfe98c9d88ccd8bb401c3ec4c62344fa7305e31ba249af021178f9cd99762edcd2b92576300627efb9ad4603acb5ebda5c6d17170d7cefe922d816c4d0dac109e00c9cb3e47909c1bc8a918b7e53b5dba782fa4f0b0a768bb14d6e38632a737cda6db51b5c473fa1c039b30c86a97e3023aa096938757da7ad37440fdc6b477ae033fc5298e6e0f598e920be52fd53900d8613c0a83ecc978bd726fc43c8b84864e223fc62988d39b0bccfa3b35e3848eecabfb6dd81b044cb52a878c4fa9da7e7e5031a60cb7e42c267b7796ecd19bae6b3e066d5890091bc9c9f046ae5980091bdf7d1dcd750bcd765728019be8e31beeb73745a25fda6d548752e52c3db4ce364ce777c5c7ce858901d807852b4d048a1564430cdbaa4a8d3b24f3a836ab3c7209fa92809faf28728e2cb566a753604685834ef2c8400b92f46c6b31c00c04ccc20c33424dcd6a4396231d6ea94f95e0a2c96845ce2b01cb52315efc7f6aa776fea272f9fc0ae843c83f871bc5acdb7ae20093735a5d2af4003334e513ac3e6a3677393d2928381efa92ed4a50bf5947c1c3d55694396b8443b54e405ca44a60fcc9fa25c373821bb207c843a5a996535065e8d5c40579de2b517c197fcd0104718438e1372fa9bcce0ddb30d902aa5b3ad8a0c40867f90657f9a5f6e467ea561b27fb2c23de6e08f9de862c1d9041740e92f26e9497758bf4aa439a428eee3f754eac7ced3a8ccf81fe2b8853ffbd88af0e166fd29f65c734b4df27433010bf437460801611acaa27f331335c47218d5a83a73e071b1bb42cb6063704e56dc28d72ed69c35a4541cf66bd876683169650a82bca3fbe2bac966749bb6e8992578f9a1f50db0d244d1a71dece8001fefae2e6834ad77731714f11d1889fa4db4a55b84be46ca54ffabe8317927ffbc8ea0d90a1ccbbaff2ed0998019950f21c84fb3bb38717421480ac4bcf9c0a507a8820dcf80f1e5ee0c5ae1f1b51abf400f05728cbd50b000ddd11525f9a244c737768fcd35db88b3200af8e20e4c49c1ff6dbeb1f9b455396ae4681e229057586d271efb65bc7d348abe0d5fe45c583e9068c0cc1acbbaf55d6bc0664e4e7409ac6eb26e11a882aec0b8cc10529fa71bac19cebfeea7e5234e6a986d68ecfab8046cbd4d70bce411c6f72695101cc319408cb4e328d171978e837a28ced9afa6f09c4d3bb0eacd9959d3c11415bf584eeb263cad3f216a9ffc69a47024791f89392981a6f9a3ae59ed3f7a9a034cf2ec7fdf4d2aed3b4839861d72e44aa0b8dfaa5f1c38492d2013a3a9d7b3ab88022a81ac2741f87a7c4307abc1afa7c6439a33076a458b10457ec36f62c185c927cc63814e3c3c07c9c475d5aed336055b80514d069b05fe5ffa899fa01b7634e501b7b4845731b355c7658b507907f9d95167db0027ddc9bcde5b60d9c9ee0560b0a9fbd027427b708adde65eec6ac0981aca1d78d209541bafddaf64c3cf2d87ae2a024e46200004b2e4dfe8ca835c1fb35e5dac4c38509c6b038d5ad6fff1cf127bce3e5f2e69169849f0bfdd82747ff9c03ebd166c42bd6e5f32c980152139619ef16e6839df802028e871f76c3d01d9e9c7eb3b71a9d05f7f302a7aabf70c0bc04bebdf181bba69dd5df7b40777075d7aa92e4d54ac43e605aef9a3cb34bbbaef44c8777339ad0f146b3190a9156a7528d6b65ca6d816313b51c9e93a3e3ff4f681b21b881cb32cd0ae4a9d993c4a9ec3e85d6534618b15f5b38ad4a10356ca792aec87c160167a4f93e3db608e90547095a6f79bca3b9074a1bf5f13752dd97353db8a59f1d207e0a6e85b8cdd1ad85ef2ace416e20995494f0460f3005177e250b4e5eeec309d0ce8a8e31478c7b4210530a199fdb1a7317a26d39679455f2b5ff7f2a57f6d347abf20ab9e0f2adf8f0474d2e6897c0eb44a11b288b2a59907c5e3c8ef930fac8daa296431657c055c7c7b7892459451608cf97ac04cdf426c1c57b23391ea23db0138bd785f7fb1090277fcdf94c15927a0bce65531ec467c89f31f424aa7efa3c92a29bef1cf6e3d7d76e06023d7519330718f94cddfc872cf82e0c75082f3db172b04c4fa831eb44e1334783071fc55a17fa86309b8693cfe14e01739672a4d0104ff2fc8dcf8904fc4725fea4bbe24af94dbc1be2a43259750f449db41239ca7475df2b7007e8563ab2eb10c7898c7d11b8fe9c064f75e59925c61e3dd7cc9a917ab1f564dc9681f68234fb0dedefb4e6fc342abcdb7daa57ead7f9d8f469ec53775e47a4ead395304a94c4a957192d4f48f91414fa10a2eb89d6ce0afd61a4b610f273c419d2a09fad3c2ca9f70b13cb41965a3b6e18d39610d34059e3d20bcca929087bbf122bd91858d2ad8a293e53b03c44e419d14a7ece453cf5947c6d476265d2e4850051bc81b3a700e6279766641646e80d3a0c15da74e2b640eadee834dbbed9f6d1bbd3eb6f4b7fe02161604e5610d1aad60b880b63965bd3101e70d36f3aef4dca905f5f087192386a9b2f4d0dcac743a26ee82ca938c95b9f1a7871e1dc3cd44988a3b75b079888db50144883ca451959699fb6819de075ad556eac1d1effe773a48f0a1a8025c753eec8fa2dae0885e8a96cd993e1aa2c43acc9b62474449ad55ef08916e32e27e162dc8c85de798489b1d76e13e26e23aa6b902b1b24a0957e83bc6b1a570e1d87460d1c48f1def5613cf7ccca4ea5263d1e35477ac4d2b5959e9874a20be9acd80c022ac0875b86a5e153f2325afd266e875cde490e101c69effaa906eaec81dc4e3340f44ad91aa88a711f6ae7369eece88552e5000e8185075827a2650b867b32027bc6a98a540cba6de7dcc9ac9083ce279f18aefb0a7b7edee9ff3f9e5100337d9713d6517163bef101c16f82a3ed182e25844766ef11355b33757b2744060688d974c78f3ac23a696c45ee5b3b973f431e190cb3d4b8ab412c3aabafe7314f47ace5ba3006fc4bd6b480f280eacd18a167041c1d03ecff949c62b5d7710486d7d5a72a4db8356df5ba55c4ec7670fffe9f5de0be48b6e08d9fe85695f8c44754f705ac7b8055b7d9ef30971bd73c1052dfd541f278fbe87d7a2a261bafb4f01317bc111f5594c5f69a34ae0aa947a4ce84a4192704d8903867f41f3889914d1d0df2b79d8fc5af3640dfbaf9fb9c93ad23f6fb85f2ffc6504db83f004ba7d8225959933ae01e97194f5cd46c40218707b29dc067827bca74cf3ba11d001ba303a7c4d9d08fd394426111364ac0a1392a4dbd13671a67be5a88520852c07f13be45b34a1e11fef624e2e641f1dd2d577f27e8fcb62b186639b44cb66ed2c441c108e42497410c4ed97a5bd3bfe2c5bafde55902e009dedb164ed5675b11e228e610039fe6e89a35cbd9e98d0d3ef19110aec1b81674462230e538e725b4849d5fb191646482a1703b45e20f164d44bb8ec4b7d680cc4ddd16979989d312f9ece75c27f8d0580b9b7c67adfad58d65c100880c4732aea80601c22b2d26408d48721ac11bb220483c025c785837066668491456b6a1e04b216ee909f73c3b0ebdb5c82fea964219a1b4648319ff93d30508290f4135d52f2afb32bcf3d25fde7cb9718d6a52cc693db753f6aa3f05b2b3174bb5926bd23f0774a3dba68f9e60b746a7e177f1f15c6e1d4220edae2a07ea076e05558ed9a0ede725aefd41693746d512c9ed9342430b14d6e506d9757b59d270ee447525d5b54638cd047ce1b66ef0061f6a1906b0906c76d21668f64f223fda112869a02dd436e460e6d1de625f4929bb2054101f5bf809c049e46c78963f7c0b41f5685e33e27b32803a95c81ece712481fc5f379e9972242d7e4ac03d8df28e1fbb570afd86b95c47d07ddab603a79b42a1f394d1d3ad55ba4b8d3a001fbd44fd83dfaa71bc98286d1a05ea257cf858665a23b158d23c546206bb5d93bc5a3c4673b96e4dc6db309ce8fe514d753b36c096d2b49df6a6202a2399154fcd6a90199b12512e86a339ab78d75123a4a8892fdae79e6e4b9ba689d45870b57d569ae477ac3f6fa562d4ac24892c066176f428ee2ce5841da299c87e96f42ebd9b9a79e816f148ecade0d11eed1b8d7a2d856feed13993fbfb4569b0b3de668a2422897efda3faaf7d2b473035e94d4637b836ab87a0f53b6726211ca8e793d093262fc41285e98b47a08437eec436d42fead9d119ca604ced6b1bead6d87937736f30d7ade508a81aa9fbdc053729f161dc37f77f76996bb4b584badd425c0c8f9d0693332773f1edf60aca20e28a74b261c754992854105a73cbb35a6f91f40e466a1874c79e877b77eaaaf948219497ca3361c2aaf7b6437d588cd75c5811a021941cb35ea0d3f8f40ab57354a9fbed1b2e05736340829852ff4ea61ebf79ddf18eb520ecdc607a19e3e8d3af3f58f6e3b65f15825a41dbe4e7dd4ec45ef3ada4dbe4f3049e25860bd7fce3a664fa4f007b478dba98c266b5034a982a59d756c9f833a858a3f855d7d7ad4e329b47050ded365e0ca24fd3744ca77475553397878987bf7bcab1c04f7606650a2e2a303a61eb8d95fca8c79604f38a67b93326672ae46f28c289a6d5334a03ee7a890269f733047fbdf31de8b98dabb5c766375cb401847d23f1b2adcc45c9c6909a28d6a1070804495f066c5b2e06ec72ef92af30b4c2453d47a6297ca04247a80ae4016939087ed8767c14caa96f193c0727eae86de3b92441c2a725b81701946a831257af1d5017d606968ff4cc097fe7cf2abbd20b4b433a55b05921a69bf06be9513079a7b24221e49a5462292e437b4802a16feef612a40a26483d3c4b6403b9d57dfdd42526b25a0e078a451ae108bf8a57fe42d9cd67743c12688c226f2c56cdfd0e1633604def572bd25225f5e05c81afd2e85a5a6ff6e3a4c9c8ff63a315b1fd551b9cdd49f8e8194d058fc4ad6f4a8c69c6cb8ae79bf49a1b3574019b35986f6dfd9990a3f1dbe1af291fb8e62c13fff7cf6848ccb3bf0073f00accf754516d7b104a117bff24d3cea65d517dfbb183416df1578778b1c8931fe2147224d725d3c0e77885256f3d95265d8489076c832baaef72e883bfed417b16667d8e28b28a10a52c70b768712873d1497d2ad4530ed4703da00f99c17261ec933e7f0f8102ef5b60b6ddb17b99e10ae921efd00502d2e86bbce89eb456763354a94b14cc977293b604e02036ca496f0d090fb3dbcd4417d13708930f952734b610a7b6ce460945d4292706b27aabbbdd71be8999f5e131d8a8444d0dc278e7eb0859c50f3ecc9f5721e963bd2978ed06c91171ef6d5e6d2ee533383a77e0d1a2049c384956037d1a1a391ecbd85109da6012bb304892377c53d2e277058bfb3ce25f96bcfa768adc7d0e41f60b071618d092b2d8946049320bfc7b1748f76d5f285dbd92731e8a32182bd41c76fa42d80012196d37dbb99761feaef3f928516b35f04b5c215ec7ea33f4e9938f2cfc124ce61d880ba08678a9b8b71512b0f8f7f40b66569bd5d42ddf45813b5ab09fbce51176617f8071a882059af86289ff06469c7f5dcb2798db73cb32c97173b8c10fe888aa09d596abd4c36c42dd30bb92c625b220d17adff4ba69262a1333ce26b63581719a6828ed4b60aaf71ddd11a6b2c2fbfe17181c5faf27c827e22efb1a282f37d70fc94079712e19ee0af262edfbf27f89d53aac7afc145c72af8e023354f470c1b7c8c632b7c66c4d563c81213622598dd0bcbe764cf2a415bacd1bf41f5a051d336a89e6fa4f34f229ca4e040bae7ca79b051cc3a1e09a20765cb98f8bdc44788a08b88f7238ed6a4cda57e8c38364ef0f09dee31f23f67d58bd6fc43ab334a8b7663e34d55a6baf91c9bb78a381232fe481b4ffcc653a839e78d4af76142f211d9e8164690a6e3c5eb2eb012cb0e549c3fa8bcd5235d82fd2cc1356bdd12aced937edd413a33b34c2aa42b02f0225e397b9ad65d3919285bb40783c61c13d00436892a742872271af84fd05f5bf1c6351d579c4b2c2d3f1671f0d2cada5af5ca5c542ffe42356ec4ab7e3e651ca34d076d9d1b16a6bb55c3c24dfa1ac1bdcf85d9ed49010e4b1827c8569bde20ef5df8d092cb2358eb0aa8b01633784f7caf075c98926f272991ea68070674a7d81d384797b7159da4e245b14ec845a8e890ac19687f98023a2657581a482ad5311114e5bdf5ff4d775258040b2e1aeeedeecddbe167b5f881eb9f594a962c0ad35419ba6b81c867615926af7fc807b752e3be5cba647a52b0ee60f5e0257f888345b36cf9b65b4296e83d11839dd7925e1ce7d01c74f0057cb639d78ed20173fac5d523da68a99981ed7f3e4044c7fd371804de838aea3bec7e373dd5bd640759cc9a787e9512084af20cb512d050b57ae8563f2b4964af25474bdd32e6c8cb7d050780cb300c495a8f70c4cf80d826fdda1b1049c71612c2b841ab55d5e50c90e50993ddb62dbe047db2ff192d21564abfa1433292e6b72e55d5bcc0d7a64ab8683cede104e0cbd1573090e3caf6b4828c60d99f1c7c0811ec444622c088fc64f8f16ec9e8eba1b6fdf36654149167325fc4a3b55b10bce605bac9825b92854ab82492f2b9f9a82bcd89a2b0a8eadc0ce97a5b9c626de83d5ece971c3199a27e00673268cd7493cad943a24d7f3ae7798f4e097e9f48cf41a2900c4196b431dc20b25065b620a708f86d25e1749cd3cd9ea93adb6326205ab39b8cf653702ae57510c0a116d369f30c264724685264f1c9c45dc216fbc29da04014e4ed58462de81b6921af4e1e6c7271982105dc55e08c61231537b57e2abe3163c657aaaaf55b57b779b4fd61f3dbcfa79102c042942ce841783eec6d52266114ea9e3d9a83c74465ed2e676f3dd100334cc407a04567ddd78967676fbc99acc013008a44bd93ad4bfdcbba99701998e237b90cd790762782410a363e4544976433f47699757fd449fbdb5361334617c821c6d72fc1d3a28f44357c7710596c43178bdd3a9efd24b9518ec9479db1b4d232a7c78084f3185410e60799a9b66f8cb8a18f31685f2aa12f5a848c9d6cd571e4ddec3901cc39a64c4d62a8257d8a02ca19c2ab321b1df96090e00d924d25876a56caf5e6ad14d8813320cebb2107c8225c84a4daf57d50d22051b5c68be94201c9c4cfe5384af0de02067338af685370dbb1116ffa92270af3c4024b9a9ed123cf94761e54fd6eaae62b2357c788579db283a4015ec35f1ce0590782654385ff74b4cc1a712c8fb75952d9cfc55865c0ea6fc53053c8da162fff0ab06cbafe3f13b0080fdbac7ebaf0e17ee99051ce76a1022ffef61a2039a7c04f78da8420927d8303c91cc209d4f9f10434f37fa69c2aaac73e0702b47d200140f5ad927d12579fa172d55aa62bfa403667dca53cdccb522df692189d9da41d2099aa7480efa78c0e7cf79262199b641ca391635a1b0fe884c02c49f3c8c127905793a64082504bc530e2dd02aae4cef0bcfd74d3e87c9e2260ddb8497a19d9534bc1022479e11fb568750c5513397405ad78513d29ef739b570a822d9fe3ceaea6545cd842f6739503f8cc0ee4b26acfdf659c09318b347993986381b2d383ac49620fe997e9690ff36984bf8899ce38c89aaeedf88c15479d8161b95069cdb2cd0cb803e55cccd876c3aae131b5c47d940fb20e27adf71fae5a9d957531e5e268d9c535cc5e717888f0d2067d6821f3228be4be4baacc8c357cc8142ae46d1d77d7507a55d31d21e1ae64aaa55cf6f6cb7ee6530741687f43dafe13be4779e9f401d10971f527969e328f307fbf403af1fb3659ad3a6268e6254ef0d710768cef41f60e12a461cd56ec9b24039e0c49069d82b66e8b203128790bbf97db29742afd80dce7eb0cb5d20b8f568aa9f785afbeb88abcaf646466b85b9917d9f2d02088513adf149e9a97cd00e566427dc392e28dd84e7c34e07a29d3f27563aa2ce88e18ce2cc00b9443fe27b1fac2ec3cbd761ee44ca204f9be1b2941ab85a495e677c732d676c5ef4f866ded9628caf33cff3195644e2a104c8eb1d441d43fb2eb34a621f085cf0052b7c1c92d899dc77013d644028f676cad8836d09adb45938b91ce16ff9c37a04b7d8dadd34eb8ad901da0610ea68e7db0aeabf150adbf5a5c410770bae2fd4700d0211aef7e8b22a4794d0cfabbd165359903b0fab7e058da351c40595e2141ac9c5258ac42ef744d0fdd7a54908c747ce2092583d0b1600a2e743176ac0cdb6850dd57db64a7812c95d5d507fbed93289bf2dfaa3f03ff0b564e7bf9e9fb05d1d4fbbf62fd7cb9a1ccbe06c897cab8ba02b55f62971c762600406c843267678c536beff1fe043b8bdc627e5fd1de4f4c0389ef6b4c88d0a955f9e2e740c170aac567face5335662384959251eea450c108d572d87cb8ace4993c0fae65af9b2a2cfdb7ec8592a81061c0dc001d135f214109f25741fe9a08855420eb78b07f07e044542ec343a952ee1052f4532fa2ff0e96214ad1c67aa3fd78bdd7a1027509c290633a2c959f2c4847cf252a8ec20b22a4e978602ccc77a468c24ef86808ddced91705cfbd744950dc57080244aa9d3f9160b913496f85946752e54ab9cb1981389722a8db0bc020dd501d60555b93f03819fc802ed335465c224012ab9b1cdd3109d32c1d3709554db6dd5847de9632f76e4717dbdf104f3fe99902b76b3421917a9bfa8bfad717c01f8e727c28ab2a11a55d7150775d5cea36010723344d9fbd262a30e745e7d06f4885276f5f2df6b2d895cc808f6c2a0300420dbfd614abdae89ef87dd9544cdddf87acd792be7c3af852609f73a0a9a962aaca2cf718d7b4b19290c21589cf94aa7488214b214bacba4206f10dcc39d56b92230ad34b59dea0e08e5b65af6f3e6caf1fd1ec9060c279e88d61e3497e9171b6e8778ee8b62a2f575e17e1aa3bdfe2e9525a9a74784bf63738a78c3c170f4301ee332148f3b9dcee38cda3fbebd449ca8bbb981fecfe29ff99d1d065f15623da05f1070fde33ed26ad3d783a672a3a81697bc35681cc1d954b65d0e45a484189689c1392a0c0585fdb097da01ed46066b4509c8bbb8c8785f216e84c1eb0e002f186a86f772437cea4bf6bc4e106072ffb630b20b679f5495e094e6f08931496856eec98ceff48699ac1e24853ea5c07736114007bae9e89275a97c45426b250a51e701664878114a00bbe0d3135653b52a3bcd90c0c6139b22017439684e651c521fb4b7fe01fd75401c32af481d57063441ade52a04e7e28bf692f7982aae151fb37644e911005699d626e07b89750e2ba04b3b0c789200dbaa298ad0c4c69c527e05ea33e97b35d097982b8ece52f1577a78fe5e9710013a753c4eed0afd127c636fa783e5f47df99dbf17f118c56009f92c38a738b8160330042c2eda5631d2bb4d4602e706a70b2a7146b96f81a7bd67845f3dd7cf1e64faa307333d42605f42390a6580635c5042f43690016830018546b71b4ed47f1de1e95f0b11c1c85545bd9055f09164b90e82917079111bfaa2c32d4c1ff894421dee79668812f8e04c49f2e8e4aec3c5534f4dd8c699a305de4b76dd7d4bfe65f871889132c3b3ca702c931e012cdd128e6e55cdd479e2cb163786c376aed12890677af0bb55c557a14d30768831dc43e3616f0d920f476e2a87a9e7a6e9cc11f05c11fa6866528bd828e196e7950a3e21cb11db148f971393c13a74edc891b4092642640075a6fa1eaf51fd7541b1de76cad545135cc5c120ef598b96404dfb381b85e6e4bc496e58031ae96fb8c57820ea0db20bdf13c4a926f83748894c1c2c3d3ecee32954becf3ab8a00b76da31884079de4cb32b1fa7439c1f6ae0b210babcce4be067b5ea7f1976a907cfadcb2c382bc4d6d372d37022cba998d7fd28833f95b0dbd3489628d6989d697feb788850523387a9186550557d0d5a7b56ce15c2419742296c707b6408b251741cbb22d7c2da7116c69aad90aca810726890f3af6bbcae96366a7ccec0cef2b2c0828457e13f3074295e9d4cf42192b64b04bb0e49bf0ca38432167f386aa9a54cefbbf1a197f39ad5820465e49e23681e29218eb6ce5e1bf85bc89476ba8c1310b2b96e791df8725032cd47fbb600cef395815fdc71afcbcc97f0b470a878f32dac8a2cca6174181e73d5abf090c59786428bac400a102939a3e7527c5de5e343a68c1a6e32e3aa8414cb42b5a1888737cebc1a0c38038934fa5c0ffaa1a9ee6522905a95b02c3ecb1974343194bda48950791c51b8377b45154fc09fa8be826f7e77b4f67c2b9130db1bc75395d2debcdf58c59ef0772742c345c9f49d53d6f73e652b92f0101f956afd993264fa747076126c30a424370f9a00b4e98f2eb208be8de1512474e5dffa3eee3eb9772c77b2cd8c95f83d19e1696fd696f9cbf3301a62d4fb82c0043d737f3e3388582750e51fd4870c4dd407eb397c5729c54b3fe405cadc3f8f24990818c54d67d51b02744e300755badd1f9f5fdfda9be9bc2fba5df1d3061e308550c6fba5510ced04a6d082ba8cee2279b9b68d97353c09f6fc8fc243ac2598522deb5bbc439e6bf8cde2d0bfd2e0849a9f38d418b8c05e881bbc11fab34667c25b35c4f7647cd5a206260ff7ba743adab27e3f21e376d5bf51ef69a124b15806f6bece1d76906a8c7086edcb58c59fa242a7fcdb4f21a37c96d70726135fd729c293bfce88f0f945bf65bc24bf6878f4068cf57e06a5bbb9d48c1c2f17f60526c01e33b2e91794e515db537e48e26dd41bf57ce79c56f53b02351edfd2e73706d9960ea31cfcbaface69b8b90458e4c22b309342eb360915de4dc120a4d966b064cd3c64e9a427dabc4c01cdf297656a7f2ba919fec0b0c77472a3c81148ad77cd4c0fcdf8ece693de4f6c75840c0becf1ffdd817c088169bb125e43480c7dd413b98acd6edac9e9a65e7de789441604e46a83d4463c5e83f273420a00f75d6092a23247eb63beaa4b8a2a5973246f8c6f44cfb2cb9e7be960a3b75cd58844eaa4884e1222f8b03d7d5aeddfbb1091a2a62f5b008b49d638cd29cb44f9b91f78f8b6807310d6299fb9efbc6c004932b6c2cb707992d19bf89b799710a66dea6ea26d6467b319dfeaa2022e98ef5df034d8c4879059a231fef08b1cc80ffd55f1188e082cf6bc627411f640c964e173326607e61638e635e9b0bcb802741bd69b8d57622900375ae603ebc7d54ab8cf3647772216132154cb1019658738f5182aa5123166a0f1b8513e60d2847bfc2ce96e89d70acbf0fe171eb8d3677c4e78ae02cb0ae19064b9c5d9836e8364df5cdd19892dfdaaabc095347d6f23c59d2cc2f36257533be7d861b08aabaae734f310608a121a93c3d3dcc844a007e6df1d1646d7cf933e1c823b0d46722cdec98b3dbc9dd1c28964be2371edf805c694cf4e2b12b55b522b9d26c5ec1b1b2bf0ca01e5f6893800d360865152b7ec280e92bdf5c6e1eca1f2a3d77fe31a3728b319009669b78148ceb4f4977ee19bf9cbd4868e13e7dbea275a37fdb3dbc096c508817a5e3d5c19e94a4dc208c3eb9bcb564d9045c0406b67d15d1fbd9a6ded50a6836ab0ece1a357d0985cf96860c95cfd2c7c07ae255bc9fd7afeeabdc16a097152797f28d26117b639f73733d8d50b7abe52c6b71433286fef0259ace94d6ea17ba7988d0739fc48327357ea5644fef9f194dc941c33047b6d4cbc0a7ecaced7a729ff6d1b6da8f60ed5687af93c407acc8ac4f6bf0ddb43</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 阅读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220711</title>
      <link href="/2022/07/112022%20%E5%BD%92%E6%A1%A3/Diary/2022/220711/651de0df/"/>
      <url>/2022/07/112022%20%E5%BD%92%E6%A1%A3/Diary/2022/220711/651de0df/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="bdf951e6aa800debc618663d2fe43f05c2afd74dd7d91f3faea8ad2bbae05163"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex响应式布局</title>
      <link href="/2022/07/072022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_CSS_Flex%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/976189ad/"/>
      <url>/2022/07/072022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_CSS_Flex%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/976189ad/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h1><blockquote><p>flex 是 flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。</p></blockquote><p>注意：当我们<strong>为父盒子设为flex布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</strong></p><p>布局原理：</p><p>采用Flex布局的元素，称为Flex容器（flex container),简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flexitem),简称“项目”。（<strong>就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</strong>）</p><h1 id="flex布局父项常见属性"><a href="#flex布局父项常见属性" class="headerlink" title="flex布局父项常见属性"></a>flex布局父项常见属性</h1><div class="table-container"><table><thead><tr><th>父项属性</th><th>Description</th></tr></thead><tbody><tr><td>flex-direction</td><td>设置主轴的方向</td></tr><tr><td>justify-content</td><td>设置主轴上的子元素排列方式</td></tr><tr><td>flex-wrap</td><td>设置子元素是否换行</td></tr><tr><td>align-items</td><td>设置侧轴上的子元素排列方式（单行）</td></tr><tr><td>align-content</td><td>设置侧轴上的子元素的排列方式（多行）</td></tr><tr><td>flex-flow</td><td>复合属性，相当于同时设置了 flex-direction 和 flex-wrap</td></tr></tbody></table></div><p>主轴与侧轴的概念：（在flex布局中，是分为主轴和侧轴两个方向。（同样的叫法有：行和列、x轴和y轴））</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220707223821.png" alt="20220707223821"></p><p><strong>flex-direction</strong> 设置<strong>主轴</strong>的方向 </p><blockquote><p>注意：主轴和侧轴是会变化的，就看flex-direction设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的。</p></blockquote><div class="table-container"><table><thead><tr><th>flex-direction 属性值</th><th>Description</th></tr></thead><tbody><tr><td>row</td><td>从左到右(默认值)</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table></div><p><strong>justify-content</strong> 设置<strong>主轴上的子元素</strong>排列方式（<strong>先确定好主轴</strong>）</p><div class="table-container"><table><thead><tr><th>justify-content 属性值</th><th>Description</th></tr></thead><tbody><tr><td>flex-start</td><td>从头部开始排列(默认值)</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（如果主轴是x轴则水平居中）</td></tr><tr><td>space-evenly</td><td>均匀排列每个元素，元素之间的间隔相等</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边再平分剩余空间（重要）</td></tr></tbody></table></div><p><strong>flex-wrap</strong> 设置<strong>子元素是否换行</strong> </p><blockquote><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，<strong>flex布局中默认是不换行的。</strong></p></blockquote><div class="table-container"><table><thead><tr><th>flex-wrap 属性值</th><th>Description</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行（默认值）</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table></div><p><strong>align-items</strong> 设置<strong>侧轴</strong>上的子元素排列方式（<strong>单行</strong>）</p><div class="table-container"><table><thead><tr><th>align-items 属性值</th><th>Description</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下（默认值）</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stretch</td><td>拉伸</td></tr></tbody></table></div><p><strong>align-content</strong> 设置<strong>侧轴</strong>上的子元素的排列方式（<strong>多行</strong>）</p><div class="table-container"><table><thead><tr><th>align-content 属性值</th><th>Description</th></tr></thead><tbody><tr><td>flex-start</td><td>在侧轴的头部开始排列（默认值）</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先分布在两头，再平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr></tbody></table></div><p>总结：单行找 align-items 多行找 align-content</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220707233102.png" alt="20220707233102"></p><p><strong>flex-flow</strong> 属性是 flex-direction 和 flex-wrap 属性的复合属性</p><h1 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h1><div class="table-container"><table><thead><tr><th>子项属性</th><th>Description</th></tr></thead><tbody><tr><td>flex</td><td>子项目占的份数</td></tr><tr><td>align-self</td><td>控制子项自己在侧轴的排列方式</td></tr><tr><td>order</td><td>定义子项的排列顺序（前后顺序）</td></tr></tbody></table></div><p><strong>flex</strong> 定义子项目占的份数</p><blockquote><p>flex属性定义子项目分配<strong>剩余空间</strong>，用flex来表示占多少份数。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>:&lt;number&gt;; <span class="comment">/* default 0*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>align-self</strong> 控制子项自己在侧轴的排列方式</p><blockquote><p>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items属性。默认值为auto,表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">/*设置自己在侧轴上的排列方式*/</span></span><br><span class="line">    <span class="attribute">align-self</span>:flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>order</strong> 定义子项的排列顺序（前后顺序。【和 z-index 不一样，z-index 是上下顺序】） </p><p>数值越小，排列越靠前，默认为0。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式 </tag>
            
            <tag> css(3) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bug记录及解决</title>
      <link href="/2022/07/072022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_Bug%E8%AE%B0%E5%BD%95%E5%8F%8A%E8%A7%A3%E5%86%B3/10d28195/"/>
      <url>/2022/07/072022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_Bug%E8%AE%B0%E5%BD%95%E5%8F%8A%E8%A7%A3%E5%86%B3/10d28195/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-amp-Github"><a href="#Git-amp-Github" class="headerlink" title="Git &amp; Github"></a>Git &amp; Github</h1><h2 id="Failed-to-connect-to-github-com-port-443-connection-timed-out"><a href="#Failed-to-connect-to-github-com-port-443-connection-timed-out" class="headerlink" title="Failed to connect to github.com port 443:connection timed out"></a>Failed to connect to github.com port 443:connection timed out</h2><p>解决方案：</p><p>终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">$ git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h2 id="OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="OpenSSL SSL_read: Connection was reset, errno 10054"></a>OpenSSL SSL_read: Connection was reset, errno 10054</h2><p>解决方案：</p><p>终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global http.sslVerify <span class="string">&quot;false&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="电脑应用设置开机自启不生效"><a href="#电脑应用设置开机自启不生效" class="headerlink" title="电脑应用设置开机自启不生效"></a>电脑应用设置开机自启不生效</h2><p>设置开机自启：<code>Windows + r</code> —&gt; 输入：<code>shell:startup</code> 将需要开机自启的应用（<code>.exe</code>）文件的快捷方式放到此目录下</p><p>开机自启不生效：检查目标应用的安装路径的上一级目录是否是：<code>Program Files</code> 文件夹</p><h2 id="卸载-Microsoft-Edge-WebView2-Runtime后无法重新安装"><a href="#卸载-Microsoft-Edge-WebView2-Runtime后无法重新安装" class="headerlink" title="卸载 Microsoft Edge WebView2 Runtime后无法重新安装"></a>卸载 Microsoft Edge WebView2 Runtime后无法重新安装</h2><ol><li>先关闭此选项：<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20231009122359.png" alt="关闭此选项"></li><li>删除注册表<br>64位：<br>HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}<br>HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}<br>32位：<br>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\EdgeUpdate\Clients{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}<br>HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}</li><li>重新安装 Microsoft Edge WebView2 Runtime</li></ol><h2 id="Win11启动程序卡顿，打开软件慢"><a href="#Win11启动程序卡顿，打开软件慢" class="headerlink" title="Win11启动程序卡顿，打开软件慢"></a>Win11启动程序卡顿，打开软件慢</h2><blockquote><p>造成这种情况的主要原因是因为Win11自动打开了应用以及浏览器的控制，对所有不熟悉的软件都会有一定的警惕性，所以每次打开都会进行检测，然后再打开就没有任何问题了。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20231009122359.png" alt="关闭此选项"></p><h2 id="电脑开机蓝屏-a-problem-has-been-detected…"><a href="#电脑开机蓝屏-a-problem-has-been-detected…" class="headerlink" title="电脑开机蓝屏:a problem has been detected…"></a>电脑开机蓝屏:a problem has been detected…</h2><blockquote><p>a problem has been detected and windows has been shut down to prevento your computer</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/80bcf32d71928cfd8f991b1e074555f.jpg" alt="80bcf32d71928cfd8f991b1e074555f"></p><p>解决方案：在bios里面把硬盘模式改一下</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20231030090854.png" alt="20231030090854"></p><h2 id="移动硬盘无法复制进去东西，提示错误0x80071AC3-无法完成操作"><a href="#移动硬盘无法复制进去东西，提示错误0x80071AC3-无法完成操作" class="headerlink" title="移动硬盘无法复制进去东西，提示错误0x80071AC3 无法完成操作"></a>移动硬盘无法复制进去东西，提示错误0x80071AC3 无法完成操作</h2><ol><li>确认好U盘在电脑上显示的盘符：如<code>G</code></li><li>在CMD中运行：<code>chkdsk G:/f</code> 即可</li></ol><h2 id="外接显示器不兼容"><a href="#外接显示器不兼容" class="headerlink" title="外接显示器不兼容"></a>外接显示器不兼容</h2><p>问题描述：</p><p>用我的 AMD 处理器的笔记本通过 HDMI 连接 redmin 2k 显示器用一段时间出现屏幕花屏的现象，感觉是驱动出问题了，下载了一个驱动，问题已解决。</p><p>下载地址：<a href="https://www.amd.com/en/support">https://www.amd.com/en/support</a></p><p>安装完成花屏问题已解决</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220730163640.png" alt="20220730163640"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端布局</title>
      <link href="/2022/07/072022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_CSS_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/ea92cade/"/>
      <url>/2022/07/072022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_CSS_%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/ea92cade/</url>
      
        <content type="html"><![CDATA[<h1 id="移动端基础"><a href="#移动端基础" class="headerlink" title="移动端基础"></a>移动端基础</h1><h2 id="常见移动端屏幕尺寸"><a href="#常见移动端屏幕尺寸" class="headerlink" title="常见移动端屏幕尺寸"></a>常见移动端屏幕尺寸</h2><blockquote><p>数据来源：<a href="https://material.io/devices/">https://material.io/devices/</a> 注：作为前端开发，不建议大家去纠结 dp, dpi, pt, ppi等单位。</p></blockquote><div class="table-container"><table><thead><tr><th>设备</th><th>尺寸（英寸）</th><th>开发尺寸（px)</th><th>物理像素比（dpr)</th></tr></thead><tbody><tr><td>iphone6</td><td>4.7</td><td>375*667</td><td>2.0</td></tr><tr><td>Nexus 4</td><td>4.7</td><td>384*640</td><td>2.0</td></tr><tr><td>Nexus 5x</td><td>5.2</td><td>411*731</td><td>2.6</td></tr><tr><td>iphone6 Plus</td><td>5.5</td><td>414*736</td><td>3.0</td></tr><tr><td>Samsung Galaxy Note 4</td><td>5.7</td><td>480*853</td><td>3.0</td></tr><tr><td>Sony Xperia Z Ultra</td><td>6.4</td><td>540*960</td><td>2.0</td></tr><tr><td>Nexus7(12)</td><td>7.0</td><td>600*960</td><td>1.3</td></tr><tr><td>iPad Mini</td><td>7.9</td><td>768*1024</td><td>1.0</td></tr></tbody></table></div><h2 id="移动端调试"><a href="#移动端调试" class="headerlink" title="移动端调试"></a>移动端调试</h2><ul><li>Chrome DevTools(谷歌浏览器）的模拟手机调试</li><li>搭建本地web服务器，手机和服务器一个局域网内，通过手机访问服务器</li><li>使用外网服务器，直接IP或域名访问</li></ul><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><blockquote><p>视口（viewport) 就是浏览器显示页面内容的屏幕区域，视口可以分为<strong>布局视口、视觉视口和理想视口</strong>。</p></blockquote><ul><li><p>布局视口 layout viewport<br>一般移动设备的浏览器都默认设置了一个布局视口，用于解决早期的PC端页面在手机上显示的问题。<br>iOS,Android 基本都将这个视口分辨率设置为 980px,所以PC上的网页大多都能在手机上呈现，只不过元素看上去很小，一般默认可以通过手动缩放网页。</p></li><li><p>视觉视口 visual viewport<br>用户正在看到的网站的区域。注意：是网站的区域。<br>可以通过缩放去操作视觉视口，但不会影响布局视口，布局视口仍保持原来的宽度。</p></li><li><p><strong>理想视口 ideal viewport</strong><br>为了<strong>使网站在移动端</strong>有最理想的浏览和阅读宽度而设定<br>需要手动添写 <strong>meta视口标签</strong>通知浏览器操作<br>meta 视口标签的主要目的：布局视口的宽度应该与理想视口的宽度一致，<strong>简单理解就是设备有多宽，我们布局的视口就多宽</strong></p></li></ul><h3 id="meta-视口标签"><a href="#meta-视口标签" class="headerlink" title="meta 视口标签"></a>meta 视口标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; <span class="attribute">content</span>=&quot;<span class="attribute">width</span>=device-<span class="attribute">width</span>, user-scalable=no, initial-scale=<span class="number">1.0</span>, maximum-scale=<span class="number">1.0</span>,minimum-scale=<span class="number">1.0</span>&quot;&gt;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>content 属性</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td>宽度设置的是viewport宽度，可以设置device-width特殊值</td></tr><tr><td>initial-scale</td><td>初始缩放比，大于0的数字</td></tr><tr><td>maximum-scale</td><td>最大缩放比，大于0的数字</td></tr><tr><td>minimum-scale</td><td>最小缩放比，大于0的数字</td></tr><tr><td>user-scalable</td><td>用户是否可以缩放，yes或no (1或0)</td></tr></tbody></table></div><h3 id="标准的viewport设置"><a href="#标准的viewport设置" class="headerlink" title="标准的viewport设置"></a>标准的viewport设置</h3><ul><li>视口宽度和设备保持一致</li><li>视口的默认缩放比例1.0</li><li>不允许用户自行缩放</li><li>最大允许的缩放比例1.0</li><li>最小允许的缩放比例1.0</li></ul><h2 id="二倍图"><a href="#二倍图" class="headerlink" title="二倍图"></a>二倍图</h2><h3 id="物理像素-amp-物理像素比"><a href="#物理像素-amp-物理像素比" class="headerlink" title="物理像素 &amp; 物理像素比"></a>物理像素 &amp; 物理像素比</h3><p>物理像素：指的是屏幕显示的最小颗粒，是物理真实存在的。这是厂商在出厂时就设置好了。(比如苹果6\7\8是750*1334)</p><p>开发时候：<strong>1px不一定等于1个物理像素</strong>（PC 端 1px 等于1个物理像素，但是移动端就不尽相同。[ Retina(视网膜屏幕）是一种显示技术，可以将把更多的物理像素点压缩至一块屏幕里，从而达到更高的分辨率，并提高屏幕显示的细腻程度。]）</p><p>物理像素比：一个 px 的能显示的物理像素点的个数，称为物理像素比或屏幕像素比。</p><h3 id="多倍图"><a href="#多倍图" class="headerlink" title="多倍图"></a>多倍图</h3><blockquote><p>对于一张50px<em>50px的图片，在手机<code>Retina屏</code>中打开，按照刚才的物理像素比会放大倍数，这样会<em>*造成图片模糊</em></em></p></blockquote><p>解决方案：</p><blockquote><p>原理：使用大二倍的图片，然后手动将尺寸调小一半，在手机中即使物理像素比会放大倍数，也不会造成图片模糊问题。</p></blockquote><ul><li>在标准的viewport设置中，使用<strong>倍图</strong>来提高图片质量，<strong>解决在高清设备中的模糊问题</strong></li><li>通常使用<strong>二倍图</strong>。（但是现在还存在3倍图4倍图的情况，这个看实际开发公司需求）</li><li>背景图片注意缩放问题</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*在iphone8下面*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="comment">/*原始图片100*100px*/</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="comment">/*原始图片100*100px*/</span></span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="background-size-背景缩放"><a href="#background-size-背景缩放" class="headerlink" title="background-size 背景缩放"></a>background-size 背景缩放</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">单位：长度|百分比|cover|contain;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cover：把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</span></span><br><span class="line"><span class="comment">contain：把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">background-size</span>: 背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><h3 id="cutterman-多倍图切图"><a href="#cutterman-多倍图切图" class="headerlink" title="cutterman 多倍图切图"></a>cutterman 多倍图切图</h3><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220707152320.png" alt="20220707152320"></p><ul><li>@1 X1倍图原图</li><li>@2 X2倍图</li><li>@3 X3倍图</li></ul><h3 id="二倍精灵图"><a href="#二倍精灵图" class="headerlink" title="二倍精灵图"></a>二倍精灵图</h3><ul><li>在 FW或 PS中把精灵图等比例缩放为<strong>原来的一半</strong>，然后根据大小<strong>测量缩放后的坐标</strong></li><li>注意代码里面 background-size ：精灵图<strong>原来宽度的一半</strong></li></ul><h2 id="移动端技术解决方案"><a href="#移动端技术解决方案" class="headerlink" title="移动端技术解决方案"></a>移动端技术解决方案</h2><h3 id="移动端浏览器"><a href="#移动端浏览器" class="headerlink" title="移动端浏览器"></a>移动端浏览器</h3><blockquote><p>移动端浏览器基本以webkit内核为主，因此我们就<strong>考虑 webkit 兼容性问题</strong>。可以放心使用H5标签和CSS3样式。浏跨器的<strong>私有前缀我们只需要考虑添加 webkit 即可</strong>。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220707153417.png" alt="20220707153417"></p><h3 id="CSS初始化-normalize-css"><a href="#CSS初始化-normalize-css" class="headerlink" title="CSS初始化 normalize.css"></a>CSS初始化 normalize.css</h3><blockquote><p>移动端CSS初始化推荐使用 <code>normalize.css</code>  官方地址：<a href="https://necolas.github.io/normalize.css/">https://necolas.github.io/normalize.css/</a></p></blockquote><ul><li>Normalize.css: 保护了有价值的默认值</li><li>Normalize.css: 修复了浏览器的bug</li><li>Normalize.css: 是模块化的</li><li>Normalize.css: 拥有详细的文档</li></ul><h3 id="特殊样式"><a href="#特殊样式" class="headerlink" title="特殊样式"></a>特殊样式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*CSS3盒子模型*/</span></span><br><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">-webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*点击高亮我们需要清除清除设置为 transparent 完成透明*/</span></span><br><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*在移动端浏览器默认的外观，在 ios上加上这个属性才能给按钮和输入框自定义样式*/</span></span><br><span class="line">-webkit-appearance: none;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*禁用长按页面时的弹出菜单*/</span></span><br><span class="line"><span class="selector-tag">img</span>,</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    -webkit-touch-callout: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="移动端技术选型"><a href="#移动端技术选型" class="headerlink" title="移动端技术选型"></a>移动端技术选型</h1><p>建议：选取一种主要技术选型，其他技术做为辅助，这种混合技术开发。</p><h2 id="方案一：单独制作移动端页面（主流）"><a href="#方案一：单独制作移动端页面（主流）" class="headerlink" title="方案一：单独制作移动端页面（主流）"></a>方案一：单独制作移动端页面（主流）</h2><blockquote><p>通常情况下，网址域名前面加 <code>m(mobile)</code> 可以打开移动端。通过<strong>判断设备</strong>，如果是移动设备打开，则跳到移动端页面。</p></blockquote><ol><li>流式布局（百分比布局）</li><li>flex 弹性布局（强烈推荐）</li><li>less + rem + 媒体查询布局</li><li>混合布局</li></ol><h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><blockquote><p>流式布局，就是百分比布局。通过<strong>盒子的宽度设置成百分比</strong>来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。流式布局方式是移动web开发使用的比较常见的布局方式。</p></blockquote><p>max-width 最大宽度（max-height最大高度）<br>min-width 最小宽度（min-height 最小高度）</p><h3 id="flex-弹性布局（推荐）"><a href="#flex-弹性布局（推荐）" class="headerlink" title="flex 弹性布局（推荐）"></a>flex 弹性布局（推荐）</h3><div class="tag link"><a class="link-card" title="Flex响应式布局" href="http://haloboys.github.io/2022/07/072207/Flex%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/976189ad/"><div class="left"><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/flex.png"/></div><div class="right"><p class="text">Flex响应式布局</p><p class="url">http://haloboys.github.io/2022/07/072207/Flex%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80/976189ad/</p></div></a></div><blockquote><p>flex 是 flexible Box的缩写，意为“弹性布局”，用来为盒状模型提供最大的灵活性，任何一个容器都可以指定为flex布局。</p></blockquote><p>注意：当我们<strong>为父盒子设为flex布局以后，子元素的 float、clear 和 vertical-align 属性将失效。</strong></p><p>布局原理：</p><p>采用Flex布局的元素，称为Flex容器（flex container),简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flexitem),简称“项目”。（<strong>就是通过给父盒子添加flex属性，来控制子盒子的位置和排列方式。</strong>）</p><h4 id="flex布局父项常见属性"><a href="#flex布局父项常见属性" class="headerlink" title="flex布局父项常见属性"></a>flex布局父项常见属性</h4><div class="table-container"><table><thead><tr><th>父项属性</th><th>Description</th></tr></thead><tbody><tr><td>flex-direction</td><td>设置主轴的方向</td></tr><tr><td>justify-content</td><td>设置主轴上的子元素排列方式</td></tr><tr><td>flex-wrap</td><td>设置子元素是否换行</td></tr><tr><td>align-items</td><td>设置侧轴上的子元素排列方式（单行）</td></tr><tr><td>align-content</td><td>设置侧轴上的子元素的排列方式（多行）</td></tr><tr><td>flex-flow</td><td>复合属性，相当于同时设置了 flex-direction 和 flex-wrap</td></tr></tbody></table></div><p>主轴与侧轴的概念：（在flex布局中，是分为主轴和侧轴两个方向。（同样的叫法有：行和列、x轴和y轴））</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220707223821.png" alt="20220707223821"></p><p><strong>flex-direction</strong> 设置<strong>主轴</strong>的方向 </p><blockquote><p>注意：主轴和侧轴是会变化的，就看flex-direction设置谁为主轴，剩下的就是侧轴。而我们的子元素是跟着主轴来排列的。</p></blockquote><div class="table-container"><table><thead><tr><th>flex-direction 属性值</th><th>Description</th></tr></thead><tbody><tr><td>row</td><td>从左到右(默认值)</td></tr><tr><td>row-reverse</td><td>从右到左</td></tr><tr><td>column</td><td>从上到下</td></tr><tr><td>column-reverse</td><td>从下到上</td></tr></tbody></table></div><p><strong>justify-content</strong> 设置<strong>主轴上的子元素</strong>排列方式（<strong>先确定好主轴</strong>）</p><div class="table-container"><table><thead><tr><th>justify-content 属性值</th><th>Description</th></tr></thead><tbody><tr><td>flex-start</td><td>从头部开始排列(默认值)</td></tr><tr><td>flex-end</td><td>从尾部开始排列</td></tr><tr><td>center</td><td>在主轴居中对齐（如果主轴是x轴则水平居中）</td></tr><tr><td>space-evenly</td><td>均匀排列每个元素，元素之间的间隔相等</td></tr><tr><td>space-around</td><td>平分剩余空间</td></tr><tr><td>space-between</td><td>先两边贴边再平分剩余空间（重要）</td></tr></tbody></table></div><p><strong>flex-wrap</strong> 设置<strong>子元素是否换行</strong> </p><blockquote><p>默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，<strong>flex布局中默认是不换行的。</strong></p></blockquote><div class="table-container"><table><thead><tr><th>flex-wrap 属性值</th><th>Description</th></tr></thead><tbody><tr><td>nowrap</td><td>不换行（默认值）</td></tr><tr><td>wrap</td><td>换行</td></tr></tbody></table></div><p><strong>align-items</strong> 设置<strong>侧轴</strong>上的子元素排列方式（<strong>单行</strong>）</p><div class="table-container"><table><thead><tr><th>align-items 属性值</th><th>Description</th></tr></thead><tbody><tr><td>flex-start</td><td>从上到下（默认值）</td></tr><tr><td>flex-end</td><td>从下到上</td></tr><tr><td>center</td><td>挤在一起居中（垂直居中）</td></tr><tr><td>stretch</td><td>拉伸</td></tr></tbody></table></div><p><strong>align-content</strong> 设置<strong>侧轴</strong>上的子元素的排列方式（<strong>多行</strong>）</p><div class="table-container"><table><thead><tr><th>align-content 属性值</th><th>Description</th></tr></thead><tbody><tr><td>flex-start</td><td>在侧轴的头部开始排列（默认值）</td></tr><tr><td>flex-end</td><td>在侧轴的尾部开始排列</td></tr><tr><td>center</td><td>在侧轴中间显示</td></tr><tr><td>space-around</td><td>子项在侧轴平分剩余空间</td></tr><tr><td>space-between</td><td>子项在侧轴先分布在两头，再平分剩余空间</td></tr><tr><td>stretch</td><td>设置子项元素高度平分父元素高度</td></tr></tbody></table></div><p><strong>总结：单行找 align-items 多行找 align-content</strong></p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220707233102.png" alt="20220707233102"></p><p><strong>flex-flow</strong> 属性是 flex-direction 和 flex-wrap 属性的复合属性</p><h4 id="flex布局子项常见属性"><a href="#flex布局子项常见属性" class="headerlink" title="flex布局子项常见属性"></a>flex布局子项常见属性</h4><div class="table-container"><table><thead><tr><th>子项属性</th><th>Description</th></tr></thead><tbody><tr><td>flex</td><td>子项目占的份数</td></tr><tr><td>align-self</td><td>控制子项自己在侧轴的排列方式</td></tr><tr><td>order</td><td>定义子项的排列顺序（前后顺序）</td></tr></tbody></table></div><p><strong>flex</strong> 定义子项目占的份数</p><blockquote><p>flex属性定义子项目分配<strong>剩余空间</strong>，用flex来表示占多少份数。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">flex</span>:&lt;number&gt;; <span class="comment">/* default 0*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>align-self</strong> 控制子项自己在<strong>侧轴</strong>的排列方式</p><blockquote><p>align-self属性允许<strong>单个项目</strong>有与其他项目不一样的对齐方式，<strong>可覆盖 align-items属性</strong>。默认值为auto,表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">/*设置自己在侧轴上的排列方式*/</span></span><br><span class="line">    <span class="attribute">align-self</span>:flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>order</strong> 定义子项的排列顺序（前后顺序。【和 z-index 不一样，z-index 是上下顺序】） </p><p>数值越小，排列越靠前，默认为0。</p><h3 id="less-rem-媒体查询布局-（推荐）"><a href="#less-rem-媒体查询布局-（推荐）" class="headerlink" title="less + rem + 媒体查询布局 （推荐）"></a>less + rem + 媒体查询布局 （推荐）</h3><p>rem 适配方案：</p><ol><li>页面布局文字能否随着屏幕大小变化而变化？</li><li>流式布局和flex布局主要针对于宽度布局，那高度如何设置？</li><li>怎么样让屏幕发生变化的时候元素高度和宽度等比例缩放？</li></ol><h4 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h4><blockquote><p>rem 的优点就是可以通过修改 html 里面的文字大小来改变页面中元素的大小</p></blockquote><p>rem(root em)是一个相对单位，类似于em（em 是父元素字体大小）<strong>rem 的基准是相对于 html 元素的字体大小。</strong>(比如，根元素 html 设置 font-size=12px;非根元素设置width:2rem;则换成px表示就是24px。)</p><p>市场比较常见配置：</p><ol><li>需要不断修改 html 文字大小</li><li>需要媒体查询  </li><li>需要 flexible.js</li></ol><h4 id="媒体查询-CSS3"><a href="#媒体查询-CSS3" class="headerlink" title="媒体查询 CSS3"></a>媒体查询 CSS3</h4><blockquote><p>媒体查询我们要按照从小到大或者从大到小的顺序来写，<strong>建议从小到大来写，这样代码更简洁。</strong></p></blockquote><p>层叠性：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220725000656.png" alt="20220725000656"></p><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">用@media开头注意@符号</span></span><br><span class="line"><span class="comment">mediatype 媒体类型</span></span><br><span class="line"><span class="comment">关键字andy not only</span></span><br><span class="line"><span class="comment">media feature 媒体特性必须有小括号包含 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> mediatype <span class="keyword">and</span> | <span class="keyword">not</span> | <span class="keyword">only</span> (media feature)&#123;</span><br><span class="line">    CSS-<span class="selector-tag">Code</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>mediatype 媒体类型</th><th>Description</th></tr></thead><tbody><tr><td>all</td><td>用于所有设备</td></tr><tr><td>print</td><td>用于打印机和打印预览</td></tr><tr><td><strong>screen</strong></td><td><strong>用于电脑屏幕，平板电脑，智能手机等</strong></td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>关键字</th><th>Description</th></tr></thead><tbody><tr><td>and</td><td>可以将多个媒体特性连接到一起，相当于“且”的意思。</td></tr><tr><td>not</td><td>排除某个媒体类型，相当于“非”的意思，可以省略。</td></tr><tr><td>only</td><td>指定某个特定的媒体类型，可以省略。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>媒体特性（小括号包含 ）</th><th>Description</th></tr></thead><tbody><tr><td>width</td><td>定义输出设备中页面可见区域的宽度</td></tr><tr><td>min-width</td><td>定义输出设备中页面最小可见区域宽度</td></tr><tr><td>max-width</td><td>定义输出设备中页面最大可见区域宽度</td></tr></tbody></table></div><p>案例：媒体查询+rem 实现元素动态变化</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">640px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">font-size</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">1rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: .<span class="number">5rem</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: darkcyan;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        Lorem ipsum dolor.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>媒体查询：引入资源</p><blockquote><p>可以<strong>针对于不同的屏幕尺寸 使用不同的stylesheets(样式表）</strong>。原理，就是直接在link中判断设备的尺寸，然后引用不同的css文件。</p></blockquote><p>语法规范：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel= &quot;stylesheet&quot; media=&quot;mediatype and|not|only (media feature)&quot; href= &quot;mystylesheet<span class="selector-class">.css</span>&quot;&gt;&lt;/link&gt;</span><br></pre></td></tr></table></figure><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><blockquote><p><a href="https://lesscss.org/">Less</a>(Leaner Style Sheets的缩写）是一门<strong>CSS预处理语言</strong>，它扩展了CSS的动态特性。作为CSS的一种形式的扩展，它并没有减少CSS的功能，而是在现有的CSS语法上，为CSS加入程序式语言的特性。它在CSS的语法基础之上，引入了<strong>变量，Mixin(混入）,运算以及函数等功能</strong>，大大简化了CSS的编写,并且降低了CSS的维护成本。(常见的CSS预处理器：Sass、Less、Stylus)</p></blockquote><p>less 基本使用：</p><ul><li>Less 变量</li><li>Less 编译</li><li>Less 嵌套</li><li>Less 运算</li></ul><ol><li>Less 变量（变量是指没有固定的值，可以改变的。）<br>语法：<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">变量命名规范：</span></span><br><span class="line"><span class="comment">1. 必须有 @为前缀</span></span><br><span class="line"><span class="comment">2. 不能包含特殊字符</span></span><br><span class="line"><span class="comment">3. 不能以数字开头</span></span><br><span class="line"><span class="comment">4. 大小写敏感</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">@变量名: 值;</span><br></pre></td></tr></table></figure></li><li>Less 编译（Easy LESS 插件）<br>本质上，Less包含一套自定义的语法及一个解析器，用户根据这些语法定义自己的样式规则，这些规则最终会通过解析器，编译生成对应的CSS文件。<br><code>Easy LESS</code> 插件用来把less文件编译为css文件。安装完毕插件，重新加载下vscode。<strong>只要保存一下Less文件，会自动生成CSS文件</strong>。</li><li>Less 嵌套<br>如需嵌套一般直接在父元素内部直接写子元素样式<br>如果遇见（<strong>交集 | 伪类 | 伪元素选择器</strong> 需要在前面加上 <code>&amp;</code> 符号）<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>Less 运算</strong><br>任何<strong>数字、颜色</strong>或者<strong>变量</strong>都可以参与运算。就是Less提供了加（+)、减（-)、乘（*)、除（/)算术运算。<br>注意事项：</li></ol><ul><li>乘号（*)和除号（/)的写法</li><li>运算符中间<strong>左右有个空格隔开</strong>（ 1px + 5 ）</li><li>对于两个不同的单位的值之间的运算，运算结果的值<strong>取第一个值的单位</strong></li><li>如果两个值之间<strong>只有一个值有单位，则运算结果就取该单位</strong></li></ul><h4 id="rem-的两种适配方案"><a href="#rem-的两种适配方案" class="headerlink" title="rem 的两种适配方案"></a>rem 的两种适配方案</h4><p><strong>方案1：less + rem + 媒体查询（不推荐）</strong></p><ol><li>设计稿宽度（基本以 750px 为准。）</li><li><strong>动态设置 html 标签 font-size 大小：</strong> 使用屏幕尺寸 除以 <strong>划分的份数</strong>得到了 html 里面的文字大小</li><li>元素大小取值方法：页面元素的 <strong>rem 值 = 页面元素值（px) / html font-size字体大小</strong></li></ol><p><strong>方案2：<a href="https://github.com/amfe/lib-flexible">flexible.js </a> + rem（推荐）</strong></p><p>适配原理：</p><ol><li>我们再也<strong>不需要在写不同屏幕的媒体查询</strong>，因为里面<strong>js做了处理</strong></li><li>它的原理是把当前设备<strong>划分为10等份</strong>，但是不同设备下，比例还是一致的。</li><li>我们要做的，就是确定好我们当前设备的 html 文字大小就可以了</li><li>比如当前设计稿是 750px,那么我们只需要把 html 文字大小设置为 75px(750px/10) 就可以</li><li>里面页面元素rem值：页面元素的 px值/75</li><li>剩余的，让 flexible.js 来算 </li></ol><h2 id="方案二：响应式开发"><a href="#方案二：响应式开发" class="headerlink" title="方案二：响应式开发"></a>方案二：响应式开发</h2><blockquote><p>通过<strong>判断屏幕宽度</strong>来改变样式，以适应不同终端。（制作麻烦，需要花很大精力去调兼容性问题）</p></blockquote><ul><li>媒体查询</li><li>bootstarp</li></ul><h3 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h3><blockquote><p>使用<strong>媒体查询</strong>针对不同宽度的设备进行布局和样式的设置，从而适配不同设备的目的。</p></blockquote><div class="table-container"><table><thead><tr><th>设备</th><th>尺寸区间</th></tr></thead><tbody><tr><td>超小屏幕（手机）</td><td>&lt; 768px</td></tr><tr><td>小屏设备（平板）</td><td>&gt;= 768px ~ &lt; 992px</td></tr><tr><td>中等屏幕（桌面显示器）</td><td>&gt;= 992px ~ &lt; 1200px</td></tr><tr><td>宽屏设备（大桌面显示器）</td><td>&gt;= 1200px</td></tr></tbody></table></div><h3 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h3><blockquote><p>响应式<strong>需要一个父级做为布局容器</strong>，来配合子级元素来实现变化效果。</p></blockquote><p>原理：在不同屏幕下，<strong>通过<code>媒体查询</code>来改变这个布局容器的大小，再改变里面子元素的排列方式和大小</strong>，从而实现<br>不同屏幕下，看到不同的页面布局和样式变化。</p><p>响应式布局容器尺寸划分（常用）：</p><div class="table-container"><table><thead><tr><th>设备</th><th>布局容器尺寸</th></tr></thead><tbody><tr><td>超小屏幕（手机，小于768px)</td><td>设置宽度为 100%</td></tr><tr><td>小屏幕（平板，大于等于768px)</td><td>设置宽度为 750px</td></tr><tr><td>中等屏幕（桌面显示器，大于等于992px)</td><td>宽度设置为 970px</td></tr><tr><td>大屏幕（大桌面显示器，大于等于1200px)</td><td>宽度设置为 1170px</td></tr></tbody></table></div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: slateblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 1. 超小屏幕下 小于 768 布局容器的宽度为 100% */</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 2. 小屏幕下 大于等于 768 布局容器改为 750px */</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">750px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: khaki;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 3. 中等屏幕下 大于等于 992px 布局容器修改为970px */</span></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">970px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) &#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">1170px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: slategrey;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Bootstrap-V3"><a href="#Bootstrap-V3" class="headerlink" title="Bootstrap V3"></a>Bootstrap V3</h3><blockquote><p>控制权在框架本身，使用者要按照框架所规定的某种规范进行开发。</p></blockquote><p>Bootstrap 使用四步曲：</p><ol><li>创建文件夹结构<ol><li>在项目根目录下新建 bootstrap 文件夹</li><li>将下载好的 Bootstrap 文件 拷贝到项目根目录下 bootstrap 文件夹中。</li></ol></li><li>创建html骨架结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--要求当前网页使用IE浏览器最高版本的内核来渲染--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--视口的设置：视口的宽度和设备一致，默认的缩放比例和PC端一致--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Bootstrap 101 Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Bootstrap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-HSMxcRTRxnN+Bdg0JdbxYKrThecOKuH5zCYotlSAcp1+c8xmyTe9GYg1l9a69psu&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- HTML5 shim 和 Respond.js 是为了让 IE8 支持 HTML5 元素和媒体查询（media queries）功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 警告：通过 file:// 协议（就是直接将 html 页面拖拽到浏览器中）访问页面时 Respond.js 不起作用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 兼容 IE 代码： --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--[if lt IE 9]&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.cn/npm/html5shiv@3.7.3/dist/html5shiv.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">      &lt;script src=&quot;https://cdn.jsdelivr.cn/npm/respond.js@1.4.2/dest/respond.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">    &lt;![endif]--&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.cn/npm/jquery@1.12.4/dist/jquery.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-nvAa0+6Qg9clwYCGGPpDQLVpLNn0fRaROjHqs13t4Ggj3Ez50XnGQqc/r8MhnRDZ&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span> <span class="attr">integrity</span>=<span class="string">&quot;sha384-aJ21OjlMXNL5UyIl/XNwTMqvzeRMZH2w8c5cRVpzpU8Y5bApTppSuUkhZXN0VxHd&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>引入相关样式文件<br>使用 link标签 引入项目根目录 bootstrap 文件夹中的样式文件</li><li>书写内容<ol><li>直接拿 Bootstrap 预先定义好的样式来使用。</li><li>修改 Bootstrap 原来的样式，<strong>注意权重问题</strong>。</li><li>学好 Bootstrap 的关键在于知道它定义了哪些样式，以及这些样式能实现什么样的效果。</li></ol></li></ol><h3 id="Bootstrap-布局容器"><a href="#Bootstrap-布局容器" class="headerlink" title="Bootstrap 布局容器"></a>Bootstrap 布局容器</h3><blockquote><p>Bootstrap 需要为页面内容和栅格系统包裹一个.container容器，<strong>Bootstarp 预先定义好了这个类</strong>，叫 <code>.container</code> 它提供了两个作此用处的类。</p></blockquote><h4 id="container-类"><a href="#container-类" class="headerlink" title="container 类"></a>container 类</h4><ul><li>响应式布局的容器固定宽度</li><li>大屏（&gt;=1200px)宽度定为1170px</li><li>中屏（&gt;=992px)宽度定为970px</li><li>小屏（&gt;=768px)宽度定为750px</li><li>超小屏（100%)</li></ul><h4 id="container-fluid-类"><a href="#container-fluid-类" class="headerlink" title="container-fluid 类"></a>container-fluid 类</h4><ul><li>流式布局容器百分百宽度</li><li>占据全部视口（viewport)的容器。</li><li>适合于单独做移动端开发</li></ul><h3 id="Bootstrap-栅格系统"><a href="#Bootstrap-栅格系统" class="headerlink" title="Bootstrap 栅格系统"></a>Bootstrap 栅格系统</h3><blockquote><p>栅格系统将页面布局(容器)划分为等宽的列，然后通过列数的定义来模块化页面布局。</p></blockquote><h4 id="栅格选项参数"><a href="#栅格选项参数" class="headerlink" title="栅格选项参数"></a>栅格选项参数</h4><div class="table-container"><table><thead><tr><th></th><th>超小屏幕（手机）&lt;768px</th><th>小屏设备（平板）&gt;=768px</th><th>中等屏幕（桌面显示器） &gt;=992px</th><th>宽屏设备（大桌面显示器）&gt;=1200px</th></tr></thead><tbody><tr><td>.container最大宽度</td><td>自动（100%)</td><td>750px</td><td>970px</td><td>1170px</td></tr><tr><td>类前缀</td><td>.col-xs-</td><td>.col-sm-</td><td>.col-md-</td><td>.col-lg-</td></tr><tr><td>列（column)数</td><td>12</td><td>12</td><td>12</td><td>12</td></tr></tbody></table></div><ul><li>行（row)必须放到container布局容器里面</li><li>列的平均划分需要给<strong>列添加类前缀</strong></li><li><strong>xs-extra small:超小；sm-small:小；md-medium:中等；lg-large:大；</strong></li><li>列（column)大于12,多余的“列（column)”所在的元素将被作为一个整体另起一行排列</li><li>每一列默认有左右15像素的padding</li><li><strong>可以同时为一列指定多个设备的类名，以便划分不同份数</strong>。例如：class=”col-md-4 col-sm-6”</li></ul><h4 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h4><blockquote><p>栅格系统内置的栅格系统将内容再次嵌套。就是一个列内再分成若干份小列（套娃）。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220710210121.png" alt="20220710210121"></p><p>可以<strong>通过添加一个新的 .row 元素</strong>和一系列 <code>.col-sm-*</code> 元素到已经存在的 <code>.col-sm-*</code> 元素内。<br>列嵌套最好加 1个行row这样可以<strong>取消父元素的padding值</strong>而且<strong>高度自动和父级一样高</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-4&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span>小列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-sm-6&quot;</span>&gt;</span>小列<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><p>使用 <code>.col-md-offset-*</code> 类可以<strong>将列向右侧偏移</strong>。这些类实际是通过使用*选择器为当前元素增加了左侧的边距（margin)。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220710211246.png" alt="20220710211246"></p><h4 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h4><blockquote><p>4.0以上已废弃该用法，转为 order-(权重）</p></blockquote><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column)的顺序。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220710212107.png" alt="20220710212107"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-4 col-lg-push-8&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-lg-8 col-lg-pull-4&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h4><blockquote><p>实现在不同屏幕大小下，显示或隐藏某些元素。</p></blockquote><div class="table-container"><table><thead><tr><th>类名</th><th>超小屏</th><th>小屏</th><th>中屏</th><th>大屏</th></tr></thead><tbody><tr><td>.hidden-xs</td><td>隐藏</td><td>可见</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-sm</td><td>可见</td><td>隐藏</td><td>可见</td><td>可见</td></tr><tr><td>.hidden-md</td><td>可见</td><td>可见</td><td>隐藏</td><td>可见</td></tr><tr><td>.hidden-lg</td><td>可见</td><td>可见</td><td>可见</td><td>隐藏</td></tr></tbody></table></div><p>补充：与之相反的 <code>visible-xs</code> <code>visible-sm</code> <code>visible-md</code> <code>visible-lg</code> 是<strong>显示某个页面内容</strong></p><h2 id="补充知识点"><a href="#补充知识点" class="headerlink" title="补充知识点"></a>补充知识点</h2><h3 id="vw-和-vh"><a href="#vw-和-vh" class="headerlink" title="vw 和 vh"></a>vw 和 vh</h3><blockquote><p>vw / vh是一个相对单位相对于视口来说的。 <strong>vw 和 vh 是未来的趋势，用于替代 rem</strong> 相较于 rem 省去各种判断和修改。</p></blockquote><p>vw是：viewport width <strong>视口宽度单位</strong></p><ul><li>1vw = 1/100 视口宽度</li><li>例如：当前屏幕视口是375像素，则1vw就是3.75像素</li></ul><p>vh是：viewport height <strong>视口高度单位</strong> (vh很少使用)</p><ul><li>1vh = 1/100 视口高度</li></ul><p>注意：和百分比有区别的，百分比是相对于父元素来说的，而vw和vh总是<strong>针对于当前视口</strong>来说的，所以不同视口（屏幕）下，宽高一起变化完成适配。</p><p>场景举例：有个盒子是50像素*50像素的，如何使用vw？</p><ol><li>设计稿参照iPhone678,所以视口宽度尺寸是375像素（像素切换到2x模式）</li><li>1vw是 375px/100 = 3.75px</li><li>50像素<em>50像素的盒子 = 50 / 3.75 = 13.3333vw (因为设计到大量除法，<em>*建议搭配 LESS 使用</em></em>)</li></ol><p>还原设计稿：</p><ol><li>把模式改为 2x 模式</li><li>确定设计稿视口宽度。（比如375）</li><li>直接使用测量数值 / (视口宽度 / 100)。(比如：50 / (375 / 100))</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式 </tag>
            
            <tag> css(3) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查看GitHub仓库大小的几种方法</title>
      <link href="/2022/07/012022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Github_%E6%9F%A5%E7%9C%8BGitHub%E4%BB%93%E5%BA%93%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/45d40d84/"/>
      <url>/2022/07/012022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Github_%E6%9F%A5%E7%9C%8BGitHub%E4%BB%93%E5%BA%93%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/45d40d84/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub自带查看仓库大小的功能（public、private）"><a href="#GitHub自带查看仓库大小的功能（public、private）" class="headerlink" title="GitHub自带查看仓库大小的功能（public、private）"></a>GitHub自带查看仓库大小的功能（public、private）</h1><blockquote><p>因为这是自带功能，所以公开仓库和私有仓库都可以查看大小。</p></blockquote><p>登录github网页首页，选择自己账户的settings —&gt; repository：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220701230113.png" alt="20220701230113"></p><h1 id="利用GitHub提供的API查看（public）"><a href="#利用GitHub提供的API查看（public）" class="headerlink" title="利用GitHub提供的API查看（public）"></a>利用GitHub提供的API查看（public）</h1><blockquote><p>只要访问指定API，即可参看仓库大小，；所以只能访问<strong>公开仓库</strong>的信息。</p></blockquote><p>语法：<a href="https://api.github.com/repos/user/repo">https://api.github.com/repos/user/repo</a> ，访问后得到一个包含仓库信息的json数据</p><h1 id="利用浏览器插件：Enhanced-GitHub（public、private）"><a href="#利用浏览器插件：Enhanced-GitHub（public、private）" class="headerlink" title="利用浏览器插件：Enhanced GitHub（public、private）"></a>利用浏览器插件：Enhanced GitHub（public、private）</h1><ol><li>GitHub 开源地址：<a href="https://github.com/softvar/enhanced-github">https://github.com/softvar/enhanced-github</a></li><li>Google商店网址：<a href="https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd">https://chrome.google.com/webstore/detail/enhanced-github/anlikcnbgdeidpacdbdljnabclhahhmd</a></li><li>注意：私有仓库需要添加Token<br>该插件适用于公开和私有仓库，但是私有仓库需要添加token，不然因为<strong>权限不够，会访问不了。</strong><br>添加token步骤：<ol><li>先到 <a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a> ，点击“Generate new token”，范围勾选repo就可以了，拉到最下面，点击“Generatetoken”申请一个token。</li><li>复制token，然后（右键）点击该插件，选择“选项”，跳转后，等一会儿（10s左右），会弹出如下弹窗，将复制的token填进去，然后去访问一个自己的私有仓库就可以显示大小。<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220701230731.png" alt="20220701230731"></li></ol></li></ol><p>补充：该插件的另一个很棒的功能就是很简单就能<strong>下载一个文件</strong>（暂时不支持下载文件夹）</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML&amp;CSS基础笔记</title>
      <link href="/2022/06/252022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_CSS_HTML&amp;CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/8074a0ef/"/>
      <url>/2022/06/252022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_CSS_HTML&amp;CSS%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/8074a0ef/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><blockquote><p>HTML指的是<strong>超文本标记语言</strong>（Hyper Text Markup Language),它是用来描述网页的一种语言。</p></blockquote><h2 id="Web-标准"><a href="#Web-标准" class="headerlink" title="Web 标准"></a>Web 标准</h2><blockquote><p>Web标准是由W3C组织和其他标准化组织制定的一系列标准的集合。<strong>W3C(万维网联盟）是国际最著名的标准化组织</strong>。</p></blockquote><p>Web 标准主要包括<strong>结构（Structure)、表现（Presentation)和行为（Behavior)</strong>三个方面。</p><ol><li>结构(结构用于对网页元素进行整理和分类，如<code>HTML</code>。</li><li>表现(表现用于设置网页元素的版式、颜色、大小等<strong>外观样式</strong>，主要指的是<code>CSS</code>)</li><li>行为(行为是指网页模型的定义及<strong>交互</strong>的编写，现阶段主要学的是<code>Javascript</code>)</li></ol><h2 id="HTML-语法规范"><a href="#HTML-语法规范" class="headerlink" title="HTML 语法规范"></a>HTML 语法规范</h2><ol><li>HTML标签通常是成对出现的称为<strong>双标签</strong>。标签对中的第一个标签是开始标签，第二个标签是结束标签。有些特殊的标签必须是单个标签（极少情况）,例如<br/>;,称为<strong>单标签</strong>。</li><li>标签之间的关系<ol><li>包含关系（父子关系）</li><li>并列关系（兄弟关系）</li></ol></li><li>HTML 标签结构<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">1.&lt;!DOCTYPE&gt;标签 (&lt;!DOCTYPE&gt;文档类型声明，作用就是告诉浏览器使用哪种HTML版本来显示网页。)</span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">  1. &lt;!DOCTYPE&gt;声明位于文档中的最前面的位置，处于&lt;html&gt;标签之前。</span></span><br><span class="line"><span class="comment">  2. &lt;!DOCTYPE&gt;不是一个HTML标签，它就是文档类型声明标签。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.lang语言 (用来定义当前文档显示的语言。)</span></span><br><span class="line"><span class="comment">  1. en 定义语言为英语</span></span><br><span class="line"><span class="comment">  2. zh-CN 定义语言为中文</span></span><br><span class="line"><span class="comment">  简单来说，定义为en就是英文网页，定义为zh-CN就是中文网页</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3.charset字符集 (字符集（Character set)是多个字符的集合。以便计算机能够识别和存储各种文字。)</span></span><br><span class="line"><span class="comment">  1. 在&lt;head&gt;标签内，可以通过&lt;meta&gt;标签的charset属性来规定HTML文档应该使用哪种字符编码。</span></span><br><span class="line"><span class="comment">  2. charset常用的值有：GB2312、BIG5、GBK 和 UTF-8</span></span><br><span class="line"><span class="comment">  其中UTF-8也被称为万国码，基本包含了全世界所有国家需要用到的字符.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html标签结构<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="HTML-常用标签"><a href="#HTML-常用标签" class="headerlink" title="HTML 常用标签"></a>HTML 常用标签</h2><blockquote><p>语义化：根据标签的语义，在合适的地方给一个最为合理的标签，可以让页面结构更清晰。</p></blockquote><ol><li><code>&lt;h1&gt; - &lt;/h6&gt;</code> （标签语义：作为标题使用，并且依据重要性递减。一个标题<strong>独占一行</strong>。）</li><li><code>&lt;p&gt;&lt;/p&gt;</code> (标签语义：可以把HTML文档分割为若干段落。)<ol><li>文本在一个段落中会根据浏览器窗口的大小<strong>自动换行</strong>。</li><li>段落和段落之间保有<strong>空隙</strong>。</li></ol></li><li><code>&lt;br/&gt;</code> (标签语义：<strong>强制换行</strong>。)</li><li>文本格式化标签<ol><li>加粗：<code>&lt;strong&gt;&lt;/strong&gt; 或 &lt;b&gt;&lt;/b&gt;</code> (更推荐使用<code>&lt;strong&gt;</code>;标签加粗语义更强烈)</li><li>倾斜：<code>&lt;em&gt;&lt;/em&gt; 或 &lt;i&gt;&lt;/i&gt;</code> (更推荐使用<code>&lt;em&gt;</code>标签加粗语义更强烈)</li><li>删除线：<code>&lt;del&gt;&lt;/del&gt; 或 &lt;s&gt;&lt;/s&gt;</code> (更推荐使用<code>&lt;del&gt;</code>标签加粗语义更强烈)</li><li>下划线：<code>&lt;ins&gt;&lt;/ins&gt; 或 &lt;u&gt;&lt;/u&gt;</code> (更推荐使用<code>&lt;ins&gt;</code>;标签加粗语义更强烈)</li></ol></li><li><code>&lt;div&gt;&lt;/div&gt; 和 &lt;span&gt;&lt;/span&gt;</code> (没有语义，它们就是一个盒子，用来装内容的。)<ol><li><code>&lt;div&gt;</code>标签用来布局，但是现在<strong>一行只能放一个<code>&lt;div&gt;</code></strong>。</li><li><code>&lt;span&gt;</code>标签用来布局，<strong>一行上可以多个<code>&lt;span&gt;</code></strong>。</li></ol></li><li><code>&lt;img src = &quot;&quot;/&gt;</code><ol><li>图片的宽度/高度一般只修改一个即可。</li><li>路径<ol><li>相对路径 (以<strong>引用文件所在位置为参考</strong>基础，而建立出的目录路径。)<ol><li>留空直接写文件名 (同一级)</li><li>/ (下一级)</li><li>../ (上一级)</li></ol></li><li>绝对路径 (指<strong>目录</strong>下的绝对位置，直接到达目标位置，通常是从盘符开始的路径。)</li></ol></li></ol></li><li><code>&lt;a href = &quot;&quot; target = &quot;&quot;&gt;&lt;/a&gt;</code> (anchor[‘aenke(r)]的缩写，意为：锚。)<ol><li>链接分类<ol><li>外部链接</li><li>内部链接 (网站内部页面之间的相互链接)</li><li>空链接：<code>&lt;a href = &quot;#&quot;&gt;&lt;/a&gt;</code></li><li>下载链接：如果href里面地址<strong>是一个文件或者压缩包</strong>，会下载这个文件。</li><li>网页元素链接：在网页中的各种网页元素，如<strong>文本、图像、表格、音频、视频</strong>等都可以添加超链接.</li><li>锚点链接 (点我们点击链接，可以快速定位到页面中的某个位置.)<ol><li>在链接文本的href属性中，设置属性值为 <strong>#名字</strong>的形式，如<code>&lt;a href=&quot;#anchor&quot;&gt;跳转至锚点&lt;/a&gt;</code></li><li>找到目标位置标签，里面添加一个id属性=刚才的名字，如：<code>&lt;h3 id=&quot;#anchor&quot; 锚点&lt;/h3&gt;</code></li></ol></li></ol></li></ol></li><li><code>&lt;!--注释语句--&gt;</code>  快捷键：<code>Ctrl + /</code></li><li>特殊字符<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220625182416.png" alt="20220625182416"></li><li>表格<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">A:表格相关标签：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. &lt;table&gt;&lt;/table&gt;是用于定义表格的标签。</span></span><br><span class="line"><span class="comment">2. &lt;tr&gt;/tr&gt;标签用于定义表格中的行，必须嵌套在&lt;table&gt;&lt;/table&gt;标签中。</span></span><br><span class="line"><span class="comment">3. &lt;td&gt;&lt;/td&gt;用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中。</span></span><br><span class="line"><span class="comment">4. &lt;thead&gt;标签表格的头部区域、&lt;tbody&gt;标签表格的主体区域.这样可以更好的分清表格结构。【语义化】</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">B:表格相关属性</span><br><span class="line"></span><br><span class="line">| 表格属性    | 属性值                  | 描述                                             |</span><br><span class="line">| ----------- | ----------------------- | ------------------------------------------------ |</span><br><span class="line">| align       | left、center、right     | 规定表格相对周围元素的对齐方式。                 |</span><br><span class="line">| border      | 1或&quot;&quot;                   | 规定表格单元是否拥有边框，默认为&quot;&quot;，表示没有边框 |</span><br><span class="line">| cellpadding | 像素值 (string)         | 规定**单元边沿与内容之间**的空白，默认1像素。    |</span><br><span class="line">| cellspacing | 像素值 (string)         | 规定**单元格与单元格**之间的空白，默认2像素。    |</span><br><span class="line">| width       | 像素值或百分比 (number) | 规定表格的宽度。                                 |</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>HeadA<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>HeadB<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">C:合并单元格 (将多个单元格合并为一个单元格.)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. 合并单元格方式</span></span><br><span class="line"><span class="comment">  1. 跨行合并（纵向合并）：rowspan=&quot;合并单元格的个数&quot;</span></span><br><span class="line"><span class="comment">  2. 跨列合并（横向合并）：colspan=&quot;合并单元格的个数&quot;</span></span><br><span class="line"><span class="comment">2. 目标单元格</span></span><br><span class="line"><span class="comment">3. 合并单元格的**步骤**</span></span><br><span class="line"><span class="comment">  1. 先确定是跨行还是跨列合并。</span></span><br><span class="line"><span class="comment">  2. 找到目标单元格.写上合并方式=合并的单元格数量。比如：&lt;tdcolspan=&quot;2&quot;&gt;&lt;/td&gt;。</span></span><br><span class="line"><span class="comment">  3. 删除多余的单元格。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>HeadA<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span> = <span class="string">&quot;2&quot;</span>&gt;</span>HeadB<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span> = <span class="string">&quot;2&quot;</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>列表 (注意事项：<code>&lt;ul&gt;&lt;/ul&gt;或&lt;ol&gt;&lt;/ol&gt;</code>中只能嵌套<code>&lt;li&gt;&lt;/li&gt;,</code>直接在<code>&lt;ul&gt;&lt;/ul&gt;或&lt;ol&gt;&lt;/ol&gt;</code>标签中输入其他标签或者文字的做法是不被允许的。<code>&lt;li&gt;与&lt;/li&gt;</code>之间相当于一个<strong>容器</strong>，<strong>可以容纳所有元素</strong>。)<ol><li>无序列表<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    去掉li前面的项目符号（小圆点）: li &#123; list-style:none; &#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">&lt;1i&gt;列表项1&lt;/1i&gt;</span><br><span class="line">&lt;1i&gt;列表项2&lt;/1i&gt;</span><br><span class="line">&lt;1i&gt;列表项3&lt;/1i&gt;</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>有序列表<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">&lt;1i&gt;列表项1&lt;/1i&gt;</span><br><span class="line">&lt;1i&gt;列表项2&lt;/1i&gt;</span><br><span class="line">&lt;1i&gt;列表项3&lt;/1i&gt;</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>自定义列表（常用于对术语或名词进行<strong>解释和描述</strong>，定义列表的<strong>列表项前没有任何项目符号</strong>。）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">&lt;dl&gt;&lt;/dl&gt;里面只能包含&lt;dt&gt;和&lt;dd&gt;，dt和dd里面可以放任何标签。</span></span><br><span class="line"><span class="comment">&lt;dt&gt;和&lt;dd&gt;个数没有限制，经常是一个&lt;dt&gt;对应多个&lt;dd&gt;。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dt</span>&gt;</span>名词1<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释1<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dd</span>&gt;</span>名词1解释2<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>表单（一个完整的表单通常由<strong>表单域、表单控件（也称为表单元素）和提示信息3个部分构成</strong>。作用：收集用户信息。）<ol><li>表单域（在HTML标签中，<code>&lt;form&gt;</code>标签用于定义表单域，以实现用户信息的收集和传递。<code>&lt;form&gt;</code>会把它范围内的表单元素信息提交给服务器.）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;ur1地址&quot;</span><span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span><span class="attr">name</span>=<span class="string">&quot;表单域名称&quot;</span>&gt;</span></span><br><span class="line">各种表单元素控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">| 属性   | 属性值     | 作用                                                  |</span><br><span class="line">| ------ | ---------- | ----------------------------------------------------- |</span><br><span class="line">| action | url 地址   | 用于指定**接收并处理表单数据**的服务器程序的url地址。 |</span><br><span class="line">| method | get / post | 用于设置表单数据的**提交方式**，其取值为get或post。   |</span><br><span class="line">| name   | 名称       | 指定表单的名称，以**区分**同一个页面中的多个表单域。  |</span><br></pre></td></tr></table></figure></li><li>表单控件<ol><li>input输入表单元素<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> = <span class="string">&#x27;属性值&#x27;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--type属性值--&gt;</span></span><br><span class="line"></span><br><span class="line">| type 属性值 | 描述                                                                                                                       |</span><br><span class="line">| ----------- | -------------------------------------------------------------------------------------------------------------------------- |</span><br><span class="line">| button      | 定义可点击按钮（多数情况下，用于通过JavaScript启动脚本）。                                                                 |</span><br><span class="line">| file        | 定义输入字段和“浏览”按钮，供文件上传。                                                                                     |</span><br><span class="line">| hidden      | 定义隐藏的输入字段。                                                                                                       |</span><br><span class="line">| image       | 定义图像形式的提交按钮。                                                                                                   |</span><br><span class="line">| password    | 定义密码字段。该字段中的字符被掩码。                                                                                       |</span><br><span class="line">| radio       | 定义单选按钮。（通过 name 自定义相同的属性实现多选一）拓展：可以使用<span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span> = <span class="string">&quot;id&quot;</span>&gt;</span> 的形式优化radio提示信息的选择区域。 |</span><br><span class="line">| checkbox    | 定义复选框。 (通过 name 自定义相同的属性实现多选)                                                                          |</span><br><span class="line">| reset       | 定义重置按钮。重置按钮会清除表单中的所有数据。                                                                             |</span><br><span class="line">| submit      | 定义提交按钮。提交按钮会把表单数据发送到服务器。                                                                           |</span><br><span class="line">| text        | 定义单行的输入字段，用户可在其中输入文本。默认宽度为20个字符。                                                             |</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--除type属性外，&lt;input&gt;标签还有其他很多属性--&gt;</span></span><br><span class="line"></span><br><span class="line">| 其他属性  | 属性值  | 描述                                                                                        |</span><br><span class="line">| --------- | ------- | ------------------------------------------------------------------------------------------- |</span><br><span class="line">| name      | 自定义  | 定义input元素的名称，用于区别不同的表单。（radio 或 checkbox)如果是一组，要有相同的name值） |</span><br><span class="line">| value     | 自定义  | 规定input元素的默认值。                                                                     |</span><br><span class="line">| checked   | checked | 规定此input元素首次加载时应当被选中。（主要针对于单选按钮和复选框）                         |</span><br><span class="line">| maxlength | 正整数  | 规定输入字段中的字符的最大长度。                                                            |</span><br></pre></td></tr></table></figure></li><li>select下拉表单元素 (实用场景：多个选项让用户选择，想要节约页面空间时，可以使用<code>&lt;select&gt;</code>标签控件定义下拉列表)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    1.&lt;select&gt;中至少包含一对&lt;option&gt;。</span></span><br><span class="line"><span class="comment">    2.在&lt;option&gt;中定义 selected=&quot;selected&quot;时，当前项即为默认选中项。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>选项3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>textarea文本域元素 (实用场景：用户输入内容较多的情况下【如：留言板，评论】，可以使用<code>&lt;textarea&gt;</code>标签。)<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--cols=“每行中的字符数”，rows=“显示的行数”，我们在实际开发中不会使用，都是用CSS来改变大小。--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">&quot;3&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line">文本内容</span><br><span class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>提示信息</li></ol></li></ol><h2 id="HTML5-新特性"><a href="#HTML5-新特性" class="headerlink" title="HTML5 新特性"></a>HTML5 新特性</h2><p>新的标签、新的表单和新的表单属性等。</p><h3 id="HTML5-语义化标签"><a href="#HTML5-语义化标签" class="headerlink" title="HTML5 语义化标签"></a>HTML5 语义化标签</h3><blockquote><p>语义化标签便于浏览器看，<strong>主要针对SEO搜索引擎优化</strong>。</p></blockquote><ul><li><code>&lt;header&gt;</code>: 头部标签</li><li><code>&lt;nav&gt;</code>: 导航标签</li><li><code>&lt;article&gt;</code>: 内容标签</li><li><code>&lt;section&gt;</code>: 定义文档某个区域</li><li><code>&lt;aside&gt;</code>: 侧边栏标签</li><li><code>&lt;footer&gt;</code>: 尾部标签</li></ul><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702214259.png" alt="20220702214259"></p><h3 id="HTML5-多媒体标签"><a href="#HTML5-多媒体标签" class="headerlink" title="HTML5 多媒体标签"></a>HTML5 多媒体标签</h3><ol><li>音频：<code>&lt;audio&gt;</code></li><li>视频：<code>&lt;video&gt;</code></li></ol><h3 id="HTML5-新增-input-类型"><a href="#HTML5-新增-input-类型" class="headerlink" title="HTML5 新增 input 类型"></a>HTML5 新增 input 类型</h3><p>新增表单 type</p><div class="table-container"><table><thead><tr><th>type</th><th>说明</th></tr></thead><tbody><tr><td>type=”email”</td><td>限制用户输入必须为Email类型</td></tr><tr><td>type=”url”</td><td>限制用户输入必须为URL类型</td></tr><tr><td>type=”date”</td><td>限制用户输入必须为日期类型</td></tr><tr><td>type=”time”</td><td>限制用户输入必须为时间类型</td></tr><tr><td>type=”month”</td><td>限制用户输入必须为月类型</td></tr><tr><td>type=”week”</td><td>限制用户输入必须为周类型</td></tr><tr><td><strong>type=”number</strong></td><td><strong>限制用户输入必须为数字类型</strong></td></tr><tr><td><strong>type=”tel”</strong></td><td><strong>手机号码</strong></td></tr><tr><td><strong>type=”search</strong></td><td><strong>搜索框</strong></td></tr><tr><td>type=”color”</td><td>生成一个颜色选择表单</td></tr></tbody></table></div><p>新增表单属性</p><div class="table-container"><table><thead><tr><th>属性</th><th>属性值</th><th>说明</th></tr></thead><tbody><tr><td>required</td><td>required</td><td>表单拥有该属性表示其内容不能为空，必填</td></tr><tr><td><strong>placeholder</strong></td><td>提示文本</td><td>表单的提示信息，存在默认值将不显示</td></tr><tr><td>autofocus</td><td>autofocus</td><td>自动聚焦属性，页面加载完成自动聚焦到指定表单</td></tr><tr><td>autocomplete</td><td>off/on</td><td>当用户在字段开始键入时，浏览器基于之前键入过的值，应该显示出在字段中填写的选项。</td></tr><tr><td><strong>multiple</strong></td><td>multiple</td><td>可以多选<strong>文件（按住Ctrl）</strong>提交</td></tr></tbody></table></div><p>拓展：修改 <code>placeholder</code> 中的字体颜色<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::placeholder</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><blockquote><p>Cascading Style Sheets（层叠样式表) 实现结构样式相分离。</p></blockquote><p>CSS选择器<br>CSS3伪类<br>CSS伪元素<br>CSS过渡<br>线性渐变，径向渐变<br>CSS动画Animation<br>弹性盒模型<br>经典布局练习（双飞翼，品字布局）+案例<br>制作布局：浮动、定位、显示、盒模型、网格布局、弹性布局、响应式布局</p><h2 id="Emmet-语法"><a href="#Emmet-语法" class="headerlink" title="Emmet 语法"></a>Emmet 语法</h2><blockquote><p>Emmet语法的前身是 `Zen coding,它使用缩写，来提高html/css的编写速度，Vscode内部已经集成该语法.</p></blockquote><ol><li>生成标签直接输入标签名按 <code>tab键</code> 即可比如 div 然后tab键，就可以生成 <code>&lt;div&gt;&lt;/div&gt;</code>;</li><li>如果想要生成多个相同标签加上 <em> 就可以了比如 `div</em>3` 就可以快速生成3个div</li><li>如果有父子级关系的标签，可以用 &gt; 比如 <code>ul&gt;li</code> 就可以了</li><li>如果有兄弟关系的标签，用 + 就可以了比如 <code>div+p</code></li><li>如果生成带有类名或者id名字的，直接写 <code>.demo</code> 或者 <code>#two</code> tab键就可以了</li><li>如果生成的div类名是有顺序的，可以用自增符号 <code>$</code></li><li>如果想要在生成的标签内部写内容可以用 <code>&#123;&#125;</code> 表示。如：<code>&#123;$&#125;</code>。</li></ol><h2 id="CSS-引入方式"><a href="#CSS-引入方式" class="headerlink" title="CSS 引入方式"></a>CSS 引入方式</h2><ol><li>外部样式表（推荐使用：完全实现结构和样式相分离，可控制多个页面。）<ol><li>新建一个后缀名为.css的样式文件，把所有CSS代码都放入此文件中。</li><li>在HTML页面中，使用<link>标签引入这个文件。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">属性：</span></span><br><span class="line"><span class="comment">1. rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</span></span><br><span class="line"><span class="comment">2. href：定义所链接外部样式表文件的URL,可以是相对路径，也可以是绝对路径。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;1ink rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</span><br></pre></td></tr></table></figure></li></ol></li><li>内部样式表（部分结构和样式相分离，控制一个页面。）</li><li>行内样式表（书写方便，权重高，控制一个标签。）</li></ol><h2 id="CSS-代码风格"><a href="#CSS-代码风格" class="headerlink" title="CSS 代码风格"></a>CSS 代码风格</h2><ol><li>样式格式书写<ol><li>展开格式书写（更直观）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span> : pink ;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>样式大小写风格<ol><li>样式<strong>选择器，属性名，属性值</strong>关键字全部<strong>使用小写</strong>字母，特殊情况除外。</li></ol></li><li>样式空格风格<ol><li>属性值前面，冒号后面，保留一个空格</li><li>选择器（标签）和大括号中间保留空格</li></ol></li><li>CSS属性书写顺序<ol><li>布局定位属性：display/position/float/clear/visibility/overflow (建议display第一个写，毕竟关系到模式）</li><li>自身属性：width/height/margin/padding/border/background</li><li>文本属性：color/font/text-decoration/text-align/vertical-align/white-space/break-word</li><li>其他属性（CSS3):content/cursor/border-radius/box-shadow/text-shadow/background:linear-gradient…</li></ol></li></ol><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p>选择器命名规范（语义化）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">(1)页面结构</span><br><span class="line"></span><br><span class="line">容器: container</span><br><span class="line">页头：header</span><br><span class="line">内容：content/container</span><br><span class="line">页面主体：main</span><br><span class="line">页尾：footer</span><br><span class="line">导航：nav</span><br><span class="line">侧栏：sidebar</span><br><span class="line">栏目：column</span><br><span class="line">页面外围控制整体布局宽度：wrapper</span><br><span class="line">左右中：left right center</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(2)导航</span><br><span class="line"></span><br><span class="line">导航：nav</span><br><span class="line">主导航：mainbav</span><br><span class="line">子导航：subnav</span><br><span class="line">顶导航：topnav</span><br><span class="line">边导航：sidebar</span><br><span class="line">左导航：leftsidebar</span><br><span class="line">右导航：rightsidebar</span><br><span class="line">菜单：menu</span><br><span class="line">子菜单：submenu</span><br><span class="line">标题: title</span><br><span class="line">摘要: summary</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(3)功能</span><br><span class="line"></span><br><span class="line">标志：logo</span><br><span class="line">广告：banner</span><br><span class="line">登陆：login</span><br><span class="line">登录条：loginbar</span><br><span class="line">注册：regsiter</span><br><span class="line">搜索：search</span><br><span class="line">功能区：shop</span><br><span class="line">标题：title</span><br><span class="line">加入：joinus</span><br><span class="line">状态：status</span><br><span class="line">按钮：btn</span><br><span class="line">滚动：scroll</span><br><span class="line">标签页：tab</span><br><span class="line">文章列表：list</span><br><span class="line">提示信息：msg</span><br><span class="line">当前的: current</span><br><span class="line">小技巧：tips</span><br><span class="line">图标: icon</span><br><span class="line">注释：note</span><br><span class="line">指南：guild</span><br><span class="line">服务：service</span><br><span class="line">热点：hot</span><br><span class="line">新闻：news</span><br><span class="line">下载：download</span><br><span class="line">投票：vote</span><br><span class="line">合作伙伴：partner</span><br><span class="line">友情链接：link</span><br><span class="line">版权：copyright</span><br></pre></td></tr></table></figure><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><ol><li>标签选择器 （用<strong>HTML标签名称</strong>作为选择器）</li><li>类选择器<ol><li>基础使用（单类名）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>类选择器-多类名（应用场景：给含有相同类的元素<strong>统一设置</strong>公共样式）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在标签class属性中写多个类名，多个类名中间必须用空格分开 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;class1 class2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>id选择器（id 选择器<strong>只能调用一次</strong>，后面相同ID 的元素将会被忽略，一般用于页面<strong>唯一性的元素上</strong>，经常和 JavaScript 搭配使用。）</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#ID</span>名 &#123;</span><br><span class="line">    属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>通配符选择器（使用场景：<strong>清除所有的元素标签的内外边距。统一格式化页面内容</strong>。）</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 使用“*”定义，它表示选取页面中所有元素（标签）。</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 组合器选择器（根据它们之间的特定关系来选取元素）</span><br><span class="line"><span class="number">2</span>. 伪类选择器（根据特定状态选取元素）</span><br><span class="line"><span class="number">3</span>. 伪元素选择器（选取元素的一部分并设置其样式）</span><br><span class="line"><span class="number">4</span>. 属性选择器（根据属性或属性值来选取元素）</span><br></pre></td></tr></table></figure><ol><li>后代选择器（选择<code>父元素里面子元素</code>）<ol><li>元素1是父级，元素2是子级，最终选择的是元素2</li><li>元素2可以是儿子，也可以是孙子等，只要是元素1的后代即可</li><li>元素1和元素2可以是任意基础选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 写法：外层标签写在前面，内层标签写在后面，中间用`空格`分隔。</span><br><span class="line"></span><br><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span>&#123;样式声明&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>子选择器（选择<code>某元素最近一级子元素</code>）<ol><li>子选择器不能通过外部样式表实现   </li><li>只能选择<code>某元素最近一级子元素</code>(亲儿子)<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//  写法：元素<span class="number">1</span>和元素<span class="number">2</span>中间用`大于号`隔开</span><br><span class="line"></span><br><span class="line">元素<span class="number">1</span>&gt;元素<span class="number">2</span>&#123;样式声明&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>并集选择器（选择多组标签）<ol><li><code>任何形式的选择器</code>都可以作为并集选择器的一部分.</li><li>并集选择器通常用于<code>集体声明</code><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 写法：并集选择器是各选择器通过`英文逗号(,)`连接而成</span><br><span class="line"></span><br><span class="line">元素<span class="number">1</span>,元素<span class="number">2</span>&#123;样式声明&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li>伪类选择器<ol><li>链接伪类选择器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 注意事项：为了确保生效，请按照LVHA的循顺序声明 <span class="selector-pseudo">:link</span>- <span class="selector-pseudo">:visited</span>- <span class="selector-pseudo">:hover</span>- <span class="selector-pseudo">:active</span>-</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> <span class="comment">/*选择所有未被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> <span class="comment">/*选择所有已被访问的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> <span class="comment">/*选择鼠标指针位于其上的链接*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> <span class="comment">/*选择活动链接（鼠标按下未弹起的链接）*/</span></span><br></pre></td></tr></table></figure></li><li>:focus 伪类选择器 （选取<code>获得焦点</code>的表单元素【主要针对于表单元素】。）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="CSS-字体属性"><a href="#CSS-字体属性" class="headerlink" title="CSS 字体属性"></a>CSS 字体属性</h2><p>书写规范：</p><ol><li>各种字体之间必须使用<strong>英文逗号隔开</strong></li><li>一般情况下，如果有<strong>空格隔开的多个单词组成的字体，加引号</strong>.</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li></ol><h3 id="font-family"><a href="#font-family" class="headerlink" title="font-family"></a>font-family</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// CSS使用 <span class="attribute">font-family</span> 属性定义文本的字体系列。(定义多个字体，系统会从前到后解析优先使用已经存在的字体，如果都没有则使用系统默认字体。)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123; <span class="attribute">font-family</span>:Arial,<span class="string">&quot;Microsoft Yahei&quot;</span>,<span class="string">&quot;微软雅黑&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h3 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a>font-size</h3><ol><li><strong>px</strong>(像素）大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为16px,不同浏览器可能默认显示的字号大小不一致，<strong>尽量给一个明确值大小</strong>，不要默认大小.</li><li>标题标签比较特殊，需要<strong>单独指定</strong>文字大小</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-weight"><a href="#font-weight" class="headerlink" title="font-weight"></a>font-weight</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="attribute">font-weight</span> 取值：<span class="attribute">normal</span>（默认），bold，number（<span class="number">100</span>~<span class="number">900</span>；<span class="number">400</span>等同于<span class="attribute">normal</span>,而<span class="number">700</span>等同于bold，注意这个数字后面不跟单位。）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-style"><a href="#font-style" class="headerlink" title="font-style"></a>font-style</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 平时我们很少给文字加斜体，反而要给斜体标签（<span class="selector-tag">em</span>,<span class="selector-tag">i</span>)改为不倾斜字体。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">em</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="font-复合属性"><a href="#font-复合属性" class="headerlink" title="font 复合属性"></a>font 复合属性</h3><ol><li>使用font属性时，必须按语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间以<strong>空格隔开</strong>。</li><li>不需要设置的属性可以省略（取默认值）,但必须保留 <strong>font-size和font-family</strong> 属性，否则font属性将不起作用。</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>:font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 开发中 <span class="attribute">line-height</span> 常见的写法：可以根据文字大小自动调整行高。（如：<span class="number">12px</span>/<span class="number">1.5</span> 则行高为 <span class="number">12</span> * <span class="number">1.5</span> = <span class="number">18px</span>）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-文本属性"><a href="#CSS-文本属性" class="headerlink" title="CSS 文本属性"></a>CSS 文本属性</h2><h3 id="color"><a href="#color" class="headerlink" title="color"></a>color</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// <span class="attribute">color</span> 取值：预定义的值（red,green,blue）/十六进制代码（<span class="selector-id">#FF0000</span>）/RGB代码（rgb(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)或rgb(<span class="number">100%</span>,<span class="number">0%</span>,<span class="number">0%</span>)）。</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-align-对齐文本"><a href="#text-align-对齐文本" class="headerlink" title="text-align 对齐文本"></a>text-align 对齐文本</h3><blockquote><p>text-align 让盒子内的文本居中对齐,如果让图片居中对齐，可以将text-align属性加到图片父级盒子上。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="attribute">text-align</span> 取值： <span class="attribute">left</span> / center / <span class="attribute">right</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-decoration-装饰文本"><a href="#text-decoration-装饰文本" class="headerlink" title="text-decoration 装饰文本"></a>text-decoration 装饰文本</h3><p>应用场景：</p><ol><li>取消 a 链接默认下划线。</li><li>给文本添加下划线</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="attribute">text-decoration</span> 取值：<span class="attribute">none</span>（默认） / underline（下划线） / overline（上划线） / line-through（删除线）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>:underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a>text-indent</h3><p>应用场景： 段落的首行缩进。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// <span class="attribute">text-indent</span> 取值：px / <span class="selector-tag">em</span>（推荐，<span class="selector-tag">em</span> 是一个相对单位，就是当前元素（<span class="attribute">font-size</span>) <span class="number">1</span>个文字的大小，如果当前元素没有设置大小，则会按照父元素的<span class="number">1</span>个文字大小。）</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h3><p>行间距的概念：<br>行间距 = 文本高度 + 上间距 + 下间距</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220626184607.png" alt="20220626184607"></p><p>line-height属性用于设置行间的距离（行高）。可以控制<strong>文字行与行之间的距离</strong>.</p><h2 id="CSS-的元素显示模式"><a href="#CSS-的元素显示模式" class="headerlink" title="CSS 的元素显示模式"></a>CSS 的元素显示模式</h2><blockquote><p>HTML元素一般分为<code>块元素</code>和<code>行内元素</code>两种类型。</p></blockquote><h3 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h3><blockquote><p>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code>标签是最典型的块元素。</p></blockquote><p>块元素特点：</p><ol><li>独占一行。</li><li><code>高度，宽度、外边距以及内边距</code>都可以控制。</li><li><code>宽度默认是容器（父级宽度）的</code>100%`。</li><li>是一个容器及盒子，<code>里面可以放行内或者块级元素</code>。</li></ol><p>注意：文字类的元素内不能使用块级元素</p><ol><li><code>&lt;p&gt;</code>标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code>。</li><li><code>&lt;h1&gt;~&lt;h6&gt;</code> 都是文字类块级标签，里面也不能放其他块级元素。</li></ol><h3 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h3><blockquote><p>常见的行内元素有 <code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code> 等，其中<code>&lt;span&gt;</code>标签是最典型的行内元素。有的地方也将行内元素称为<code>内联元素</code>。</p></blockquote><p>行内元素特点：</p><ol><li>相邻行内元素在一行上，<code>一行可以显示多个</code>。</li><li><code>高、宽</code>直接设置是无效的。</li><li>默认宽度就是它<code>本身内容的宽度</code>。</li><li>行内元素<code>只能容纳文本或其他行内元素</code>。</li></ol><p>注意：</p><ol><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式（display）最安全。</li></ol><h3 id="行内块元素"><a href="#行内块元素" class="headerlink" title="行内块元素"></a>行内块元素</h3><blockquote><p>在行内元素中有几个特殊的标签：<code>&lt;img/&gt;、&lt;input/&gt;、&lt;td&gt;</code>,它们同时具有块元素和行内元素的特点。它们又称为行内块元素。</p></blockquote><p>行内块元素的特点：</p><ol><li>和相邻行内元素（行内块）在一行上，但是他们之间 <code>会有空白缝隙</code>。<code>一行可以显示多个</code>（行内元素特点）。</li><li>默认宽度就是它<code>本身内容的宽度</code>（行内元素特点）。</li><li><code>高度，行高、外边距</code>以及<code>内边距</code>都可以控制（块级元素特点）。</li></ol><h3 id="元素显示模式转换"><a href="#元素显示模式转换" class="headerlink" title="元素显示模式转换"></a>元素显示模式转换</h3><p>应用场景：</p><ol><li>一个模式的元素需要另外一种模式的特性</li><li>增加链接<code>&lt;a&gt;</code>的触发范围</li></ol><p>转换方式：</p><ol><li><strong>转换为块元素：display:block;</strong></li><li>转换为行内元素：display:inline;</li><li><strong>转换为行内块：display:inline-block;</strong></li></ol><h2 id="CSS-背景"><a href="#CSS-背景" class="headerlink" title="CSS 背景"></a>CSS 背景</h2><p>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</p><h3 id="background-color"><a href="#background-color" class="headerlink" title="background-color"></a>background-color</h3><h3 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h3><blockquote><p>background-image 属性描述了元素的背景图像。实际开发常见于logo或者一些装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置（精灵图也是一种运用场景）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-image</span>:</span><br><span class="line">   // 渐变</span><br><span class="line">   <span class="built_in">linear-gradient</span>(to bottom, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>,<span class="number">0.5</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>,<span class="number">0.5</span>)),</span><br><span class="line">   // 背景图片</span><br><span class="line">   <span class="built_in">url</span>(<span class="string">&#x27;xxxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><h3 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h3><blockquote><p>利用background-position属性可以改变<code>图片在背景中的位置</code>。应用场景：精灵图</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. 参数是方位名词：（left center right）</span></span><br><span class="line"><span class="comment">a. 指定的两个值都是方位名词，则两个值前后顺序无关，比如left top和top left效果一致</span></span><br><span class="line"><span class="comment">b. 只指定了一个方位名词，另一个值省略，则第二个值默认居中对齐</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. 参数是精确单位</span></span><br><span class="line"><span class="comment">a. 参数值是精确坐标，那么第一个肯定是x坐标，第二个一定是y坐标</span></span><br><span class="line"><span class="comment">b. 只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">3. 参数是混合单位</span></span><br><span class="line"><span class="comment">指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background-position</span>: x y</span><br></pre></td></tr></table></figure><h3 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h3><blockquote><p>设置背景图像是否固定或者随着页面的其余部分滚动。应用场景：<strong>视差滚动的效果。</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span>: scroll | fixed</span><br></pre></td></tr></table></figure><h3 id="background-复合属性"><a href="#background-复合属性" class="headerlink" title="background 复合属性"></a>background 复合属性</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 中间用空格分隔</span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>:背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置；</span><br><span class="line"></span><br><span class="line">background: transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y fixed top;</span><br></pre></td></tr></table></figure><h3 id="background-rgba"><a href="#background-rgba" class="headerlink" title="background: rgba();"></a>background: rgba();</h3><blockquote><p>背景半透明是指盒子背景半透明，盒子里面的内容不受影响（CSS3新增）</p></blockquote><h3 id="background-size-背景缩放"><a href="#background-size-背景缩放" class="headerlink" title="background-size 背景缩放"></a>background-size 背景缩放</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">单位：长度|百分比|cover|contain;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cover：把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。</span></span><br><span class="line"><span class="comment">contain：把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">background-size</span>: 背景图片宽度 背景图片高度;</span><br></pre></td></tr></table></figure><h3 id="linear-gradient"><a href="#linear-gradient" class="headerlink" title="linear-gradient()"></a>linear-gradient()</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 起始方向可以是：方位名词或者度数，如果省略默认就是top */</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(起始方向,颜色<span class="number">1</span>,颜色<span class="number">2</span>,...);</span><br></pre></td></tr></table></figure><h2 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h2><blockquote><p>CSS 三个特性：<code>层叠性、继承性、优先级</code>。</p></blockquote><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><blockquote><p>相同选择器<code>设置相同</code>的样式，此时一个样式就会<code>覆盖</code>（层叠）另一个冲突的样式。层叠性主要解决<code>样式冲突</code>的问题</p></blockquote><p>层叠原则：</p><ol><li>样式冲突，遵循的原则是<code>就近原则</code>，哪个样式离结构近，就执行哪个样式（覆盖）</li><li>样式不冲突，不会层叠</li></ol><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><blockquote><p>CSS中的继承：<code>子标签会继承父标签的某些样式</code>。主要是<code>文字相关</code>的样式：（<code>text-,font-,line-</code>这些元素开头的可以继承，以及<code>color</code>属性）</p></blockquote><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote><p>当<code>同一个元素指定多个选择器</code>，就会有优先级的产生。</p></blockquote><ol><li>选择器相同，则执行<code>层叠性</code></li><li>选择器不同，则根据<code>选择器权重</code>执行</li></ol><p>选择器权重:</p><ol><li>权重是有4组数字组成，但是不会有进位。</li><li>等级判断从左向右，如果某一位数值相同，则判断下一位数值。</li><li><code>继承的权重是 0</code>， 如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是 0。</li><li>通配符选择器高于继承，伪类选择器高于类选择器。</li><li>a 标签自带样式</li></ol><p>权重叠加：</p><p><code>复合选择器</code>，则会有权重叠加，需要计算权重。</p><div class="table-container"><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承 或 *</td><td>0,0,0,0</td></tr><tr><td>元素选择器</td><td>0,0,0,1</td></tr><tr><td>类选择器，伪类选择器</td><td>0,0,1,0</td></tr><tr><td>ID选择器</td><td>0,1,0,0</td></tr><tr><td>行内样式style=””</td><td>1,0,0,0</td></tr><tr><td>!important</td><td>∞</td></tr></tbody></table></div><h2 id="CSS-盒子模型"><a href="#CSS-盒子模型" class="headerlink" title="CSS 盒子模型"></a>CSS 盒子模型</h2><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/6b1855c2bf99086cfe75a1afa60d9331.jpeg" alt="6b1855c2bf99086cfe75a1afa60d9331"></p><h3 id="盒子模型的组成"><a href="#盒子模型的组成" class="headerlink" title="盒子模型的组成"></a>盒子模型的组成</h3><ol><li>边框（border: 宽度 px 样式 颜色;)<ol><li>边框会影响盒子实际大小。（比如说盒子宽20px,边框2px,那页面上这个盒子实际占用的宽度是24px。）解决方案：<ol><li>测量盒子大小的时候，<code>不量边框</code>。</li><li>如果测量的时候包含了边框，则需要 <code>width/height 减去边框宽度</code>。</li></ol></li></ol></li><li>内边距（padding)<ol><li>padding 会影响盒子实际大小。解决方案：<ol><li>保证盒子跟效果图大小保持一致，则让 <code>width/height 减去多出来的内边距大小</code>即可。</li></ol></li><li>应用场景：导航栏之间的边距。</li><li>匿名行盒：<a href="http://layout.imweb.io/article/box-type.html">http://layout.imweb.io/article/box-type.html</a></li><li>如果盒子本身<code>没有指定width/height</code>属性，则此时 padding <code>不会撑开盒子大小</code>。</li></ol></li><li>外边距（margin)<ol><li>应用场景：让<code>块级盒子水平居中</code>，方法：<code>margin: 0 auto;</code> 但是必须满足两个条件：<ol><li>盒子必须指定了<code>宽度（width)</code>。</li><li>盒子左右的<code>外边距都设置为 auto</code>。</li><li>注意：以上方法是让<strong>块级元素水平居中</strong>，<code>行内元素</code>或者<code>行内块元素</code>水平居中给其<code>父元素添加text-align:center</code>即可。</li></ol></li><li><strong>外边距合并</strong>：使用 <code>margin</code> 定义块元素的<code>垂直外边距</code>时，可能会出现外边距的合并。<ol><li><strong>相邻块元素垂直外边距的合并。</strong>（当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距margin-bottom,下面的元素有上外边距margin-top,则他们之间的垂直间距不是margin-bottom与margin-top<strong>之和</strong>。<code>取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并</code>。）解决方案：<code>尽量只给一个盒子添加margin值。</code><br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220628233216.png" alt="20220628233216"></li><li><strong>嵌套块元素垂直外边距的塌陷。</strong>（对于两个嵌套关系（父子关系）的块元素，<code>父元素有上外边距同时子元素也有上外边距</code>，此时父元素会塌陷较大的外边距值。<code>浮动、固定，绝对定位的盒子不会有塌陷问题</code>。）解决方案：<code>为父元素添加overflow:hidden</code><br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220628234207.png" alt="20220628234207"></li></ol></li></ol></li></ol><h3 id="清除内外边距"><a href="#清除内外边距" class="headerlink" title="清除内外边距"></a>清除内外边距</h3><blockquote><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;<span class="comment">/*清除内边距*/</span></span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;<span class="comment">/*清除外边距*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：行内元素为了照顾兼容性，尽量只设置<code>左右内外边距</code>，不要设置上下内外边距。但是转换为块级和行内块元素就可以了</strong></p><h3 id="CSS3-新增样式"><a href="#CSS3-新增样式" class="headerlink" title="CSS3 新增样式"></a>CSS3 新增样式</h3><ol><li>圆角边框（border-radius）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 参数值可以为数值或百分比的形式</span></span><br><span class="line"><span class="comment">2. 如果是正方形，想要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为 50%</span></span><br><span class="line"><span class="comment">3. 如果是个矩形，设置为高度的一半就可以</span></span><br><span class="line"><span class="comment">4. length 属性是一个简写属性，可以跟四个值，分别代表 **左上角、右上角、右下角、左下角**</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="attribute">border-radius</span>: length;</span><br></pre></td></tr></table></figure></li><li>盒子阴影（box-shadow）<ol><li><code>默认的是外阴影（outset)</code>,但是不可以写这个单词，否则导致阴影无效。</li><li>盒子阴影<code>不占用空间</code>，不会影响其他盒子排列。</li></ol></li><li>文字阴影（text-shadow）</li></ol><h2 id="CSS-浮动"><a href="#CSS-浮动" class="headerlink" title="CSS 浮动"></a>CSS 浮动</h2><h3 id="传统网页布局方式"><a href="#传统网页布局方式" class="headerlink" title="传统网页布局方式"></a>传统网页布局方式</h3><blockquote><p>网页布局的本质：用CSS来摆放盒子。把盒子摆放到相应位置</p></blockquote><p>CSS提供了三种传统布局方式（一个页面基本都包含了这三种布局方式。）：</p><ol><li>标准流（普通流/文档流）：默认方式排列<ol><li>块级元素会<code>独占一行</code>，从上向下顺序排列。常用元素：<code>div、hr、p、h1~h6、ul、ol、dl、form、table</code> 。<ol><li>网页布局<strong>块级元素</strong>第一准则：多个块级元素<code>纵向排列找标准流</code>，多个块级元素<code>横向排列找浮动</code>。</li></ol></li><li>行内元素会按照顺序，从<code>左到右顺序排列</code>，碰到父元素边缘则自动换行。常用元素：<code>span、a、i、em</code> 等</li></ol></li><li>浮动（浮动可以改变元素标签默认的排列方式）</li><li>定位</li></ol><h3 id="浮动特性（重点）"><a href="#浮动特性（重点）" class="headerlink" title="浮动特性（重点）"></a>浮动特性（重点）</h3><ol><li>浮动元素会脱离标准流（脱标）<ol><li>脱离标准普通流的控制（浮）移动到指定位置（动）,俗称脱标。</li><li>浮动的盒子<code>不再保留原先的位置</code><br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220629161333.png" alt="20220629161333"></li></ol></li><li>浮动的元素会<code>一行内显示并且元素顶部对齐</code>。（注意：浮动的元素是互相贴靠在一起的（不会有缝隙）,如果父级宽度<strong>装不下</strong>这些浮动的盒子，多出的盒子会<strong>另起一行对齐</strong>。）<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220629162425.png" alt="20220629162425"></li><li><strong>浮动的元素会具有行内块元素的特性。</strong>（<strong>任何元素都可以浮动</strong>。不管原先是什么模式的元素，添加浮动之后<strong>具有行内块元素相似的特性</strong>。）</li><li>浮动元素只会压住它下面标准流的盒子，但是<strong>不会压住下面标准流盒子里面的文字（图片）。</strong></li></ol><h3 id="浮动元素经常和标准流父级搭配使用"><a href="#浮动元素经常和标准流父级搭配使用" class="headerlink" title="浮动元素经常和标准流父级搭配使用"></a>浮动元素经常和标准流父级搭配使用</h3><ol><li>先用<strong>标准流的父元素排列上下位置</strong>，之后<strong>内部子元素采取浮动排列左右位置</strong>。符合网页布局第一准则。<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220629182221.png" alt="20220629182221"></li><li>一个元素浮动了，理论上其余的兄弟元素也要浮动。（一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。）<br>浮动的盒子<strong>只会影响浮动盒子后面的标准流不会影响前面的标准流</strong></li></ol><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><blockquote><p>由于父级盒子很多情况下，<strong>不方便给高度</strong>，但是<strong>子盒子浮动又不占有位置</strong>，最后<strong>父级盒子高度为0</strong>时，就会<strong>影响下面的标准流盒子</strong>（塌陷）。</p></blockquote><h4 id="清除浮动语法"><a href="#清除浮动语法" class="headerlink" title="清除浮动语法"></a>清除浮动语法</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">clear</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td><strong>both（常用）</strong></td><td><strong>同时清除左右两侧浮动的影响</strong></td></tr></tbody></table></div><ol><li>清除浮动的本质是<strong>清除浮动元素造成的影响</strong></li><li>如果<strong>父盒子本身有高度，则不需要清除浮动</strong></li><li><strong>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。父级有了高度，就不会影响下面的标准流了</strong></li><li>清除浮动的策略是：<strong>闭合浮动。</strong>（只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子.）</li></ol><h4 id="清除浮动方法"><a href="#清除浮动方法" class="headerlink" title="清除浮动方法"></a>清除浮动方法</h4><ol><li>额外标签法也称为隔墙法，是W3C推荐的做法。<br>额外标签法会在<strong>浮动元素末尾添加一个空的标签（必须是块级元素）</strong>。例如 <code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code>,或者其他标签(如<code>&lt;br/&gt;</code>等）。<br>优点：通俗易懂，书写方便<br>缺点：添加许多<strong>无意义的标签，结构化较差</strong></li><li><strong>父级添加overflow属性</strong><br>给父级添加 overflow 属性，将其属性值设置为 <code>hidden、auto 或 scroll。</code><br>优点：代码简洁<br>缺点：<strong>无法显示溢出的部分</strong></li><li><strong>父级添加after伪元素</strong><br>:after 方式是额外标签法的升级版。<strong>是给父元素添加。</strong><br>优点：没有增加标签，结构更简单<br>缺点：<strong>照顾低版本浏览器</strong><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block ;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;<span class="comment">/*IE6、7专有*/</span></span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><strong>父级添加双伪元素</strong><br>优点：代码更简洁<br>缺点：照顾低版本浏览器<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="PS-切图"><a href="#PS-切图" class="headerlink" title="PS 切图"></a>PS 切图</h2><blockquote><p>UI 设计师完成 PSD 后再由前端去完成页面的还原制作。</p></blockquote><h3 id="PS-测量效果图"><a href="#PS-测量效果图" class="headerlink" title="PS 测量效果图"></a>PS 测量效果图</h3><ul><li>文件→打开：可以打开我们要测量的图片</li><li>Ctrl+R:可以打开标尺，或者视图→标尺</li><li>右击标尺，把里面的单位改为像素</li><li>Ctrl+加号（+)可以放大视图，Ctrl+减号（-)可以缩小视图</li><li>按住空格键，鼠标可以变成小手，拖动PS视图</li><li>用选区拖动可以测量大小</li><li>Ctrl+D可以取消选区，或者在旁边空白处点击一下也可以取消选区</li></ul><h3 id="图层切图"><a href="#图层切图" class="headerlink" title="图层切图"></a>图层切图</h3><h4 id="导出图层"><a href="#导出图层" class="headerlink" title="导出图层"></a>导出图层</h4><ol><li>用选择工具选择对应的图层。</li><li>右击图层→快速导出为PNG。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220630130446.png" alt="20220630130446"></p><h4 id="合并图层"><a href="#合并图层" class="headerlink" title="合并图层"></a>合并图层</h4><ol><li>选中需要的图层：图层菜单→合并图层（<code>ctrl+e</code>)</li><li>右击 → 快速导出为PNG</li></ol><h3 id="切片切图"><a href="#切片切图" class="headerlink" title="切片切图"></a>切片切图</h3><ol><li>利用切片选中图片<br>利用切片工具手动划出:<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220630131023.png" alt="20220630131023"></li><li>导出选中的图片<br>文件菜单→导出→存储为web设备所用格式→选择我们要的图片格式→存储。</li></ol><h3 id="PS-插件切图"><a href="#PS-插件切图" class="headerlink" title="PS 插件切图"></a>PS 插件切图</h3><blockquote><p><code>Cutterman</code>（<a href="https://www.cutterman.cn/zh）是一款运行在Photoshop中的插件，能够自动将你需要的图层进行输出，以替代传统的手工“导出web所用格式”以及使用切片工具进行挨个切图的繁琐流程。">https://www.cutterman.cn/zh）是一款运行在Photoshop中的插件，能够自动将你需要的图层进行输出，以替代传统的手工“导出web所用格式”以及使用切片工具进行挨个切图的繁琐流程。</a></p></blockquote><p>注意：Cutterman 插件要求 PS <strong>必须是完整版</strong>。</p><h2 id="页面布局整体思路"><a href="#页面布局整体思路" class="headerlink" title="页面布局整体思路"></a>页面布局整体思路</h2><ol><li>必须确定页面的<strong>版心</strong>（可视区）,我们测量可得知。<ol><li>设置一个类：<code>.w &#123; width: 版心宽度; margin: auto; &#125;</code></li><li>给需要添加版心的盒子添加 <code>.w</code> 类名</li></ol></li><li>分析页面中的行模块，以及每个行模块中的列模块。其实页面布局第一准则.</li><li>一行中的列模块经常浮动布局，先确定每个列的大小，之后确定列的位置.页面布局第二准则</li><li>制作HTML结构。我们还是遵循，<strong>先有结构，后有样式</strong>的原则。结构永远最重要。</li><li>所以，先理清楚布局结构，再写代码尤为重要.这需要我们多写多积累.</li></ol><h2 id="CSS-定位"><a href="#CSS-定位" class="headerlink" title="CSS 定位"></a>CSS 定位</h2><blockquote><p>定位：将盒子<strong>定在某一个位置</strong>，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p></blockquote><h3 id="为什么要用定位"><a href="#为什么要用定位" class="headerlink" title="为什么要用定位"></a>为什么要用定位</h3><ol><li>浮动可以让多个块级盒子一行没有缝隙排列显示，经常用于<strong>横向排列盒子</strong>。</li><li>定位则是可以让盒子<strong>自由的在某个盒子内移动位置</strong>或者<strong>固定屏幕中某个位置</strong>，并且可以<strong>压住其他盒子</strong>。</li></ol><h3 id="定位组成"><a href="#定位组成" class="headerlink" title="定位组成"></a>定位组成</h3><p>定位=定位模式+边偏移（定位模式用于指定一个元素在文档中的<strong>定位方式</strong>。边偏移则决定了该元素的<strong>最终位置</strong>。）</p><h4 id="定位模式：position"><a href="#定位模式：position" class="headerlink" title="定位模式：position"></a>定位模式：position</h4><div class="table-container"><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr><tr><td>sticky</td><td>粘性定位</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220701153129.png" alt="20220701153129"></p><ol><li>静态定位（默认定位方式，无定位。）<ol><li>静态定位按照标准流特性摆放位置，它没有边偏移。</li></ol></li><li>相对定位（相对于原来的位置定位。）<ol><li>它是相对于自己原来的位置来移动的（移动位置的时候参照点是自己原来的位置）。</li><li><strong>原来标准流的位置继续保留</strong>，后面的盒子仍然以<strong>标准流的方式对待它</strong>。（不脱标，继续保留原来位置。）</li><li>典型的应用是<strong>做绝对定位的父级。</strong></li></ol></li><li>绝对定位（相对于<strong>祖先元素</strong>定位。）<ol><li>如果没有祖先元素或者祖先元素没有定位，则<strong>以浏览器为准定位</strong>（Document文档）。</li><li>如果祖先元素有定位（相对、绝对、固定定位）,则以<strong>最近一级有定位祖先元素为参考点</strong>移动位置。</li><li><strong>绝对定位不再占有原先的位置。</strong>（脱标）</li><li>子级是绝对定位的话，父级要用相对定位。（<strong>子绝父相。</strong>）<ol><li>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</li><li>父盒子需要加定位限制子盒子在父盒子内显示。</li><li>父盒子布局时，需要占有位置，因此父亲只能是相对定位。</li></ol></li></ol></li><li>固定定位（固定于浏览器可视区的位置。）<ol><li>以浏览器的<strong>可视窗口为参照点</strong>移动元素。主要使用场景：可以在浏览器页面滚动时元素的<strong>位置不会改变</strong>。<ol><li>跟父元素没有任何关系。</li><li>不随滚动条滚动。</li></ol></li><li>固定定位<strong>不占有原先的位置</strong>。</li></ol></li><li>粘性定位（相对定位和固定定位的混合。）<ol><li>以浏览器的<strong>可视窗口为参照点移动元素</strong>（固定定位特点）。</li><li>粘性定位<strong>占有原先的位置</strong>（相对定位特点）。</li><li><strong>必须添加</strong> top、left、right、bottom <strong>其中一个才有效。</strong></li></ol></li></ol><h4 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h4><div class="table-container"><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离。</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离。</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离。</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离。</td></tr></tbody></table></div><h3 id="定位拓展（重要）"><a href="#定位拓展（重要）" class="headerlink" title="定位拓展（重要）"></a>定位拓展（重要）</h3><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><ol><li>绝对定位的盒子居中（ <strong>加了绝对定位的盒子不能通过 margin: 0 auto 水平居中</strong>，但是可以通过以下计算方法实现水平和垂直居中。）<ol><li>水平居中<ol><li><code>left:50%;</code> （ 让盒子的左侧移动到父级元素的水平中心位置。）</li><li><code>margin-left:-自身宽度的一半;</code>（ 让盒子向左移动自身宽度的一半。）</li></ol></li><li>垂直居中<ol><li><code>left:50%;</code> （ 让盒子的左侧移动到父级元素的水平中心位置。）</li><li><code>top:50%;</code> （ 让盒子的下侧移动到父级元素的水平中心位置。）</li><li><code>margin-top:-自身宽度的一半;</code>（ 让盒子向上移动自身宽度的一半。）</li><li><code>margin-left:-自身宽度的一半;</code>（ 让盒子向左移动自身宽度的一半。）</li></ol></li></ol></li></ol><h4 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h4><ol><li>固定定位小技巧：<strong>固定在版心右侧位置</strong>。算法：<ol><li>让固定定位的盒子 <code>left:50%</code> 。走到浏览器可视区（也可以看做版心）的一半位置。</li><li>让固定定位的盒子<code>margin-left: 版心宽度的一半距离</code>。多走版心宽度的一半位置就可以让固定定位的盒子贴着版心右侧对齐了。<br>效果：<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220824162125.png" alt="20220824162125"></li></ol></li></ol><h4 id="定位特殊特性"><a href="#定位特殊特性" class="headerlink" title="定位特殊特性"></a>定位特殊特性</h4><ol><li><strong>行内元素</strong>添加<strong>绝对或者固定定位</strong>，可以<strong>直接设置高度和宽度</strong>。</li><li><strong>块级元素</strong>添加<strong>绝对或者固定定位</strong>，如果不给宽度或者高度，<strong>默认大小是内容的大小</strong>。</li><li><strong>脱标的盒子不会触发外边距塌陷。（浮动元素、绝对定位（固定定位）元素的都不会触发外边距合并的问题</strong>。）</li><li><strong>绝对定位（固定定位）会完全压住盒子。</strong>（浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片）但是<strong>绝对定位（固定定位）会压住下面标准流所有的内容</strong>。）</li></ol><h3 id="定位叠放次序-z-index"><a href="#定位叠放次序-z-index" class="headerlink" title="定位叠放次序 z-index"></a>定位叠放次序 z-index</h3><blockquote><p>在使用定位布局时，可能会出现盒子重叠的情况。此时，可以使用z-index来控制盒子的<strong>前后次序</strong>（z轴）</p></blockquote><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. 数值可以是正整数、负整数或0,默认是auto,数值越大，盒子越靠上。</span></span><br><span class="line"><span class="comment">2. 如果属性值相同，则按照书写顺序，后来居上。</span></span><br><span class="line"><span class="comment">3. 数字后面不能加单位。</span></span><br><span class="line"><span class="comment">4. 只有定位的盒子才有z-index属性。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">选择器 &#123; <span class="attribute">z-index</span>:<span class="number">1</span>; &#125;</span><br></pre></td></tr></table></figure><h2 id="CSS-元素的显示与隐藏"><a href="#CSS-元素的显示与隐藏" class="headerlink" title="CSS 元素的显示与隐藏"></a>CSS 元素的显示与隐藏</h2><ol><li>display显示隐藏<br>display属性用于设置一个元素应如何显示。<ol><li>display:none; 隐藏对象（<strong>不再占有原来的位置</strong>。）</li><li>display:block; 除了转换为块级元素之外，同时还有显示元素的意思</li></ol></li><li>visibility显示隐藏（<strong>继续占有原来的位置</strong>。）<ol><li>visibility:visible; 元素可视。</li><li>visibility:hidden; 元素隐藏。</li></ol></li><li>overflow 溢出显示隐藏<ol><li>如果<strong>有定位的盒子</strong>，<strong>请慎用 overflow:hidden</strong> 因为它会隐藏多余的部分。</li></ol></li></ol><h2 id="CSS-高级技巧"><a href="#CSS-高级技巧" class="headerlink" title="CSS 高级技巧"></a>CSS 高级技巧</h2><h3 id="精灵图"><a href="#精灵图" class="headerlink" title="精灵图"></a>精灵图</h3><blockquote><p>一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接收和发送请求图片，造成服务器请求压力过大，这将大大降低页面的加载速度。因此，<strong>为了有效地减少服务器接收和发送请求的次数，提高页面的加载速度</strong>，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p></blockquote><p><strong>核心原理</strong>：将网页中的一些小<strong>背景图像整合到一张大图中</strong>，这样服务器只需要一次请求就可以了。</p><p>精灵图使用：</p><ol><li>主要借助于背景位置来实现：<code>background-position</code></li><li>一般情况下精灵图都是负值。（千万注意网页中的坐标：x轴右边走是正值，左边走是负值，y轴同理。）<ol><li>使用 photoshop 获取 X、Y 坐标: （使用切片工具选择区域，然后右击切片查看切片选项。）<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220701221933.png" alt="20220701221933"></li><li>使用 photoshop 获取 X、Y 坐标: 按下 <code>F8</code> 键调出信息面板获取信息。(推荐)<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220705145622.png" alt="20220705145622"></li></ol></li></ol><p>精灵图是有诸多优点的，但是缺点很明显：</p><ol><li>图片文件还是比较大的。</li><li>图片本身放大和缩小会失真。</li><li>一旦图片制作完毕想要更换非常复杂。</li></ol><h3 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h3><blockquote><p>字体图标可以为前端工程师提供一种方便高效的图标使用方式，<strong>展示的是图标，本质属于字体。</strong></p></blockquote><p>字体图标使用：</p><ol><li>字体图标的下载<ol><li>阿里 iconfont字库：<a href="http://www.iconfont.cn/">http://www.iconfont.cn/</a></li><li>Font Awesome：<a href="https://fontawesome.com/icons">https://fontawesome.com/icons</a></li><li>icomoon字库：<a href="http://icomoon.io">http://icomoon.io</a></li></ol></li><li>字体图标的引入（具体可查看字体文件中的 <code>demo</code>，里面有使用步骤。）</li><li>字体图标的追加（各个字体库追加方法不同，用到的时候再自行百度。）</li></ol><p>字体图标的优点：</p><ol><li>轻量级：一个图标字体要比一系列的图像要小。一旦字体加载了，图标就会马上渲染出来，减少了服务器请求。</li><li>灵活性：本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果、旋转等。</li><li>兼容性：几乎支持所有的浏览器，请放心使用。</li></ol><p>注意：<strong>字体图标不能替代精灵技术</strong>，只是对工作中图标部分技术的提升和优化。</p><h3 id="CSS-三角"><a href="#CSS-三角" class="headerlink" title="CSS 三角"></a>CSS 三角</h3><blockquote><p>原理：利用盒子 border 属性设置 transparent 然后只保留一个边显示。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702004815.png" alt="20220702004815"></p><p>等腰三角：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">line-height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">   <span class="attribute">border-left-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直角三角：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">   <span class="attribute">border-color</span>: transparent red transparent transparent;</span><br><span class="line">   <span class="attribute">border-style</span>: solid;</span><br><span class="line">   <span class="attribute">border-width</span>: <span class="number">22px</span> <span class="number">8px</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-用户界面样式"><a href="#CSS-用户界面样式" class="headerlink" title="CSS 用户界面样式"></a>CSS 用户界面样式</h3><ol><li>更改用户的鼠标样式 <code>cursor</code></li><li>表单轮廓 <code>outline</code><br>给表单添加 <code>outline: 0;</code> 或者 <code>outline: none;</code> 样式之后，就可以去掉默认的蓝色边框。</li><li>防止表单域拖拽 <code>resize</code><br>给文本域添加 <code>resize: none;</code></li></ol><h3 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h3><blockquote><p>vertical-align属性使用场景：经常用于设置图片或者表单（<strong>只针对于行内元素或者行内块元素有效。</strong>）和文字<strong>垂直对齐</strong>。</p></blockquote><p>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span> : baseline | top | middle | bottom</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702012710.png" alt="20220702012710"></p><p>解决图片底部默认空白缝隙问题：（bug:图片底侧会有一个空白缝隙，原因是行内块元素会和文字的基线对齐。）</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702120325.png" alt="20220702120325"></p><p>解决方案：</p><ol><li>给图片添加 <strong>vertical-align: middle | top | bottom （提倡使用）</strong></li><li>把图片转换为块级元素 display: block;</li></ol><h3 id="溢出的文字省略号显示"><a href="#溢出的文字省略号显示" class="headerlink" title="溢出的文字省略号显示"></a>溢出的文字省略号显示</h3><blockquote><p>更推荐让后台人员来做这个效果，因为后台人员可以设置显示多少个字，操作更简单。</p></blockquote><ol><li><strong>单行</strong>文本溢出显示省略号<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.先强制一行内显示文本 (默认 normal 自动换行）*/</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/*2.超出的部分隐藏*/</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="comment">/*3.文字用省略号替代超出的部分*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br></pre></td></tr></table></figure></li><li><strong>多行</strong>文本溢出显示省略号（要注意包含文字的盒子<strong>设置合理的高度。</strong>）<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/*弹性伸缩盒子模型显示*/</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="comment">/*限制在一个块元素显示的文本的行数*/</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/*设置或检索伸缩盒对象的子元素的排列方式*/</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见布局技巧"><a href="#常见布局技巧" class="headerlink" title="常见布局技巧"></a>常见布局技巧</h3><ol><li>margin负值的运用<br>解决盒子边框叠加的问题：<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702132215.png" alt="20220702132215"><br>让每个盒子margin往左侧移动-1px正好压住相邻盒子边框：<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702132729.png" alt="20220702132729"><br>添加鼠标 hover 边框效果：如果父级没有有定位，则直接给子元素加相对定位（保留位置）如果父级有定位，则加z-index 提高层级<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220702133913.png" alt="20220702133913"></li><li>文字围绕浮动元素（浮动元素不会压住文字。）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.img</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;img&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./Static/img/lunbotu.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet consectetur adipisicing elit. Similique fuga ea earum tempora? Quae exercitationem</span><br><span class="line">            explicabo magni, perferendis modi harum quidem beatae consequatur doloribus tempore cumque fugiat laborum</span><br><span class="line">            cupiditate deserunt.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>行内块的巧妙运用（给行内元素/行内块元素的父级添加 <code>text-align: center;</code> 属性即可实现行内元素/行内块元素水平居中。）<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: springgreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">48px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: royalblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="CSS-初始化（京东）"><a href="#CSS-初始化（京东）" class="headerlink" title="CSS 初始化（京东）"></a>CSS 初始化（京东）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">em</span>,</span><br><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">font-style</span>: normal</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">vertical-align</span>: middle</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#c81623</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* CSS3 抗锯齿，让文字显示的更加清晰 */</span></span><br><span class="line">    -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei, Heiti SC, tahoma, arial, Hiragino Sans GB, <span class="string">&quot;\5B8B\4F53&quot;</span>, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hide</span>,</span><br><span class="line"><span class="selector-class">.none</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    *zoom: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS3-新特性"><a href="#CSS3-新特性" class="headerlink" title="CSS3 新特性"></a>CSS3 新特性</h2><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><blockquote><p>属性选择器可以根据元素<strong>特定的属性</strong>来<strong>选择元素</strong>。这样就可以不用借助于类或者id选择器。</p></blockquote><div class="table-container"><table><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E[att]</td><td>选择<strong>具有</strong>att属性的E元素</td></tr><tr><td><strong>E[att=”val”]</strong></td><td>选择具有att属性且属性值<strong>等于</strong>val的E元素</td></tr><tr><td>E[att^=”val”]</td><td>匹配具有att属性且值以val<strong>开头</strong>的E元素</td></tr><tr><td>E[att$=”val”]</td><td>匹配具有att属性且值以val<strong>结尾</strong>的E元素</td></tr><tr><td>E[att*=”val”]</td><td>匹配具有att属性且值中<strong>含有</strong>val的E元素</td></tr></tbody></table></div><p>补充：注意权重问题，类选择器、伪类选择器、<strong>属性选择器，权重为 10</strong>。</p><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><blockquote><p>结构伪类选择器主要根据<strong>文档结构</strong>来选择器元素，常用于<strong>根据父级选择器里面的子元素</strong></p></blockquote><div class="table-container"><table><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td><strong>E:nth-child(n)</strong></td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type(n)</td><td>指定类型E的第n个</td></tr></tbody></table></div><p>补充1：E:nth-child(n) 不仅可以输入数字单选，还可以<strong>输入关键字和公式</strong>进行多选。</p><ol><li>n 如果是数字，就是选择第n个子元素，里面数字从1开始…</li><li>n可以是关键字：<strong>even偶数，odd奇数</strong></li><li>n可以是公式：常见的公式如下（如果n是公式（只能是 n 不能是其他字母），则<strong>从0开始计算，但是第0个元素或者超出了元素的个数会被忽略</strong>）</li></ol><div class="table-container"><table><thead><tr><th>公式</th><th>取值</th></tr></thead><tbody><tr><td>2n</td><td>偶数</td></tr><tr><td>2n+1</td><td>奇数</td></tr><tr><td>5n</td><td>5 10 15…</td></tr><tr><td>n+5</td><td>从第5个开始（包含第五个）到最后</td></tr><tr><td>-n+5</td><td>前5个（包含第5个）…</td></tr></tbody></table></div><p>补充2：<strong>E:nth-child(n) 和 E:nth-of-type(n) 的区别</strong></p><p><strong>E:nth-child(n) 是选择父元素的第n个子元素。</strong></p><ul><li>nth-child 对父元素里面所有孩子排序选择（序号是固定的）<strong>先找到第n个孩子，然后看看是否和E匹配</strong></li></ul><p><strong>E:nth-of-type(n) 是选择父元素的第n个同类型的子元素.</strong></p><ul><li>nth-of-type 对父元素里面<strong>指定子元素</strong>进行排序选择。<strong>先去匹配E,然后再根据E找第n个孩子</strong></li></ul><h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><blockquote><p>伪元素选择器可以帮助我们<strong>利用CSS创建新标签元素</strong>，而不需要HTML标签，从而<strong>简化HTML结构</strong>。</p></blockquote><div class="table-container"><table><thead><tr><th>选择符</th><th>描述</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table></div><p>注意：</p><ol><li>before和after创建一个元素，但是属于<strong>行内元素，不可以直接设置宽高。</strong></li><li>新创建的这个元素在文档树中是找不到的，所以我们称为伪元素</li><li>语法：element::before {}</li><li>before和after必须有<strong>content属性</strong></li><li>before在父元素<strong>内容（内部）</strong>的前面创建元素，after在父元素内容的后面插入元素</li><li>伪元素选择器和标签选择器一样，<strong>权重为1</strong></li></ol><p>伪元素应用场景：</p><ol><li>伪元素字体图标</li><li>创建遮罩层</li><li>清除浮动</li></ol><h3 id="CSS3-盒子模型"><a href="#CSS3-盒子模型" class="headerlink" title="CSS3 盒子模型"></a>CSS3 盒子模型</h3><blockquote><p>CSS3 中可以通过 <strong>box-sizing</strong> 来指定盒模型，有2个值：即可指定为 content-box、<strong>border-box</strong></p></blockquote><ol><li>box-sizing: <code>content-box</code> 盒子大小为 width+padding+border（以前默认的）</li><li>box-sizing: <code>border-box</code> 盒子大小为 width（ padding 和 border 就不会撑大盒子了（<strong>前提 padding 和  border 不会超过 width 宽度</strong>））</li></ol><h3 id="CSS3-其他特性（了解）"><a href="#CSS3-其他特性（了解）" class="headerlink" title="CSS3 其他特性（了解）"></a>CSS3 其他特性（了解）</h3><ol><li>CSS3 filter: filter CSS属性 将模糊或颜色偏移等图形效果应用于元素。</li><li>CSS3 calc 函数：calc() 函数可以让你在声明 CSS 属性值时执行一些计算。例：<code>width: calc(100% - 80px);</code> 括号里面可以使用 <code>+ - * /</code> 来进行计算。</li></ol><h3 id="CSS3-过渡（重点）"><a href="#CSS3-过渡（重点）" class="headerlink" title="CSS3 过渡（重点）"></a>CSS3 过渡（重点）</h3><blockquote><p>经常和 <code>:hover</code> 一起搭配使用。(谁做过渡给谁加,多个变换属性利用<strong>逗号</strong>进行分隔，都变换就属性写<code>all</code>就行。)</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: tomato;</span><br><span class="line">   <span class="comment">/* 谁做过渡给谁加 */</span></span><br><span class="line">   <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-转换"><a href="#CSS3-转换" class="headerlink" title="CSS3 转换"></a>CSS3 转换</h3><blockquote><p>转换（transform) 是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、缩放等效果（可以简单理解为变形）</p></blockquote><h4 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h4><p>2D转换是改变标签在二维平面上的位置和形状的一种技术。</p><p>二维坐标系：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220705182802.png" alt="20220705182802"></p><ol><li>移动：translate<br> 2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，类似<strong>定位</strong>。 <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(x,y);</span><br><span class="line"><span class="comment">/* 或者分开写 */</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateX</span>(n);</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translateY</span>(n);</span><br></pre></td></tr></table></figure> 重点：<ul><li>定义2D转换中的移动，沿着X和Y轴移动元素</li><li>translate最大的优点：<strong>不会影响到其他元素的位置</strong></li><li>translate中的百分比单位是<strong>相对于自身元素的</strong>translate: (50%,50%);</li><li>对<strong>行内标签</strong>没有效果</li></ul></li><li>旋转：rotate<br>2D旋转指的是让元素在2维平面内<strong>顺时针旋转或者逆时针旋转</strong>。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(度数)</span><br></pre></td></tr></table></figure>重点：<ul><li>rotate里面跟度数，单位是 <code>deg</code> 比如 rotate(45deg)</li><li>角度为正时，顺时针，负时，为逆时针</li><li>默认旋转的<strong>中心点</strong>是元素的中心点<ul><li>2D转换中心点 <code>transform-origin</code>（设置元素转换的中心点）</li></ul></li></ul></li><li>缩放：scale<br>只要给元素添加上了这个属性就能控制它放大还是缩小。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 参数之间用逗号分隔 --&gt;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x,y);</span><br></pre></td></tr></table></figure>重点：<ul><li>transform: scale(1,1):宽和高都放大一倍，相对于没有放大</li><li>transform: scale(2,2):宽和高都放大了2倍</li><li>transform: scale(2):只写一个参数，第二个参数则和第一个参数一样，相当于scale(2,2)</li><li>transform: scale(0.5,0.5):缩小</li><li>sacle 缩放最大的优势：<strong>可以设置转换中心点缩放</strong>，默认以中心点缩放的，而且<strong>不影响其他盒子。</strong></li></ul></li><li>2D 转换综合写法（<code>transform:translate()rotate()scale()...</code>）<ul><li>其顺序会影转换的效果。（先旋转会改变坐标轴方向）</li><li>当我们同时有位移和其他属性的时候，记得要将<strong>位移放到最前</strong></li></ul></li></ol><p><strong>transform: translate 拓展：</strong>利用translate中的百分比单位是相对于自身元素，让一个盒子<strong>水平垂直居中</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="attribute">position</span>: absolute;</span><br><span class="line">   <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="comment">/* translate(-50%, -50%) 是向x轴和y轴移动负的自身宽度一半 */</span></span><br><span class="line">   <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">   <span class="attribute">background-color</span>: cornsilk;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>transform: rotate 拓展：</strong> 纯 CSS3 书写三角</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220706151741.png" alt="20220706151741"></p><p>代码：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#e44d26</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#e44d26</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>transform: rotate 拓展</strong>：旋转中心点</p><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220706153950.png" alt="20220706153950"></p><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid slateblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;CONTENT&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: teal;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 核心代码 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform-origin</span>: left bottom;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>)</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h4><p>三维坐标系其实就是指立体空间，立体空间是由3个轴共同组成的</p><ul><li>x轴：水平向右注意：x右边是正值，左边是负值</li><li>y轴：垂直向下注意：y下面是正值，上面是负值</li><li>z轴：垂直屏幕注意：往外面是正值，往里面是负值</li></ul><ol><li>3D位移：translate3d(x,y,z)<ul><li>translform: translateX(100px): 仅仅是在X轴上移动</li><li>translform: translateY(100px): 仅仅是在Y轴上移动</li><li>translform: translateZ(100px): 仅仅是在Z轴上移动（<strong>注意：translateZ一般用px单位</strong>）</li><li>transform: translate3d(x,y,z): 其中x、y、Z分别指要移动的轴的方向的距离</li></ul></li><li>3D旋转：rotate3d(x,y,z)<ul><li>transform: rotateX(45deg): 沿着x轴正方向旋转45度</li><li>transform: rotateY(45deg): 沿着y轴正方向旋转45deg</li><li>transform: rotateZ(45deg): 沿着Z轴正方向旋转45deg</li><li>transform: rotate3d(x,y,z,deg): 沿着自定义轴旋转deg为角度（了解即可）</li></ul></li><li>透视：perspective<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220706222919.png" alt="20220706222919"><ul><li>如果想要在网页产生3D效果需要透视（理解成3D物体投影在2D平面内）。</li><li>透视我们也称为视距：视距就是人的眼睛到屏幕的距离</li><li>距离视觉点越近的在电脑平面成像越大，越远成像越小</li><li>透视的单位是<strong>像素</strong></li><li>透视写在被观察元素的<strong>父盒子</strong>上面的</li><li>d: 就是视距，视距就是一个距离人的眼睛到屏幕的距离。</li><li>z: 就是z轴，<strong>物体距离屏幕的距离</strong>，z轴越大（正值）我们看到的物体就越大。</li></ul></li><li>3D呈现 transfrom-style（控制子元素是否开启三维立体环境）<ul><li>transform-style: flat子元素不开启3d立体空间默认的</li><li>transform-style: preserve-3d;子元素开启立体空间</li><li>代码写给父级，但是影响的是子盒子</li><li>这个属性很重要，后面必用</li></ul></li></ol><h3 id="CSS3-动画"><a href="#CSS3-动画" class="headerlink" title="CSS3 动画"></a>CSS3 动画</h3><blockquote><p>动画（animation)是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画,常用来实现复杂的幼画效果。</p></blockquote><h4 id="动画的基本使用"><a href="#动画的基本使用" class="headerlink" title="动画的基本使用"></a>动画的基本使用</h4><p>制作动画分为两步：</p><ol><li>定义动画<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">动画序列：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">0%是动画的开始，100%是动画的完成。这样的规则就是动画序列。</span></span><br><span class="line"><span class="comment">在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</span></span><br><span class="line"><span class="comment">动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变**任意多的样式任意多的次数**。</span></span><br><span class="line"><span class="comment">请用百分比来规定变化发生的时间，或用关键词 &quot;from&quot; 和 &quot;to&quot; ,等同于0%和100%。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">   <span class="number">0%</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="number">100%</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>调用动画<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">元素 &#123;</span><br><span class="line">   <span class="comment">/*调用动画*/</span></span><br><span class="line">   <span class="attribute">animation-name</span>: 动画名称;</span><br><span class="line">   <span class="comment">/*持续时间*/</span></span><br><span class="line">   <span class="attribute">animation-duration</span>: 持续时间;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="动画常用属性"><a href="#动画常用属性" class="headerlink" title="动画常用属性"></a>动画常用属性</h4><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了 animation-play-state 属性。</td></tr><tr><td>animation-name</td><td>规定 @keyframes 动画的名称。（必须的）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是 0。（必须的）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是 “ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是 1,还有 infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是 “normal” , alternate 逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是 “running” ,还有 “paused” 。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持 forwards 回到起始 backwards</td></tr></tbody></table></div><p>动画简写属性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* animation: 动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态； */</span></span><br><span class="line"><span class="attribute">animation</span>: name duration timing-function delay iteration-count direction fill-mode;</span><br></pre></td></tr></table></figure><h3 id="浏览器私有前缀"><a href="#浏览器私有前缀" class="headerlink" title="浏览器私有前缀"></a>浏览器私有前缀</h3><blockquote><p>浏览器私有前缀是为了兼容老版本的写法，比较新版本的浏览器无须添加。</p></blockquote><p>私有前缀：</p><p>-moz-: 代表firefox浏览器私有属性<br>-ms-: 代表ie浏览器私有属性<br>-webkit-: 代表satari、chrome私有属性<br>-o-: 代表Opera私有属性</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> CSS </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css(3) </tag>
            
            <tag> html(5) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发手册</title>
      <link href="/2022/06/232022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/f26f5ee8/"/>
      <url>/2022/06/232022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/f26f5ee8/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5-amp-CSS3"><a href="#HTML5-amp-CSS3" class="headerlink" title="HTML5 &amp; CSS3"></a>HTML5 &amp; CSS3</h1><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>HTML基础语法 | 排版标签 | 路径 | 多媒体标签 | 链接标签 | 列表标签 | 表格标签 | 表单标签 | 布局标签 | 语义化标签 | 字符实体 | SEO 基础的优化(logo 优化)</p><div class="table-container"><table><thead><tr><th>知识点</th><th>笔记地址</th></tr></thead><tbody><tr><td><div class='checkbox green'><input type="checkbox" />            <p>基础语法</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>排版标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>路径</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>多媒体标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>链接标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>列表标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>表格标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>表单标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>布局标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>语义化标签</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>字符实体</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>SEO 基础的优化 (logo 优化)</p>            </div></td></tr></tbody></table></div><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>选择器 | 外观 | 文字 | 背景 | 标准流 | 三大特性 | 盒模型 | 伪元素 | 浮动 | 伪类 | 定位 | 圆角 | 阴影 | 透明 | 过渡 | 显示 | 网格布局 | 弹性布局(圣杯布局，双飞翼布局，品字布局)</p><div class='checkbox cyan'><input type="checkbox" />            <p>选择器</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>外观</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>文字</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>背景</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>标准流</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>三大特性</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>盒模型</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>伪元素</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>浮动</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>伪类</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>定位</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>圆角</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>阴影</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>透明</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>过渡</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>显示</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>网格布局</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>弹性布局(圣杯布局，双飞翼布局，品字布局)</p>            </div><h1 id="移动-Web"><a href="#移动-Web" class="headerlink" title="移动 Web"></a>移动 Web</h1><h2 id="CSS高级特效"><a href="#CSS高级特效" class="headerlink" title="CSS高级特效"></a>CSS高级特效</h2><p>字体图标｜2D转换｜3D转换｜动画</p><div class='checkbox cyan'><input type="checkbox" />            <p>字体图标</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>2D 转换</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>3D 转换</p>            </div><div class='checkbox cyan'><input type="checkbox" />            <p>动画</p>            </div><h2 id="移动适配"><a href="#移动适配" class="headerlink" title="移动适配"></a>移动适配</h2><p>rem ｜ vw/vh｜Flex布局模型｜Less基础语法｜视口｜分辨率｜二倍图｜移动适配｜媒体查询</p><div class='checkbox gray'><input type="checkbox" />            <p>rem</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>vw/vh</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Flex布局模型</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Less基础语法</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>视口</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>分辨率</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>二倍图</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>移动适配</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>媒体查询</p>            </div><h2 id="响应式"><a href="#响应式" class="headerlink" title="响应式"></a>响应式</h2><p>媒体查询｜ bootstrap框架｜栅格系统｜组件｜响应式网页布局</p><div class='checkbox yellow'><input type="checkbox" />            <p>媒体查询</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>bootstrap框架</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>栅格系统</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>组件</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>响应式网页布局</p>            </div><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h2><p>变量 | 基本数据类型 | 数据类型的转换 | 运算符 | if分支 | switch分支 | 三元表达式 | while循环 | for循环 | 数组 | 函数 | 对象 | 内置对象 | let / const | 字面量</p><div class='checkbox red'><input type="checkbox" />            <p>变量</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>基本数据类型</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>数据类型的转换</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>运算符</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>if分支</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>switch分支</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>三元表达式</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>while循环</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>for循环</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>数组</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>函数</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>对象</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>内置对象</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>let / const</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>字面量</p>            </div><h2 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h2><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM树 | DOM对象 | 获取元素 | innerHTML | style | className | classList | 间歇函数 | 延迟函数 | 事件监听 | 鼠标事件 | 键盘事件 | 高阶函数 | 环境对象 | 节点操作 | 事件流 | 事件委托 | 元素位置</p><div class='checkbox yellow'><input type="checkbox" />            <p>DOM 树</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>DOM 对象</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>获取元素</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>innerHTML</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>style</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>className</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>classList</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>间歇函数</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>延迟函数</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>事件监听</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>鼠标事件</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>键盘事件</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>高阶函数</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>环境对象</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>节点操作</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>事件流</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>事件委托</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>元素位置</p>            </div><h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM | window对象 | swiper插件 | 本地存储 | 自定义属性 | 正则表达式</p><div class='checkbox yellow'><input type="checkbox" />            <p>BOM</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>window对象</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>swiper插件</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>本地存储</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>自定义属性</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>正则表达式</p>            </div><h2 id="JavaScript高级"><a href="#JavaScript高级" class="headerlink" title="JavaScript高级"></a>JavaScript高级</h2><p>构造函数 | 单体对象 | 面向对象 / 原型/原型链 | 解构 | 剩余 | 展开 | 箭头函数 | Object | Array | 严格模式 | 闭包 | 继承 | 防抖 | 节流 | 异常处理 | 深浅拷贝 | JS 阻塞 | 懒加载 | 作用域/作用域链 | 异步/事件循环机制 | ES6~ES12 | </p><div class="table-container"><table><thead><tr><th>知识点</th><th>Description</th></tr></thead><tbody><tr><td><div class='checkbox green'><input type="checkbox" />            <p>构造函数</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>单体对象</p>            </div></td><td></td></tr><tr><td><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>面向对象 / 原型 / 原型链</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>解构</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>剩余</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>展开</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>箭头函数</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>Object</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>Array</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>严格模式</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>闭包</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>继承</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>防抖</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>节流</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>异常处理</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>深浅拷贝</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>JS 阻塞</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>懒加载</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>作用域 / 作用域链</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>异步 / 事件循环机制</p>            </div></td><td></td></tr><tr><td><div class='checkbox green'><input type="checkbox" />            <p>ES6~ES12</p>            </div></td></tr></tbody></table></div><h2 id="底层原理实现"><a href="#底层原理实现" class="headerlink" title="底层原理实现"></a>底层原理实现</h2><div class='checkbox yellow'><input type="checkbox" />            <p>自定义 promise</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>自定义 axios</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>自定义 PubSub</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>自定义 EventBus</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>自定义 React、Vue 脚手架</p>            </div><div class='checkbox yellow'><input type="checkbox" />            <p>自定义实现 lodash 方法</p>            </div><h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><blockquote><ul><li>利用 axios 发起 Ajax 请求，实现前后端的数据交互。了解 HTTP 请求的过程以及 Ajax 的底层原理。</li><li>深入学习 JS 异步的底层原理，能够使用 Promise 处理异步操作，并使用 async/await 简化异步操作。</li></ul></blockquote><p>客户端与服务器 | axios | 请求与响应报文 | 接口 | form 表单 | 拦截器 | FormData | 文件上传 | XMLHttpRequest | Promise | async / await | EventLoop | 宏任务 / 微任务</p><div class='checkbox red'><input type="checkbox" />            <p>客户端与服务器</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>axios</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>请求与响应报文</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>接口</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>form 表单</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>拦截器</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>FormData</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>文件上传</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>XMLHttpRequest</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>Promise</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>async / await</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>EventLoop</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>宏任务 / 微任务</p>            </div><h3 id="Web-安全"><a href="#Web-安全" class="headerlink" title="Web 安全"></a>Web 安全</h3><div class='checkbox red'><input type="checkbox" />            <p>HTTPS</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>内容安全策略（CSP）</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>跨域资源共享</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>OWASP 安全风险</p>            </div><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><blockquote><ul><li>能够创建 Git 仓库<strong>管理项目</strong>，基于 Git 分支进行<strong>多人协同开发</strong></li></ul></blockquote><p>安装和配置 Git | Git 本地操作的常用命令 | .gitignore 忽略文件 | Git 分支与常用命令 | 远程仓库的使用</p><div class='checkbox gray'><input type="checkbox" />            <p>安装和配置 Git</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Git 本地操作的常用命令</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>.gitignore 忽略文件</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Git 分支与常用命令</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>远程仓库的使用</p>            </div><div class="tag link"><a class="link-card" title="Git快速上手" href="https://haloboys.github.io/2022/09/20%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Git_Git%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/efc31b2a/"><div class="left"><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/git.jpg"/></div><div class="right"><p class="text">Git快速上手</p><p class="url">https://haloboys.github.io/2022/09/20%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Git_Git%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/efc31b2a/</p></div></a></div><h1 id="Vue-Vue2-Vue3"><a href="#Vue-Vue2-Vue3" class="headerlink" title="Vue (Vue2 + Vue3)"></a>Vue (Vue2 + Vue3)</h1><h2 id="预备阶段"><a href="#预备阶段" class="headerlink" title="预备阶段"></a>预备阶段</h2><blockquote><ul><li>掌握模块化思想，npm包管理，webpack基础，初探工程化开发。</li></ul></blockquote><p>Node.js安装 | fs模块 | path模块 | http模块 | npm | 包配置文件 | npm常用命令 | 模块化概念 | CommonJS | ES6Module | 工程化开发概念 | webpack基础配置 | dev-server | webpack插件 | 常用loader | babel</p><div class='checkbox green'><input type="checkbox" />            <p>Node.js安装</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>fs模块</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>path模块</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>http模块</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>npm</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>包配置文件</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>npm常用命令</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>模块化概念</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>CommonJS</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>ES6Module</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>工程化开发概念</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>webpack基础配置</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>dev-server</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>webpack插件</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>常用loader</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>babel</p>            </div><h2 id="Vue-核心技术"><a href="#Vue-核心技术" class="headerlink" title="Vue 核心技术"></a>Vue 核心技术</h2><p>MVVM | SPA | Vue 调试工具 | 虚拟DOM | diff算法 | 指令系统 | v-model原理 | 数据选项 | 生命周期 | 样式穿透 | 动态样式 | 插槽 | 组件系统 | 组件通信 | 自定义指令 | ref | 动态组件 | $nextTick | 自定义事件 | 计算属性 | 侦听器 | 组件库 | 组件封装 | keep-alive | 路由系统 | 导航守卫 | vue-cli | vuex | vant | element-ui | 路由懒加载</p><div class='checkbox green'><input type="checkbox" />            <p>MVVM</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>SPA</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>Vue 调试工具</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>虚拟DOM</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>diff算法</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>指令系统</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>v-model原理</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>数据选项</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>生命周期</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>样式穿透</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>动态样式</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>插槽</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>组件系统</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>组件通信</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>自定义指令</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>ref</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>动态组件</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>$ nextTick</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>自定义事件</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>计算属性</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>侦听器</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>组件库</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>组件封装</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>keep-alive</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>路由系统</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>导航守卫</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>vue-cli</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>vuex</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>vant</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>element-ui</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>路由懒加载</p>            </div><h2 id="Vue3-0-（Vue3-TypeScript）"><a href="#Vue3-0-（Vue3-TypeScript）" class="headerlink" title="Vue3.0 （Vue3 + TypeScript）"></a>Vue3.0 （Vue3 + TypeScript）</h2><blockquote><ul><li>掌握Vue3新特性、Vite、组合 API、Pinia …</li></ul></blockquote><p>Vite | 选项API | 组合API | setup | 生命周期 | reactive | toRef | toRefs | computed | 组件通信 | 依赖注入 | ref边界 | Pinia</p><div class='checkbox green'><input type="checkbox" />            <p>Vite</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>选项API</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>组合API</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>setup</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>生命周期</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>reactive</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>toRef</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>toRefs</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>computed</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>组件通信</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>依赖注入</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>ref 边界</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>Pinia</p>            </div><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><blockquote><ul><li>掌握TypeScript基础语法，并且在Vue3项目中熟练运用TypeScript</li></ul></blockquote><p>基础类型｜联合类型｜字面量类型｜类型推断 | 类型断言 | 泛型 | 类型声明 | ts结合composition-api | ts结合axios | 头条案例</p><div class='checkbox blue'><input type="checkbox" />            <p>基础类型</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>联合类型</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>字面量类型</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>类型推断</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>类型断言</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>泛型</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>类型声明</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>ts 结合 composition-api</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>ts 结合 axios</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>头条案例</p>            </div><h1 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h1><h2 id="原生小程序"><a href="#原生小程序" class="headerlink" title="原生小程序"></a>原生小程序</h2><p>账号申请 | 开发工具 | 工程目录 | 项目配置 | 屏幕适配 | 资源托管 | 字体图标 | 数据绑定 | 事件处理 | 生命周期 | 场景值 | 模块化 | 网络请求 | 路由 | WXS | 模板 | 组件 | UI 框架 | 表单 | Promise</p><div class='checkbox gray'><input type="checkbox" />            <p>账号申请</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>开发工具</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>工程目录</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>项目配置</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>屏幕适配</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>资源托管</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>字体图标</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>数据绑定</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>事件处理</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>生命周期</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>场景值</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>模块化</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>网络请求</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>路由</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>WXS</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>模板</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>组件</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>UI 框架</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>表单</p>            </div><div class='checkbox gray'><input type="checkbox" />            <p>Promise</p>            </div><h2 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h2><p>脚手架 | 项目配置 | 单文件组件 | 生命周期 | 条件编译 | 计算属性 | 跨平台支持 | less | sass | 组件通信</p><div class='checkbox blue'><input type="checkbox" />            <p>脚手架</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>项目配置</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>单文件组件</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>生命周期</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>条件编译</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>计算属性</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>跨平台支持</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>less</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>sass</p>            </div><div class='checkbox blue'><input type="checkbox" />            <p>组件通信</p>            </div><h2 id="电商项目"><a href="#电商项目" class="headerlink" title="电商项目"></a>电商项目</h2><p>客户消息 | 微信支付 | 微信地址 | 小程序转发 | 区域滚动 | 上拉加载 | 下拉刷新 | 数据缓存 | 用户信息 | 自定义组件 | 微信登录 | 意见反馈 | 上线发布</p><div class='checkbox green'><input type="checkbox" />            <p>客户消息</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>微信支付</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>微信地址</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>小程序转发</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>区域滚动</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>上拉加载</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>下拉刷新</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>数据缓存</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>用户信息</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>自定义组件</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>微信登录</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>意见反馈</p>            </div><div class='checkbox green'><input type="checkbox" />            <p>上线发步</p>            </div><h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h2 id="React核心"><a href="#React核心" class="headerlink" title="React核心"></a>React核心</h2><p>JSX | 组件系统 | 虚拟 DOM | 生命周期 | 无状态组件 | 有状态组件 | ref | class | 组件通信 | create-react-app | 路由 | 插值 | state</p><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>useState | useEffect | useRef | useContext | useEffect高级用法 | 放大镜案例 | 购物车案例</p><h2 id="Redux中间件"><a href="#Redux中间件" class="headerlink" title="Redux中间件"></a>Redux中间件</h2><p>状态管理流程 | action | dispatch | store | reducer | redux-thunk中间件 | combineReducers | react-redux | Redux Toolkit |开发调试工具 | 点餐案例</p><h2 id="TypeScript-1"><a href="#TypeScript-1" class="headerlink" title="TypeScript"></a>TypeScript</h2><p>ts 结合 hooks | ts 结合 redux | ts 结合 路由 | 点餐案例重构</p><h1 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h1><h2 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h2><p>参考文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial</a></p><h2 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h2><p>参考文档：<a href="https://www.runoob.com/svg/svg-tutorial.html">https://www.runoob.com/svg/svg-tutorial.html</a></p><h2 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h2><p>参考文档：<a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></p><h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><h2 id="Github-ProJect"><a href="#Github-ProJect" class="headerlink" title="Github ProJect"></a>Github ProJect</h2><p>50 Projects in 50 Days - HTML/CSS and JavaScript: <a href="https://github.com/bradtraversy/50projects50days">https://github.com/bradtraversy/50projects50days</a></p><h2 id="购物车案例（Vue2）"><a href="#购物车案例（Vue2）" class="headerlink" title="购物车案例（Vue2）"></a>购物车案例（Vue2）</h2><p>项目地址：<a href="https://github.com/HaloBoys/ShopCar_Vue2.X">https://github.com/HaloBoys/ShopCar_Vue2.X</a></p><h2 id="Todo-项目（Vue2）"><a href="#Todo-项目（Vue2）" class="headerlink" title="Todo 项目（Vue2）"></a>Todo 项目（Vue2）</h2><p>项目地址：<a href="https://github.com/HaloBoys/TodoList_Vue2.X">https://github.com/HaloBoys/TodoList_Vue2.X</a></p><h2 id="尚品汇（Vue2）"><a href="#尚品汇（Vue2）" class="headerlink" title="尚品汇（Vue2）"></a>尚品汇（Vue2）</h2><p>项目地址：<a href="https://github.com/HaloBoys/ShangPinHui_Vue2.X">https://github.com/HaloBoys/ShangPinHui_Vue2.X</a></p><h2 id="尚品汇后台管理（Vue2）"><a href="#尚品汇后台管理（Vue2）" class="headerlink" title="尚品汇后台管理（Vue2）"></a>尚品汇后台管理（Vue2）</h2><p>项目地址：<a href="https://github.com/HaloBoys/ShangPinHui_Vue2.X_Manage">https://github.com/HaloBoys/ShangPinHui_Vue2.X_Manage</a></p><h2 id="小兔鲜儿电商项目首页制作"><a href="#小兔鲜儿电商项目首页制作" class="headerlink" title="小兔鲜儿电商项目首页制作"></a>小兔鲜儿电商项目首页制作</h2><p>精灵图 | 文档编码 | 性能优化 | 布局技巧 | SEO | 性能优化 | 版心 | 设计稿 | PxCook</p><h2 id="小兔鲜电商小程序项目"><a href="#小兔鲜电商小程序项目" class="headerlink" title="小兔鲜电商小程序项目"></a>小兔鲜电商小程序项目</h2><blockquote><ul><li>小程序无需安装，用完即走的应用方式越来越受到用户的欢迎，企业也都纷纷开展了小程序的开发。</li><li>小兔鲜儿是一个经典的电商类小程序项目，包括商品、用户、购物车、订单等核心功能模块，采用 uni-app 框架做为跨平台小程序开发方案，并综合运用了原生小程序的组件化、模块化、网络请求、本地存储、微信登录、微信支付等技术</li></ul></blockquote><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>能够开发跨平台的小程序</li><li>能够独立开发小程序项目</li><li>掌握微信登录的实现方式</li><li>掌握微信支付的实现方式</li></ol><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>小程序跨平台开发解决方案</li><li>小程序微信登录实现方案</li><li>小程序微信支付实现方案</li><li>下拉刷新/上拉加载交互实现方案</li><li>数据缓存实现方案</li></ol><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ol><li>uni-app跨平台开发框架</li><li>组件封装及通信</li><li>微信支付/登录</li><li>pinia 状态管理</li><li>基于vue3+ts技术实践方案</li><li>小程序云开发</li><li>vant组件库</li></ol><h2 id="数据看板项目"><a href="#数据看板项目" class="headerlink" title="数据看板项目"></a>数据看板项目</h2><blockquote><ul><li>数据看板是一个数据可视化项目，通过折线图、K线图、柱状图等图表形式归纳汇总大量数据，以实现更加直观的数据表达效果。</li></ul></blockquote><h3 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>掌握Echarts 各类型数据可视化图表的应用</li><li>能够根据需要求创建折线图、K线图、地图等图表</li><li>掌握前后端分离技术的实现方式并了解其意义</li><li>掌握使用token进行访问鉴权功能实现</li></ol><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>基于 bootstrap 的响应式页面布局方案</li><li>基于 echarts 的数据可视化解决方案</li><li>基于 token 的访问权限控制解决方案</li></ol><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ol><li>基于axios 实现网站注册和登录功能 </li><li>基于 Echarts 结合需求高度自定义不同类型的可视化图表</li><li>Ajax、数据渲染和服务端推送前后端分离技术的应用</li><li>基于 token 的访问权限控制功能</li></ol><h2 id="面经全端项目"><a href="#面经全端项目" class="headerlink" title="面经全端项目"></a>面经全端项目</h2><blockquote><ul><li>面经系统，由面试经验文章PC管理后台，个人H5端面试文章浏览组成。能够锻炼对 Vue 完整技术栈的运用。同时该项目还涵盖了 token 身份认证、Vue 组件库、文件上传、富文本编辑器等前端技术解决方案，移动端开发，适合刚入手 Vue 框架、希望通过项目开发来巩固 Vue 基础的前端开发者学习。</li></ul></blockquote><h3 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>掌握 element-ui 组件库的运用</li><li>掌握 axios 以及拦截器的应用</li><li>掌握 Vuex 管理全局状态的技术解决方案</li><li>熟练使用 vue-router 管理组件的切换展示</li><li>掌握 element-ui 中如何自定义表单的校验规则</li><li>掌握文件上传和富文本编辑器在 Vue 项目中的应用</li><li>掌握 Vant 组件库的运用</li><li>掌握使用 postcss-px-to-viewport 实现移动端适配</li></ol><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>token身份认证解决方案</li><li>文件上传解决方案</li><li>富文本编辑解决方案</li><li>表单验证解决方案</li><li>基于vant的移动端界面构建方案</li><li>基于postcss-px-to-viewport移动端适配方案</li></ol><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ol><li>基于 vue-cli 创建工程化的 Vue 项目</li><li>基于 element-ui 组件库快速实现项目布局</li><li>用户注册与登录的业务解决方案</li><li>使用 Vuex 管理全局共享的数据</li><li>使用 axios 实现前后端的数据交互</li><li>基于 vant 组件库快速构建移动端界面</li></ol><h2 id="iHRM人力资源项目"><a href="#iHRM人力资源项目" class="headerlink" title="iHRM人力资源项目"></a>iHRM人力资源项目</h2><blockquote><ul><li>iHRM是一款基于SaaS平台的人力资源管理系统， 企业通过该系统可以完成公司组织架构管理、员工管理、角色管理、权限管理（审批、考勤、社保）等，为企业的人力资源管理提供一站式解决方案。</li></ul></blockquote><h3 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>掌握Vue + Element技术栈在开发管理型后台项目的技术开发能力</li><li>具备角色，人员，权限类系统的设计整体设计及应用能力</li><li>拥有Vuejs相关的技术要点及配套的插件，解决方案深度使用能力</li></ol><h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>基于element-ui和vue2进行大型中台项目开发解决方案</li><li>基于axios封装请求工具模块解决方案</li><li>基于token的前端登录解决方案</li><li>vuex分模块持久化解决方案</li><li>RBAC大型中台项目权限控制解决方案</li><li>excel批量导入导出解决方案</li><li>上传组件封装解决方案</li><li>多语言动态主题解决方案</li><li>树形结构处理解决方案</li></ol><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><p>vue-element-admin（请求模块化，请求工具拦截，scss 样式，布局组件） | Vuex 持久化（state，mutations，actions，getters 和 modules） | Vue CLI 配置(webpack) | 反向代理 | ElementUI 表单校验（async-validator） | vue-router 导航守卫 | token 认证 | token 失效控制 | 角色管理业务 | RBAC 权限 | Vuex + 路由 + RBAC | 动态路由 | 角色权限 | 混入 mixns | 工作日历 | Echarts 雷达图 | 全屏（screenfull） | tabs 页多页签组件 | vue-i18n 国际化方案 | history 路由模式的应用 | 树形菜单 |element 列表的数据过滤 | 导入导出 Excel | Excel 复杂型表头 | PDF 打印（vue-print-nb）| el-upload 上传第三方云服务器 | 打包性能分析 | CDN 加速的实践应用 | 组件封装 | 业务组件封装</p><h2 id="优医问诊项目"><a href="#优医问诊项目" class="headerlink" title="优医问诊项目"></a>优医问诊项目</h2><blockquote><ul><li>优医问诊是一个连接医生和患者的移动医疗行业H5应用，通过高效、快速的在线问诊服务，为患者提供健康帮助，涵盖了找医生、快速问诊、开药门诊、疾病查询，健康健康百科等功能。</li><li>该项目基于Vue3+TypeScript进行开发，且引入下一代状态管理工具 Pinia 和最热门的前端移动UI组件库 Vant ，采用全新技术栈</li></ul></blockquote><h3 id="学习目标-4"><a href="#学习目标-4" class="headerlink" title="学习目标"></a>学习目标</h3><ol><li>掌握使用Vue3 + TypeScript 开发大型前端项目开发能力</li><li>掌握使用Vant组件库开发移动端项目能力</li><li>掌握 Pinia 状态管理工具实现项目状态管理</li><li>掌握 第三方登录和第三方支付 业务解决能力</li><li>掌握 快速问诊 等在线问诊主流业务开发能力</li></ol><h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>基于vue3.0+typescript中大型项目开发解决方案</li><li>基于vant组件库快速构建H5界面解决方案</li><li>基于vue-router的前端路由解决方案</li><li>基于vite构建vue3.0项目解决方案</li><li>基于pinia的状态管理解决方案</li><li>基于pinia-plugin-persistedstate状态持久化解决方案</li><li>基于@vuecore/use的组合API工具库解决方案</li><li>基于id-validator的身份证信息校验解决方案</li><li>基于postcss-px-to-viewport移动端适配解决方案</li><li>基于vite-plugin-svg-icons的svg图标组件解决方案</li><li>基于tailwindcss的原子化类名现代解决方案</li><li>基于socket.io的即时通讯问诊室解决方案</li><li>基于eruda 的移动端调试解决方案</li><li>第三方登录解决方案</li><li>第三方支付解决方案</li></ol><h3 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h3><p>vue3.0框架| TypeScript使用 | vite前端构建工具｜create-vue项目脚手架｜vue-router路由｜pinia状态管理｜pinia-plugin-persistedstate状态持久化｜sass预处理器｜ vite-plugin-svg-icons图标组件插件｜tailwindcss现代CSS框架｜@vueuse/core组合API工具库｜dayjs日期处理｜vant组件库 | postcss-px-to-viewport移动端适配 | id-validator校验身份证 | socket.io即时通讯 | eruda真机调试 | 第三方登录 | 第三方支付 | vant组件二次封装 | 通用组件封装 | reqeust工具函数 | 组件按需引入 | steup语法糖 | pnpm包管理 | 第三方库类型扩展 | 自定义composable | css变量</p><h2 id="极客园H5项目"><a href="#极客园H5项目" class="headerlink" title="极客园H5项目"></a>极客园H5项目</h2><blockquote><ul><li>「极客园」对标“CSDN”、“博客园”等竞品，致力成为更加贴近年轻 IT 从业者（学员）的科技资讯类应用。 本项目是极客园移动端，主要涵盖了H5端新闻资讯类项目的核心业务。</li><li>包括首页文章列表上拉加载与刷新，频道管理，本地线上频道管理，文章搜索，文章评论与回复，组件缓存，token过期与刷新处理，用户权限拦截，个人信息修改解决方案。</li></ul></blockquote><h3 id="学习目标-5"><a href="#学习目标-5" class="headerlink" title="学习目标"></a>学习目标</h3><p>熟练掌握typescript + react技术栈 + antd-mobile组件库开发H5移动端新闻资讯类项目的技术能力。</p><h3 id="解决方案-5"><a href="#解决方案-5" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>基于typescript开发中大型项目的解决方案</li><li>基于antd-design组件库移动端解决方案</li><li>基于react全家桶（react hooks + redux + react-router）移动端解决方案</li><li>基于axios封装请求工具类解决方案</li><li>基于token的前端登录解决方案，封装PrivateRouter拦截未登录用户</li><li>基于token实现token过期与token刷新处理</li><li>封装KeepAlive组件实现组件缓存的解决方案</li><li>基于antd-mobile实现文章列表的下拉刷新与上拉加载功能</li></ol><h3 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h3><p>react+hooks+redux+typescript+router全家桶 | 移动端项目搭建 | ant-mobile-v5 | vw 适配方案 | Token 过期处理 | 动态编辑 | 上拉加载 | 下拉刷新 | 评论与回复 | 搜索功能 | DayJS | 数据持久化 | 图片懒加载 | 组件定制 | 组件封装 | 性能优化 | 移动端1px像素 | Icon处理 | 表单验证 | 倒计时 | 拦截器 | 权限组件封装 | 缓存组件封装 | websocket | 防抖与节流 | 关键字高亮 | 吸顶组件 | keep-alive | CDN优化 ｜ahooks｜lodash</p><h2 id="极客园PC端项目"><a href="#极客园PC端项目" class="headerlink" title="极客园PC端项目"></a>极客园PC端项目</h2><h3 id="学习目标-6"><a href="#学习目标-6" class="headerlink" title="学习目标"></a>学习目标</h3><p>熟练掌握 typescript + react技术栈（umi + dva + antd组件库 )开发后台管理项目的技术能力。</p><h3 id="解决方案-6"><a href="#解决方案-6" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li>基于react hooks实现后台管理系统的解决方案</li><li>基于ant-design组件库解决方案</li><li>基于react-router的前端路由解决方案</li><li>基于dva的状态管理解决方案</li><li>基于react-quill的富文本编辑器解决方案</li><li>基于 umi 的构建react项目解决方案</li></ol><h3 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h3><p>ant-design组件库 | 表单校验 | token 认证 | token 失效控制 | history 路由| 组件封装 | react-quill | umi | dva | ant-design-pro | useModal | umi-request</p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[x] 说一下vue生命周期</li><li>[x] 说一下组件通信</li><li>[ ] 说一下vuex</li><li>[ ] 说一下双向绑定的原理</li><li>[ ] 知道哪些 vue 指令</li><li>[ ] 说一下自定义指令</li><li>[ ] 说一下路由传参</li><li>[ ] 说一下防抖节流</li><li>[ ] 说一下this</li><li>[ ] 怎么阻止默认事件</li><li>[ ] 怎么阻止事件冒泡</li><li>[ ] 数组常用的方法</li><li>[ ] 数组去重知道哪些方法</li><li>[ ] 字符串操作方法</li><li>[ ] 怎么判断一个数是不是素数，逻辑怎么写？</li><li>[ ] 怎么清除浮动</li><li>[ ] div怎么垂直居中</li><li>[ ] 怎么画0.5px的线</li><li>[ ] 说一下盒模型</li><li>[x] 两个异步请求数据操作怎么合并</li><li>[ ] V-model是谁的语法糖</li><li>[ ] query和params区别</li><li>[ ] vue怎么获取dom</li><li>[ ] flex布局怎么把元素搞到右上角</li><li>[ ] promise有几种状态，会不会改变</li><li>[ ] async和await解决什么问题？</li><li>[ ] let和const区别</li><li>[ ] const定义对象里面的属性值能不能改？</li><li>[ ] 常见状态码</li><li>[ ] 对同步和异步的理解</li><li>[ ] 常见的宏任务，微任务？</li><li>[ ] 怎么判断两个数组相等？</li><li>[ ] es6遍历数组的方法？</li><li>[ ] 前端怎么给数据加密？</li><li>[ ] 两个html文件怎么传值？</li><li>[ ] vue3了解多少？</li><li>[ ] 数据结构了解哪些</li><li>[ ] 怎么查找两个数组的交集</li><li>[ ] 二叉树查找</li><li>[ ] 了解哪些网络安全知识</li><li>[ ] 对称加密和非对称加密哪个效率高</li><li>[ ] web木马了解吗</li><li>[ ] 用户输入url会发生什么</li><li>[ ] flex布局元素怎么放右下角</li><li>[ ] js的设计模式？</li><li>[ ] var let const区别</li><li>[ ] 遍历数组的方法，哪个可以跳出循环，哪个效率最高</li><li>[ ] promise捕获错误的方式</li><li>[ ] 异步任务有哪些</li><li>[ ] vue兼容到ie几</li><li>[ ] 组件通信</li><li>[ ] 生命周期父子组件执行顺序</li><li>[ ] 过滤器有没有用过</li><li>[ ] 用第三方库报错怎么办</li><li>[ ] 点击高亮的选项卡怎么实现</li><li>[ ] 图标跟随鼠标移动怎么实现</li><li>[ ] 50+ Vue经典面试题源码级详解 <a href="https://juejin.cn/post/7097067108663558151#heading-31">https://juejin.cn/post/7097067108663558151#heading-31</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>220607</title>
      <link href="/2022/06/072022%20%E5%BD%92%E6%A1%A3/Diary/2022/220607/94a71e9c/"/>
      <url>/2022/06/072022%20%E5%BD%92%E6%A1%A3/Diary/2022/220607/94a71e9c/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="d92e4c7ba23a5d4951469b5a1d9fd7326be9f8ab800a861a8450fd9652d48236">176af5f71c6ac5419ca35683f9a93d1d2c4db0317ed9e2169d70d381b1a8ab6f329bbb22eed617fcae9ef6ecba22af754521cc1c0edb455ff27b2a15b67177a0d3047a854ed48a8a195f4a3dd915bb09513b9e0af79249aedf642abd283c4d581aa23a0a127b116bbe4f0c7421ca0f20fd0331d51e97df05a801ce19cd7d7823103a04e1efab6867a1a22dc9e7caa694db09821ae2d791aa7a8873932e6a6bb02478cfd1a26cdeb4a607cbe02fec9fabf655f1a6288ec06b41fdbae277c0d234499bf4577fecdc644af40addd7e5cbad052de176100a0f6a845630b62017008245b1336c5b31c7888b6f026269420f6e98eb29f053c28aa99c1a972ad7fb9496c8a0853c3db14d7d4ea705d6ea1ddadc9fbbd2a1ededb5dd7ce5b5482531b6a8331531aa0b63fdb369193e1ef89ea72f4f18ac3e688775ebb1f60e3feb0adf372e2c78d83fec226c762c76d1ddedc1b88c2b5521ac517020d789abf4958fa6850bc12abf284ef383993f0e81b379181de5bc7fb937acbfed70d3e55e3c6d2f1310f64110cfeaff2652326224edfc246ba4518e390acc441c0894962df4bb8d119b0ec99698cfce242d60523bd869fce9dcb904c5b0b8d69fe55be7f5f2f19c5da5726f49061638e5caed52b3c36da232f16ec0119f65e002ced989dce884ba43c1fe95282cdc3782aedacfb2f2eeda3d6d3f5a313a86cb099ba1ab5c012e00bcbfa728e61629dacf7b3c7d3d4d6347148cd08bb23aa749e7ec0e9d3e418ed5666561fb142389a577a82dc23359d572dce708f8ee93bb923bd5221f2ac7893dd727b87b9605817a6a86b3ec4e09ee6f88dc61e1f78d15a3a443b0bb5389a0c131125bd803098cf24a8192944c8a9e0701813b7d78f2ecc0dbbe4220d086cafe430ef47c2852f58bd279e769dc2e2468c476b8f9a4dc7c957dbdf6d4e42ae288a1c3ac20e851b2aa3f607c01529e16cf309e42bf5f2d5985b1050104333fc485be0c2505e3eb433a9f4b244526930b99d11e436f11499100a90b236d876c55e162d66e4788bef8aeb4e8f7d6c058ba0cf1cc714defef493a3522ad101c3822e6f1d95b0573141cc34fc8f1a75fbee1dcb61f5a86588abe0bdad07aa3893d24f495c489195cbba016838298e1953b9903093343187ae6c32317bbffe01bd1db142d5dce7443b4eacf95bec84988881ca885a76bc1135fa5ba33ab82a801d85fb8f0f323211aabf7435c7b18c2e71139167be58f8bc263af4b90d5814264d24de992db2208d95b8106a11a37e7b4aa37005204c6fbdb05b19398eac9f02d9eb435cc120f09fa74518c6dfa98d1feccaf3cfe4dcbafbc7c90949c6022c8394f679f8b70f39eec6f7719cc5e0b5b435e4daf715f6daef8be05391934c18d1d624bd939a020e5a0698492cb417ba8f9459d6e09b78a611162e23fe3a94cb09f88d81cbfbf473735f5aa0bdc1cb255e2bf07dad43b906fa6ffb336bda2186f263f3778144579b6aa2bdc588ba93baa1f344fedcf61b657191bb64d4c964bd944730825424f0e2e28af280cebd22ac554d3eb3ac212d368ecc6bbe2a6eeae0ec95da952d5afa292b35b07668d674601a8c470e64e7b8ceed7923616692df5aed6ce8fb7c122f4a50874b94f6380b8cc69804ccb0600cb1e460bf24d29a5f7d99b0e258ceee0967a47700ba54da38fdb9a5f5c378f16555d5496aeb1b70f7adbc5ae754eee10e71d1bba55fd24d48c0597f769ba6becf599aab05f1cb5deeb9ce0120b1a9498a832114892c7c23a58703cdae6996821a616011c8d9b198ee09483b6ccb0177e1d545ccb53d0648716faa2d9ad44f77d46325dc538702b60fc00da8acbafb8032ba34afbff36ad0974a36053164446d143e955f199404fbd9526df39734fcca37bf91b517e8777187d3eacc7c0a974a8ce934888fd571c1c84ed1b1bddfd88dc6f4d007c11125c0a0411aeb53e5a003dd5a275965bf723d4aaa0d51042d61bd8315b41190b8a8e61e597eedd68812c3b7c8e82ccf16c494b34fe8758ae63da81e6c6a0e9e3b9bbd13379a19887dd3f9cfdeb051da8da372e46f7cc23fd66791d61b13225eec6e82111ff8385d97d4d3e9bbc1c81f0f4a75db125e39c71e1adc4dfbbe373c2f8924173e0496ab29531af44290967da6b2218ded01b74bd7c90e953059b8db839cead6241e91ce779ef6d136947ce92ee6bd65c8e0e64a16820dbcc51265ade6f6f4647eeef72ee0a46b96902b862bf2ba167cecdb189f4c96932e682403b366ee21eea98dc3830d030062d1fba22c8dc5d56f80f50958b4f12de55c11e99316a6f720e90070a5bfd4e0958c27808b836abb947a4aae5fe106252ab680ef7f71f5bd5a1808dfba0b94cfc2c824a9012f304ec9c056761a9932dcb3f81598b416f65c2d9238d61c2657e1e385ea349f024bfe3993d034bcd72750b727956d9a7173ada1d1efe57bbb386d67f73ec2cc7101d4954cca69f4ea2aa59ff7b8e265c4d1c1f713f574963b3c51c698a6aef7033fdae6bffb71ed7e0d174480f8365049c5ae7ecfc987cbda147f5085c6d5429246197bf3cfe914edcada0669bb16c289bfd7f00c66b1793593a96ae23d9c11021057c30a521b64d8368d76c66bd9b705b158b3797bc27a57ba50cfda4b7886bc53f15193067c6adb83de104694f1be9b1d90cf40c07796ac30fdc24ae80bd8510f161b65ce63c43506e8008a62ffd69a9c168dd257b15d837d4f0bba1b485944b481a73b548e6bf3b28d754aef7a00e7cb509b9391e17598089d095ba8e71fcbbd0c290862df41b9f1461fcf1dd72825ce1abced31fb71a48c1</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220602</title>
      <link href="/2022/06/022022%20%E5%BD%92%E6%A1%A3/Diary/2022/220602/e4cdea13/"/>
      <url>/2022/06/022022%20%E5%BD%92%E6%A1%A3/Diary/2022/220602/e4cdea13/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="4d98359085cae2b786c5551c41c8801ebb852d0ffceda080fb2c3582ca711992">176af5f71c6ac5419ca35683f9a93d1d15482447c231904984f7b7cdaee5d8818ef3a857a2296be3c94c792260d5bedf106ee8461c642337801973a08ee926a7455aa3e85944b979b8cc4fb3880df2312209f1ce2962804b9570112515e19ed93af4fe28f748bd78a83d0ee79e57d34dbf3c52bb9bd799f011ab6ec25c29bfacbf7cb9d53250d6a1ac86b9193e007dd45a35990cc0908a986f3ea6012fbeb1bb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220601</title>
      <link href="/2022/06/012022%20%E5%BD%92%E6%A1%A3/Diary/2022/220601/436fef40/"/>
      <url>/2022/06/012022%20%E5%BD%92%E6%A1%A3/Diary/2022/220601/436fef40/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="6244e1ba29543bd3eceb43d77d42c34021c8268a1febb0f293dca4bcd6dd265e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>220529</title>
      <link href="/2022/05/282022%20%E5%BD%92%E6%A1%A3/Diary/2022/220529/436fef40/"/>
      <url>/2022/05/282022%20%E5%BD%92%E6%A1%A3/Diary/2022/220529/436fef40/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="d1da195f71276587a5d19ada55bea7621b37ef079aee08cb99e4e9964f7cd0ab"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uToos 为生产力而生</title>
      <link href="/2022/05/212022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Software_uToos/450a1492/"/>
      <url>/2022/05/212022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Software_uToos/450a1492/</url>
      
        <content type="html"><![CDATA[<blockquote><p>utools 这种插件化的管理方式，为用户带来了很大的自由度，能够帮助你打造出更趁手的私人专属工具库。个人觉得这是一款非常好用的软件 <strong>工作效率直接+100%</strong>，免费版本功能也完全够用，希望越来越多的人能支持这种国产优秀软件。</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>utools 官网：<a href="https://u.tools/">https://u.tools/</a> 选择对应系统版本安装包安装。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521231645.png" alt="安装包"></p><p>一台电脑个人觉得免费版本足够使用了，如果需要多端数据同步，也可以开通 uTools会员，更多会员权益自行查看。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521231722.png" alt="会员"></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>绑定好账号之后就可以使用了，直接在插件应用市场选择想要的插件安装即可。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521233707.png" alt="20220521233707"></p><h2 id="软件快捷键"><a href="#软件快捷键" class="headerlink" title="软件快捷键"></a>软件快捷键</h2><blockquote><p>以下快捷键均可在偏好设置中自定义。</p></blockquote><ol><li><code>Alt + Space</code> 显示/隐藏搜索面板，<strong>可快速启动已安装的应用</strong>等</li><li><code>Ctrl + D</code> 分离窗口快捷键</li><li><code>长按鼠标中键</code> 呼出超级面板</li></ol><h2 id="自定义插件快捷键"><a href="#自定义插件快捷键" class="headerlink" title="自定义插件快捷键"></a>自定义插件快捷键</h2><p>给常用的插件自定义快捷键可快速呼出插件，<strong>注意快捷键冲突问题</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521233631.png" alt="20220521233631"></p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p>这里推荐几个实用的插件</p><h3 id="讯飞-ocr"><a href="#讯飞-ocr" class="headerlink" title="讯飞 ocr"></a>讯飞 ocr</h3><p>讯飞 ocr 是一款截图识字的插件，一般来说这种识图api接口都是收费的，目前插件内有很多共享的接口供使用。个人使用了一段时间感觉挺不错的，这款插件搭配另一款<code>聚合翻译</code>插件可在截完图之后直接翻译识取内容。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521233423.png" alt="讯飞 ocr"></p><h3 id="PDF-转换器"><a href="#PDF-转换器" class="headerlink" title="PDF 转换器"></a>PDF 转换器</h3><p>将 PDF 转换为多种格式</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521234056.png" alt="20220521234056"></p><h3 id="批量重命名"><a href="#批量重命名" class="headerlink" title="批量重命名"></a>批量重命名</h3><p>导入想要重命名的图片，自定义命名规则。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521234249.png" alt="20220521234249"></p><h3 id="图片批量处理"><a href="#图片批量处理" class="headerlink" title="图片批量处理"></a>图片批量处理</h3><p>相见恨晚！</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521234443.png" alt="20220521234443"></p><h2 id="我的插件"><a href="#我的插件" class="headerlink" title="我的插件"></a>我的插件</h2><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220522140514.png" alt="20220522140514"></p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220522140533.png" alt="20220522140533"></p><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><p>无意间发现的这款插件，还不错，支持大部分图床仓库</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521234804.png" alt="20220521234804"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>首先在插件应用市场安装<code>图床</code>插件。(没错，插件名就叫“图床”)<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521235251.png" alt="20220521235251"></p><p>安装完成后可自行配置图床仓库。</p><h2 id="创建仓库-Gitee"><a href="#创建仓库-Gitee" class="headerlink" title="创建仓库(Gitee)"></a>创建仓库(Gitee)</h2><div class="tip error"><p>大型打脸现场，刚夸了夸Gitee，这就图片加了防盗链，不能直接访问了，换别的图床吧，想白嫖果然不容易。</p></div><p>注册 gitee 账号，创建仓库，仓库名称随意，建议：<code>utools-filebed</code> 创建记得初始化仓库，并开源 (图床的仓库一定要开源)。</p><h2 id="申请私人令牌"><a href="#申请私人令牌" class="headerlink" title="申请私人令牌"></a>申请私人令牌</h2><ol><li>地址： <a href="https://gitee.com/profile/personal_access_tokens">https://gitee.com/profile/personal_access_tokens</a></li><li>点击”生成新令牌”，令牌描述随意取，推荐<code>utools-filebed</code>，权限请勾选”projects”</li><li>提交后务必保管好生成的令牌，此令牌只显示一次。</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521235821.png" alt="20220521235821"></p><h2 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h2><p>进入图床插件：</p><ol><li>将刚刚申请到的 token 填 access_token</li><li>用户名是gitee的用户名</li><li>repo 填仓库名称 (不带用户名)</li><li>path 就是图片上传完成之后的命名格式，建议填写：<code>&#123;Y&#125;-&#123;M&#125;-&#123;D&#125;&#123;H&#125;:&#123;m&#125;:&#123;s&#125;-</code> 输出为：2021-9-1718:06:09-xxx.png</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220522000222.png" alt="20220522000222"></p><h2 id="切换"><a href="#切换" class="headerlink" title="切换"></a>切换</h2><p>填写完成后在图床插件这里选择 gitee 即可</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220522000535.png" alt="20220522000535"></p><h2 id="可选"><a href="#可选" class="headerlink" title="[可选]"></a>[可选]</h2><p>如果想搭配 Typora 进行上传的话需要安装 <code>utools图床插件命令工具</code> </p><blockquote><p>使用Typora上传或使用命令行工具期间<strong>保证图床插件的运行</strong>, 不能完全退出图床插件,不能在「utools」主输入窗口输入「clear 」命令。此外需要环境版本 node &gt;= 12</p></blockquote><ol><li>安装命令工具 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// npm</span><br><span class="line">npm install -g utools-picturebed-command</span><br><span class="line"></span><br><span class="line">// yarn</span><br><span class="line">yarn global add utools-picturebed-command</span><br></pre></td></tr></table></figure></li><li>Typora配置</li></ol><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220522001928.png" alt="20220522001928"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Software </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode 自定义 Snippet 代码片段</title>
      <link href="/2022/05/192022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_VSCode_vscode%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89snippet%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/a1d7e33a/"/>
      <url>/2022/05/192022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_VSCode_vscode%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89snippet%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/a1d7e33a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>为了跟系统默认的系统区分，建议使用一些特殊的符号开头。如：<code>my_xxx</code></p></blockquote><h1 id="运作原理"><a href="#运作原理" class="headerlink" title="运作原理"></a>运作原理</h1><p>官网：<a href="https://code.visualstudio.com/docs/editor/userdefinedsnippets">https://code.visualstudio.com/docs/editor/userdefinedsnippets</a></p><p>代码片由四部分组成</p><ol><li>prefix：前缀。代码片从 IntelliSense 中呼出的「关键字」<ul><li>支持 N:1，数组中的每一项都能作为本条代码片的前缀。</li></ul></li><li>scope: 域。代码片适用的「语言模式」<ul><li>可选，但只有「全局代码片」才能使用。不填代表适用于所有语言模式。</li></ul></li><li>body：主体。代码片的「布局与控制」<ul><li>每个字符串表示一行。</li></ul></li><li>description：描述。代码片在 IntelliSense 中的「介绍」<ul><li>可选。未定义的情况下直接显示对象名。</li></ul></li></ol><h1 id="Markdown-Snippet"><a href="#Markdown-Snippet" class="headerlink" title="Markdown Snippet"></a>Markdown Snippet</h1><ol><li>进入代码片设置文件：通过快捷键<strong>Ctrl + Shift + P</strong>打开命令窗口（All Command Window），输入<strong>snippet</strong>，点选<strong>首选项</strong>：配置用户代码片片段，选择对应的语言</li><li>在设置文件里补全代码片，以 markdown 为例，选中后你将打开一个<strong>json</strong>文件，自定义对应的快捷方式。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// Place your snippets for markdown here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line"><span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"><span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line"><span class="comment">// same ids are connected.</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line"><span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line"><span class="comment">// &quot;body&quot;: [</span></span><br><span class="line"><span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line"><span class="comment">// &quot;$2&quot;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;Print to ```javascript&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;```js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;```javascript&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;```&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;js代码片段&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Print to ```css&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;```css&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;```css&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;```&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;css代码片段&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Print to ```html&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;```html&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;```html&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$1&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;$2&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;```&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html代码片段&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;Print to |||table&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;|||table&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;| Syntax      | Description |&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;| ----------- | ----------- |&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;| Header      | Title       |&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;| Paragraph   | Text        |&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;table代码片段&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li>自定义完成之后还需要在vscode的 settings.json 中配置下：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;[markdown]&quot;</span><span class="punctuation">:</span>  <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;editor.quickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h1 id="Vue-Snippet"><a href="#Vue-Snippet" class="headerlink" title="Vue Snippet"></a>Vue Snippet</h1><h2 id="HTML5-Vue"><a href="#HTML5-Vue" class="headerlink" title="HTML5 Vue"></a>HTML5 Vue</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// Place your snippets for html here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line"><span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"><span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line"><span class="comment">// same ids are connected.</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line"><span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line"><span class="comment">// &quot;body&quot;: [</span></span><br><span class="line"><span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line"><span class="comment">// &quot;$2&quot;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="attr">&quot;Html5-Vue&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_h5vue&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;&lt;!DOCTYPE html&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;html lang=\&quot;en\&quot;&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;head&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;meta charset=\&quot;UTF-8\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;meta name=\&quot;viewport\&quot; content=\&quot;width=device-width, initial-scale=1.0\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;meta http-equiv=\&quot;X-UA-Compatible\&quot; content=\&quot;IE=edge\&quot;&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;title&gt;Document&lt;/title&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;script src=\&quot;./vue.js\&quot;&gt;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/head&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;body&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;div id=\&quot;app\&quot;&gt;$1&lt;/div&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t\tlet vm = new Vue(&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t\t\tel: &#x27;#app&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t\t\tdata: &#123;&#125;,&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t\t\tmethods: &#123;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t\t&#125;);&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;\t&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/body&gt;\n&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/html&gt;&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;html5vue模板&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix, body and </span></span><br><span class="line"><span class="comment">// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:</span></span><br><span class="line"><span class="comment">// $1, $2 for tab stops, $0 for the final cursor position, and $&#123;1:label&#125;, $&#123;2:another&#125; for placeholders. Placeholders with the </span></span><br><span class="line"><span class="comment">// same ids are connected.</span></span><br><span class="line"><span class="comment">// Example:</span></span><br><span class="line"><span class="comment">// &quot;Print to console&quot;: &#123;</span></span><br><span class="line"><span class="comment">// &quot;prefix&quot;: &quot;log&quot;,</span></span><br><span class="line"><span class="comment">// &quot;body&quot;: [</span></span><br><span class="line"><span class="comment">// &quot;console.log(&#x27;$1&#x27;);&quot;,</span></span><br><span class="line"><span class="comment">// &quot;$2&quot;</span></span><br><span class="line"><span class="comment">// ],</span></span><br><span class="line"><span class="comment">// &quot;description&quot;: &quot;Log output to console&quot;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;export default &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  name:&#x27;&#x27;,&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  data()&#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;   return &#123;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;   &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;  &#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;style scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;&lt;/style&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$2&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Vue模板&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> VSCode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>庆生的第二大脑架构及规范</title>
      <link href="/2022/05/192022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84%E5%8F%8A%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/5f35053a/"/>
      <url>/2022/05/192022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E5%8D%9A%E5%AE%A2%E6%9E%B6%E6%9E%84%E5%8F%8A%E7%BC%96%E5%86%99%E8%A7%84%E8%8C%83/5f35053a/</url>
      
        <content type="html"><![CDATA[<h1 id="标签（Global）"><a href="#标签（Global）" class="headerlink" title="标签（Global）"></a>标签（Global）</h1><div class="table-container"><table><thead><tr><th>全局标签</th><th>description</th></tr></thead><tbody><tr><td>http</td><td></td></tr><tr><td>html(5)</td><td></td></tr><tr><td>css(3)</td><td></td></tr><tr><td>js</td><td></td></tr><tr><td>nodejs</td><td></td></tr><tr><td>vue</td><td></td></tr><tr><td>可视化</td><td></td></tr><tr><td>响应式</td><td></td></tr><tr><td>Life</td><td></td></tr><tr><td>Private</td><td></td></tr><tr><td>Project</td><td></td></tr><tr><td>Interview</td><td></td></tr><tr><td>design</td><td></td></tr><tr><td>算法</td><td></td></tr><tr><td>金蝶</td><td></td></tr><tr><td>windows</td></tr></tbody></table></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Front-Matter 子分类语法 --&gt;</span><br><span class="line"><span class="bullet">-</span> [父分类, 子分类]</span><br><span class="line"></span><br><span class="line">&lt;!-- Front-Matter 并列分类语法 --&gt;</span><br><span class="line"><span class="bullet">-</span> [分类1]</span><br><span class="line"><span class="bullet">-</span> [分类2]</span><br><span class="line"></span><br><span class="line">&lt;!-- Front-Matter 并列分类 + 子分类语法 --&gt;</span><br><span class="line"><span class="bullet">-</span> [父分类1, 子分类1]</span><br><span class="line"><span class="bullet">-</span> [父分类2, 子分类2]</span><br></pre></td></tr></table></figure><h1 id="ERP"><a href="#ERP" class="headerlink" title="ERP"></a>ERP</h1><div class="table-container"><table><thead><tr><th>ERP分类</th><th>子分类</th></tr></thead><tbody><tr><td>金蝶</td></tr></tbody></table></div><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><div class="table-container"><table><thead><tr><th>前端分类</th><th>子分类</th></tr></thead><tbody><tr><td>Ajax</td><td></td></tr><tr><td>Axios</td><td></td></tr><tr><td>CSS</td><td>Sass\Less</td></tr><tr><td>HTML</td><td></td></tr><tr><td>JavaScript</td><td></td></tr><tr><td>MiniPrograme</td><td></td></tr><tr><td>TypeScript</td><td></td></tr><tr><td>Node</td><td></td></tr><tr><td>Vue</td><td></td></tr><tr><td>WebPack</td><td></td></tr><tr><td>uni-app</td><td></td></tr><tr><td>算法</td></tr></tbody></table></div><h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><div class="table-container"><table><thead><tr><th>发展分类</th><th>子分类</th></tr></thead><tbody><tr><td>规划</td><td>自考</td></tr><tr><td>阅读</td><td>摘抄\效率\英语</td></tr></tbody></table></div><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><div class="table-container"><table><thead><tr><th>工具分类</th><th>子分类</th></tr></thead><tbody><tr><td>Git</td><td></td></tr><tr><td>Github</td><td></td></tr><tr><td>Hexo</td><td></td></tr><tr><td>Markdown</td><td></td></tr><tr><td>Software</td><td></td></tr><tr><td>VSCode</td><td></td></tr><tr><td>手册</td><td></td></tr><tr><td>图床</td><td></td></tr><tr><td>云存储</td></tr></tbody></table></div><h1 id="平面设计"><a href="#平面设计" class="headerlink" title="平面设计"></a>平面设计</h1><div class="table-container"><table><thead><tr><th>平面设计分类</th><th>子分类</th></tr></thead><tbody><tr><td>网页设计</td></tr></tbody></table></div><h1 id="随笔"><a href="#随笔" class="headerlink" title="随笔"></a>随笔</h1><div class="table-container"><table><thead><tr><th>随笔分类</th><th>子分类</th></tr></thead><tbody><tr><td>Diary</td><td></td></tr><tr><td>小黄</td><td></td></tr><tr><td>Todo</td></tr></tbody></table></div><h1 id="编写规范"><a href="#编写规范" class="headerlink" title="编写规范"></a>编写规范</h1><ol><li>gif 动图使用折叠框包含。</li><li>不懂或没有理解的知识，可以在对应标题后面加上 <code>[REJECTED]</code> 标记</li><li>博客末尾可以加上 Todo 标题记录临时灵感</li><li>需要重新消化某个章节的时候，可以复制该章节的备份，然后备注为(精简版) 在此版本进行修改。（保留原来旧版本的备份）</li><li>图片加在文字内容下面，防止图片太过于吸引注意力</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TodoList 2022</title>
      <link href="/2022/05/192022%20%E5%BD%92%E6%A1%A3/%E9%9A%8F%E7%AC%94/Todo/TodoList%202022/84093bb3/"/>
      <url>/2022/05/192022%20%E5%BD%92%E6%A1%A3/%E9%9A%8F%E7%AC%94/Todo/TodoList%202022/84093bb3/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="b0c680bcc6be5e0d724274023a41ae87751d2e3368411a61eb85a974c5b5f210"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Todo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tag Plugins Plus 外挂标签插件</title>
      <link href="/2022/05/182022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Hexo_Tag%20Plugins%20Plus%20%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/301b2839/"/>
      <url>/2022/05/182022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Hexo_Tag%20Plugins%20Plus%20%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E6%8F%92%E4%BB%B6/301b2839/</url>
      
        <content type="html"><![CDATA[<div class="tip "><p>官方开源文档：<a href="https://github.com/Akilarlxh/hexo-butterfly-tag-plugins-plus">https://github.com/Akilarlxh/hexo-butterfly-tag-plugins-plus</a></p></div><p>npm插件安装</p><ol><li><p>安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-tag-plugins-plus --save</span><br></pre></td></tr></table></figure><blockquote><p> markdown 渲染插件 hexo-renderer-marked 与外挂标签语法的兼容性较差，建议您将其替换成 hexo-renderer-kramed</p></blockquote> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></li><li><p>添加配置信息，以下为写法示例<br>在站点配置文件 _config.yml 或者主题配置文件 _config.butterfly.yml 中添加</p> <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tag-plugins-plus</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/615e2dec/</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line"><span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line"><span class="attr">issues:</span> <span class="literal">false</span> <span class="comment">#issues标签依赖注入开关</span></span><br><span class="line"><span class="attr">link:</span></span><br><span class="line">    <span class="attr">placeholder:</span> <span class="string">/img/link.png</span> <span class="comment">#link_card标签默认的图标图片</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">    <span class="attr">anima:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/font-awesome-animation.min.css</span> <span class="comment">#动画标签anima的依赖</span></span><br><span class="line">    <span class="attr">jquery:</span> <span class="string">https://npm.elemecdn.com/jquery@latest/dist/jquery.min.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">issues:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/issues.js</span> <span class="comment">#issues标签依赖</span></span><br><span class="line">    <span class="attr">iconfont:</span> <span class="string">//at.alicdn.com/t/font_2032782_8d5kxvn09md.js</span> <span class="comment">#参看https://akilar.top/posts/d2ebecef/</span></span><br><span class="line">    <span class="attr">carousel:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/assets/carousel-touch.js</span></span><br><span class="line">    <span class="attr">tag_plugins_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-tag-plugins-plus@latest/lib/tag_plugins.css</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h1><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><h1 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>字体: logo, code</li><li>颜色: red,yellow,green,cyan,blue,gray</li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><h1 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h1><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>字体: logo, code</li><li>颜色: red,yellow,green,cyan,blue,gray</li><li>大小: small, h4, h3, h2, h1, large, huge, ultra</li><li>对齐方向: left, center, right</li></ol><h1 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h1><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>样式: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li>自定义图标：支持 fontawesome。</li></ol><h1 id="动态标签-anima"><a href="#动态标签-anima" class="headerlink" title="动态标签 anima"></a>动态标签 anima</h1><ul><li>On DOM load（当页面加载时显示动画）</li></ul><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div><ul><li>调整动画速度</li></ul><div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div><ul><li>On hover（当鼠标悬停时显示动画）</li></ul><div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div><ul><li>On parent hover（当鼠标悬停在父级元素时显示动画）</li></ul><div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><div class="table-container"><table><thead><tr><th>On DOM load 当页面加载时</th><th>On hover 当鼠标悬停时</th><th>On parent hover 当鼠标悬停在父级元素时</th></tr></thead><tbody><tr><td>faa-wrench animated</td><td>faa-wrench animated-hover</td><td>faa-wrench</td></tr><tr><td>faa-ring animated</td><td>faa-ring animated-hover</td><td>faa-ring</td></tr><tr><td>faa-horizontal animated</td><td>faa-horizontal animated-hover</td><td>faa-horizontal</td></tr><tr><td>faa-vertical animated</td><td>faa-vertical animated-hover</td><td>faa-vertical</td></tr><tr><td>faa-flash animated</td><td>faa-flash animated-hover</td><td>faa-flash</td></tr><tr><td>faa-bounce animated</td><td>faa-bounce animated-hover</td><td>faa-bounce</td></tr><tr><td>faa-spin animated</td><td>faa-spin animated-hover</td><td>faa-spin</td></tr><tr><td>faa-tada animated</td><td>faa-tada animated-hover</td><td>faa-tada</td></tr><tr><td>faa-pulse animated</td><td>faa-pulse animated-hover</td><td>faa-pulse</td></tr><tr><td>faa-shake animated</td><td>faa-shake animated-hover</td><td>faa-shake</td></tr><tr><td>faa-tada animated</td><td>faa-tada animated-hover</td><td>faa-tada</td></tr><tr><td>faa-passing animated</td><td>faa-passing animated-hover</td><td>faa-passing</td></tr><tr><td>faa-passing-reverse animated</td><td>faa-passing-reverse animated-hover</td><td>faa-passing-reverse</td></tr><tr><td>faa-burst animated</td><td>faa-burst animated-hover</td><td>faa-burst</td></tr><tr><td>faa-falling animated</td><td>faa-falling animated-hover</td><td>faa-falling</td></tr><tr><td>faa-rising animated</td><td>faa-rising animated-hover</td><td>faa-rising</td></tr></tbody></table></div><h1 id="复选列表-checkbox"><a href="#复选列表-checkbox" class="headerlink" title="复选列表 checkbox"></a>复选列表 checkbox</h1><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>样式: plus, minus, times</li><li>颜色: red,yellow,green,cyan,blue,gray</li><li>选中状态: checked</li></ol><h1 id="单选列表-radio"><a href="#单选列表-radio" class="headerlink" title="单选列表 radio"></a>单选列表 radio</h1><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>颜色: red,yellow,green,cyan,blue,gray</li><li>选中状态: checked</li></ol><h1 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h1><div class="tag link"><a class="link-card" title="universe" href="http://haloboys.github.io/"><div class="left"><img src="https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">universe</p><p class="url">http://haloboys.github.io/</p></div></a></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% link universe, http://haloboys.github.io/, https://npm.elemecdn.com/akilar-candyassets/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><h1 id="github-卡片-ghcard"><a href="#github-卡片-ghcard" class="headerlink" title="github 卡片 ghcard"></a>github 卡片 ghcard</h1><blockquote><p>ghcard 使用了 github-readme-stats 的 API，支持直接使用 markdown 语法来写。</p></blockquote><ul><li>用户信息卡片</li></ul><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><ul><li>仓库信息卡片</li></ul><div class="table-container"><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><p>参数配置</p><blockquote><p>使用 , 分割各个参数。写法为：参数名=参数值</p></blockquote><div class="table-container"><table><thead><tr><th>参数名</th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>请查阅 Available Themes</td><td>主题</td></tr></tbody></table></div><h1 id="github-徽标-ghbdage"><a href="#github-徽标-ghbdage" class="headerlink" title="github 徽标 ghbdage"></a>github 徽标 ghbdage</h1><ul><li>基本参数，定义徽标左右文字和图标 <br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></li><li>信息参数，定义徽标右侧内容背景色，指向链接 <br><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></li><li>拓展参数，支持 shields 的 API 的全部参数内容 <br><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>left：徽标左边的信息，必选参数。</li><li>right: 徽标右边的信息，必选参数，</li><li>logo：徽标图标，图标名称详见 simpleicons，可选参数。</li><li>color：徽标右边的颜色，可选参数。</li><li>link：指向的链接，可选参数。</li><li>title：徽标的额外信息，可选参数。主要用于优化 SEO，但 object 标签不会像 a 标签一样在鼠标悬停显示 title 信息。</li><li>option：自定义参数，支持 shields.io 的全部 API 参数支持，具体参数可以参看上文中的拓展写法示例。形式为 name1=value2&amp;name2=value2。</li></ol><h1 id="网站卡片-sites"><a href="#网站卡片-sites" class="headerlink" title="网站卡片 sites"></a>网站卡片 sites</h1><div class="site-card-group"><a class="site-card" href="https://xaoxuu.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png"/><span class="title">xaoxuu</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><h1 id="音频-audio"><a href="#音频-audio" class="headerlink" title="音频 audio"></a>音频 audio</h1><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><h1 id="视频-video"><a href="#视频-video" class="headerlink" title="视频 video"></a>视频 video</h1><ul><li>100% 宽度<div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></li><li>50% 宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><p>参数配置</p><ol><li>对其方向：left, center, right</li><li>列数：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><h1 id="折叠框-folding"><a href="#折叠框-folding" class="headerlink" title="折叠框 folding"></a>折叠框 folding</h1><blockquote><p>Butterfly 虽然也有内置折叠框 hideToggle 标签，但是 Volantis 的 folding 折叠框更好看一些。</p></blockquote><details class="folding-tag" blue open><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><p>配置参数</p><ol><li>颜色：blue, cyan, green, yellow, red</li><li>状态：状态填写 open 代表默认打开。</li></ol><h1 id="诗词标签-poem"><a href="#诗词标签-poem" class="headerlink" title="诗词标签 poem"></a>诗词标签 poem</h1><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem [title],[author] %&#125;</span><br><span class="line">诗词内容</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><p>参数配置</p><ol><li>title：诗词标题</li><li>author：作者，可以不写</li></ol><h1 id="阿里图标-icon"><a href="#阿里图标-icon" class="headerlink" title="阿里图标 icon"></a>阿里图标 icon</h1><div class="table-container"><table><thead><tr><th></th></tr></thead><tbody><tr><td><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></td></tr><tr><td><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></td></tr><tr><td><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></td></tr><tr><td><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></td></tr></tbody></table></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><p>参数配置</p><ol><li>icon-xxxx：表示图标 font-class, 可以在自己的阿里矢量图标库项目的 font-class 引用方案内查询并复制。</li><li>font-size：表示图标大小，直接填写数字即可，单位为 em。图标大小默认值为 1em。</li></ol><h1 id="进度条-progress"><a href="#进度条-progress" class="headerlink" title="进度条 progress"></a>进度条 progress</h1><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><p>参数配置</p><ol><li>width: 0 到 100 的阿拉伯数字</li><li>color: 颜色，取值有 red,yellow,green,cyan,blue,gray</li><li>text: 进度条上的文字内容</li></ol><h1 id="注释-notation"><a href="#注释-notation" class="headerlink" title="注释 notation"></a>注释 notation</h1><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span><p><br><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><br>参数配置</p><ol><li>label: 注释词汇</li><li>text: 悬停显示的注解内容</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>GithubAction 实现博客全自动部署</title>
      <link href="/2022/05/172022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Github_githubAction%20%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/d71988fb/"/>
      <url>/2022/05/172022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Github_githubAction%20%E5%AE%9E%E7%8E%B0%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/d71988fb/</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>每次部署 Hexo 都需要运行指令三件套，随着文章越来越多，编译的时间也随之越来越长，通过 Github Action，我们只需要在每次完成博客的编写或修改以后，将改动直接 通过 git push 到远程仓库，之后的编译部署的工作统统交给 CI 来完成即可。</p><blockquote><p>CI\CD 其实说的是三件事情：「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」、「持续部署（Continuous Deployment）」。</p></blockquote><p>无意间发现了github Action 这个功能，浅尝了一下发现挺有意思，每次提交代码之后它都会检测 .github/workflows 下的自定义脚本执行</p><p>第一次搭建 run 了 22 次才跑起来！真是个小laji。再见了 gitee 你只好用来当备胎了，我要投入github 的怀抱了。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202205180258211.png" alt="22 次!"></p><p>github Action 介绍</p><p>通过 GitHub Actions 让日常开发流程很多事情可以自动化起来. 对于自动化, 开发者一定非常熟悉, 从日常离不开的 CI/CD (自动集成测试和持续部署), 到被无数人膜拜和吐槽的 jenkins. 通过各种各样的自动化工具来节省人力和确保代码质量。</p><p>特点：</p><ul><li>通过 Docker 隔离</li><li>GitHub 提供慷慨的计算资源(每个 workflow 会独享 1 核虚拟 CPU, 3.75GB 内存, 网络权限和 100GB 的磁盘空间, 真大气！)</li><li>代码上下文(可以获取触发 Actions 的代码上下文环境, 比如当前分支)</li><li>workflow 有一定限制<ul><li>每个 workflow, 包括排队和执行时间, 最多 58 分钟; 每个 workflow 最多可以包含 100 个 Action; 每个仓库同一时刻只能运行两个 workflow (足够慷慨了, 这相当于你同时占据了 GitHub 近 8G 的内存资源).</li></ul></li><li>提供一种新的配置语言和一个体验非常现代化的 workflow 编辑器</li><li>支持在代码仓库的 Settings 中增加不超过 100 个密钥(比如 Slack, S3 等), 供 workflow 使用; 也可以直接使用可视化编辑器增加</li><li>Workflow 的 Action 支持设置 Icon 和 Icon 背景色</li></ul><h1 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h1><blockquote><p>参考文章：<a href="https://akilar.top/posts/f752c86d/#%E9%85%8D%E7%BD%AEGithub-Action">https://akilar.top/posts/f752c86d/#%E9%85%8D%E7%BD%AEGithub-Action</a></p></blockquote><h2 id="获取-Token"><a href="#获取-Token" class="headerlink" title="获取 Token"></a>获取 Token</h2><p>为了确保交由 Github Action 来持续部署时，Github Action 具备足够的权限来进行 hexo deploy 操作，需要先获取 Token。</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>访问 Github-&gt; 头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens-&gt;<strong>generate new token</strong><br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518124355.png" alt="20220518124355"><br>创建的 Token <strong>名称随意</strong>，但必须勾选 repo 项<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518124513.png" alt="20220518124513"><br>填写完成后点击 generate 生成 token token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。</p><h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><p>访问 Gitee-&gt; 头像（右上角）-&gt; 设置 -&gt; 私人令牌 -&gt; 生成新令牌<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518124631.png" alt="20220518124631"><br>Token 只会显示这一次，之后将无法查看，所以务必保证你已经记录下了 Token。之后如果忘记了就只能重新生成重新配置了。</p><h2 id="Github创建存放源码的私有仓库"><a href="#Github创建存放源码的私有仓库" class="headerlink" title="Github创建存放源码的私有仓库"></a>Github创建存放源码的私有仓库</h2><blockquote><p>之所以是私有仓库，是因为在接下来的配置中会用到 Token，如果 Token 被盗用，别人可以肆意操作你的 github 仓库内容，为了避免这一风险，才选择的博客源码闭源。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/202205171524756.png" alt="创建存放源码的私有仓库"></p><p>创建完成后，后续需要把博客的源码 push 到这里。<br>首先获取远程仓库地址，此处虽然 SSH 和 HTTPS 均可。SSH 在绑定过 ssh key 的设备上无需再输入密码，HTTPS 则需要输入密码，但是 SSH 偶尔会遇到端口占用的情况。请自主选择。</p><h2 id="配置-deploy"><a href="#配置-deploy" class="headerlink" title="配置 deploy"></a>配置 deploy</h2><p>打开站点配置文件 [Blogroot]/_config.yml, 找到 deploy 配置项，使用之前生成的 [SiteToken] 和各个站点仓库 URL 来组装地址。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">gitHub:</span> <span class="string">https://[GithubUsername]:[GithubToken]@github.com/[GithubUsername]/[GithubBlogRepo].git[,branch]</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://[GiteeUsername]:[GiteeToken]@gitee.com/[GiteeUsername]/[GiteeBlogRepo].git[,branch]</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://[TokenUser]:[CodingToken]@e.coding.net/[CodingUsername]/[CodingBlogRepo].git[,branch]</span></span><br><span class="line">  <span class="comment"># [,branch]为可选项，表示部署的分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 参照写法：</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">    <span class="attr">gitHub:</span> <span class="string">https://HaloBoys:ghp_7L9LKoVXwHzlxxxxxxxxMeW71xj8zQ@github.com/HaloBoys/HaloBoys.github.io.git,main</span></span><br><span class="line">    <span class="attr">gitee:</span> <span class="string">https://Haloboys:e112dxxxxxxxxx1c2b3c01a6b6ff@gitee.com/Haloboys/blog.git,main</span></span><br></pre></td></tr></table></figure><h2 id="Github-Action-配置"><a href="#Github-Action-配置" class="headerlink" title="Github Action 配置"></a>Github Action 配置</h2><h3 id="Github-page-自动化"><a href="#Github-page-自动化" class="headerlink" title="Github page 自动化"></a>Github page 自动化</h3><p>在 [Blogroot] 新建.github 文件夹，注意开头是有个. 的。然后在.github 内新建 workflows 文件夹，再在 workflows 文件夹内新建 autodeploy.yml, 在 [Blogroot]/.github/workflows/autodeploy.yml 里面输入</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到 master 分支时，启动Action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">BLOG自动部署</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span> <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;[GithubUsername]&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;[GithubEmail]&quot;</span></span><br><span class="line"><span class="string">        git clone https://github.com/[GithubUsername]/[GithubBlogRepo].git .deploy_git</span></span><br><span class="line"><span class="string">        # 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患</span></span><br><span class="line"><span class="string">        # =====注意.deploy_git前面有个空格=====</span></span><br><span class="line"><span class="string">        # 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件</span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br></pre></td></tr></table></figure><h3 id="Github-page-GiteePage-自动化"><a href="#Github-page-GiteePage-自动化" class="headerlink" title="Github page + GiteePage 自动化"></a>Github page + GiteePage 自动化</h3><blockquote><p>Gitee的自动部署，即使不开通 Gitee pages pro，也可以完成自动更新。</p></blockquote><p>[Blogroot]/.github/workflows/autodeploy.yml 添加输入:<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">自动部署</span></span><br><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">      <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改</span></span><br><span class="line">  <span class="attr">release:</span></span><br><span class="line">    <span class="attr">types:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">published</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">检查分支</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Node</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">        npm install hexo-cli -g</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">缓存</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;runner.OS&#125;&#125;-$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装依赖</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        npm install gulp-cli -g #全局安装gulp</span></span><br><span class="line"><span class="string">        npm install --save</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        hexo clean</span></span><br><span class="line"><span class="string">        hexo bangumi -u #bilibili番剧更新</span></span><br><span class="line"><span class="string">        hexo generate</span></span><br><span class="line"><span class="string">        gulp</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">部署</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">        git config --global user.name &quot;[GithubUsername]&quot;</span></span><br><span class="line"><span class="string">        git config --global user.email &quot;[GithubEmail]&quot;</span></span><br><span class="line"><span class="string">        git clone https://github.com/[GithubUsername]/[GithubBlogRepo].git .deploy_git</span></span><br><span class="line"><span class="string">        # 此处务必用HTTPS链接。SSH链接可能有权限报错的隐患</span></span><br><span class="line"><span class="string">        # =====注意.deploy_git前面有个空格=====</span></span><br><span class="line"><span class="string">        # 这行指令的目的是clone博客静态文件仓库，防止Hexo推送时覆盖整个静态文件仓库，而是只推送有更改的文件</span></span><br><span class="line"><span class="string">        hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">同步到</span> <span class="string">Gitee</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">wearerequired/git-mirror-action@master</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">          <span class="comment"># 注意在github私有仓库的Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span></span><br><span class="line">          <span class="attr">SSH_PRIVATE_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">          <span class="attr">source-repo:</span> <span class="string">&quot;git@github.com:[GithubUsername]/[GithubBlogRepo].git&quot;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">          <span class="attr">destination-repo:</span> <span class="string">&quot;git@gitee.com:[GiteeUsername]/[GiteeBlogRepo].git&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">构建</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@master</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> [<span class="string">GiteeUsername</span>]</span><br><span class="line">          <span class="comment"># 注意在在github私有仓库的Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># 注意替换为你的 Gitee 仓库</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> [<span class="string">GiteeUsername</span>]<span class="string">/[GiteeBlogRepo]</span></span><br></pre></td></tr></table></figure></p><p>打开Github私有仓库 点击 Settings —&gt; Secrets —&gt; Actions 新建两个变量：</p><ol><li><strong>GITEE_RSA_PRIVATE_KEY</strong>：在配置 SSH-KEY 时，我们用来与 Github 绑定的是公钥，而私钥存放在（以 win10 为例）C:\Users\userneme.ssh\id_rsa 文件内</li><li><strong>GITEE_PASSWORD</strong>：gitee 账户的登录密码</li></ol><blockquote><p>gitee-pages-action 插件需要用账号密码模拟登录</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518033109.png" alt="20220518033109"></p><ol><li><strong>微信搜索 Gitee 公众号关注并绑定账号密码。</strong></li></ol><blockquote><p>用 github action 来远程更新 gitee 的站点部署时，会收到异地登陆的短信，提示需要验证码。</p></blockquote><p>解决方案：在微信上搜索 Gitee 微信公众号，在微信公众号内绑定自己的 Gitee 账号，这样虽然还是会有异地登录提示，但是发过来的消息不再需要填写验证码。</p><blockquote><p>存放博客静态页面的Gitee<strong>仓库名称和用户名必须保持一致</strong> ，不然会出现部署失败的情况，别问我怎么知道的，说多了都是泪。还有第一次部署要先登录 Gitee 手动部署。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518222318.png" alt="20220518222318"></p><h2 id="设置远程仓库"><a href="#设置远程仓库" class="headerlink" title="设置远程仓库"></a>设置远程仓库</h2><blockquote><p>将前面创建的Github 私有仓库进行配置</p></blockquote><ol><li>删除或者先把 [Blogroot]/themes/butterfly/.git 移动到非博客文件夹目录下，原因是主题文件夹下的.git 文件夹的存在会导致其<strong>被识别成子项目</strong>，从而无法被上传到源码仓库。</li><li>在博客根目录 [Blogroot] 路径下运行：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init <span class="comment">#初始化 (如果已经连接了其他仓库可以跳过此步骤，使用 git remote rm origin 命令删除原有仓库链接)</span></span><br><span class="line">git remote add origin git@github.com:[GithubUsername]/[SourceRepo].git <span class="comment">#[SourceRepo]为存放源码的github**私有仓库**</span></span><br><span class="line">git checkout -b main </span><br></pre></td></tr></table></figure></li><li>添加屏蔽项</li></ol><blockquote><p>因为能够使用指令进行安装的内容不包括在需要提交的源码内，所有我们需要将这些内容添加到屏蔽项，表示不上传到 github 上。这样可以显著减少需要提交的文件量和加快提交速度。</p></blockquote><p>打开/新建 [Blogroot]/.gitignore, 输入以下内容：<br><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.deploy_git*/</span><br><span class="line">.idea</span><br><span class="line">themes/butterfly/.git</span><br><span class="line"></span><br><span class="line">// 如果不是 butterfly 主题，记得替换最后一行内容为你自己当前使用的主题。</span><br></pre></td></tr></table></figure></p><ol><li>运行 git 提交指令，将博客源码提交到 github 上</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;github action update&quot;</span></span><br><span class="line">git push origin main</span><br></pre></td></tr></table></figure><ol><li>此时你的主题文件夹若已经被正常上传，并且你也添加了主题文件夹下的.git 文件夹的屏蔽项。那你可以考虑把第一步移走或删除的.git 放回原处。</li></ol><h2 id="部署查看"><a href="#部署查看" class="headerlink" title="部署查看"></a>部署查看</h2><p>打开 GIthub 存放源码的私有仓库，找到 action。</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518032125.png" alt="20220518032125"></p><p>根据 Commit 记录找到相应的任务</p><p>点击 Deploy 查看部署情况<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518032247.png" alt="20220518032247"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>英语写作</title>
      <link href="/2022/05/172022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E9%98%85%E8%AF%BB_%E8%8B%B1%E8%AF%AD%E5%86%99%E4%BD%9C/6a199313/"/>
      <url>/2022/05/172022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E9%98%85%E8%AF%BB_%E8%8B%B1%E8%AF%AD%E5%86%99%E4%BD%9C/6a199313/</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-Relieve-My-Pressure"><a href="#How-to-Relieve-My-Pressure" class="headerlink" title="How to Relieve My Pressure"></a>How to Relieve My Pressure</h1><p>​    Nowadays, college students are faced with various kinds of pressure, such as study pressure, financial pressure and employment pressure. Though pressure encourages motivation, too much pressure can seriously affect people’s physical and mental health, so it is necessary to handle it properly.</p><p>​    When it comes to relieving pressure , people may vary in their ways . In my life , I have pressure from family members , friends , study , future employment , etc . Among them the most troublesome is employment pressure . In order to reduce my anxiety, I turn to my parents and teachers for help. They help me analyze my advantages and disadvantages. Besides, my relatives and friends give me much useful advice and many helpful resources. These all help relieve my pressure.</p><p>​    All in all , it is important to recognize the pressure and deal with it rather than escape from it . <strong>Only</strong> in this way <strong>can we</strong> really enjoy the beauty of life .</p><p>​    当前，大学生面临着学习压力、经济压力、就业压力等多种压力。虽然压力鼓励动力，但压力太大会严重影响人的身心健康，所以有必要妥善处理。</p><p>​    当谈到缓解压力时，人们可能有不同的方式。在我的生活中，我有来自家庭的压力。会员、朋友、学习、未来就业等。其中最麻烦的是就业压力。为了减轻焦虑，我向父母和老师寻求帮助。它们帮助我分析自己的优势和劣势。此外，我的亲戚和朋友给了我很多有用的建议和很多有用的资源。这些都有助于减轻我的压力。</p><p>​    总而言之，重要的是要认识到压力并处理它，而不是逃避它。只有这样，我们才能真正享受生活的美好。</p><h1 id="Part-time-Jobs"><a href="#Part-time-Jobs" class="headerlink" title="Part-time Jobs"></a>Part-time Jobs</h1><p>​    In contemporary society, college students’ taking part-time jobs has become a hot topic. It has a great influence on<br>their life.<br>​    I believe there are both benefits and drawbacks. Clearly, in addition to getting an income, college students taking part-time jobs may enjoy a more exciting lifestyle as they can meet people from all walks of life and develop a sense of responsibility which can’t be learned in the classroom. On the other hand, the negative effects of part-time jobs are also<br>obvious. Students who take part-time jobs may spend less time focusing on study, and if they seek to excel in both the part-time job and study, the busy life they lead may put their health at risk. Besides, the society is much more<br>complicated than they have expected, and they sometimes may be exposed to danger.<br>​    In my opinion, College students ought to keep a balance between academic study and part-time jobs, and always<br>ear in mind that a students priority is to acquire knowledge at school .</p><p>​    在当代社会，大学生兼职已经成为一个热门话题。这对他们的生活有很大的影响。</p><p>​    我相信有利有弊。显然，除了获得收入，大学生兼职工作可以享受更令人兴奋的生活方式，因为他们可以遇到来自各行各业的人，并培养了责任感，这是在课堂上学不到的。另一方面，兼职工作的负面影响也很明显。从事兼职工作的学生可能会花较少的时间集中在学习上，如果他们想在兼职工作和学习中都出类拔萃，繁忙的生活可能会危及他们的健康。此外，社会比他们预想的复杂得多，他们有时可能会暴露在危险之中。</p><p>​    在我看来，大学生应该在学术学习和兼职工作之间保持平衡，并始终牢记学生的首要任务是在学校获得知识。</p><h1 id="Should-College-Students-Take-Part-time-Jobs"><a href="#Should-College-Students-Take-Part-time-Jobs" class="headerlink" title="Should College Students Take Part-time Jobs"></a>Should College Students Take Part-time Jobs</h1><p>​    Should College Students Take Part-time Jobs? Nowadays, many college students are taking part-time jobs in their spare time. </p><p>​    On this phenomenon, different people have different views. Opponents, especially parents of those students, think that the major task for college students is to study. Taking part-time jobs will cut into their time for study. Book knowledge is the most important. The so called social experience can be acquired after they graduate and enter society. Supporters see many advantages in college students taking part-time jobs. Firstly, it provides the students a chance to realize that money is always earned in a hard way so that they’ll learn to be economical. Secondly, from a practical point of view, students can earn some money to relieve the financial burden on their parents. Thirdly, part-time jobs may lead the students out of the ivory tower to see the real world.</p><p>​    Although opinions vary as to whether students should take part time jobs or not, it is up to the students themselves to make the decision after sizing up their own special case. If they can handle their study very well, taking a part-time job might be fun.</p><p>​    大学生是否应该兼职？目前很多大学生都在他们空闲时间做兼职。</p><p>​    在这一现象上，不同的人有不同的看法。反对者，尤其是那些学生父母，他们认为大学生的主要任务是学习。做兼职会减少他们的学习时间。书本上的知识是最重要的。所谓的社会经验可以在他们毕业后踏入社会时获得。支持者认为大学生兼职工作有很多优点。首先，它为学生提供一个机会来意识到钱总是难的，他们才会学会节俭。其次，从实际的角度来看，学生可以赚一些钱来减轻父母的经济负担。第三，兼职可以引导学生走出象牙塔，看到真实的世界。</p><p>​    尽管对于学生是否应该参加兼职工作众说纷纭，是由学生自己视自己的特殊情况而作出的决定。如果他们能够处理好学习兼职工作也许会很有趣。</p><h1 id="Life-long-Learning"><a href="#Life-long-Learning" class="headerlink" title="Life-long Learning"></a>Life-long Learning</h1><p>​Chairman Mao once said one is never too old to learn, his words have inspired so many people to study all the time. Life-long learning is very necessary today, many teachers have kept studying for they need to refresh their knowledge. For me, I also like to keep life-long learning, the reasons are in the following.</p><p><strong>On the one hand</strong>, the society develops so fast, I don’t want to be kicked out, so I need to keep studying and make myself keep pace with the time. Like the old people, they don’t know how to use computer, some of them learn the computer and some refuse to learn. The result is that the one who doesn’t use computer can’t keep pace with the time.  <strong>On the other hand</strong>, life-long learning helps me have the passion on life. I am always curious about the new things, so I will want to know them more. If I stop learning, I will stop thinking and feel myself like waiting to die, how terrible it is. </p><p>​Life-long learning is necessary for everyone, it is the only way to make us keep pace with the time. </p><p>毛主席曾经说过活到老，学到老，他的这些话鼓励了很多人坚持学习。终身学习在今天是很必要的，很多教师就坚持学习，因为他们需要更新知识。对于我来说，我也喜欢保持终身学习，理由如下。</p><p><strong>一方面</strong>，社会发展很快，我不想要被淘汰，因此我需要保持学习，让自己与时俱进。比如老人家，他们不知道如何使用电脑，一些老人家学会了电脑，一些拒绝去学。结果就是不用电脑的人无法与时俱进。<strong>另一方面</strong>，终身学习能让我对生活有激情。我总是对新事物充满好奇，所以我想要了解更多。如果我停止学习，就会停下来思考，感觉自己就像在等死，多么可怕啊。</p><p>终身学习对每个人来说都是必须得，这也是让我们保持与时俱进的唯一方法。</p><h1 id="Frustration"><a href="#Frustration" class="headerlink" title="Frustration"></a>Frustration</h1><p>If there is any single factor that makes for success in living, it is the ability to profit by defeat. Every success I know has been achieved because the person was able to analyze defeat and actually profit by it in his next undertaking. Confuse defeat with failure, and you are doomed indeed to failure. For it isn’t defeat that makes you fail: it is your own refusal to see in defeat the guide and encouragement to success.</p><p>Defeats are nothing to be ashamed of. They are routine incidents in the life of every man who achieves success. But defeat is a dead loss unless you do face it without humiliation, analyze it and learn why you failed. Defeat, in other words, can help to cure its own cause. Not only does defeat prepare us for success, but nothing can arouse within us such a compelling desire to succeed. If you let a baby grasp a rod and try to pull it away, he will cling more and more tightly until his whole weight is suspended. It is this same reaction which should give you new and greater strength every time you are defeated.</p><p>If you exploit the power which defeat gives, you can accomplish with it far more than you are capable of.</p><p>生活中如果有任何一个因素可以促进成功，那就是从挫折中受益的能力。我所了解的每一次达到的成功都是因为那个人能够对挫折进行分析，在下一次工作中真正得益。如果混淆挫折和失败，你就注定会真正失败。 因为不是挫折使你失败，而是你自己拒绝从挫折中看到成功的方向和勇气。</p><p>挫折并不可耻。在每个取得成功的人的生活中，挫折是家常便饭。但你一定要能够面对挫折而不感到羞耻，能够分析它并了解失败的原因，否则挫折就是绝对的损失。换言之，挫折可以帮助解决它自身的起因。挫折不但可以为我们成功做好准备，而且没有任何东西可以在我们的内心激发起如此强烈的想要成功的欲望。如果你让一个婴儿抓住一根竿子，然后试着把竿子抽出来，孩子就会越抓越紧，直到他们整个重量都依附于此。每次你被击败的时候，正是这同样的反应会赋予你崭新的更为巨大的力量。</p><p>如果你能够利用挫折带来的这种力量，你就能够用它来完成远远超乎你能力的目标。</p><h1 id="My-View-on-Studying-Abroad"><a href="#My-View-on-Studying-Abroad" class="headerlink" title="My View on Studying Abroad"></a>My View on Studying Abroad</h1><p>Nowadays, many middle school students prefer studying abroad because English plays an important role in<br>their daily life. Generally speaking, the advantages of doing so are as follows. First, it gives them a good<br>environment for language study. Second, they can learn foreign advanced science and technology. Besides, they<br>can also spread our national culture to foreign countries.</p><p>But every coin has two sides. The negative aspects are also apparent. One of the important disadvantages is<br>that middle school students are too young to take care of themselves and that they lack life experience. What’s<br>more,the cost for life and study is too high.</p><p>Through the above analysis, I believe that the positive aspects overweigh the negative ones. As for me, I<br>would like to go abroad for my future education.</p><p>现在，许多中学生更喜欢出国留学，因为英语在英语学习中起着重要的作用。他们的日常生活。总的来说，这样做的好处如下。首先，它给了<br>他们一个很好的。语言学习的环境。第二，他们可以学习国外先进的科学技术。此外，他们。也可以把我们的民族文化传播到国外。</p><p>但每一枚硬币都有两面。负面因素也是显而易见的。其中一个重要的缺点是。中学生太小，生活不能自理，缺乏生活经验。什么。此外，生活<br>和学习的成本太高了。</p><p>通过以上分析，我认为积极的方面大于消极的方面。至于我，我想出国留学。</p><h1 id="Career-or-Family-Which-Is-More-Important"><a href="#Career-or-Family-Which-Is-More-Important" class="headerlink" title="Career or Family: Which Is More Important?"></a>Career or Family: Which Is More Important?</h1><p>When asked about their opinion of career and family, people always respond differently. Some people deem it more<br>important to pursue their career, while there are other people who argue that family should be the number one in one’s life.</p><p>It goes without any question that career plays a key in the first place, career can give us an<br>aim to live on. Without career, much of our living time will be certainly meaningless. What’s more, career can<br>provide us with a means to live on. Most people earn their income from a job. On the other hand, family is also an<br>indispensable part of life, as many people will admit. Family is always regarded as a place where we can escape<br>from troubles in life. In addition, we can obtain a sense of belonging from family. Without it, we may feel lonely<br>and desperate.</p><p>In my opinion, career and family are not in opposition to each other, they can enhance each other so<br>that our life can become better and better. Therefore, we can’t say which is more important, but we can say<br>keeping a balance between them is important.</p><p>当被问及他们对事业和家庭的看法时，人们的回答总是不同的。一些人认为追求事业更重要，而另一些人则认为家庭应该是生命中的第一位。</p><p>毫无疑问，事业首先起着关键作用，事业可以给我们带来。目标是活下去。没有事业，我们生活的大部分时间肯定是没有意义的。更重要<br>是，事业可以。为我们提供一种生存的手段。大多数人从工作中赚取收入。另一方面，家庭也是一种。许多人都会承认，这是生活中不可或<br>的一部分。家庭总是被认为是我们可以逃避的地方。远离生活中的麻烦。此外，我们还可以从家庭中获得归属感。如果没有它，我们可能会<br>到孤独。也很绝望。</p><p>在我看来，事业和家庭并不是对立的，他们可以相互促进。我们的生活会变得越来越好。因此，我们不能说哪个更重要，但我们可以说。在它<br>们之间保持平衡是很重要的。</p><h1 id="How-to-Keep-Psychologically-Healthy"><a href="#How-to-Keep-Psychologically-Healthy" class="headerlink" title="How to Keep Psychologically Healthy?"></a>How to Keep Psychologically Healthy?</h1><p>One in four people will experience some kind of mental problem in the course of a year. When you fail to<br>manage these problems, they are likely to cause various mental illnesses.</p><p>The cause of mental health problems often vary a lot from one case to another. In today’s society, a good number<br>of people are suffering from heavy pressure. Others lack communication skills. In addition, a lot of people are ignorant of psychological knowledge about how to keep mentally fit.</p><p>There are a lot of ways to curb mental health problems and keep psychologically healthy. Firstly, find the real<br>cause of your mental health problem and see whether you can do something about it. Secondly, learn to relax<br>yourself and take exercises to release the pressure. Lastly, you may find it helpful to talk to your partner or<br>friend about your problem, or seek support and advice form a psychological consultant. </p><p>每四个人中就有一个会在一年内经历某种精神问题。当你没能做到。处理好这些问题，很可能会导致各种精神疾病。</p><p>心理健康问题的起因往往因人而异。在当今社会，相当多的人承受着沉重的压力。其他人缺乏沟通能力。此外，很多人对如何保持精神健康的<br>心理学知识一无所知。</p><p>有很多方法可以抑制心理健康问题，保持心理健康。首先，找出你心理健康问题的真正原因，看看你是否能做些什么。其次，学会放松自己，<br>通过锻炼来释放压力。最后，你可能会发现和你的伴侣或朋友谈谈你的问题，或者向心理咨询师寻求支持和建议是有帮助的。</p><h1 id="Do-Libraries-Become-Useless-at-the-Age-of-Information"><a href="#Do-Libraries-Become-Useless-at-the-Age-of-Information" class="headerlink" title="Do Libraries Become Useless at the Age of Information?"></a>Do Libraries Become Useless at the Age of Information?</h1><p>There has been a heated discussion about libraries at the age of information among. Some people,<br>especially the younger generation, challenge the value of conventional libraries. When they need any information in<br>their studies or work, they can turn to their computers for help. For this reason, they do not need to go to a library for borrowing or returning one or two books.</p><p>While others, including most old people as well as scholars, value libraries. They love libraries because they<br>can enjoy peace and quietness in an isolated spiritual world. And they also have access to rare academic works<br>needed for their studies in the libraries.</p><p>In my view, conventional libraries are still available though there is still much room for improving. At the age<br>of information, as long as knowledge is respected and cherished, libraries won’t extinct from our lives. On the<br>other hand, libraries should not refuse the latest information technology, which will enable them to regain those<br>young readers.</p><p>信息时代的图书馆引发了一场激烈的讨论。一些人，尤其是年轻一代，对传统图书馆的价值提出了挑战。当他们在学习或工作中需要任何信息<br>时，他们可以向他们的计算机寻求帮助。因此，他们不需要去图书馆借还一两本书。</p><p>而其他人，包括大多数老年人和学者，则重视图书馆。他们热爱图书馆，因为他们可以在与世隔绝的精神世界中享受和平与宁静。他们还可以<br>在图书馆获得学习所需的稀有学术著作。</p><p>在我看来，传统的图书馆仍然是可用的，尽管仍有很大的改进空间。在信息时代，只要尊重和珍惜知识，图书馆就不会从我们的生活中消失。<br>另一方面，图书馆不应该拒绝最新的信息技术，因为这将使他们重新获得年轻读者。</p><h1 id="How-Will-Our-Life-Go-on-Without-the-Internet"><a href="#How-Will-Our-Life-Go-on-Without-the-Internet" class="headerlink" title="How Will Our Life Go on Without the Internet?"></a>How Will Our Life Go on Without the Internet?</h1><p>If asked whether the Internet is the greatest discovery of the 20th century, my answer would be “yes”. The<br>Internet has drawn the world closer together, helped realize countless incredible dreams, and provided modern<br>people with many conveniences and a brilliant life.</p><p>Today, many people simply feel they cannot live without the Internet. Governments publish their latest policies<br>and decisions online for worldwide recognition. Political campaigns are often done online to gain wider public<br>support. Companies and enterprises resort to the Internet for more business opportunities and potential customers at<br>home and abroad . Universities and researchers turn to the Internet if they’d seek international cooperation or<br>funding. Common folks like us also rely on the cyber world in various ways, for communication, entertainment,<br>banking and shopping.</p><p>The power of the Internet is all pervasive and its many negative effects are already visible. For example,<br>Internet addicts tend to withdraw to their own fantasy world rather than communicate with a real person. Children<br>are exposed to online pornography and violence. Internet frauds are an everyday occurrence. In view of all this,<br>you are advised to use the Internet with wisdom. Keep it at a safe distance and never lose yourself.</p><p>如果被问及互联网是否是20世纪最伟大的发现，我的回答是肯定的。互联网拉近了世界的距离，帮助实现了无数不可思议的梦想，为现代人提<br>供了许多便利和辉煌的生活。</p><p>今天，许多人只是觉得他们离不开互联网。各国政府在网上公布他们的最新政策和决定，以获得全世界的认可。政治竞选活动通常在网上进<br>行，以获得更广泛的公众支持。公司和企业借助互联网在国内外寻找更多的商机和潜在的客户。如果大学和研究人员寻求国际合作或资金，他们就会求助于互联网。像我们这样的普通人也以各种方式依赖网络世界进行交流、娱乐、银行和购物。</p><p>互联网的力量无处不在，它的许多负面影响已经显现出来。例如，网瘾患者倾向于退缩到自己的幻想世界，而不是与真人交流。儿童暴露在网络色情和暴力中。网络诈骗司空见惯。有鉴于此，建议您明智地使用互联网。保持安全距离，永远不要迷失自我。</p>]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>VSCode+PicGo+Github 图床</title>
      <link href="/2022/05/062022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Github_VSCode+PicGo+Github%E7%BA%B5%E4%BA%AB%E4%B8%9D%E6%BB%91/3a6c965c/"/>
      <url>/2022/05/062022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Github_VSCode+PicGo+Github%E7%BA%B5%E4%BA%AB%E4%B8%9D%E6%BB%91/3a6c965c/</url>
      
        <content type="html"><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="创建Github-仓库"><a href="#创建Github-仓库" class="headerlink" title="创建Github 仓库"></a>创建Github 仓库</h2><ul><li>登录 Github：新建仓库 ——&gt; 设置仓库名 ——&gt; 设置为公开 ——&gt; 创建初始化文件</li></ul><h2 id="生成令牌"><a href="#生成令牌" class="headerlink" title="生成令牌"></a>生成令牌</h2><ul><li>Settings   ——&gt; Developer settings  ——&gt; Personal access tokens ——&gt; Generate new token</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202205061224910.png" alt="image-20220506122409737"></p><ul><li>勾选配置 ——&gt; Generate ——&gt; <strong>复制生成的 Token</strong></li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202205061234488.png" alt="image-20220506123409251"></p><h1 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h1><h2 id="PicGo-软件"><a href="#PicGo-软件" class="headerlink" title="PicGo 软件"></a>PicGo 软件</h2><h3 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h3><ul><li>Github地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></li></ul><h3 id="PicGo-软件配置"><a href="#PicGo-软件配置" class="headerlink" title="PicGo 软件配置"></a>PicGo 软件配置</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202205061241840.png" alt="image-20220506124107693"></p><blockquote><p>Github图床Cdn加速： <a href="https://www.jsdelivr.com/">jsdelivr</a> ( A free CDN for Open Source fast, reliable, and automated. )</p></blockquote><p>Picgo软件设置自定义域名处填写：<code>https://cdn.jsdelivr.net/gh/[github 用户名]/[github 仓库名]</code></p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220511203216.png" alt="20220511203216"></p><h2 id="PicGo-插件"><a href="#PicGo-插件" class="headerlink" title="PicGo 插件"></a>PicGo 插件</h2><blockquote><p>在 VSCode 里使用 picgo，实现快速上传图片到远端图床并直接将 URL 写进 Markdown 文件里，极大提升 Markdown 贴图效率与体验。支持 <a href="https://github.com/Molunerfinn/PicGo">PicGo</a> 原生自带的 8 种图床。</p></blockquote><h3 id="PicGo-插件-ShortCut"><a href="#PicGo-插件-ShortCut" class="headerlink" title="PicGo 插件 ShortCut"></a>PicGo 插件 ShortCut</h3><p>You can change all the keymaps below as you wish.</p><p>Uploading an image from clipboard<br>Windows/Unix: <strong>Ctrl + Alt + u</strong><br>OsX: <strong>Cmd + Opt + u</strong></p><p>Uploading images from explorer<br>Windows/Unix: <strong>Ctrl + Alt + e</strong><br>OsX: <strong>Cmd + Opt + e</strong></p><p>Uploading an image from input box<br>Windows/Unix: <strong>Ctrl + Alt + o</strong><br>OsX: <strong>Cmd + Opt + 0</strong></p><hr><h3 id="PicGo-插件-安装配置"><a href="#PicGo-插件-安装配置" class="headerlink" title="PicGo 插件 安装配置"></a>PicGo 插件 安装配置</h3><ul><li>VsCode 插件市场搜索 PicGo</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202205061211747.png" alt="image-20220506121112513"></p><ul><li>安装完成后点击设置，填写插件配置</li></ul><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202205061243580.png" alt="image-20220506124333349"></p><h1 id="Markdown-All-in-One-插件"><a href="#Markdown-All-in-One-插件" class="headerlink" title="Markdown All in One 插件"></a>Markdown All in One 插件</h1><blockquote><p>Markdown All in One 是 VsCode 的插件，给编写Markdown 文档带来很多便捷方式。</p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202205061302075.png" alt="image-20220506130234869"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>提供了常用操作便利的快捷键</li><li>创建目录<ul><li>打开命令面板输入: ctoc (creat table of contents) 即可创建文章目录</li></ul></li><li>一边书写一边预览(Ctrl + Shift + V or Ctrl + K V)</li><li>可轻松转换为HTML文件和PDF文件</li><li>优化了List editing的编辑</li><li>可格式化table (Alt + Shift + F) 以及Task list (use Alt + C to check/uncheck a list item)</li><li>支持特殊数学符号渲染</li></ol><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctrl + B    粗体</span><br><span class="line">Ctrl + I    斜体</span><br><span class="line">Alt + S    删除线</span><br><span class="line">Ctrl + Shift + ]    标题(uplevel)</span><br><span class="line">Ctrl + Shift + [    标题(downlevel)</span><br><span class="line">Ctrl + M    Toggle math environment</span><br><span class="line">Alt + C    Check/Uncheck task list item</span><br></pre></td></tr></table></figure><h1 id="jsDelivr-【补充】"><a href="#jsDelivr-【补充】" class="headerlink" title="jsDelivr 【补充】"></a>jsDelivr 【补充】</h1><p>jsDelivr 有两种引用方式：</p><h2 id="直接引用"><a href="#直接引用" class="headerlink" title="直接引用"></a>直接引用</h2><p>格式：</p><p><code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;/&lt;文件及路径&gt;</code></p><h2 id="创建版本号后再引用"><a href="#创建版本号后再引用" class="headerlink" title="创建版本号后再引用"></a>创建版本号后再引用</h2><p>因为程序包超过50M jsdelivr就无法访问</p><p>格式：</p><p><code>https://cdn.jsdelivr.net/gh/&lt;用户名&gt;/&lt;仓库名&gt;@[版本号]/&lt;文件及路径&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML 源</title>
      <link href="/2022/05/042022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_HTML_HTML%E6%BA%90%E7%A0%81/a4dfc4c2/"/>
      <url>/2022/05/042022%20%E5%BD%92%E6%A1%A3/%E5%89%8D%E7%AB%AF/2022/%E5%89%8D%E7%AB%AF_HTML_HTML%E6%BA%90%E7%A0%81/a4dfc4c2/</url>
      
        <content type="html"><![CDATA[<h1 id="八卦时钟"><a href="#八卦时钟" class="headerlink" title="八卦时钟"></a>八卦时钟</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220509020646.png" alt="效果图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>八卦时钟<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0,user-scalable=0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-id">#clock</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: black;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.label</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>:inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>:<span class="number">#4d4d4d</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-css">    font-size:<span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>:all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-origin</span>: <span class="number">0%</span> <span class="number">0%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.now</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">880px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.label</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">35%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>:<span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">680px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.label</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>:<span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125; </span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">480px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.label</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: -<span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>:<span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>:<span class="number">0</span> ;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">400px</span>) &#123;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.label</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: -<span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>:<span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;clock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 利用时间对象获得 当前 时间</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// var now = new Date();</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> yearText = [<span class="string">&#x27;&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> monthText = [<span class="string">&quot;一月&quot;</span>, <span class="string">&quot;二月&quot;</span>, <span class="string">&quot;三月&quot;</span>, <span class="string">&quot;四月&quot;</span>, <span class="string">&quot;五月&quot;</span>, <span class="string">&quot;六月&quot;</span>, <span class="string">&quot;七月&quot;</span>, <span class="string">&quot;八月&quot;</span>, <span class="string">&quot;九月&quot;</span>, <span class="string">&quot;十月&quot;</span>, <span class="string">&quot;十一月&quot;</span>, <span class="string">&quot;十二月&quot;</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> dayText = [<span class="string">&quot;一号&quot;</span>, <span class="string">&quot;二号&quot;</span>, <span class="string">&quot;三号&quot;</span>, <span class="string">&quot;四号&quot;</span>, <span class="string">&quot;五号&quot;</span>, <span class="string">&quot;六号&quot;</span>, <span class="string">&quot;七号&quot;</span>, <span class="string">&quot;八号&quot;</span>, <span class="string">&quot;九号&quot;</span>, <span class="string">&quot;十号&quot;</span>, <span class="string">&quot;十一号&quot;</span>, <span class="string">&quot;十二号&quot;</span>, <span class="string">&quot;十三号&quot;</span>, <span class="string">&quot;十四号&quot;</span>, <span class="string">&quot;十五号&quot;</span>, <span class="string">&quot;十六号&quot;</span>, <span class="string">&quot;十七号&quot;</span>, <span class="string">&quot;十八号&quot;</span>, <span class="string">&quot;十九号&quot;</span>, <span class="string">&quot;二十号&quot;</span>, <span class="string">&quot;二十一号&quot;</span>, <span class="string">&quot;二十二号&quot;</span>, <span class="string">&quot;二十三号&quot;</span>, <span class="string">&quot;二十四号&quot;</span>, <span class="string">&quot;二十五号&quot;</span>, <span class="string">&quot;二十六号&quot;</span>, <span class="string">&quot;二十七号&quot;</span>, <span class="string">&quot;二十八号&quot;</span>, <span class="string">&quot;二十九号&quot;</span>, <span class="string">&quot;三十号&quot;</span>, <span class="string">&quot;三十一号&quot;</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> weekText = [<span class="string">&quot;星期一&quot;</span>, <span class="string">&quot;星期二&quot;</span>, <span class="string">&quot;星期三&quot;</span>, <span class="string">&quot;星期四&quot;</span>, <span class="string">&quot;星期五&quot;</span>, <span class="string">&quot;星期六&quot;</span>, <span class="string">&quot;星期日&quot;</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> hourText = [<span class="string">&quot;零点&quot;</span>, <span class="string">&quot;一点&quot;</span>, <span class="string">&quot;两点&quot;</span>, <span class="string">&quot;三点&quot;</span>, <span class="string">&quot;四点&quot;</span>, <span class="string">&quot;五点&quot;</span>, <span class="string">&quot;六点&quot;</span>, <span class="string">&quot;七点&quot;</span>, <span class="string">&quot;八点&quot;</span>, <span class="string">&quot;九点&quot;</span>, <span class="string">&quot;十点&quot;</span>, <span class="string">&quot;十一点&quot;</span>, <span class="string">&quot;十二点&quot;</span>, <span class="string">&quot;十三点&quot;</span>, <span class="string">&quot;十四点&quot;</span>, <span class="string">&quot;十五点&quot;</span>, <span class="string">&quot;十六点&quot;</span>, <span class="string">&quot;十七点&quot;</span>, <span class="string">&quot;十八点&quot;</span>, <span class="string">&quot;十九点&quot;</span>, <span class="string">&quot;二十点&quot;</span>, <span class="string">&quot;二十一点&quot;</span>, <span class="string">&quot;二十二点&quot;</span>, <span class="string">&quot;二十三点&quot;</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> minuteText = [<span class="string">&quot;零分&quot;</span>, <span class="string">&quot;一分&quot;</span>, <span class="string">&quot;二分&quot;</span>, <span class="string">&quot;三分&quot;</span>, <span class="string">&quot;四分&quot;</span>, <span class="string">&quot;五分&quot;</span>, <span class="string">&quot;六分&quot;</span>, <span class="string">&quot;七分&quot;</span>, <span class="string">&quot;八分&quot;</span>, <span class="string">&quot;九分&quot;</span>, <span class="string">&quot;十分&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;十一分&quot;</span>, <span class="string">&quot;十二分&quot;</span>, <span class="string">&quot;十三分&quot;</span>, <span class="string">&quot;十四分&quot;</span>, <span class="string">&quot;十五分&quot;</span>, <span class="string">&quot;十六分&quot;</span>, <span class="string">&quot;十七分&quot;</span>, <span class="string">&quot;十八分&quot;</span>, <span class="string">&quot;十九分&quot;</span>, <span class="string">&quot;二十分&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;二十一分&quot;</span>, <span class="string">&quot;二十二分&quot;</span>, <span class="string">&quot;二十三分&quot;</span>, <span class="string">&quot;二十四分&quot;</span>, <span class="string">&quot;二十五分&quot;</span>, <span class="string">&quot;二十六分&quot;</span>, <span class="string">&quot;二十七分&quot;</span>, <span class="string">&quot;二十八分&quot;</span>, <span class="string">&quot;二十九分&quot;</span>, <span class="string">&quot;三十分&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;三十一分&quot;</span>, <span class="string">&quot;三十二分&quot;</span>, <span class="string">&quot;三十三分&quot;</span>, <span class="string">&quot;三十四分&quot;</span>, <span class="string">&quot;三十五分&quot;</span>, <span class="string">&quot;三十六分&quot;</span>, <span class="string">&quot;三十七分&quot;</span>, <span class="string">&quot;三十八分&quot;</span>, <span class="string">&quot;三十九分&quot;</span>, <span class="string">&quot;四十分&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;四十一分&quot;</span>, <span class="string">&quot;四十二分&quot;</span>, <span class="string">&quot;四十三分&quot;</span>, <span class="string">&quot;四十四分&quot;</span>, <span class="string">&quot;四十五分&quot;</span>, <span class="string">&quot;四十六分&quot;</span>, <span class="string">&quot;四十七分&quot;</span>, <span class="string">&quot;四十八分&quot;</span>, <span class="string">&quot;四十九分&quot;</span>, <span class="string">&quot;五十分&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;五十一分&quot;</span>, <span class="string">&quot;五十二分&quot;</span>, <span class="string">&quot;五十三分&quot;</span>, <span class="string">&quot;五十四分&quot;</span>, <span class="string">&quot;五十五分&quot;</span>, <span class="string">&quot;五十六分&quot;</span>, <span class="string">&quot;五十七分&quot;</span>, <span class="string">&quot;五十八分&quot;</span>, <span class="string">&quot;五十九分&quot;</span>];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> secondsText = [<span class="string">&quot;一秒&quot;</span>, <span class="string">&quot;二秒&quot;</span>, <span class="string">&quot;三秒&quot;</span>, <span class="string">&quot;四秒&quot;</span>, <span class="string">&quot;五秒&quot;</span>, <span class="string">&quot;六秒&quot;</span>, <span class="string">&quot;七秒&quot;</span>, <span class="string">&quot;八秒&quot;</span>, <span class="string">&quot;九秒&quot;</span>, <span class="string">&quot;十秒&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;十一秒&quot;</span>, <span class="string">&quot;十二秒&quot;</span>, <span class="string">&quot;十三秒&quot;</span>, <span class="string">&quot;十四秒&quot;</span>, <span class="string">&quot;十五秒&quot;</span>, <span class="string">&quot;十六秒&quot;</span>, <span class="string">&quot;十七秒&quot;</span>, <span class="string">&quot;十八秒&quot;</span>, <span class="string">&quot;十九秒&quot;</span>, <span class="string">&quot;二十秒&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;二十一秒&quot;</span>, <span class="string">&quot;二十二秒&quot;</span>, <span class="string">&quot;二十三秒&quot;</span>, <span class="string">&quot;二十四秒&quot;</span>, <span class="string">&quot;二十五秒&quot;</span>, <span class="string">&quot;二十六秒&quot;</span>, <span class="string">&quot;二十七秒&quot;</span>, <span class="string">&quot;二十八秒&quot;</span>, <span class="string">&quot;二十九秒&quot;</span>, <span class="string">&quot;三十秒&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;三十一秒&quot;</span>, <span class="string">&quot;三十二秒&quot;</span>, <span class="string">&quot;三十三秒&quot;</span>, <span class="string">&quot;三十四秒&quot;</span>, <span class="string">&quot;三十五秒&quot;</span>, <span class="string">&quot;三十六秒&quot;</span>, <span class="string">&quot;三十七秒&quot;</span>, <span class="string">&quot;三十八秒&quot;</span>, <span class="string">&quot;三十九秒&quot;</span>, <span class="string">&quot;四十秒&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;四十一秒&quot;</span>, <span class="string">&quot;四十二秒&quot;</span>, <span class="string">&quot;四十三秒&quot;</span>, <span class="string">&quot;四十四秒&quot;</span>, <span class="string">&quot;四十五秒&quot;</span>, <span class="string">&quot;四十六秒&quot;</span>, <span class="string">&quot;四十七秒&quot;</span>, <span class="string">&quot;四十八秒&quot;</span>, <span class="string">&quot;四十九秒&quot;</span>, <span class="string">&quot;五十秒&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;五十一秒&quot;</span>, <span class="string">&quot;五十二秒&quot;</span>, <span class="string">&quot;五十三秒&quot;</span>, <span class="string">&quot;五十四秒&quot;</span>, <span class="string">&quot;五十五秒&quot;</span>, <span class="string">&quot;五十六秒&quot;</span>, <span class="string">&quot;五十七秒&quot;</span>, <span class="string">&quot;五十八秒&quot;</span>, <span class="string">&quot;五十九秒&quot;</span>, <span class="string">&quot;六十秒&quot;</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> clock;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> yearList = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> monthList = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> dayList = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> weekList = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> hourList = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> minuteList = [];</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> secondsList = [];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 分析，完成效果:</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 1. 实现时钟排列</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 步骤</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 1. 初始化，渲染dom</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 2. 实现随着时间高亮</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> * 3. 添加动画，使之移动</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"> */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> textList = [</span></span><br><span class="line"><span class="language-javascript">    [yearText, yearList],</span></span><br><span class="line"><span class="language-javascript">    [monthText, monthList],</span></span><br><span class="line"><span class="language-javascript">    [dayText, dayList],</span></span><br><span class="line"><span class="language-javascript">    [weekText, weekList],</span></span><br><span class="line"><span class="language-javascript">    [hourText, hourList],</span></span><br><span class="line"><span class="language-javascript">    [minuteText, minuteList],</span></span><br><span class="line"><span class="language-javascript">    [secondsText, secondsList],</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">init</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">initTransition</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> timeArr = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">rotateTransition</span>(timeArr)</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">runtime</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setInterval(function () &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     runtime()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;, 100)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 初始化函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// function init() &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     clock = document.getElementById(&#x27;clock&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     // 生成标签 存放文字展示</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     for (var i = 0; i &lt; textList.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//         for (var j = 0; j &lt; textList[i][0].length; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//             var temp = createLabel(textList[i][0][j]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//             clock.appendChild(temp);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//             // 将生成的标签存放在数组list中</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//             textList[i][1].push(temp);</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    clock = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#clock&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> textList) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> textList[i][<span class="number">0</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> temp = <span class="title function_">createLabel</span>(textList[i][<span class="number">0</span>][j]);</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 将生成的标签存放在数组list中</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            clock.<span class="title function_">appendChild</span>(temp);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            textList[i][<span class="number">1</span>].<span class="title function_">push</span>(temp);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(textList);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 创建标签并将文字填充标签 接收参数为文字内容</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">createLabel</span>(<span class="params">text</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;label&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">innerText</span> = text;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> div;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 获得时间</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">runtime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获得时间 日期 小时 分钟 秒钟</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> month = now.<span class="title function_">getMonth</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> day = now.<span class="title function_">getDate</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> week = now.<span class="title function_">getDay</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hour = now.<span class="title function_">getHours</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> minute = now.<span class="title function_">getMinutes</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> seconds = now.<span class="title function_">getSeconds</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timeArr = [<span class="number">0</span>, month, day-<span class="number">1</span>, week, hour, minute, seconds]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(timeArr)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">clearColor</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">rotateTransition</span>(timeArr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addColor</span>(timeArr);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">addColor</span>(<span class="params">timeArr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var label = document.querySelectorAll(&#x27;.label&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (var i in timeArr) &#123;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var len = i &gt; 1 ? textList[i - 1][0].length : 0;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var num = timeArr[i];</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var index = len + num;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     label[index].classList.add(&#x27;now&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // console.log(label[index])</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; timeArr.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> index = timeArr[i];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (var j = 0; j &lt; timeArr.length; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var temp = textList[i][1][j];</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     // var deg = 360 / textList[i][0].length * j;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var deg = 360 / textList[i][0].length * (j - timeArr[i]);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     temp.style.transform = temp.style.transform.replace(/-?\d+deg/, deg + &#x27;deg&#x27;);</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     // console.log(temp)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        textList[i][<span class="number">1</span>][index].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;now&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 清除现在时间颜色</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">clearColor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.now&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    now.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        item.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;now&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 初始展开</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">initTransition</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> textList) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> textList[i][<span class="number">1</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            item.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translate(&#x27;</span> + i * <span class="number">60</span> + <span class="string">&#x27;px,-50%)&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            item.<span class="property">style</span>.<span class="property">transformOrigin</span> = -(i * <span class="number">60</span>) + <span class="string">&#x27;px 50%&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 扇形展开</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">rotateTransition</span>(<span class="params">timeArr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> textList) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> j <span class="keyword">in</span> textList[i][<span class="number">1</span>]) &#123;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> temp = textList[i][<span class="number">1</span>][j];</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> deg = <span class="number">360</span> / textList[i][<span class="number">0</span>].<span class="property">length</span> * (j - timeArr[i]);</span></span><br><span class="line"><span class="language-javascript">            temp.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&#x27;translate(&#x27;</span> + i * <span class="number">60</span> + <span class="string">&#x27;px,-50%)&#x27;</span> + <span class="string">&#x27; rotate(&#x27;</span> + deg + <span class="string">&#x27;deg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="日夜切换"><a href="#日夜切换" class="headerlink" title="日夜切换"></a>日夜切换</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220509020509.png" alt="效果图"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>日夜切换<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">svg &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.scrollElement</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">6000px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">bottom</span>: <span class="number">5%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">0.9rem</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">0.7em</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: Verdana, Geneva, Tahoma, sans-serif;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">transition</span>: all <span class="number">0.3s</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">z-index</span>: <span class="number">11</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btn_works</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">right</span>: unset;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#ffffff</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: <span class="number">#1b1734</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.3.4/gsap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/gsap/3.3.4/ScrollTrigger.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">&quot;https://www.w3.org/2000/svg&quot;</span> <span class="attr">xmlns:xlink</span>=<span class="string">https:///www.w3.org/1999/xlink</span>&quot; <span class="attr">viewBox</span>=<span class="string">&quot;0 0 750 500&quot;</span> <span class="attr">preserveAspectRatio</span>=<span class="string">&quot;xMidYMax slice&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Scene 1 Gradient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad1&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;-154.32&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;263.27&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;-154.32&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;374.3&quot;</span> <span class="attr">gradientTransform</span>=<span class="string">&quot;matrix(-1, 0, 0, 1.36, 231.36, -100.14)&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.07&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#9c536b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.98&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#d98981&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;bg_grad&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;375&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;-35&quot;</span> <span class="attr">r</span>=<span class="string">&quot;318.69&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#F5C54E&quot;</span> <span class="attr">id</span>=<span class="string">&quot;sun&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#FFDBA6&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#F7BB93&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#F2995E&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#f07560&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.8&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#FFAB93&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad2&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;242.5&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;356.25&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;750&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;356.25&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fbbd93&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.98&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#c46976&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad3&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;467.26&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;500&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;467.26&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;225.47&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.01&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#ffb8bd&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#914d64&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad4&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;216.56&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;227.64&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;191.14&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;600.82&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#70375a&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.96&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#8a6e95&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad5&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;1&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;413.12&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;340.58&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;413.12&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#433d6c&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#392e54&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad6&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;454.13&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;295.96&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;454.13&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;498.93&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#2b2850&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.99&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#563a6a&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad7&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;434.38&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;391.96&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;474.27&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;516.33&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.3&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#1c1b38&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.38&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#201e3e&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.9&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#383263&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad8&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;259.18&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;335.54&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;213.65&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;500.39&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#0e0a1a&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.3&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#100d1f&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.64&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#17142c&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.95&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#201f3f&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;grad9&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;508.16&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;321.39&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;726.97&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;623.69&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.01&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#120e22&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#221d42&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Scene2 Gradient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;lg4&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;641.98&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;274.9&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;638.02&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;334.36&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#2c2c50&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#434375&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;lg5&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;172.37&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;286.02&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;171.33&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;343.08&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#lg4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;lg6&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;505.71&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;261.55&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;504.61&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;322.08&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#lg4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;lg7&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;301.32&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;260.99&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;295.66&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;345.9&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#lg4&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;lg8&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;375.59&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;381.01&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;373.3&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;507.08&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#lg4&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Scene3 Gradient --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;bg2-grad&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;365.22&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;500&quot;</span> <span class="attr">r</span>=<span class="string">&quot;631.74&quot;</span> <span class="attr">gradientTransform</span>=<span class="string">&quot;translate(750 552.6) rotate(180) scale(1 1.11)&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(349, 94%, 75%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.12&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(342, 49%, 62%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.18&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(328, 37%, 56%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.33&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(281, 33%, 48%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.41&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(268, 38%, 48%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.45&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(266, 38%, 43%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.55&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(261, 37%, 32%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.64&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(253, 36%, 24%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.72&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(244, 33%, 19%, 1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.78&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;hsla(240, 33%, 17%, 1)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">radialGradient</span> <span class="attr">id</span>=<span class="string">&quot;fstar-grad&quot;</span> <span class="attr">cx</span>=<span class="string">&quot;1362.39&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;-53.7&quot;</span> <span class="attr">r</span>=<span class="string">&quot;39.39&quot;</span> <span class="attr">gradientTransform</span>=<span class="string">&quot;matrix(0.89, -0.45, -0.45, -0.89, -473.7, 640.57)&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.06&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.8&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.12&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.62&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.19&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.45&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.26&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.31&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.33&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.2&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.41&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.11&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.49&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.05&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.59&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0.01&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0.72&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stop-opacity</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">radialGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;linear-gradient&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;472&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;461.56&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;872.58&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;461.56&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#fd75a8&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#5a2d81&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;linear-gradient-2&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;214.61&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;508.49&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;166.09&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;361.12&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#linear-gradient&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;linear-gradient-3&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;57.65&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;508.01&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;448.08&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;508.01&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#linear-gradient&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;linear-gradient-4&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;193.48&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;508.3&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;761.05&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;508.3&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#linear-gradient&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;bg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;750&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;0.8&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#bg_grad)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;clouds&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fefefe&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;cloud4&quot;</span> <span class="attr">transform</span>=<span class="string">&#x27;translate(600 0)&#x27;</span> <span class="attr">d</span>=<span class="string">&quot;M402.34,341.68c9.9-10.24,23.76-7.43,36.05-5.48C448,332,458.88,329,468.9,334c-.95-7.91,8.65-14.92,15.9-11.61-3.34-11.77,13-13.9,20.53-8.34A13.53,13.53,0,0,1,522,310.16c2.64-18.11,27.85-24.13,38.38-9.17,3.54-5.51,12.12-6.88,17.2-2.74,6.59-43.22,70.78-27.93,65.83,12.62,14.7-4.43,32,6.72,34.08,21.93,5.76-2.23,29.28,1,21.76,9.26&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;cloud3&quot;</span> <span class="attr">transform</span>=<span class="string">&#x27;translate(600 0)&#x27;</span> <span class="attr">d</span>=<span class="string">&quot;M382.94,363.16c-7-10.5-18.72-9.06-28.19-4.53-12.19-6.71-26.73-11.74-39.62-3.13,1-15.45-18-25.51-28-12.41-14.59-29.67-56.68-34.41-72-3.09-1.41,4-4.73,6.07-8.1,2.88-23.13-25.66-57.12-30.25-67.73,8.21-13.05-1.88-33.42-9.15-37.47,10.07a38.08,38.08,0,0,0-36.36,2.11&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;cloud2&quot;</span> <span class="attr">transform</span>=<span class="string">&#x27;translate(-600 0)&#x27;</span> <span class="attr">d</span>=<span class="string">&quot;M506.86,233.56c9.62-3.21,23.27-4,33.88-2.17,0-5.7,10.4-6.68,14-3.58,10.32-12.45,29.93-5.12,40.08,0,10.06-6.52,27.67-9.72,33.93,2.42,5.53-.13,15.88-3.23,18.8,2.94a31.53,31.53,0,0,1,18.21.64&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;cloud1&quot;</span> <span class="attr">transform</span>=<span class="string">&#x27;translate(-600 0)&#x27;</span> <span class="attr">d</span>=<span class="string">&quot;M402.18,271.3c-7.57-7.46-18.46-7.52-28.05-5.3-6.75-8.79-20.54-13.18-27.24-1.45-10.4-11.06-30.66-24.2-37.74-2.24a13.1,13.1,0,0,0-17.76,1.47c-11.23-25.69-58.46-41.29-64.24-4.06-9-8.26-20.15-2.62-27.47,4.4-11-2.87-22.18-7.58-31.72,2.7-8.44-.75-18.1-2.8-24.71,4.57&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- SCENE 2 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;scene2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;bats&quot;</span> <span class="attr">style</span>=<span class="string">&quot;opacity: 0;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M486.65,187a9.22,9.22,0,0,1-4.29,6.38l-.06-.06c-.05-1.13-.06-2.62-.94-3.52a3.34,3.34,0,0,1,.15,1.63,1.9,1.9,0,0,0-1.66-.09,3.31,3.31,0,0,1,.33-1.61c-1,.81-1.05,2.22-1.37,3.38-3.9-5.13-5.67-10.29-13.64-9.74,5.67,3.29,5.9,10.62,12.85,11.87.09,6.46,4.06,6.69,4.88.28l-.2.1.18-.35c0,.08,0,.16,0,.25,7-.48,8.08-7.73,14.09-10.38A22.64,22.64,0,0,0,486.65,187Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#112129&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M390.93,226.87c2.22,2.08,2,4.89.48,7.24,1.83-1.75,8.12,2.24,7,4.89,2.51-4.08,4.36.31,5.85,2.31,1.26-2.7,3.68-6,5.7-2.13-.93-2.73,5.66-6.2,7.34-4.32-3.67-5.08,3.49-10.18,7.21-7.31-.39-.7-4.61-4.33-12.39-3.17,3.63,5.77-3.22,9.07-5.56,9.51a2.88,2.88,0,0,0-.64-2.28c-.36.36-.32,1.06-.52,1.48a7.6,7.6,0,0,0-2.13-.14c0-.42-.15-1.09-.5-1.32a4,4,0,0,0-.68,2.32c-2.39-.72-8.67-4.51-4.66-9.87-7.67-1.78-12.17,1.51-12.61,2.17C385.25,225.74,389.24,225.21,390.93,226.87Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#112129&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M430.89,152.88c-4.51,1.05,1.45-4.11-8.29-4.45-.47-4.18-5.81-4.39-8.89-5.1,2.82-2.94,8.14-3.47,12.12-3.3,2.3.49,6.16.37,7.5,2.31-1,3,4.29,12,5.26,5.94,2.05,3.21,5,.12,4.19,2-.45.53-1,2.54.08,2.34,4.46-.88,5.75-6.35,8.69-8.63,4.73-.13,12,1,13.29,6.25-5.84-2.77-7.67-2.4-10.21,2.8-2.93-.77-5.74.92-7.26,3.33-3.3-2.2-7.59.35-11,2.2.05-1.76-.79-4.15-2.71-4.6C433.18,152.94,431.88,152.9,430.89,152.88Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#112129&quot;</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M538.33,214.5s-2.52,6.57,2.07,7.47c-1.53.45-4.23,3.88-2.25,6.85-2.2-1.83-10.48,6.4-8.65,8.74-1.4-2.25-4.54-1.85-4.77,1-1.07-3.42-2.36-1.61-2.34.63-1.16-3.75-4.22-1.39-4.6.9-.4-5.23-9.49-5.18-11.89-3.51,1.45-2.79-2-6.28-4.59-5.95,0,0,1.62-5.85-3.43-7.48,6.16-3.41,16.13,10,22.07,8.92a8.47,8.47,0,0,1-.9-4.23l1.53,1.71,1.27-.09,1-2.7C525.28,238.88,530.76,216.88,538.33,214.5Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#112129&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M458.17,279.73c3.54.59,5.51,4.7,2.22,7.27,2.87-.72,4,4.71,2.47,5.94,4.88-1.34,9.07,5.6,8.25,9.17,3-1.07,4.18,4.15,3.52,5.52.89-1.82,3.82-5.49,5.73-1.71,2.43-5,7.84-6,12.35-3.64-1.94-4.42,4-5.2,6.22-3.91-1.29-3.74,1.35-5.73,4.78-4.66-7.88-8.5-15.53-.91-22.4,2.76a30.2,30.2,0,0,0,1-3.23l-4.33,3-1.56-5-.89,2.8C471.29,286,471.52,277,458.17,279.73Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#112129&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;hills2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h2-6&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M524.28,418.82c6.36,0,80.19-14.81,103.12-36.53S655.28,345.8,679,359.64s33.69,18.54,46.63,18.82a158.62,158.62,0,0,1,23.88,2.4V447L632,458.92Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#lg4)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h2-5&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M294.06,498.2l49.09-66.93s-64-6.48-93.59-31.29-63.47-49.78-87.15-41.46-81.7,4.44-98.73,15S.1,387.08.1,387.08l.37,60.18L209.75,498.2Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#lg5)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h2-4&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M264.94,449.2s61-16.39,94.07-37.28,61.37-37.2,73.53-36.12,69.9-40,80.18-42.62,13.55-.37,29,1.85,22-5.27,34.52,6.39,43.29,34.86,75.51,48.52c25.88,11,91.48,28.88,91.48,28.88l-31.58,67.73-326.93,9.27Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#lg6)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h2-3&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M.47,469.58V420s113.73-2.74,171.72-26.68,101.69-72.29,134.53-52,31.37-18.48,61.9,13.28S446.68,393.48,478,406.86s113.08,26.06,113.08,26.06l-59.28,53.4L272.55,485Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#lg7)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h2-2&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M749.55,500V398.27l-38.48-6.67s-29.86,12.13-63,11.53-39.61-7.26-70.33-13.41-72.58,21.4-105.61,21.4-75.5-17.78-110.64-17.78c-24.85,0-90.08,20.12-110.82,18.48s-51.11-20.42-82-6.26S.47,409.26.47,409.26V500Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#lg8)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h2-1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;opacity: 0;&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M746.51,371.43c-.18-1,1.74,1.28,2.2.27s2,1.37,2.14.37c.81-3.64.32-8.56-3.75-10.12-2.88-2.18,1.15-.54,2.06-.18,1.1,1.1-.4-4.74,1.86-1.95,2.17-10.09-3.87-8.35-11-11.08-6.32-4.83-1.32-3.94,1.19-.09,1.46,1.73,1.64-.55.82-1.91s1.92-.46,3.1,1.09c2,1.29,2.67-3.2,5.88,1.26-.68-1.81,1.09-6-.76-7,1.21-2.4.59-2.67-3.16-1.1-7.28.94-11.31-9.61-1.41-3-3.86-9,7.46,5.89,5.33-7.74-2.64,1.73-1.42.9-.67-1.37-1.62-.72-15,7.23-12.15-1.46.64-1.28,1,0,2,.73,1.69-5.55,4.78,5.68,3.45-2.56,12-4-1.25-3,7.36-5.61-1.11-2.6-3.43-2.45-.21-5.78-2.64.43-9.82,5.81-12.61,7.75.24-1.15.51-4,3-4.1.6-7.23.24-7-3.46-.64-.74-4.79,3.91-8.88,8.68-7.83-5.28-1.79-2.56-2.09-1-7-6.52,6.54-3.66-4.45-6.7,7,.48-3.06-1.28-4,1.22-7.47,4.44-10.76-3.3,8.72-3.29-7.83-1,.43-.73,6.12-.79,7.07-3-.8-1.7-.34-.69,1.7-1.43,1.17-.74,1.27.8,2.49.74,4.27-2,1.08-3.36-.88-4.35-6.05-.4,2.13-2.72.12-1.24-1.36-4-3.95-3.43-2.14,4.91,4.75.6,3.52,1.19,5.61,1.41.16,4.51-1.36,3.39-.25-5.76,6.22,2.05.63,2.89,1-1,.93-3.28,5.39-.37,3.54.29-1.15,1.37-2.35,1.57-1.48-.46,2,1.69,9.06-1,9.72-2.54,0-4.86-7.06-5.24-6.39-.38,1.49-.5,1.86-1.08.5-3.67-7.21-1.74-.94-3.68-1.65-4-4.19-2-.84-1.32,1.24-4.84,2.49,3.28,2.51,2.44,4.45-.7,1.28-2.07,1.25-.58,1.92,4.58-.37,2,1.39,4.34,2.28,2.88-1,5.26,2.39,2.44,1.69-5-.1-20.52-11-10,.87,7,.12,1,2.11,3.88,3.21,15-1,2.77,4.82-3.33.35,3-1.17-3.57-1.56-7.58-3.23s-.38-1.28,1-3.45-2.05-.77-8.71-.51-5.38-.89-9-2.3,0,0,.51-2.56-1.66.13-3.84.13c-4.52-3.06-1.16-3.32,3.2-3.57,3.67-1.95,5.09,10.6,5.38-.39.77-2.3,1.16,1.92,1.54,4.35,3.76,3-1.2-6.05,12.94-2.81,4.1-1.28-.26-2.31-4-2.69s-1.16-1.28-3.85-3.83c-3.6-1.38-12.91-3.64-4-1.92,4.58-.21-1.85-6.68,7.95-7.92,5.38-3.37-13.42-1.72-14.35-1.15-2.29.56-6.18-3.69-9.28-5.31,12.7,1.23,2.82-11.86,12.22-5.3,5.73-.12-5.55-6.49,8.08-9.45,2.43-2.94-5.26-.26-8.33.26s-.26-1.28-.77-3.58-6.66,3.32-11.66,3.58c-7.8.37-12.63-12.92-4.1-6.27,2.44.64,1.28-.89,3.59-2,3-1.51,3.21,5.49,5.51-.64,2.22-3.05,12.37,2.1,12.68-5.62.56-3.26-3.79,2.9-6.66-2.43-2.36-.88-6.61,4.89-7.3.51-1.42-2.62-4.59,5.33-5.77,1.15-.51-1.53-1.92-.51-3.84.51s-6.52-3.82-3-5c.9-1.15,1.8.64,3.72.89s-.39-.89-.77-2c2.12-1.35,3,.56,5.38,2.94,8.31,2.12-4.64-9.3,4.35-4,4.35,3.21,6-.42.26-2.81-2.82-1.92.38-.77,4-.64s.9-.9,4.1-2.17,3.2-.13,3.33-2c-.26-3.55-8.61,1.51-10.25-.64-2.23-1.5-8.21,6.86-4-1.79.64-2.68-4.48,1.92-7.3,4.09s-1.15-1.15-3.07-2.17-2.31-.89-2.57-2.68c.68-5.19,16.82-.84,8.33-7.54-1.54-2,2.18.64,4.36.13,1.76-4.07-7.91.1,2.94-8,1.54-5.58-8.57,8.13-5.89-.64,1.43-3.27-10.84,9.6-6.28.13-1.56-3-.72-3.44,1.54-6.14-.33-3.42,1.84-3.19,2.43-7.15.9-2-2.17,1.15-3.45,1.66s.25-2.17-1.29-1.28c-8.07,7.69-3.42-7.39-1-10.35-.13-1.4-4.67,4.62-4.67,4.62,2.71-16.44-2.82-12.66-2.37-1.3-5.21-3.92,0,.7-1.54,2.43-1.16,1.15-1.28,1.53-.39,2.68,3.76,9.29-1.34-1-2.3-.64-.9,1.54-.39,2.31-1.93,1.28s-6.14-4.6-5.76-2.42,4.74,4.72,3.2,5.11c-7.75,1.68.41.75-.51,2.81-6.8,6.31,7-2,5.25,1.79-.64,2.42-.89,2.3.39,3.19,2,0,3.62,6.06.89,5-3.91-1.77.54,4.68-.38,4.86-5.08-.23-3.77-10.37-8.44-7.67a17.55,17.55,0,0,0-3-1.15c-5-1.66,1,1.66-1.41,2.94s-1.28,2.56-1.28,2.56c11,.75-1.35,7.24,8.45,4.85-2.31,5.75,7-.71,5.77,2.83-.51,2.16-.77,2.54-.26,3.82,4.57,6.78-6.42-2.12-6.15.38.33,4.58-5,2.33-7,4.73-2,2.68-.39,3.7-4,4.09s-11.53.51-7.95,1.66c6.79-.42,7.22,1,9.48,4.34,1.53-8.78,4.34,3.66,6.66-.64,1.67-1.91,2.44-4.6,3.85-3.19,5.06,1.8,5.87,1.91,2.43,5.49,0,0-3.59-1.79-4.61.39-2.32,5.72-6-1.9-9.1,1.15-.14,7.69-9.9-.58-13.45,2.3a2,2,0,0,1-1.86,1.66c-11.3,1.06,4.16,4.2,4.68,3.45-.21,9.86,5.69-1.41,6.28,2.17-4.69,5.84,5-1.95,5.12.89.64,2,0,3.71,2.31,2.43s6.66-5.62,6.79-2.68c.15,10-13.55,3.34-19.73,8.94-1.68,1-14.07-3.87-11.79-1.15,15.19,1.27.05,9.69,6.34,8.82,12.38-9.88,1.29,6.2,6.6,4,10.7-13.37,3.6,2.41,8.71-.38a21.44,21.44,0,0,1,5.38-4.22c4.24-3.57,6.29,2.58-.38,5.18-6.85.83-10.49,0-14,4.41-8.91-3.26-4.54-1-10.38,1.78-10.63-1.78-5.86,8.17.26,7,12.35-5,2.74,2.09,6.78,3.45,3-1.11,12.28-12.68,7.69-4.73-.89,2.43,2.31.64,1.67,2.43s-3.2,4.21-.13,4c14.75-10.35,12,2.11-.77,4.34-18-4.52-.64.26-15,1.92-12.49,1.49-10.3.29-2.81,5.24-1,2.3-4.1,4.47-1.29,4.34s12.17-4.47,10.51-2.68-5.78,4.9-2.89,3.54c13.76-8.22-5.12,6.11,1.61,4.76,3.71-.76,9.6-6.51,8.84-4s-1.93,4.09.12,2.43c10.51-5.31-2.75,7.93-17.55,5.62-.25,1.92-2.94-1.4-3.2.77-3.67,8.11,13.8,2.67,2.95,8.18-2.44,1.53-11.53-.77-10,.76s2.81,4.25.89,3.92-8.84-.21-3.46,1.45,8.72-1.4,10.51.64-.9,3.07,4,1.79,3.07,1.15-.64,3.45-11.4-.51-11.4,1.53c2.8,5.41-11.91-.08-9.23,2.68,13.63,5.15,5.29,3.48,10,8.18,3.7-3.51,6.77-2,9.62-2.42,12.12-5.68-4.93,5.69-9.48,6.38-11.06-.06-7.31-3.3-10.38,2.94-2.69.77-10.38.51-8.07,2.56,23.95,5.71-5.06,10.66,22.29,4.47-4,5.67,2.68,3.1,4.48,5.11,1,.89-.38,1.22,4.74-.86,8.23-5.29,7,5.71.13,5.46-7.69-1.82-8.17,4.2-14.6.25,0,0,3.45,3.46-.13,3.33s-2.95-1.92-5.13.51-10.76,2.68-8.19,3.32,8.32-1.66,5.89,1.41c-10.92,12.28,7.16-.53,5.38,2.68-11,13.43,6.5-3.12,5.12.77-1.4,9.85,5.22-.89,7,2.68-2.68,5.93,4.6-2.48,6.15.51,11.35-3.6-.37,6.6-7.18,7-8.76-.16-11.08,3.09-17.9.66,2.51-1.82-7.27.12-8.33-2.36-1.27-1.72,6.91.36,4.32-3.91-2.53-1.74-12,1.16-15.24-4.31-2.77-3.36,5.15,3.59,2.1-1.3-.49-1.63,3.27,2,5.63,2.52,4.3.91-7.75-8.32,1-3,1.84.87-.78-1.11-1.84-2.25s4.89,1.63,6.69,1.71c1.87-2.07-4.21-2.56,3.1-5-.13-2.39-10.71.53-9.55-3.18-1.73-.24-11.36,1.59-12.89-3.59.79-2.63,2.84-.17,6.69,1.64,2,.16.33-1.39-.08-2.53s1.63,0,1.06-1.54c-2.89-5.12,3,2.33,4.9,3,1.87.24.57-1.14-.17-2.61.11-2.25,8.1,3.45,8.65-2.6,1.23-2.2-1.63-.73-4-1.47-3.23-1.81-2.29-3-6.61-1.13-1.21-3.51-12.17-1.06-11.58-6.35,3-3,6.93,8.24,7.5.24.65-3.21,7,9.82,4.25-.81.24-2.36.73,0,3.88,1.22,3.73.49-5.31-5,4-5.62,1.48-1.81-6.45,1.5-7.5.73-2.6-3.1-12.48.58-12.57-5.69.08-1.88,2.85.89,4.32,1.7s1.06-.24,1.47-1.54c0-1.82,6.26,3.15,3.27-.57-.49-1.14,1.55.16,2.77,1.14s1.22-2.53,1.22-2.53,3.84,0,5.39-1c1.06-2-3.38-.17-3.59-2.28-2.66-1.31-4.46,1.33-7.67.4-1.63-1.82-1.48-3.37-5.06-1.13-2-2.75-4.95-.91-6-3.75,4.67-4.68,4.9,4,7.92-.49,2.48-1.44,1.21,4.38,2.94-.57,2.42-1.28,9.57-.76-.25-1.79-2.28-.24-1.22-.89-2.53-2.6-1.29-1.54-4.71-.13-4.49-3-3.26-.94-4.67,5.3-4.08-2.68-.77-2.26,5.15,1.83,3.68-1.8,5.9,1.56-1.24-2.76,5.38-3.09,0,0,.74-.82-.81-1.63s2.28-2.93-.9-1.87a13.13,13.13,0,0,0-1.88.72c-2.65-1.81-2.5,4.94-5.39,4.89-.58-.13,2.25-4.21-.24-3.09-1.74.7-.71-3.2.57-3.17,1.13-2.22-.69-3.6,4.08-1.71,1.88.4.08-.65-.49-1.47-.58-1.31,4.61-.72-.32-1.79-1-.24,1.79-1.87,2-3.25-.19-2.2-4.55,4-4.9.73-.68-.25-3.86,6.49-1.47.4.57-.73.49-1-.24-1.7-1-1.11,2.33-4-1-1.55.29-7.14-3.24-9.77-1.52.83-7.68-10.56,4.83,10.75-3.62,3.65-1-.57,0,1.14-.82.81s-2.78-2.36-2.2-1.06c.38,2.53,1.75,2.39,1.55,4.56,1.37,1.54,1.92,2.21,1,3.91,2.91,6-4.9-2.13-4-.08,1.7,5.58-4.73-3.15-3.76.4,6.52,4.89,1.11,2.55,1.88,5.13,1.39.33,3.75-1.38,2.77-.08-5.41,4.26,4.87,1.49,5.31,4.8-3.17,7.07-6.43-1.25-8.24.49,2.7,5.51-1.11.18-2.53,1.14-1,1.36-6.37-1.85-6.53.41.16.9,3.47,2.27,4.73,2.68,2.29-.08,4.33-.81,2.53.41-3.67,1.52-2.61,3.83.16,1.79,4.52-2.26.92.36.82,1.55,1.21,4,3.87-2.8,5.39-.9-2.52,3,1.33-.17,1.87.73,2.29.75-.6,3.8-1.87,3.18s-2.12-1.3-2.45-.33c-.75,2.66-2.77-2.4-3.67-.73-.45,2.79-3.15-.9-4.66-.33-1.39,3.15-4.28-.26-4.24,1.55.21,4.91,6.65,1.63,8.08,3.58,2.1,4.12.89-1.82,5.79,1.71,5.44-4.25,2.37,4.24-2.61,4-6.92-1.41-6.24-4.79-7.91,0-2-.33-6.86-2-5.31-.16,8.07,1.54,1.89,5.64,5.14,6,5.74-4.17-.18,5.47,9.58,3.09-8,5.44-20,1.79-16.84,4.4,8.61,2.38-.65,4.82,7.26,5-3.32-.15-4.95,2.09-7.18,3.67-2.36.24-5.14.89-2.53,1.71,8-2,5.95,3.07,8.25,1.79,1.36-8.7.35,2.66,1.87-.25.48-4,8.74-2.22,4.57,0-6.47-2.35,3.48,2.76-7.83,3-10-1.17-2.53.55-4.9,2.53-2.53,1.06-6.61,1.3-4.89,2,6-1.26,1.33,5.1,5.22,4.11,2.28-1,4.32-3.94,3.67-1.75-2.7,6.6,2.65-.56,3.51.9,1.38,3,5.62-2.59,5.39-.33-3,2.11-3.27,2.63-6.21,4.15-1.87,1.31,2.29,1.55-.08,2.12-4.32.18-13.63,1.24-15.59,2.12,3.82-.78.8,7.22,3.68,4.56,5.61-6.52.25,2.37,3.26,1,2.29-1.71,2.9.93,5.46.9,6.27,4.73-6.4,2.08-6,3.33.49,1.55,1.63,2.28-.57,2.12s-8.32-2.85-6.94-1.06c5.91,2.37-.24,4.09,2.78,5,7-3,.4,1.75,3.92,2.12,27.56-1.09-23,6-35.81,11,0-.24-.41-.76.59-1.33.61-.25-6.88-.2-4.53-.81-.16-1,3.74.85,1.11-1.6-.15-.2,3.58.9,2.64-.76,2.28-1.51-.68-.27-.87-1.24.06-.42-2.81,1.09-1.48-.57-.12-.61-2.45.88-2.8-.14-.94.05-1.33-.6-1.9-1.27-.07-.57,1.25,1.36,1.15.24.31-.36,1.67.85,1.25-.59,1.08.52,1.83.36.75-.73,0-.29,2.15,2.24,1.34.23,1.95,0,.53-.87,2.16-.87,0-.88-2.77-.29-1.95-1.56.08-.51-4.34,1.28-2.24-.25.14.1-6.33-1.3-3.48-1.25,1.83.88,1.78-.93,3-.17.55-.42,2-.05.38-1.34.12-.4,1.57,1.57,1.25.15a2.17,2.17,0,0,0,1.84.11c1-.41-2.57-.66-.92-1.54a20,20,0,0,0-3.55.25c.29-.92.26-.92-1.38-.45-1.33.12-1.34-2.06-.19-.79.52-1.31,2.44,1.39,2-.86.09-.85,1.78,1.57,1.45-.13,1,0,.73-.77,2.31-1,.43-.74-1.65.18-1.4-.78-.56-.46-1.18.81-1.72.32-1.12-1.07-1.65-.47-3.74-.32-.44-.11-.12-.27.16-.59-.58,0-1.64-2.13-.39-.69.8.27.8-2.56,1.78,0,0,1.11,4.52-3.06.65-1.82.85-2.16-3.37,1.39-3.69-.9.31-.18,3.33.71,2.36-.65,0-.53,1.66,0,1.48-.95,3.28-3-4.26,1.48-3.8-.08,1.16-.08,1.27-.79,2.47-.91.17-.61-.58-1,1-1.44-.48-.55.53-2.66-.84-1-1.07-1.34-1.24,1.32-3.25,2.45-.74.11-.47-4.68.21-2.67,1.69.32-1.78-2.35,1.35-.49.71-.48-1.94-1.51.57-.92.07-.47-.9-.76.39-1.82.17-1-2,2.17-1.27.12-.08-.77-1.34,1.7-1.84,1.58.66-1.63-.3-7.28-.53-2.11-3-2.43.53,1.22-.35,2.67-.34-2.18-.84-1.15-2.18-2.28.56,1.47,1.12,1.82-.32,2.27a2.34,2.34,0,0,1,2.82,2.55c-2.08-3.51-1,.25-.15,1.54-.9-.63-3.24-2.38-4.1-2.52,1.3,1.16-.17,1.23-.09,1.87,1.46.68,1.12,0,.69,1.15,1.3.44,1.7.42,1.73,1.69,1.75-2,3.07,2.15-.55.59-1.8-.86-1.65-.67-1.36.21-1.67-1.54-1.51-.42-2.85.3,2.85.06-1.68,2.16,2.21.88.48,1.52,3-1.22,1.89,1,.35.08,2.31-1.66,2-.28-2.12,2.11-4.36,1.12-6.56,2.09,1.69-.3.4,1.25,1.24,1.33,2-.95,1.21.1,1.75.35.89-1.38,1.16.22,1.75-.29.39-.51,1.28-.8,1-.36s-.2,1.19.27.62c2.78-2.63.4.92-1.91.71-2.91.14-4.12-.15-6.07.89,4.56.06.28,4.29,4.33,1.69-1.61,3.29.61-.45.89.24-.47,1.72,1.83-.34.85.8-2.34,2.34-4.91.93-5.87,2.81.38,1.13,1.94.35,2.38.62-.15.29-.86,1.27-.27.8,3.07-2.28-.33.91,2.54-1,3-.76.22,1.18-2,1.54-2.23-.2-2.1-.86-3.24-.3-.59,1.08,2.8,1.26,2.4,1.57-2.1,1.84.94.15.75.36-1,2.18,1.38-1,1.51-.27.06.42.06.89.55.36,1.57-1.52.38.44,1.32,0-.85,2.15-13.05,1.62-6,4,.68,1.17.83.13,1.73.36-.71,2.35,1.06-.42,1.36,0-.16,1.66,1.27-.9,1.54-.21.07.58,2.31-.31-.14,1.2-2.63.82-5,2.27-7.78,2.06.27.7,1.43.45,1.1,1.45,2,0,.37.45.8,1,2.11-.42.86-.1,1.33.65,1.77-.79,1,.12,1.61.35,1.81-.93.16.74,2.25-.12-.63,2-9.9-.19-6.5,1.66-.33,1.29-.08,1,1,1.09-26.75,9.23-51.68,18.58-72.86,19.51.85-1.1-4.3.92-3.1-.69-1.23.7-4.12-1.24-1.79-.57.76-.79.53-.35,1.87.15.72-.24-.58-2.09,1.19-.62.53.35.36-.07.38-.52,0-.6,1.33.7.87-.58-.11-.4,1.05-.1,1.44-.45.43-.75-1.65.18-1.4-.79-3,1.1-2.06-1.1-3.27-.38-1.83.9-2.71,0-2.94-1.43.82.48.47,1.05,1.49-.46.26-.93,1.26,3.22,1.7.58.17-.63.07-.36.7-.37,2.93-2.58-3.79-.09-4.63-1.9.32-.16,3.33.68,2.36-.66.47.1,3.76-2.7,1.61-1.81-1.68.43-6.25,2.13-2.52.07,1.9-.09.11-1.06,2.06-1.63.07-.58-.76-.71.06-1.61-.21-.7-1.36,1.83-1.18,0-1.27.94-4,5.55-3.26-.13.84.65,1.43.73.39-.67,0-.34,1,.68,1.47.67.71-.49-1.94-1.52.57-.93.45,0-.07-.28-.42-.57.06-.52,1.8-2.48-.31-.55-.4.44-.28-.12-.15-.58-.08-.76-1.34,1.7-1.84,1.58.66-1.62-.3-7.29-.53-2.11-3-2.43.53,1.23-.35,2.67-.34-2.18-.84-1.15-2.18-2.28.56,1.47,1.12,1.83-.32,2.28a2.33,2.33,0,0,1,2.82,2.54c-2.08-3.5-1,.25-.15,1.54-1.18-.54-5.09-4.23-3.53-1.33-1.8.71.28.93.56,1.1-1.72,1.13,1,.8,1.2,1.42-.38,1.39,0,.89.73.29,1.84.43,1.31,2.38-1.28,1.31-1.8-.89-1.65-.67-1.36.21-.42-.07-1.43-1.34-1.66-1s.38.59.06.74c-3.44,1.38,1.81-.47-.89,2,1.44-.7,2.7-.08,4.15-.45-.85,1.38-.22.89.92.24,2.71,1.41-5.26,2.1-5.9,2.49,1,.21,1,.61,1.05.9-21-.93-58.84,14-95.62-4.81,3.41-.31,1.6.27.36-1.45-.23-.3-2.74,1.18-.7-.61-1.37,1.26-10.43-1.86-6.45-1.87.39-.74,2.19,1.35,1.53-.12,3.2.88.45-2.09,3.56.41,1.4.05-2.74-2.68,1.33-.6.73.16.06-.57-.54-1.33.1-.67,1-.48,1.21-.41-.16-.05-.66-.25-1.78-.77-.2-.72-2.67.57-1.3-.95-.56.37-6.08.22-4.8-1.58-.13-.55,5,1.53,3.49-.89,4.6,1.24,1,.42,5.53-1.11.57-.5-1.33-.44-2-.63-.53-1.18-.36-.88-2.57-.73-1.59-.82-6.06-2.58-1.4-1.65,2.22,1.23,1.37-.69,3.91-1.36-1.34-.18-2.7-.58-5.12-1-2.4-1.79.87,0,.83-1.3.44-.51,1.27.25,2.6-.16,1.76-.86-2.54.36-.64-1.33-.22,0-6-.71-2.31-1.05,1,.07.63-.63.57-1.17-1-.69-4.67.46-5.93-1.68-1.08-1.31,2,1.4.82-.51-.19-.63,1.27.8,2.19,1,1.67.33-3-3.23.4-1.19.71.34-.31-.43-.72-.87-.38-.67,4.48,2.1,2.29-.42,5.63-2.41-9.27-.66-6.67-4,1.82,1.05,2.67,2.12,2.16-1.07.19-.22,3.54,3.7,2.13.83,0-.9,3.15,1.36,3.36-1,.59-.45-3.79-1.61-4.13-1,0-.49-7.51-2.41-3.56-2.38.65,0,1.88,2.57,2,0,.25-1.28,2.72,3.86,1.66-.31.09-.92.28,0,1.51.47,1.15.14-1.54-2.2,1.57-2.18-.89-.41-7.61.92-7.82-1.94,0-.73,1.11.35,1.69.67.89.09.29-1.4,1.93-.31.55,0-.86-1.39,1-.07.83-.85.58-1,2.57-1.36-.62-1.21-2.81-.79-4.38-.73-.48-.53-.93-1.32-2-.45-.63-.89-1.94-.42-2.32-1.45,1.13-1.64,2,1.25,3.08-.19,1-.58.48,1.71,1.14-.23.95-.46,3.73-.32-.09-.69-.77-.87-2.3-1.2-2.73-2.19-1.22-.06-1.81,1.48-1.59-1-.3-.9,2,.72,1.43-.7,1.95.68-.1-1.23,2.1-1.2,0,0,.28-.32-.32-.64s.89-1.14-.35-.73a4.1,4.1,0,0,0-.73.29c-1-.71-1,1.92-2.1,1.9.84-1.22-1.38-1.44.13-2.44.44-.86-.27-1.4,1.59-.67.73.16,0-.25-.19-.57-.23-.51,1.79-.28-.13-.69.21-.64,1.68-2.3-.64-.67-1-.66-1.73,1.92-1.05-.16.08-1.34-1.77-7.08-1.06-.94-2.25-2.83.21.82-.33,2-.58.27-1.06-1.16-1.4-.26-2.24-1.56.93,2.12.13,2.89,1.13,2.34-1.91-.83-1.56,0,.67,2.17-1.84-1.23-1.46.15,2,1.45.66,1.17.73,2,.54.13,1.46-.54,1.08,0-2.11,1.66,1.89.58,2.06,1.87-.67,2.39-2.69-.26-3.2.19,1.6,2.31-2.88-.74-3.53.6-.09,1,3.74.84,2.83,1.2-1.43.6-1,1.5.06.7,1.76-.88.36.14.32.6.47,1.55,1.5-1.08,2.1-.35-1,1.18.51-.06.73.29,1.14,1.91-2.57.94-3.12.82-.17,1.09-1.22-.34-1.81-.12-.31.93-1.64.09-1.65.6.08,1.91,2.59.63,3.15,1.39.62,1.25,1-.44,2.25.67,2.11-1.66.93,1.65-1,1.55-2.59-.63-2.53-1.63-3.08,0-.76-.13-2.67-.79-2.06-.06,2.44.27,1.11,2.16,2,2.34,1.8-1.38.71,2.21,3.73,1.21-1.46,1.46-7.18,1-6.56,1.71,2.1.14,1,1.88,2,2,2.67-.71-1.63.72-1.94,1.43-3.76.9,1.51.35,1.49.69.13.7.64,1.27.74.67.54-3.46.13,1,.73-.1.2-1.53,3.39-.88,1.78,0-2.39-.89.24.61-.83.61-.31.95-4.95.07-4.38.69,2.33,1.14-2.71,1.16-1.65,1.65,3.26.22-.63,3,3.46.92-1.08,2.54,1.05-.2,1.36.35.56,1.2,2.18-1,2.1-.13-2.1,1.1-2.33,3-4.38,2.57,0-.27-4.82.8-4.13.69,1.47-.31.32,2.83,1.43,1.78.44-.7,1.27-1.27,1.11-.6-1.63,1.86,5,.4,2.22,2.52-2.83-.17-1.54,0-2.47.93-4.29-1.12-1.85-.53-1.63,1.55,2.69-1.23.19.72,1.53.83,2.24-1.16.66.77,1.75.47,1-.62,1.85-.51,2-.06-5,4-42.22-16.12-30.53-10.29,2.07.75-.14-1.38-1.17-2.75-1-1.56,8.79,5.06,2.89-1.45-1.3-1.65,1.8-.41,3.17-.75.57.27-5.69-2.87-7.16-2.07-1.93.07-.07-1.78-.07-1.78-1.36-.17-2,2-4.89-.07-1.68-.74-5.92.58-6.2-2.54,1.6-1-.85-2.32,3.3-.46s1.23-.57,4.69,0c1.38.2,1-1.24.28-2.27-1.68-1.76,10.34,4.45,6.13.07-.49-1.1,4.61-1.38,5.85-2.48,1.64-1.83-7,0-4.68-3-3,.19-10-1.14-13-4.2-1-.95,2.68.76,2.68.76,1.56.19,3.17-.56,5.17,1.31,1.7-2.42.45-2.65,5.38-4.4.82-1.24-2.14.28-4-.14-2.17-2.53-2.23-1-7.1-2.13-5.19-3.87,1.86-.09,1.79-2.81.3-.13,11.48-.73,3.79-1.13.93-5.55-2.8.14-7-3.62-1.12-1.56,5.88.39,3.66-3.29-2.16-1.51-10.11,1-12.87-3.65-2.34-2.85,4.35,3,1.77-1.09-.41-1.38,2.76,1.71,4.76,2.13,3.58.7-6.52-7,.86-2.57,1.56.74-.66-.94-1.55-1.9s4.13,1.37,5.65,1.44c1.57-1.76-3.55-2.15,2.62-4.19-.09-2-9.07.42-8.06-2.68-1.38-.06-9.65,1.25-10.89-3,.69-2.19,2.38-.17,5.65,1.38,1.65.14.28-1.17-.07-2.13s1.38,0,.9-1.3c-2.47-4.31,2.54,2,4.13,2.54,1.58.2.48-1-.14-2.2,0-2,6.87,3,7.3-2.2,1-1.86-1.37-.62-3.37-1.24-2.45-1.49-2.53-2.44-5.58-1-1-3-10.28-.89-9.78-5.36,2.53-2.5,5.85,7,6.33.21.47-2.84,5.93,8.38,3.59-.69.2-2,.62,0,3.27,1,2.78.18-4-4.39,3.41-4.74,1.19-1.62-5.41,1.33-6.34.62-3.08-1.33-3.1-2.18-7.92-1.51-4.7-1.52-2.82-5.9,1-1.86,1.24.69.9-.2,1.24-1.3,0-1.57,5.29,2.68,2.76-.49,6.58,2-.75-.72,7.92-2,.9-1.64-2.85-.14-3-1.92-2.24-1.09-3.77,1.11-6.48.34-1.11-1.21-1.66-2.94-4.27-1-1.32-1.95-4.28-1-5-3.16.92-1.14,3.46-2.19,4.55.48.9,1,.9.27,2.14-.89,2.06-1.28,1,3.73,2.48-.49,2.12-.95,8-.73-.21-1.51-1.93-.2-1-.75-2.14-2.2s-3.94,0-3.78-2.54c-2.76-.61-3.95,4.19-3.45-2.26-.68-2,4.37,1.59,3.1-1.52,4.67,1.37-.69-2.47,4.55-2.61,0,0,.62-.69-.69-1.37s1.93-2.48-.76-1.58a10.66,10.66,0,0,0-1.59.61c-2.23-1.53-2.11,4.17-4.54,4.13,2.16-6.84-3.13,2.32.48-7-.93-2.06,6.48,2.43,2.83-1-.49-.69.41-.48,1.37-.76-.74-1.37-2.94.17.07-3.5-.16-1.86-3.84,3.37-4.13.62-.48-.83-1.31,2.61-1.79,2.54.28-1.56.25-3.85.82-5.57.28-.75-.61.14-1.3.62-1.1.89,1.08-6.11-1.31-5.29-1.26.21.22,5.78,0,6-6.62-9,4.14,9.15-3.06,3.08-.83-.48,0,1-.69.69s-2.35-2-1.86-.9c.41,2.93,3.23,4.6,2.13,7.15,2.45,5.08-4.14-1.8-3.37-.07,1.44,4.72-4-2.65-3.17.34,5.22,3.89,1.12,2.22,1.58,4.33,1.17.28,3.17-1.16,2.34-.06-4.56,3.6,4.11,1.26,4.48,4.05-2.67,6-5.42-1.06-7,.41,3.57,4.89-6.24-1.56-7.64,1.31.13.76,2.93,1.92,4,2.27,1.93-.07,3.65-.69,2.14.34-3.1,1.28-2.2,3.24.14,1.51,3.81-1.91.77.3.69,1.31,1,3.36,3.26-2.36,4.54-.76-2.12,2.56,1.13-.14,1.59.62,1.92.63-.51,3.21-1.59,2.68s-1.79-1.1-2.06-.28c-.64,2.25-2.34-2-3.1-.62-.38,2.36-2.66-.75-3.93-.27-1.18,2.65-3.62-.23-3.58,1.3.17,4.15,5.61,1.38,6.82,3,1.69,3.36,1-1.47,4.89,1.44,4.58-3.59,2,3.58-2.21,3.37-5.84-1.19-5.27-4-6.68,0-1.65-.28-5.79-1.72-4.48-.14,6.4,1.1,1.84,4.72,4.34,5.09,4.84-3.52-.15,4.61,8.09,2.61-6,4.33-16.83,1.66-14.22,3.71,6.91,1.85-.18,4.23,6.13,4.26-2.81-.13-4.18,1.76-6.06,3.09-2,.21-4.34.76-2.14,1.44,6.49-1.69,5.08,2.45,7,1.52.21-1.31.42-3.58.83-2.34.16,5.93.91-.85,2.89.21,2.34.12,4.16.28,1.73,1.92-4.66-1.72.25,1.25-1.8,1.3-.65,2.11-10.75.14-9.5,1.52.75,1.16,2.68,1,.55,1.85-7.23,2.32-2.83.57-1.1,2.82-.14,1.79-.56,3.23,1.37,2.37,6.2-4.84.61,1.08,3.31.72,2.32-2.39,2.7-.92,4.41-.72,4.88-2.79,1.89-.09-.41,1.41-4.9,2.52-.29,1.67-2,2.89-3.64.15-11.5,1-13.16,1.78,3.22-.65.68,6.1,3.1,3.85,1-1.51,2.76-2.75,2.41-1.31s-1.38,2.82.35,2.13c2-1.36,3.27,1.14,5.69,1,1.64,4.94-6.23.88-6.11,2.62.42,1.3,1.38,1.92-.48,1.78s-7-2.4-5.86-.89c5,2-.2,3.45,2.35,4.26,1.86-.21,3.23-1.65,3-.55-2.72,4.76,3.42.38,3.38,2-1.41,4,3.39-1.05,3.78.55,2.66,5.1-19.84,3.31-25.45,3.71,9.09-2.13-10.3-2.08-6.59-3.89,1.71-1.7,10.32-3.2,8.12-4.4s-7.82,2.7-9.32,2,5.31-3.4,3.21-4.1-1.71-2.2-5.51.8c-21.78,10.18-.32-7.41-17.19,2.73-2.05,0-2.24-.8-5-1.67s1-1.44.18-3.12.11-1.27,1.62-2.66-4.17-1-7.42-3.52-.41-1.51.68-.52.83.52,1.12-1c8.81,5,1.57-4.6,10.14,2.32,3.59.82-3.06-8.35,5.85-2.31,1.89-3.31,3.89-5.63,11.13-3.41,5.35-.94-2.39-6.11,10.42-4.4,3.71-2.78-9.4-.49-5-5.09-.71-2-16,3-11.13-1.61-1.36-1.27-25.06-2-25.79-8.1-.53-1.12,3,.81,3.85-.46.36-.77,5.62,2.86,4.9-.64.23-1.21,6.2,1.74,6.2,1.74,3.16-1.25,3.42-1.28,8.87,1,5.25.75-3.68-8.85,2.61-5.26,0,0,.81-.41.35-1.56-1.93-1,18.06,4.39,11.88-2.66-.29-1.68,1.62-2.31,2.89-3.64s-1.33-1.51-3.53-.52c-4.34,1.79-2.21-2.25-7.77-.23-2.66.4-1-1.22.41-1.91.43-1.43-16.37-2.39-16.63-5.61-.7-1.5,2-.69,3.76-.17,2.81-.54,1.13-2.16,6.9.29,3,.52.87-1.33-.52-2.89-.44-1.1,8.71-2.05,10.14-6.08,1.22-1.9-4.64.35-4.64.35-3.66-2.51-4.56-1.28-10.43-.34-2.14-.76,1.1-.87,2.2-2,2-1-21.76-4.5-12.28-4.05,3.9.73.49-5.3,6.37-.63,3.82,2-1.13-5.12,6.2-.52,3.38-.55-3.9-4.27,5.34-7.17,1.76-4.06-8.78,3.07-6.73-2,.56-1.91-19,3.29-9.73-3.53,1.56-2.2,1.91-.12,3.88-.12-1.24-6.61,10.81-8.7-6.26-5.14-2-.23,1.68-1.21,2.55-2.54,1.54-.8-24.09.5-13-2-.81-4.56,2.05.23,4.69-1,1.86-.86,2,.29,3.77-.06s-2.49-4.68-3.65-5.83c-1.88-.8,9.43,1.68,10.6.23,3.32-1.07-1.89-3.84,4.53-6.42.63-1.85-6.32-.75-6.32-.75-1.91-2.64-2.21-2-7.57-.64-2.88.29-.89-1.9,0-3.52-.52-2.58-10.57,3.77-12.08-.58-4.48,1.24-12.37-10.21-4.35-3.12,2.26-.45-.32-2.66,5.74-.58,2.73-.06-.52-3.18.75-3.3s4.87,2.84,5.68,1c-3.68-7.77-1.67-2.2,3.66.17,1-2.17-2-5.89,4.34-3.41,2.39-1.56-2.18-4.29,4.7-3.7.75-1.5-6.55-3.47-8.44-3.53.42-7.83-4.63-1-11.44-1.56-2.84-.34.64-1,1.79-2.71s-9.09-.12-12.51-1.56c-5.39-1.86-8.15-7-2.55-3.82,3.15,1.51,2-1.63,5.44,1.21,2.82,2.67,3.12-6.92,7.6-2,1.16,1.21,1.44.11,1.21-1.56,6,1,4.33-.35.47-4.22,10,6.78,1.94-3.84,8.46,2.37,1.59.95,1.28-2.53,4.87-1.27,4.3-1.77-11.09-2.78-4-6.65.4-1.45-5,1.39-6.61,1.1.05-4.17-6,.72-8.69,0,4.85-9.95-11,4.88-10.43-6.83,1.6-1.84,4.55,4.51,5.56-.75.55-1.8,10,8.27,6.66-1.5.39-3.72,7.69,6.82,6.26-.58.06-2,.87-.34,2.67.06,3.77-2-2.27-3.25,7.3-4.51,1.89-3.22-7.09.76-6-3.41-2.42-1.92-5.11,3.47-7.42,1.39-.56-2.25-6,1-3.42-3.35.74-2.81-18,6.86-12-.58.23-2-6.56-.61-4-5.26.53-2.87,3.56,7.74,4,.23,0-2.16,2.16,2.27,2.48-2.2,1.06-4.27,5.49,14.06,7.36,2.49.82-3.75,6.82.29,5.62-6.25.18-2.31-4.28,1.1-6.66.29-1.14-2.58,3.12-5.73-5.74-1.21-6.3,3.86-15.32-6.2-7-2,1.57.75,1.45.86,2.09-.23.22-1.27,9.51,1.59,4.92-3.24-.4-1.85,2.79-.58,5.22-1.56,1.17-2.73,3.31-3.58,4.87-6.71-.85-3.49-21.42,10-20.11,3.82.6-2.08,7.45,1.28,6.08-3.07.73-1.81,8.67.9,3.77-3.52,12.2-9-.75-1,5.39-10.47-.92-3.15-5.83,8-5.1,0-1.11-3.07-4.78,10.25-5.39,4.11-.52-2.08-1,1.73-1.74,3.7-11.9,18.14-7.17-15.94-4.75-6.3,4.12,2.68.81-3.74-.53-5,.18-1.45,4.41,2.94,6.38,2.89,3-2.13-8.4-6.53,2.44-4,2-.23-.29-1.22-1.8-2.49.35-1.93,7.72-10.9-1.34-2.37-1.73,1.91-1.21-.52-.63-2.48-.4-3.41-5.79,7.4-8,6.83-.13-1.87.11-4.1,2.24-5,.12-2.44-2.76,0,.76-4.68-.61-1.56-3.5,2.9-2.72-1.32-.65-13.59-1.94-6-2.56,1.92-.64,1.41-5-5.11-5.38-4.22.57,4.21,5.8,10.82,3.89,15.72-1.28-1.83-1.45-12.15-4.06-5.88-1,.9-4.83-5.24-5.34-4s4.48,7.67,3.33,8.18c-12.4,3.1,9.86-1.69,7.43,12.66-5.39-8.9-5.57-10.09-4.85.89,3.49.18,3.89,4.17,4.21,5.76-3.91-2.71-14-10.28-17.69-10.87,6.54,6.71-1.3,4.61-.38,8.05,1.79,1.28,5.38,1.41,5.25,1.79-7.46,5,4.26,3.43,5.16,6.14-1.63,6.09.11,3.81,3.17,1.28,1.8,0,.26,3.32,1.67,2.3,3.12-4.77,5.48,3.2,1.16,4.43-4.42,4.37-19.83-11.15-14.23-.2C80.33,241,76,235.53,75,236.8c2.37,5-4.72,3-5.13,5.76.9,1.27,4.62-.13,5.39.76-6.72,9-3.11,3.84,4.16,3.07,1.73,5.74,6.62-1.28,9.94.51-3.67,6-1,3.78,4,1,9.44-.26-4.09,9.72-13.84,6.25,7.66,5.07-12.86,2.4-11.67,4.48,8.2-1,1.23,5.47,5.39,5.76,11.2-4.79,4.61,1.2,7.56,1.53,3.83-6,5,.95,7.56-1.28,1.67-2.17,5.51-3.45,4.36-1.53s-.9,5.11,1.15,2.68c12-11.39,1.71,4-8.26,3.07-10.46.71-7.61-2.95-13.27,1.41-3.21.38-6.92-2.56-6.67-.51s-8.07,1.4-6.28,2.94c7.12,2,11.27,1.93,10.4,8.69,1.46,9.19,6.79-5.3,8.32-1.41-6.92,14,2.89-2,3.84,1-2,7.45,7.92-1.44,3.67,3.46-16.07,15-15.16-1.37-20.59,9.33-7.54,1.39-4.49,2.71-2.3,5.88,1.41.38,8.46-1.66,7.81-.38s-3.71,5.49-1.15,3.45,7.43-5.5,6.67-4-3.08,5-.9,3.2,5-4.73,5.19-3.32c14.22-4.07.2,5.49-8.52,6.65-9.59-.88-9-3.74-14-1.28-2.55,4.62,12.08,5.41,10.38,6.77s-4.62,3.71-2.18,3.84,6-4,5.38-2.3-2,4.85,0,3.06c8.19-9.16,5-.08,8.91-2.68,6.78-6.55,1.64,1.92,5.7-.13,1.54-1.15-4.35,5.88-9.61,6.14-13.69-.74-18,1.41-26.79,5.62,2.86,5.2,12,3.95,12.18,8.31,9.88-3.77,3.47,0,5.89,2.82,9-7.89,3.64-2.83,7.18-2.05,1.28-1.92,5.51-4.48,5.39-3.07-.87,5.13,4.38-2.75,4.48.26-1.67,7.63-16.84,4.52-17.94,10.61-1.68,5.41-31.76-.64-16.41,5.9,2.57.62-1.41,3.05.39,3.56s5.89-.13,4.87,1.15c-7.27,6.17,5.95.71,5,2.43-5.71,7.25,5.6.17,5.64,2.42-.26,1.67-1.54,3.58.64,2.56,8.26-5,2,1.76,5.25.9,11.87-5.08-3.79,3.71-9.36,3.57-4.51.59-26.08-4.3-15.68.77-9.79,1.37-10.59-1.12-17.78-3.75,12,2.66,4-8.64,11.12-3.59,4-.17-3.78-5,6-7,1.8-2.18-3.89-.19-6.17.19-1.94-5.69-1.16-1.56-9.19,0-5.78.28-9.35-9.56-3-4.64,6.14-4.23,4.08,3,6.74-2,1.66-2.26,9.16,1.54,9.38-4.16.21-2.18-3.2,1.93-4.93-1.8-1.74-.65-4.89,3.62-5.4.38-1-1.94-3.4,3.94-4.27.85-.38-1.13-1.42-.38-2.84.38s-4.83-2.84-2.18-3.69c.62-1,5.1,2.67,2.18-.85,1.76-2.21,4.84,5.67,6.25,1-.11-1.39-4.29-4.41,1-1.8,3.22,2.38,4.45-.31.19-2.08-2.08-1.42.29-.57,2.94-.47,1.51-.48,5.28-2.08,5.5-3.12-.19-2.63-6.37,1.11-7.58-.47-1.66-1.11-6.08,5.07-2.94-1.33-2.17-2.22-5.59,7.89-9.58-.57.51-3.84,12.45-.62,6.16-5.58-1.13-1.51,1.61.48,3.23.1.88-3-5.37-.32,2.18-6,1.13-4.13-6.35,6-4.36-.47,1.05-2.42-8,7.1-4.65.09-1.08-1.93-.47-2.78,1.14-4.54-.25-2.53,1.36-2.36,1.8-5.29.66-1.52-1.61.85-2.56,1.23s.19-1.61-.95-.95C14.5,313,29.29,288,20.2,300.44c2-12.17-2.09-9.37-1.76-1-3.86-2.9,0,.51-1.14,1.8-2.09,1.19,1.87,4.05.47,5-2.48-3.23-.55-3.86-3.88-2.55-6.89-4.85-2.58,0-1.9,2-5.74,1.25.3.56-.38,2.08-5,4.67,5.16-1.51,3.89,1.33-.48,1.79-.67,1.7.28,2.36,1.49,0,2.69,4.48.67,3.69-2.9-1.31.39,3.46-.29,3.59-3.76-.17-2.79-7.67-6.24-5.67a12.85,12.85,0,0,0-2.2-.85c-3.69-1.23.76,1.23-1,2.17s-.95,1.89-.95,1.89c7.71.39-.61,5.4,6.26,3.6-1.69,4.18,5.13-.48,4.27,2.09-1.72,2.18,2.3,4.88-.29,4.62-2.08-.47-4.07-2.84-4.45-1.51.26,3.31-3.73,1.78-5.22,3.5-1.52,2-.28,2.74-2.94,3-1.15.5-5-.64-4.57,1.45,2.18.11,4.13-.95,4.29.63,2,5.72.51-1,3.41.67,3.81,4.69,3.24-3.51,8.06-.38,2.62-.48-.2,3.36-.47,3.31-1.14-1.89-4.73,1.76-5.31,2,0,0-4.65-2.46-4.84-.85-.79,5.73-6.83-2-5.14,7.47,5.13-3-1.14,2.21,1.63,1.15,1.8-.3,3.61-2.38,4.08-.86-.13,6,6.24-3.55,6.73-.19-1.91,10.68-16-3.21-12.44,14.18,4.74-8.39,2.45,3.45,5.14.76,3.41-2.49,3.85-4.82,6.83-3.41-1.15,8.63-15.62-.36-12,13,1.87-2.49,4.11-3,1.73,0-.67,1.8,1.7.47,1.23,1.8s-2.37,3.12-.09,2.93,6.63-5.08,6.16-3.54c4.76,2-4.82,8.07-9,6.38v10.34c1.39,14.9.22,65.51-.21,109.79H-1.8v51.47H750.8V500H751c-.08-42.34-.24-88.72,0-114.4-7.23-4.8-2-1.8-3.13-4.68-.93-1.42,1.9-.2,3.13,1.34C752.39,378.09,749.1,372.74,746.51,371.43Zm-25.77-42.08c3,4-3.13.94-4.26,1.37C716.49,328.44,718.56,329.52,720.74,329.35Zm-21.17,6.14c6.19-4.31,12.1,7.62,8.59-2.75-2.34-5.09,9.22,8.36,8.55,1,1,1.88,3.59-.7,3.63,1.92,1.37,8.16,4.44-4.68,5.25-1.77.26,3.11,1.71.13,1.77,1.57.13.9.34,2.72,1.2,1.48,2.05-4.17,3.39.55-1.2,2.1,4.25,5.23-9.14-1.49-8.59.41,1.81,3.07-2,.81-2.44,2.39-1.65,1.52-3.56-2.39-5.28-1-.38,1.15.24,1.64-1.16,1.44-5.25-.44-2.95,1.64-.09,1.78a24.39,24.39,0,0,1-5.74-.59c-3.72-.89,2.82-1.27-.13-3.32C699.89,338.74,687.2,328.3,699.57,335.49Zm15.73,39.3c-1.15,5.3,2.89.45,3.84,1.81-.29,3.43,3.77-2.49,3.56-.74-3.18,9-24.53,1.9-15.7-.44,1.33-1.13,3.31.59,5.64,1.53C716.36,378.89,712.69,374.74,715.3,374.79Zm2.12-10.42c5.46-8.08-13.67,3.44-10.37-7.11,3.39,2.24,2.32-.92,4.45-.31-1,4.37,3.5-1.7,3.84-.46-2.79,2.79-3.89,3.7.33,3-.62,3.74,3.31-2.05,4.34,1.2.67,3.61,3.51-.18,5.83.45C732.58,359.34,721.05,366.32,717.42,364.37Zm2.18-11.05c-1.57.36-2.21-4.65.28-2.46C717.26,350.71,720.81,353.34,719.6,353.32Zm7.43-4.86c-.06.92-.34,2.84-1.79,3.37C724.53,350.33,725.68,347.14,727,348.46ZM610.62,419.89a7.46,7.46,0,0,0,2.32-.33C614.39,421.49,611.58,420.37,610.62,419.89Zm2.46,8.19-.77,0C612.55,427.93,613.08,427.46,613.08,428.08Zm-1-9.54a10.12,10.12,0,0,0-1.3.09C609.07,418,611,416.52,612,418.54Zm-8.32,2.57c3.55,1.23,1-1.07,3.4-1.59C607.1,424.35,598.39,420.93,603.72,421.11Zm-1.25,7.56-.89.07C601.11,428.26,601.68,428.38,602.47,428.67Zm-90.39,16.81a14.34,14.34,0,0,0-1.43.65C511,445.76,511.47,445.18,512.08,445.48ZM70.46,395.58c-5.69,9.41-20,3-28.7,3.67-2.75-.66,2.09-.95-.09-2.46-5.38-1,1.69-2.65,2.84-2.46,1.27,1.1-.72,5.48,1.86,3.29,1.26-1.37,10.69-2.17,11-1.79C53.67,404.06,69.74,393.25,70.46,395.58ZM57.38,426.65c7.23-2.87,18.86-6.19,3.86.76a3.82,3.82,0,0,1-1.37.36C60.31,426.31,59.4,426.21,57.38,426.65ZM47.12,408.79c-1,1.52-2,2.45.27,2,3.82-1.3,5.23-1.94,4.47,1.47C48.34,414.87,38.43,410.79,47.12,408.79Zm-1.91,17.13c1.58-1,2.58-2.24,3.95-1.54C49.68,427.89,47.41,426.9,45.21,425.92Zm-3.07-2.08c-.84-1.51.78-.2,1.55-.67C44.27,424.94,42.87,425.28,42.14,423.84Zm11,3.59a10.78,10.78,0,0,1-2.59,0C54.55,422.47,58.08,427.13,53.14,427.43ZM53,415.52c-5.4-.15,4.77-6.37,4.61-3.45C58.33,415.07,54.75,415.19,53,415.52Zm-19.15-38.4c2.49,1,4.65-1.75,6.07,2.65,1.75,3.32.57-9.6,2.18.28.29,1.8,1.8.1,2.21-2C44.3,377,60,378.74,48.78,376c-2.57-1.78-4.5-4.48-8.35-4.25-1.29-2.57,5.78,3.32,3.92-3.21-.07-2.65,1.74-.73,4.25-2.46.93,2.11-2.7,3.83-.69,4.21,10.53-.67,0,3.38,4,4.47,2.31-.51,5.64-2.68,5.26-1.15-5.3,7.15,8.25-1.7,6.92,1.22-.77,1.46-2.57,3.25-.52,2.49,16-5.85-4.64,5.38-10.63,5-4-.13-8.34-2.81-7.82-.89,2.77,4.17-12.48.83-7.59-1.71.37-1.9-1.24.09-2.85.09S32.75,377,33.89,377.12Zm4.9,16.27c-.21.32-.41.64-.58.95C33.1,392.21,33.48,390,38.79,393.39Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#1d1d3a&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Scene 3 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;scene3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;visibility: hidden;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;bg2&quot;</span> <span class="attr">y</span>=<span class="string">&quot;-59.8&quot;</span> <span class="attr">width</span>=<span class="string">&quot;750&quot;</span> <span class="attr">height</span>=<span class="string">&quot;612.4&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(750 492.8) rotate(180)&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#bg2-grad)&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;fstar&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">width</span>=<span class="string">&quot;707&quot;</span> <span class="attr">height</span>=<span class="string">&quot;429&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(728.46 16.5) scale(0.24)&quot;</span> <span class="attr">xlink:href</span>=<span class="string">&quot;https://i.ibb.co/TWfhqRG/fstar.png&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;768.6&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;78.72&quot;</span> <span class="attr">r</span>=<span class="string">&quot;39.39&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(64.22 396.2) rotate(-30.11)&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#fstar-grad)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;mix-blend-mode: overlay&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;stars&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">style</span>=<span class="string">&quot;opacity: 0;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M699.71,128.24a1,1,0,1,1-1-1A1,1,0,0,1,699.71,128.24Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M643.78,37.74a1,1,0,1,1-1-1A1,1,0,0,1,643.78,37.74Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M666.33,139.16a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,666.33,139.16Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;636.11&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;77.24&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M714.4,31.27a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,714.4,31.27Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M725,27.36a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,725,27.36Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M468.41,65.4A1.46,1.46,0,1,1,467,63.94,1.46,1.46,0,0,1,468.41,65.4Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M710,97.11a1.46,1.46,0,1,1-1.46-1.46A1.45,1.45,0,0,1,710,97.11Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;711.49&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;170.22&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M677.73,260.6a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,677.73,260.6Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M731.11,208.78a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,731.11,208.78Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M447.4,234.79a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,447.4,234.79Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M523.16,200.18a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,523.16,200.18Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M624.94,167.77a1.46,1.46,0,1,1-1.45-1.45A1.45,1.45,0,0,1,624.94,167.77Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M562.88,139.31a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,562.88,139.31Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M372,86.87a1.46,1.46,0,1,1-1.45-1.45A1.45,1.45,0,0,1,372,86.87Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;473.23&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;34.67&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M398.74,28.36a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,398.74,28.36Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M448.85,192.73a1.46,1.46,0,1,1-1.45-1.46A1.46,1.46,0,0,1,448.85,192.73Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;616.73&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;121.26&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;559.97&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;25.73&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;679.95&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;161.38&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;558.51&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;229.54&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M692.7,250.2a1.46,1.46,0,1,1-1.45-1.46A1.46,1.46,0,0,1,692.7,250.2Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;616.73&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;201.91&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;544.82&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;223.87&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M450.53,73.81a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,450.53,73.81Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M445.94,201.63a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,445.94,201.63Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M186.43,237.31a1,1,0,1,1-1-1A1,1,0,0,1,186.43,237.31Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M291.32,199.17a1,1,0,1,1-1-1A1,1,0,0,1,291.32,199.17Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M153.05,248.24a1.46,1.46,0,1,1-1.46-1.46A1.45,1.45,0,0,1,153.05,248.24Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M114,221.87a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,114,221.87Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M154.88,151.93a1.46,1.46,0,1,1-1.45-1.45A1.45,1.45,0,0,1,154.88,151.93Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M199.67,279.29a1.46,1.46,0,1,1-1.46-1.46A1.47,1.47,0,0,1,199.67,279.29Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M54.91,249.69a1.46,1.46,0,1,1-1.45-1.45A1.45,1.45,0,0,1,54.91,249.69Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;166.68&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;270.45&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M166.68,191.27a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,166.68,191.27Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M185.88,123.67a1.46,1.46,0,1,1-1.45-1.45A1.45,1.45,0,0,1,185.88,123.67Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;671.95&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;113.82&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M631.32,65.4a1.46,1.46,0,1,1-1.46-1.46A1.47,1.47,0,0,1,631.32,65.4Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M30,149a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,30,149Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;104.05&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;109.88&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M108.42,183a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,108.42,183Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M76.88,174.14a1.46,1.46,0,1,1-1.45-1.45A1.45,1.45,0,0,1,76.88,174.14Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M76.88,78.7a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,76.88,78.7Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M239,207.33a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,239,207.33Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M598,191.27a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,598,191.27Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M509.84,86.87a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,509.84,86.87Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M285.57,238.38a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,285.57,238.38Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;252.58&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;229.54&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M222.07,80.16a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,222.07,80.16Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M251.13,29.82a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,251.13,29.82Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M190.54,71.32a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,190.54,71.32Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;351.16&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;104.5&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M294.24,80.16a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,294.24,80.16Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M367.7,126.71a1.46,1.46,0,1,1-1.46-1.45A1.46,1.46,0,0,1,367.7,126.71Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M358.52,77.06a1.46,1.46,0,1,1-1.46-1.46A1.47,1.47,0,0,1,358.52,77.06Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M49,126.59a1.46,1.46,0,1,1-1.45-1.46A1.45,1.45,0,0,1,49,126.59Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M22.81,37.74a1.46,1.46,0,1,1-1.46-1.46A1.46,1.46,0,0,1,22.81,37.74Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M150.15,74.81a1,1,0,1,1-1-1A1,1,0,0,1,150.15,74.81Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M89.47,27.36a1,1,0,1,1-1-1A1,1,0,0,1,89.47,27.36Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;32.33&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;82.62&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M100.29,143.93a1,1,0,0,1-2,0,1,1,0,0,1,2,0Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;48.8&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;202.91&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M225.77,129.05a1,1,0,1,1-1-1A1,1,0,0,1,225.77,129.05Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M283.66,83.62a1,1,0,1,1-1-1A1,1,0,0,1,283.66,83.62Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;474.23&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;222.87&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;663.41&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;189.82&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M599.68,251.66a1,1,0,1,1-1-1A1,1,0,0,1,599.68,251.66Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;349.25&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;41.39&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;557.51&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;100.02&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M551.87,115.27a1,1,0,1,1-1-1A1,1,0,0,1,551.87,115.27Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M160.47,43.68A1.46,1.46,0,1,1,159,42.22,1.45,1.45,0,0,1,160.47,43.68Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;122.39&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;60.39&quot;</span> <span class="attr">r</span>=<span class="string">&quot;1.46&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;hills3&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;info2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#231f20&quot;</span> <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;10&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;0.5&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">id</span>=<span class="string">&quot;arrow2&quot;</span> <span class="attr">points</span>=<span class="string">&quot;395.54 482.2 393.42 484.32 375.21 466.11 357 484.32 354.88 482.2 375.21 461.87 395.54 482.2&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;text2&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M271.83,526.25c8.43,7,22.44-4.5,8.12-9.81-17.84-5.29-3.76-24,9-16.3l-1.15,3.4c-8.64-5.65-19.35,5-5.78,9.51,18.51,6.4,2.17,25.56-11.29,16.69Zm40.77,4.2c-23.79,9.74-23.83-30.49.1-21.56l-1,3.25c-17.45-7.49-16.83,23,.14,15.16Zm4.92-15.06c0-2.72,0-5.06-.19-7.21H321l.15,4.54h.19c1.18-3.51,4.33-5.65,7.6-4.93v4c-10.05-1.87-6.74,14-7.27,19.55h-4.16Zm36.09,4.16c.06,16.67-23,15.92-22.61.39C330.42,503.76,354.25,503.82,353.61,519.55Zm-18.35.24c-.33,11.61,14.38,11.67,14.05-.09C349.93,508.2,334.68,508,335.26,519.79Zm23.66-22.42h4.2v33.94h-4.2Zm11.28,0h4.2v33.94h-4.2Zm21.55,2.15c10.47-4.16,28.78,5.43,13.68,14.44v.1c16.82,8.34-.17,21.3-13.68,17.16Zm4.16,13.2c14.51,2.35,13.77-13.75,0-10.38Zm0,15.44c15.35,3,15.91-14.63,0-12.29Zm34.42,3.15L430,528.4h-.15c-14.13,12.87-22.31-13.84-.24-11.81,1.43-5.45-7.12-7.5-11.28-4.11l-.95-2.78c19.12-8.74,16,9.8,16.77,21.61Zm-.62-11.8c-7.46-1.94-14.57,7.36-5.83,9.22C429.55,528.62,430.05,523.62,429.71,519.51Zm27.34,10.94c-23.79,9.74-23.83-30.49.1-21.56l-1,3.25c-17.45-7.49-16.83,23,.14,15.16Zm9.08-11.66h.1c1.28-1.88,7.29-8.74,8.84-10.61h5.07l-8.94,9.51,10.18,13.62h-5.11l-8-11.09-2.15,2.39v8.7H462V497.37h4.16Z&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">id</span>=<span class="string">&quot;h3-5&quot;</span> <span class="attr">points</span>=<span class="string">&quot;756.31 330.55 750.57 327.01 742.42 331.08 719.12 317.36 705.87 311.91 695.11 307.32 688.01 314.24 675.69 336.9 665.32 346.76 657.77 353.08 641.17 353.46 633.52 362.58 626.63 373.11 618.53 378.94 596.8 411.28 588.95 404.93 578.86 406.48 539.9 443.36 472 493.8 556 490.91 756.14 490.91 756.31 330.55&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#linear-gradient)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;mix-blend-mode: multiply&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h3-4&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M453.13,471.05c-20-.31-48.49-14.38-68.14-10.05-13.54-4.69-34.51-19.93-48.25-23.77-4.06-5.13-13.21-13.57-18.27-16.88L297,425.44c-25.78-9-71.66-48.83-92.2-70.78-23.25,8-24.38,17.46-52.47,13.47L125.84,344.9c-7.26,4.7-21.45,3.12-28.92.05C86.58,332.65,59.21,300,46.18,293.73L19.53,333.39l-21.39-3.8V490.91l204.07-2.72,2.2,2.72H456.94Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#linear-gradient-2)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;mix-blend-mode: multiply&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h3-3&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M369.27,490.91h71.81l-20.37-23.39c-12.47-1.8-31-7.32-43-11.44-4.42,2-12-2.38-15.74-5.28-24-16.39-52.39-28.74-75.56-47.77L250.16,416,237,405.49l-44.35,23c-4.14-6-13.7-11.83-19.85-12.43-29.3,7.48-89.69,52.2-115.13,72.82C114.24,491.53,309.43,490.93,369.27,490.91Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#linear-gradient-3)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;mix-blend-mode: multiply&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h3-2&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M756.14,490.91l-8-59.58-53-.18c-15.09-2.44-50.94-7.67-64.22,4.91-19.09-2.89-49.68-19.29-69.12-17.53-5.3-5.72-16.93-13.13-23.69-14.8l-26.87,20.38c-26.86,1.93-30.42-8.09-52.55-17.23l-12.86,14.87c-8.76-4.86-25.28-12.15-33.64-18.06-22.67,22.21-39,46.13-70,32.86-19.43,17.89-46.64,30.57-69.37,40.53-20.6-4.23-50.78,9.69-71.71,9.85l-.81,4Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#linear-gradient-4)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;mix-blend-mode: multiply&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h3-1&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M754.08,270.8c-9.14,15.25-28.22,45.59-38,59.95-4.61,3.06-20.35,7.4-25.57,8.91L643.7,401c-25.83,9.4-65.64,40.62-89.22,55.62l-7.13-3c-18.15,15-47.22,22.84-68.46,20.49-9.82-6.6-45.32-31-54.87-36-26.29,17.87-45.79,32-76.1,17.57a96.12,96.12,0,0,0-21.71,12.72c-6.43.64-19,3.94-25.11,6.51-13.74-7.23-27.75-13.32-31.55-9.38L232.73,428l-8.08,6.7c-24.6-11.43-37.11-14.88-54.06-43.59l-8.4,4.76c-26.49-10.44-21.1-21.55-39-31.82-10.53,4.63-25.1,12-37.85,19.27C71,369.57,53.3,344.41,43.42,325c-16.37-6.4-30.9-30.44-40.59-47.58l-4.69,2v211.5H756.31V271.05Z&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- SCENE 1 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;scene1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;hills1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-9&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M696.36,409H75V335.47c10.19-.52,20.5-.36,30.05-3.65,8.11-2.8,15.84-8.49,23.78-11.33s18.18,1.84,25.36-4.85C165,305.56,172,289.79,186.71,292.8c6.21,1.27,12.09,3.66,18.43.84,6-2.65,9.73-9.46,14.69-13.54,2.87-2.35,6.42-3.2,9.35-5.49,1.65-1.28,5.45-6.37,7-6.92,7.94-2.93,10.34,2.69,18.56-3.47,6.45-4.84,8.52-8.21,15.45-5,5,2.35,11.89,10.09,16,15.37C294.9,286,302,297.77,312.71,307.53c11.62,10.63,21.59,9.37,34.67,5.83,16.12-4.37,18.32,9.06,32.24,15.28,7.45,3.32,13.23-1.7,19.6-2.08,3.64-.22,5.85,2.12,9.37,1.82,3.12-.27,4.08-4.44,8.33-3,7.32,12.31,15.75,20,28.21,20.59,14.32.7,27.12.76,39.73-4.94A145.24,145.24,0,0,0,502.11,332c8.71-5.36,11.22-2.82,19.35,1.5,11.66,6.21,25.31,1.08,36.56,9.18,5.53,4,8.36,12.23,14.64,14.79,4.86,2,15.59.38,20.4-1.18,13.47-4.38,21.52-16.59,36.56-17.33,13.57-.67,25.19-4.17,39.11-2.31,10.91,1.46,18.72-.1,27.63-2.61Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad1)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-8&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M750,500V212.49a19.09,19.09,0,0,0-11.54,8.17c-2.21,3.35-4.39,7.9-7.92,7.69-1.44-.08-2.78-1-4.23-1.08-5.12-.2-7.87,10.11-12.84,8.66a2.7,2.7,0,0,0-2.57-3.34c-1.49.1-2.72,1.38-3.77,2.67a46.94,46.94,0,0,0-7.7,14c-1.76-6-8.53-7.93-13.43-5.51s-8.31,7.76-11.48,12.87l-17.31,27.92c-4.54,7.33-11.47,15.57-18.52,12.15-3.38-1.64-5.76-5.76-9.32-6.73s-7.55,1.64-11.18.48c-5.45-1.76-8.37-11.36-14-10.4-3.13.54-5.93,4.55-8.87,3.14-1.52-.73-2.44-2.76-4-3.36s-3.32.52-5,1.13c-7.4,2.73-14.16-5.41-21.27-9.08-12.35-6.38-26.85,1.31-36.59,12.45-3.1,3.54-6,7.5-9.78,9.89-3.22,2-6.88,2.8-10.48,3.54L480,303.58c-15,3.07-30.14,6.2-44.07,13.54-6.63,3.48-13,7.91-19.94,10.16-10.83,3.5-22.26,1.5-33.47,1.18-9.18-.27-102.2,122.09-140,171.54Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad2)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-7&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M749.79,500,750,239.12c-.58-.62-1.15-1.25-1.74-1.87-5.67-5.95-12.57-12.05-20.78-11.77s-15.44,7.12-23.74,6.87c-7.55-.23-14.09-6.33-21.65-6.11-5.79.17-10.74,4-15.29,7.6C639.78,255.2,328.89,423.17,184.52,500Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad3)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-6&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M0,410.67V493H412.06c-35.38-101.16-98.42-78-131.23-117.2-32.36-10.29-64.31-17.76-94-31.31a5.83,5.83,0,0,1-.41-1,7.21,7.21,0,0,1-3.62.65c-.21-1.41-.42-2.83-.64-4.24-2.79.75-.89,3.32-3.9,3.95l-1.37-1.1a9.26,9.26,0,0,0-2.34,1l.12,0-.14,0,0,0-.92-.27.07.15a23.67,23.67,0,0,1-6.55-2.05l6.48,1.9c-1.55-3.22,1.78-7.31-3.91-7.15-.21-1.94-.43-3.88-.64-5.82a11.45,11.45,0,0,0-3.47,3.65l-.93-1.37c-1.28,1.74-1.15,5-4.08,2.84l-1,.27c-.33-2.48-.76-5.65-4-4.32a8.17,8.17,0,0,0-.7-4.34l-4.11,3.91c-.6-.27-1.21-.5-1.82-.74a12.42,12.42,0,0,1-1.26-2.53l-1.37,0a7.91,7.91,0,0,0-1-4.51,18.65,18.65,0,0,0-2.83,1.73l1.17-7.63c-3.59.35-3.37,4.37-5.21,6.67-.05-1.15-.09-2.3-.14-3.45-1.34,1.72-1.11,5.49-4.13,4.87v-3.4c-2.61,2.44-.21,7.7-5.37,5.82a7.46,7.46,0,0,0,.48-5.37l-2,4.83c-6.31-4.21-9.12-12.77-16.39-16.25-.1-.77-.21-1.53-.31-2.3a5.08,5.08,0,0,0-.88,1.59,35.35,35.35,0,0,0-8.44-3.48c-.71-1.26-2.37-2.1-3.57-1.32q-.85-7.06-1.7-14.12a46.56,46.56,0,0,0-2.74,10.63l-1.17-3a15.46,15.46,0,0,0-.45,6.63c-1.5,0-3,.08-4.53.08-.53-2.47-.42-9.91-4.23-5.49A44.26,44.26,0,0,0,81.32,290l-4,13.74a44,44,0,0,1-3-8.85l-1.35.55a39.63,39.63,0,0,0-1.85-10.68,47.8,47.8,0,0,0-2.47,5.58l-.24-19.43c-4.18,4.6-2.3,13-3.9,18.92-.26-2.83-.51-5.66-.77-8.49-.51,4.12-.73,8.28-1.38,12.38-.64-.11-1.28-.19-1.93-.26L60,286.83a32.55,32.55,0,0,0-.91,6.45c-1.11-.09-2.24-.15-3.37-.19-.12-1-.26-1.94-.45-2.9-.08,1-.16,1.91-.25,2.87-19.76-2.69-34.56-16.84-55-21.54Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad4)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-5&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M300.32,425.63c-7.78-5.38-17.22-7.93-25.57-12.43-14.59-7.87-25.69-21.55-39.79-29.71l-.42-3.55a7,7,0,0,0-1.09,2.71,51.13,51.13,0,0,0-7.74-3.43,7.19,7.19,0,0,0-.31-1.19c-.62-1.64-2.43-2.82-3.72-1.84q-.84-8.26-1.69-16.51a62.62,62.62,0,0,0-2.73,12.43l-1.17-3.48a19.73,19.73,0,0,0-.56,6.46c.05.58.12,1.19.13,1.79-1.51-.21-3-.39-4.55-.53q-.42-3-.82-6a2.73,2.73,0,0,0-.59-1.63c-.88-.85-2.11.31-2.8,1.37a60,60,0,0,0-1.47-12.2q-2,8-4,16.06a58.3,58.3,0,0,1-3-10.35l-1.34.65a53.76,53.76,0,0,0-1.85-12.48,59.91,59.91,0,0,0-2.46,6.52l-.24-22.71c-1.52.77-1.93,3-2.12,5l-1.77,17.15-.78-9.93-1.2,13.51c-.13,1.39-.82,3.26-2,2.83-.2-3.29-.41-6.58-.61-9.86a44.38,44.38,0,0,0-.86,12.34,18.5,18.5,0,0,1-.07,5.66,5.13,5.13,0,0,1-.41,1.11c-.92-.17-1.85-.33-2.77-.53a62.45,62.45,0,0,0-.61-14.65q-.52,7.14-1.06,14.28l-1.91-.44a14.36,14.36,0,0,0-1.77-3.85c-.07,1.13-.17,2.25-.28,3.38-2.83-.7-5.64-1.49-8.44-2.33a46.58,46.58,0,0,1-.7-7.73c0-2.21.08-4.65-1.13-6.35q-1.16,5.75-2.32,11.5l-2.94-5.22a10.84,10.84,0,0,1-1.43,2.94,70.76,70.76,0,0,1-2.06-19.48,5.51,5.51,0,0,0-.28-2.47c-.34-.74-1.22-1.21-1.81-.72a2.32,2.32,0,0,0-.58,1.35c-.62,3.45-.58,7.51-2.89,9.76a71.71,71.71,0,0,0-2.09-7.57c-2.17.41-.33,6-2.51,6.33a2.8,2.8,0,0,1-1.22-.29c-1.88-.61-4.05.95-4.43,3.18A36.92,36.92,0,0,0,138,349c-1,1-1.37,2.63-1.93,4.05s-1.61,2.84-2.94,2.73c-1.18-.09-2-1.43-2.29-2.79a16.05,16.05,0,0,1,.11-4.15,24,24,0,0,0-1.22-9.68q-1.32,6.12-2.65,12.23a2.46,2.46,0,0,1-.84,1.52l-1-.49a3.24,3.24,0,0,1-.19-.52q-.7-2.39-1.39-4.77a4.89,4.89,0,0,0-3.28,2.8q-2.15-1.11-4.28-2.25c-.4-1.45-.1-3.37-.22-5a14.5,14.5,0,0,0-1.82-5.32,28.44,28.44,0,0,1-1.43,8.47c-11.66-6.3-23.87-12.92-37.13-12.57C47.46,334,28.3,364.93,1,369.38V493H340.58C329.05,468.15,305.9,429.49,300.32,425.63Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad5)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-4&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M751,500V432.05c-32.59-68.73-53.56-58.59-101.56-92.59-.14-1-.27-2-.41-3a5.36,5.36,0,0,0-1.09,2.31,56.55,56.55,0,0,0-7.75-2.93c-.19-1.82-2.36-3.63-4-2.59q-.85-7-1.7-14.08a46.81,46.81,0,0,0-2.73,10.6l-1.16-3a16.62,16.62,0,0,0-.43,7.05c-1.51-.19-3-.33-4.56-.46-.51-2.46-.45-9.74-4.2-5.36a44.16,44.16,0,0,0-1.47-10.41q-2,6.86-3.95,13.71a44,44,0,0,1-3-8.83l-1.35.55a39.72,39.72,0,0,0-1.84-10.65,45.84,45.84,0,0,0-2.46,5.56l-.25-19.38c-4.16,4.58-2.3,13-3.88,18.87l-.78-8.47c-1.32,4,.82,12.1-3.16,13.94-.21-2.81-.41-5.61-.62-8.41-2,5.29.27,11.14-1.33,16.31-.93-.15-1.85-.29-2.77-.45a45.62,45.62,0,0,0-.61-12.51q-.54,6.09-1.06,12.18l-1.91-.37a11.76,11.76,0,0,0-1.77-3.29c-.07,1-.17,1.93-.28,2.89-2.83-.6-5.65-1.27-8.44-2-1.27-3.84.32-8.58-1.83-12l-2.33,9.81-2.94-4.46a8.34,8.34,0,0,1-1.43,2.51c-3.72-8.44.44-31.59-7.61-9.86a56,56,0,0,0-2.1-6.46c-2.55,9.5-4.65,1.59-8.16,7.87A27,27,0,0,0,552.5,310c-7.5,13.85-6.56-1.79-8.28-8.39-1.32,3.76-1.37,8.43-3.48,11.73l-1-.42c-.6-1.47-1-3-1.58-4.51a4.75,4.75,0,0,0-3.27,2.39l-4.28-1.92c-.37-2.95,0-6.25-2-8.82a21.06,21.06,0,0,1-1.44,7.23C477.88,273,440.32,336.09,390,328l-.24-2.24a17.27,17.27,0,0,0-.38,2.34c-.65.1-1.29.21-1.93.33a12.8,12.8,0,0,0-.56-4.29c-.12,1.36-.25,2.72-.37,4.08-2.29-.67-1.19-4.81-1.93-6.76-.15,1.37-.31,2.74-.47,4.1-.93-2.87.08-7.13-2.36-9.15l-.15,9.4a22.45,22.45,0,0,0-1.5-2.7,16.09,16.09,0,0,0-1.12,5.17l-.82-.27a18.83,18.83,0,0,1-1.62,3.93l-.28.12q-1.16-3.21-2.32-6.41a17.14,17.14,0,0,0-.89,5.05c-2.66-2.43-2.31,2.71-2.89,4.27l-.58-.55c-2.76,1.71-1.29-3-2.12-4.32l-.71,1.44a18.49,18.49,0,0,0-1.66-5.14c-.34,2.28-.68,4.55-1,6.83-4.21-.74-1.58,5.19-3,7.44l-.64.42a6.89,6.89,0,0,0-1.31-1.72l-.93,1c-1.73-1.42-.31-4.09-1.9-5.61l-.84,4.95a3.65,3.65,0,0,1-2.09-1.59c-.19.78-1.24,5.51-2.26,9.24l-8.66,5.85a65.51,65.51,0,0,1-1.3-8.18c0,2.68-2,7.92-2.88,11l-3.06,2.07c-1-3.79-2.06-7.14-2.86-7.28-.47,1.36-1.07,8.89-1.53,10.25l-1.7,1.15c-.87-4.35-1.81-9.29-2.35-11.4-.83,2-.58,8.93-.31,13.19l-5.71,3.87c-.65-2.27-1.49-5.21-2.16-5.78-.66,1.48-.89,5.65-1.27,7.23-4.69-4-3.69,5.18-7.43-5.62a53.47,53.47,0,0,0-2.09,6.46c-8.06-21.78-3.89,1.47-7.62,9.86a8.34,8.34,0,0,1-1.43-2.51L295.79,382l-2.32-9.81c-2.32,4.54-.48,10.52-2.67,15.35-12.35,7.5-87.61,76.23-133.54,112.42Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad6)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">polygon</span> <span class="attr">id</span>=<span class="string">&quot;arrow&quot;</span> <span class="attr">points</span>=<span class="string">&quot;353.93 368.91 356.06 366.79 374.26 385 392.47 366.79 394.59 368.91 374.26 389.24 353.93 368.91&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#231f20&quot;</span> <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;10&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M261.62,345.74c8.46,7,22.53-4.51,8.16-9.84-17.91-5.31-3.78-24.1,9.06-16.36L277.69,323c-8.32-5.73-19.5,5.41-5.8,9.55,18.58,6.42,2.18,25.66-11.33,16.74ZM302.54,350c-23.47,10.27-23.65-31.11.1-21.64l-1,3.27c-17.3-7.88-16.61,23.5.14,15.21Zm4.94-15.11c0-2.74,0-5.09-.19-7.25H311l.14,4.56h.19c1.19-3.52,4.35-5.66,7.63-4.94v4c-10.08-1.88-6.76,14-7.29,19.63h-4.18ZM343.71,339c.06,16.73-23.06,16-22.7.39C320.43,323.17,344.34,323.23,343.71,339Zm-18.43.24c-.33,11.66,14.44,11.71,14.11-.09C340.37,327.86,324.33,327.6,325.28,339.26ZM349,316.76h4.22v34.07H349Zm11.32,0h4.23v34.07h-4.23ZM382,318.92c35.43-9.2,34.89,39.64,0,31.81Zm4.18,28.6c23.33,5.69,24.08-31.95,0-25.53ZM435,339c.06,16.73-23.06,16-22.7.39C411.73,323.17,435.64,323.23,435,339Zm-18.43.24c-.33,11.66,14.43,11.71,14.11-.09C431.67,327.86,415.63,327.6,416.58,339.26Zm25.09-11.66c1.21,4.84,3.94,14.5,4.8,19.2h.15c1-4.69,4.38-14.43,5.85-19.2H456c1.44,4.8,4.69,14.59,5.66,19.2h.15c.7-4.59,3.81-14.45,5.08-19.2h4.18l-7.49,23.23h-3.84c-1.53-5-4.6-13.66-5.61-18.72h-.1c-1,5.17-4.22,13.71-5.85,18.72h-3.84l-7-23.23Zm33.63,6.29c0-2.4,0-4.37-.19-6.29h3.75l.24,3.84h.09c14.6-14.27,17.39,7,15.88,19.39h-4.22c-1-5.08,3.26-20.32-5.37-20.25-9.13,0-5.12,15-6,20.25H475.3Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#231f20&quot;</span> <span class="attr">stroke-miterlimit</span>=<span class="string">&quot;10&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;0.5&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;bird&quot;</span> <span class="attr">style</span>=<span class="string">&quot;opacity: 0;&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M110.61,428.6c-2.5,2.06-13.64-.79-17.86.84,0,0,1-2.72,2-2,0,0-.12-1.36-1.07-1.21a3.73,3.73,0,0,0-3.88.79s-1.65-.58-2.32-.24c0,0-5.63-5.13-9.77-9.69S65.91,410,64,403.62c0,0-.81,2.45,2.63,6.06,0,0-5.81-5-6.19-7.68a10.73,10.73,0,0,0,4,7.44c-1.93-1.61-3.54-3.69-5.54-5.23l0-.06a.28.28,0,0,0,0,.06c0,1.75,2,3.92,3.22,5.57-1.37,0-4.53-5.34-4.08-3.26a2.1,2.1,0,0,1-.13-.26,13.7,13.7,0,0,0,2.74,4.58c-.53-.07-1.69-1.6-1.86-.88a1.19,1.19,0,0,1-.09-.15c-.16,0,1.38,4.78,4.17,6.74-3-.23,4,4.44,5.37,4.34.4,1.4,3.53,3.2,3.86,4.5,2.33,2.76,4.63,7.07,8.58,8,.46,3.8-10.7,6-4.75,7.88a2.43,2.43,0,0,0,2.36,1.48c.2,1,1.59,1.14,2.38.73.3.49,1.61,2,2,1.31a29.91,29.91,0,0,1,2.58-7.4c.48-.2.89-.53,1.37-.71-.47,1.42,2.28-.32,3-.38a50.42,50.42,0,0,0,11-1.25c.85.59,2.52,1.46,2.37-.34,1.23,1.09,4.19,1,1.77-1a3.33,3.33,0,0,0,2.63,0,6.86,6.86,0,0,1-1.71-1.15c1.88.38,6.14-.19,2.11-1.38A3.77,3.77,0,0,0,110.61,428.6Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#16122b&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-3&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M599.72,500V408.89c-33.51-10.65-62.1-50.46-98.56-20.79a25.07,25.07,0,0,1-1.27-7.47c-1.85,2.68-1.48,6.14-1.8,9.12-1.25.67-2.51,1.33-3.77,2a4.34,4.34,0,0,0-2.9-2.48c-.47,1.55-.86,3.14-1.39,4.67l-.86.44c-1.9-3.54-1.9-8.23-3.08-12.14-1.52,6.24-.48,23.06-7.3,8.68a32,32,0,0,0-1.39,4.78c-3.06-6.27-5.18,1.34-7.2-8.14a62.77,62.77,0,0,0-1.85,6.68c-7.05-22.33-3.46,2-6.72,10.2a9,9,0,0,1-1.26-2.6q-1.31,2.31-2.6,4.62-1-5.08-2-10.15c-1.91,3.59-.5,8.47-1.62,12.42-2.47.74-5,1.44-7.45,2.06-.1-1-.18-2-.24-3a12.6,12.6,0,0,0-1.56,3.41l-1.69.38q-.46-6.3-.94-12.6a54.83,54.83,0,0,0-.53,12.93c-.82.17-1.64.31-2.45.47-1.42-5.4.55-11.39-1.18-16.87l-.54,8.7c-3.64-2.23-1.56-10.31-2.79-14.41l-.69,8.75c-1.43-6.09.32-14.52-3.43-19.51l-.21,20a53.6,53.6,0,0,0-2.18-5.75,47.85,47.85,0,0,0-1.62,11l-1.19-.57a51.53,51.53,0,0,1-2.64,9.14q-1.74-7.1-3.49-14.18A53.84,53.84,0,0,0,418,409.5c-3.5-4.54-3.22,3.32-3.7,5.54-1.35.13-2.69.28-4,.47a20.24,20.24,0,0,0-.39-7.28l-1,3.07a55.47,55.47,0,0,0-2.42-11q-.74,7.29-1.49,14.57c-1.51-1.13-3.44,1-3.55,2.68a46,46,0,0,0-6.84,3,6.2,6.2,0,0,0-1-2.39c-.12,1-.24,2.09-.37,3.13C358.7,452,331.33,448.79,309.12,500Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad7)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-2&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M458.76,482c5.16-5-11.74.58,1.39-8.14,3.06-4.4-10.55.51-5.45-5.72,1.87-2.26-3.86-2.07-1.53-4.31,2.18-3.68-5.58-.57-5.2-4.1.27-2.94,5.63-1.63,5.89-4.53-1.27-1.36-8.66-.73-3.81-4.29.78-.64.63-1.93-.49-1.76-11.28.92,7.41-5.34-5.09-5-.07-7.42-4-8.29-4,.43-2.15-.06-6.11.48-2.34,2.77,6.88,4.11-6.21-.91-.09,6.26-9.68-.45,2.22,4.05-1.66,6.62-6.42-.72,1,3.05-.35,5-2.22-.11-9.69-2.36-6.67,2.14,1.41,1.08,5.44,1.67,4.16,4.19-14,.35-1.69-3.29-6.22-5.16-9.47.18,3.15-4.84,1.85-7.73-9.62.27-4.67-.91-7.3-8.13,2.83-4.76-13.74.93.69-8.63-5.13-2.29-6.41.32-3.61-5.93-11.85.81,5.66-5.38-5.78-5.15.15-7.09-4.22-7.89-4,.44-2.15-.07-6.11.47-2.34,2.76,6.88,4.11-6.2-.91-.09,6.27-9.68-.46,2.23,4-1.66,6.61-6.41-.72,1,3.06-.35,5-14.1-1.58-4.48,1.08-2.41,6.18-.74,2-7.34-1-3.91,2.67,6.41,3.38-1.72,4.42-4.8,2.38,1.12-4.51-12.53.43-.71-6.68-12.2-.93,6.29-5-5.76-4.73-5.54-2.52,8.3-3.7-.69-5.23-5.84-1.94,4.42-3.47.4-4.84-1.22.31-3.76-.16-2.87-1.84,6.91-2.07-.72-1.42-.68-3.93,4.92-1.72-.21-1.63-.26-3.51,4.44,1.35-1.94-14-3.67-3.17-.8,2.29-5.49.91-1.55,3.84,2.52,3.94-2.5,1.25-3.25,3,4.7,6-1.57,2.19-1.09,5.78,3.53,4,1.11,3.15-2.25,3.33,2.61,4,2.08,8.22-3.68,5.72-1.62-1.67,4.32-3.9.4-4.44-10.78.43,6.22-6.38.89-8-7.78,1.15-3.82-.52-6.33-7.88,2.17-3.68-5.59-.58-5.2-4.1.31-2.7,4.62-1.82,5.73-3.86.94-2.65-9.36-.72-3.66-5,2.7-3.64-6.79.55-3.65-3.67,5-2,1.56-3.17-1.92-3.12-.54-.27.63-8.46-3.55-4.92,1.75,8.9-7.66,3.56-2.78,8.13,6.88,4.11-6.21-.92-.09,6.26-9.68-.45,2.22,4-1.66,6.62-6.42-.73,1,3-.35,5-14.11-1.58-4.48,1.08-2.41,6.19-.82,1.56-3.05.34-4.45.57-1.81,1.88,8.35,6.13-.87,5.54,7.65-5.69-10,.57-.46-8.75-5.45-1.75-6.32-1.71-1.64-6.16-2.69-2.14-5.64.68-2.42-5.44-2.48-.13-4.29.5-1.67-2.47.2-2.56-4.21-.12-.81-4.3-4-.95-2.86-.66-1.28-3.78-4.36-.68-3.26-9.29-5.9-.45-1.69.42-.32,2,.9,1.53-.32,1.21-3.28,1.72-.2,2.6-.13,1.72-5.33,1.7-.51,2.92.67,1.25-1.22,1.6-2.13,1.37-3,1,4.64,2.15.3,3.6-7,1.29,3.64,2-.51,3.87-9-.18,4.78,2.82-4.28,3.52,11,6.71-6.38.31,1.4,6.37-.76,2-6.41-1.15-5.09,1.82,2.32.84,4.11,2.25.87,3.47-4.11,1.08-2,1.74-3.25-.62-6.34.25,3.67-3.77.53-4.71-5.43,1-1.73-1.91-3.33-3.35a.71.71,0,0,1-.4-1.29c.24-2.77-7.7-.85.31-4.69.55-1.57-5.52-.43-2.15-2.93,1.59-2.15-4,.32-2.16-2.16,3-1.18.92-1.87-1.13-1.84-.32-.16.37-5-2.09-2.9,1,5.58-4.69,1.75-1.64,4.79,3.93,2.34-3.67-.41-.05,3.69-5.7-.27,1.3,2.39-1,3.9-3.78-.43.56,1.8-.21,2.95-7.14-1-3.36.55-1.4,3.6-20.82-5.42,15.55-8.49-9.78-14.34-1-4.08,4.92-5,6.1-8.35-2.57-4.75-11.79,3.63-4.62-10.39-4.74-.25-8.2,1-3.19-4.72,1-5.25-8.31.83-1.55-8.2-.43-2.27-3.52,0-4.8-.76-3-2.12,3.41-5,2.35-6.46-8.43-.81-5.66-18.62-11.26-.86-3.23.81-.61,3.74,1.71,2.91-.06,2.62-7.33,2.59-.37,5,1.16,2.72-5.59,1.51-4.85,4.07.49,1.35,2.93.41,3.88,1.5,1.26,2.37-2.34,3.06-4.07,2.61-5.69,1.95,8.86,4.1.58,6.87-12.17,1.9,6.57,4.08-1,7.41-17.71-1,8.72,6.71-6.76,5.84-6.41-2.11-7.5-2-1.94-7.31-3.15-2.61-6.72,1.08-2.86-6.42-2.94-.15-5.08.59-2-2.92.43-3.17-5.08.26-1-5.07-4.84-1.29-3.61-.46-1.52-4.47-2.94-.11-2.83-2.64-4-4.7-3-2.3-1.29,3.54-2.94,4.17-2,.5-.38,2.31,1.06,1.8,0,1.62-4.53,1.6-.23,3.08,0,2.09-6.51,1.85-.6,3.45.78,1.46-1.45,1.89-2.52,1.61-3.52,1.21,5.48,2.54.36,4.25-7.81,1.33,4.22,2.36-.61,4.58-10.59-.21,5.65,3.33-5,4.16,10.45,6.46-.72,1.82-.83,5.58,8.72,4.58-6.19.52-3.48,4.14,7.92,3.4-3.1,4.87-2.53.79-6.34-.08,3.86-3.57.78-4.68-4.16,1-2.76-2.51-3.48-4.83.07-2.93-7.44-.71.56-4.66.63-1.54-5.48-.72-2-3,1.7-2.06-4,.12-2-2.27,3-1,1-1.81-1-1.89-.31-.18.64-5-1.93-3,.74,5.62-4.78,1.51-1.89,4.7,3.79,2.53-3.64-.6-.26,3.68-5.67-.56,1.18,2.45-1.18,3.84-3.75-.62.47,1.83-.36,2.94-10.47-2.77,3.15,4.78-4.25,3.77,4.88,5.83-10.67,1.08-1.94-3.71-2.69-2.14-5.64.67-2.41-5.44-2.49-.13-4.3.5-1.68-2.47.2-2.56-4.21-.12-.8-4.3-4.11-.92-2.8-.73-1.29-3.78-2.48-.09-2.39-2.23-3.41-4-2.53-1.94-1.09,3-2.49,3.53-1.69.43-.32,2,.9,1.53-4.38,3.14,2.56,2-1.38,3.72-4.45.74,4.45,2.51-.9,3.21.38-2.33-7.66.62-4.27-3.65,1.35-1.65-2.69-1.46-1.17-3.09,1.84-2.7-4-.51-3.7-3.06.21-2.14,4.1-1.16,4.3-3.27-.91-1-6.31-.58-2.76-3.14,2-2.64-5,.37-2.65-2.68.73-.47,2.22-.65,1.93-1.71-6.38.22-1.28-6.35-5.87-4.17-1.08.91.93,3.06-.35,3.9-1.56-.05-4.45.32-1.71,2,4.85,2.92-4.53-.54-.09,4.56-7-.37,1.6,3-1.23,4.81-6.21-.48,5.52,5.54-3.69,3.19,1.39-.38,1.75-2.57-.11-2.32-10.78.43,6.22-6.38.89-8-7.78,1.12-3.8-.39-6.34-7.87,2.84-4.76-13.74.93.7-8.64-5.14-2.28-6.42.33-3.61-5.92-1.49-.19-6.09,1-3.86-2,5-2,1.56-3.17-1.92-3.12-.54-.27.63-8.46-3.55-4.92,1.74,8.81-7.58,3.61-2.78,8.12,6.88,4.11-6.21-.91-.09,6.27-9.68-.46,2.22,4-1.66,6.61-6.42-.72,1,3.05-.35,5-14.11-1.57-4.48,1.09-2.41,6.19-7.27,2.1-5-.36-1.57,5.11-2.6,3.16-9.48-3.16-9.41,2.41-10.51-4.19,11.08-4.29-4.83-8.59,9.59-12.9-5.12.44.92-11.59-2.94-.16-5.08.59-2-2.92.43-3.17-5.08.26-1-5.08-.26-1.4-2.17,0-3-.47,1.94-7.42.17-1-2.57-8.7-3-2.29-1.29,3.55-2.94,4.18-2,.49-.38,2.31,1.06,1.79,0,1.63-4.54,1.6-.23,3.08,0,2.11-6.51,1.85-.6,3.45.83,2-2,1.54-3.16,1.72.2,3.2,6.63,2.1-1.44,4.91-2.72.08-2.75-1-1.54-3.2-1.58,0-2.71.1-1.09-1.62.13-1.67-2.76-.08-.53-2.81-2.61-.69-2-.31-.84-2.48-1.63-.06-1.57-1.46-2.24-2.6-.85-1.31-2.94,4.33-1,3.31-.2.79-2.14,1.12-.12,1.7-.1,1.13-3.49,1.12-.34,1.91.44.82-.8,1-1.39.9-2,.66,3,1.4.2,2.35-4.46.71,2.3,1.38-.34,2.54-5.46-.29,2.79,2-2.8,2.3,5.29,3.29.61.84-.46,3.09,3.17,1.72-.49,1.56-2.07,1.39,5.62-3.91-10.06-2.36-5.48-7.07,10.21-6.19-11.14-3.29,1.25-11.79-3.09-3.14-7.74,1.64-3.2-7.24-3.3-.18-5.7.66-2.22-3.28.48-3.57-5.71.29-1.07-5.7-9.55-1.62,1.9-4.21-2.79-5.36-2.68.41-3.9-10.11-5.79-3.4,1,2.63-4.89,5.16.23,5.16,0,1.82-5.09,1.8-.25,3.46-.06,2.36-7.33,2.08-.68,3.88.88,1.65-1.62,2.12-2.83,1.81-4,1.36,6.16,2.85.4,4.78-8.86,1.48,4.77,2.67-.68,5.15-11.9-.24,6.35,3.74-5.68,4.66.18,2.26,5,1.07,4.84,3.51-1.91,2.93-10.39-.72-3,5-1,2.59-8.59-1.54-6.69,2.46,3.11,1.07,5.31,3,1.09,4.56a5.5,5.5,0,0,0-2.92,1c-21-4.74,14.24-9.36-10.31-14.48-1-4.08,4.92-5.05,6.1-8.35-2.56-4.75-11.79,3.63-4.61-10.39-4.75-.25-8.21,1-3.2-4.71,1-5.26-8.3.82-1.54-8.21-.43-2.27-3.52,0-4.81-.76-3-2.12,3.41-5,2.36-6.46-4.75-.17-4.58-4.27-6.52-7.6-4.83-3.69-2.08,5.72-4.75,6.74-3.22.81-.61,3.74,1.72,2.91-.06,2.62-7.34,2.59-.37,5,1.15,2.72-5.6,1.51-4.86,4.07,4.29.89,5.93,4.66-.19,4.11-5.69,1.95,8.86,4.1.58,6.87-12.17,1.9,6.58,4.08-1,7.4-17.62-.13,9.56,5.15-8.17,6.72.26,3.24,7.15,1.53,7,5-3.2,4.42-14.5-1.48-4.37,7.25-16.76-2.77,6.36-6.08-8.62-9.37,9.6-12.91-5.11.43.92-11.6-2.93-.16-5.07.59-2-2.92.42-3.17-5.09.26-1-5.07-.27-1.41-2.18,0-3-.47,1.94-7.44.21-1-2.57-8.7-3-2.3-1.29,3.54-2.93,4.17-2,.49-.39,2.31,1,1.8,0,1.62-4.54,1.59-.22,3.08-.06,2.1-6.51,1.84-.61,3.45.84,2-2,1.54-3.15,1.71-.41,2.91,7,2.16-1.2,4.73,3.83-3-3.3-3-.93-5.63,3.08-4.21-12.45-.82-2.84-6.88,1.45-.39,3.53-.82,3.6-2.54-.71-1.87-6.8.32-5.71-3.29,3.43-2.58,1.75-3.87-1.85-2.94C-.75,344.2.16,465.91.12,500H467.87C473.79,495.49,471.59,489.61,458.76,482ZM10.88,370c-1.36.11-3.05-.89-3-2.25C8.48,368.61,11.55,368.23,10.88,370Zm107.47,18.35c.12,0,.22.1.33.14C121.24,390.56,115.34,390.33,118.35,388.34Zm-1.9-2.67c-.32-1.24,1.32-1.65,1.88-2.5C124.28,385.1,120,387.49,116.45,385.67Zm77.12,31.76c.12-.73,1.62-2.22,2.09-1.22S194.42,417.74,193.57,417.43Zm-.49-2.38c-3.46-.59-.05-3.14,1.48-3.86C200.14,413,192.92,413.23,193.08,415.05Zm65.81,17.06a2.55,2.55,0,0,1,.75.43C259.28,432.55,258.94,432.53,258.89,432.11Zm2.37-4c-1.58-1-3.82-1-5.46-1.77C251,418.85,271.7,425.92,261.26,428.12ZM391,465a.7.7,0,0,1,.41-.85C391.06,464.53,391.49,466,391,465Zm39.5,11.52H432C431.85,477.15,431,476.53,430.52,476.55Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad8)&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">path</span> <span class="attr">id</span>=<span class="string">&quot;h1-1&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M761.44,506.06c-5.65-.19,10.92-182.57-7.17-162-1.31-2.92,9.88-6.67.34-5.87-4.24-.44,1-4-1.72-4.8-2.49-.42,1.86-4.33-2.2-3.39-8.74-1.35,7.4-5.58.13-5.93-1.16.14-2.66-.83-2.15-1.87,5.62-4.46-4.52-.31-1.81-4,4.06-1.59,1.25-2.59-1.55-2.52-.43-.22.51-6.83-2.86-4,1.48,7.41-6.36,2.56-2.25,6.56,5.14,3-5-.25-.08,5.06-7.81-.36,1.8,3.26-1.33,5.34-5.19-.58.77,2.46-.29,4.05-14.58-3.05,4.72,6.31-5.53,5.46-1.7,1.79,5.19,2.86,1.22,4.65-9-2.33-7.62,1.55-.87,4.1-.85,3.28-7.17.63-6.46,4.61a2.16,2.16,0,0,0-2.05-1.46c-3.92-1.42,2.25-2,.32-3.26-1-.12-2.49.65-3.16-.31,5-3.59-6.35-.29.94-4.3-5.75-.3,2.74-2.66-2.88-2.37-2.72-1.19,4.24-1.88-.35-2.61-2.92-1,2.21-1.74.2-2.42-.61.15-1.88-.09-1.43-.93,3.25-.82-.26-.81-.35-2,2.08-.6.08-.94-.13-1.76,2,1.08-.21-4.83-1.07-3.41-2.69,3-.16,4.58-3.16,5.23,2.16,2.44-.56,1.32-.55,2.9,1.66,1.77.5,1.65-1.13,1.66,2.07,3.55.2,2.46-1.63,3.67,3,2.68,2.38,3.16-1.1,4.15,6.38,6.85-5.28,1.52-.27,6a54.76,54.76,0,0,1-5.21,3c-5.88-1.82,5.87-3.27-2.9-4.93,5-6.49-2.77-.61.52-6.62-1.63,0-2.78.1-1.13-1.67,0-1.57-2.69-.47-.54-2.89-2.57-.64-2.07-.48-.87-2.55-1.67-.06-1.61-1.51-2.3-2.68-1.75-1.1-2.47,5.84-1.2,5.16-3.88,2.37,2.78,2.17-2.14,2.95-.76,1.13,3.25,1.24.57,2.36-4.6.73,2.37,1.42-.35,2.62-5-.63,2.12,2.54-2.68,2.17-6-1.33,1.92-3-3.55-4.14,3.51-4.39-1.9-.75.38-4.83-1.19,0-2,.08-.82-1.21,0-1.15-2-.36-.4-2.12-1.93-.73-.68-1.93-2.31-3.82-.68-.92-2.23,3.19-.78,2.49-.17.62-1.6.83-.1,1.28-.07.86-2.61.83-.25,1.44.33.61-.6.79-1,.67-1.46.51,2.29,1.06.15,1.77-3.35.54,1.73,1-.25,1.91-3.5-.29,1.48,1.61-2.1,1.73,4.39,3.22-9.59.52,0-5.62-3.38-2.44-6.84.32-3-6.7-3,0-5.09.19-2.06-3,.24-3.13-5.17-.19-1-5.29-6.9-1.54.83-1-5.78-9.55-3.11-2.4-1.33,3.69-3.06,4.34-2.07.52-.4,2.41,1.11,1.88-.41,1.55-4,2.06-.24,3.21-.17,2.13-6.55,2.07-.63,3.59.81,1.53-1.5,2-2.62,1.68-3.67,1.25,5.71,2.65.37,4.43-8.39,1.33,4.33,2.58-.63,4.77-10.29-.54,5.25,3.78-5.27,4.33.17,2.09,4.61,1,4.49,3.25-1.86,2.78-9.73-.67-2.77,4.6-.93,2.4-7.89-1.42-6.27,2.23,3,1,4.86,3,1.14,4.22-7.71,1.52-5.08,12.81-10,18.06-5.1.06-1.56-2.95.16-4.78-2.44-1.6-4.9-.21-2.17-4.88-2.17,0-3.7.14-1.5-2.21,0-2.09-3.58-.63-.72-3.85-3.42-.85-2.75-.63-1.15-3.39-2.23-.08-2.15-2-3.06-3.56-2.27-1.75-1,2.68-2.23,3.16-1.51.38-.29,1.76.81,1.36-.3,1.13-2.92,1.51-.18,2.34-.12,1.55-4.77,1.51-.45,2.62.59,1.12-1.1,1.43-1.92,1.22-2.66.91,4.16,1.93.28,3.22-6.11,1,3.15,1.89-.46,3.48-7.48-.39,3.8,2.75-3.84,3.15,7.29,4.68.73,1.27-.63,4.23,4.63,2.76-1.08,1.54-2.84,2.22,7.79-7.19-4.17-1,.78-8.7-2.34,0-4,.15-1.62-2.39.19-2.45-4-.15-.78-4.14-7-1.38,1.23-2.62-2-3.9-1.94.3-2.84-7.35-4.22-2.47.76,1.91-3.55,3.76.17,3.75-.31,1.22-3.14,1.62-.18,2.52-.14,1.67-5.14,1.62-.5,2.82.64,1.2-1.18,1.54-2,1.32-2.88,1,4.48,2.07.29,3.47-6.58,1.05,3.4,2-.5,3.74-8-.42,4.11,3-4.13,3.4,10.59,6.3-6,.57,1.35,6.15-1,1.38-3.16.27-4.52.45-.43,4.06,7.08,2.38-3.37,6.12-5.71.48,4.63-4.45-1.52-3.51-1.79-.23-.1-1-1.27-3.68-.94-2.47-5.06-.15.31-3.89-2.34-.85-2.73-.16-1.62-2.67-.67-.09-2.75.44-1.75-.92,2.27-.89.7-1.45-.86-1.41-.24-.12.29-3.81-1.6-2.22.94,3.52-3.33,1.82-1.26,3.67,2.87,1.65-2.79-.14,0,2.82-4.35-.19,1,1.83-.75,3-2.89-.32.44,1.37-.16,2.26-7.36-1.67,2.25,3.67-3.09,3.05-1,1,2.9,1.6.69,2.6-4.72-1.34-4.13,1-.49,2.29-.37,1.72-5.23.65-3.18,3-2.82,1-8,1.39-4.29-2.77-4.08-.65-3.25-8.88-5.66-.42-1.62.4-.31,1.87.86,1.45-.32,1.21-3.13,1.61-.19,2.5-.13,1.67-5.1,1.62-.49,2.8.64,1.2-1.17,1.53-2,1.31-2.86,1,4.45,2.07.29,3.45-6.53,1,3.38,2-.49,3.72-8-.42,4.07,2.94-4.1,3.37,10.51,6.26-5.95.57,1.33,6.12-.94,1.36-3.14.26-4.49.44-2.75,1.84,6,2.62.45,4.63-1.57-.22-3.88,1.83-2,3.35-1.09,1.23-5.42,2.3-1.85.15-3.17-1.23-1.57-.8-.8-2.52-4.17-.05,1.54-1.41-1.15-1.88-2-.81,1.57-.63-.8-2.15,2.22,0-.35-1.1.1-2.25-.83-2.92-1.36,1.66-2.52,1.48-1.87.82,3.06,1.7-1.21,2.34,1.85,2.09-.48,1.12-.47,2.48,1.42,1.51.43,1.41-1,1.42,1.66,2.64.09,2.26-1.4,3.15,2.57,2.29,2,2.7-.94,3.56,6.39,5.32-13.47,7.73-3.13-.78-2.84-1.86-5.71-.24-2.53-5.68-2.53,0-4.3.16-1.74-2.58.2-2.64-4.38-.16-.85-4.48-5.53-1,.39-1.54-4.9-8.09-2.63-2-1.13,3.12-2.59,3.68-1.75.44-.34,2,.94,1.59-.34,1.31-3.4,1.75-.2,2.72-.15,1.8-5.56,1.75-.54,3,.69,1.3-1.27,1.67-2.22,1.43-3.11,1.06,4.84,2.24.32,3.75-7.11,1.13,3.67,2.19-.54,4.05-8.7-.46,4.44,3.19-4.46,3.66.14,1.77,3.9.84,3.8,2.76-11.08,2.45,4.62,4.82-7.23,4.38-3,2,6.48,3,.54,5-19.56,16.4-40,40.41-67.65,39.92C204.4,521.41,763.06,501.47,761.44,506.06ZM690.05,348.19c1.82-1.17,4.91,2.33.87,1.59C690.36,349.44,689.15,348.86,690.05,348.19Zm-11.51-.42c1.22-.95.69.18-.18.42C677.93,348.27,678.29,348,678.54,347.77Zm-54.73,30.29a4.74,4.74,0,0,0,1.56.73C624.69,378.93,623.4,378,623.81,378.06Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#grad9)&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">g</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;scrollElement&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fullscr&quot;</span>&gt;</span>全屏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">gsap.<span class="title function_">registerPlugin</span>(<span class="title class_">ScrollTrigger</span>);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> speed = <span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*  SCENE 1 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> scene1 = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: scene1,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;top top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;45% 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// hills animation</span></span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;#h1-1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">y</span>: <span class="number">3</span> * speed, <span class="attr">x</span>: <span class="number">1</span> * speed, <span class="attr">scale</span>: <span class="number">0.9</span>, <span class="attr">ease</span>: <span class="string">&quot;power1.in&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-2&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">2.6</span> * speed, <span class="attr">x</span>: -<span class="number">0.6</span> * speed, <span class="attr">ease</span>: <span class="string">&quot;power1.in&quot;</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-3&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">1.7</span> * speed, <span class="attr">x</span>: <span class="number">1.2</span> * speed &#125;, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-4&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">3</span> * speed, <span class="attr">x</span>: <span class="number">1</span> * speed &#125;, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-5&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">2</span> * speed, <span class="attr">x</span>: <span class="number">1</span> * speed &#125;, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-6&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">2.3</span> * speed, <span class="attr">x</span>: -<span class="number">2.5</span> * speed &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-7&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">5</span> * speed, <span class="attr">x</span>: <span class="number">1.6</span> * speed &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-8&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">3.5</span> * speed, <span class="attr">x</span>: <span class="number">0.2</span> * speed &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#h1-9&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">3.5</span> * speed, <span class="attr">x</span>: -<span class="number">0.2</span> * speed &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//animate text</span></span></span><br><span class="line"><span class="language-javascript">scene1.<span class="title function_">to</span>(<span class="string">&quot;#info&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">8</span> * speed &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*   Bird   */</span></span></span><br><span class="line"><span class="language-javascript">gsap.<span class="title function_">fromTo</span>(</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;#bird&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">y</span>: -<span class="number">250</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">x</span>: <span class="number">800</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ease</span>: <span class="string">&quot;power2.out&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scrollTrigger</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">start</span>: <span class="string">&quot;15% top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">end</span>: <span class="string">&quot;60% 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">scrub</span>: <span class="number">4</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        gsap.<span class="title function_">to</span>(<span class="string">&quot;#bird&quot;</span>, &#123; <span class="attr">scaleX</span>: <span class="number">1</span>, <span class="attr">rotation</span>: <span class="number">0</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        gsap.<span class="title function_">to</span>(<span class="string">&quot;#bird&quot;</span>, &#123; <span class="attr">scaleX</span>: -<span class="number">1</span>, <span class="attr">rotation</span>: -<span class="number">15</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* Clouds  */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> clouds = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: clouds,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;top top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;70% 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">clouds.<span class="title function_">to</span>(<span class="string">&quot;#cloud1&quot;</span>, &#123; <span class="attr">x</span>: <span class="number">500</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">clouds.<span class="title function_">to</span>(<span class="string">&quot;#cloud2&quot;</span>, &#123; <span class="attr">x</span>: <span class="number">1000</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">clouds.<span class="title function_">to</span>(<span class="string">&quot;#cloud3&quot;</span>, &#123; <span class="attr">x</span>: -<span class="number">1000</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">clouds.<span class="title function_">to</span>(<span class="string">&quot;#cloud4&quot;</span>, &#123; <span class="attr">x</span>: -<span class="number">700</span>, <span class="attr">y</span>: <span class="number">25</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* Sun motion Animation  */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sun = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: sun,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;top top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;2200 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//sun motion</span></span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">cy</span>: <span class="string">&quot;330&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//bg change</span></span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#sun&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.15&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(2)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.15&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(3)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.18&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(4)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.25&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(5)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.46&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript">sun.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(6)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="string">&quot;stop-color&quot;</span>: <span class="string">&quot;#FF9171&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*   SCENE 2  */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> scene2 = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: scene2,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;15% top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;40% 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">4</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">scene2.<span class="title function_">fromTo</span>(<span class="string">&quot;#h2-1&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">500</span>, <span class="attr">opacity</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">opacity</span>: <span class="number">1</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene2.<span class="title function_">fromTo</span>(<span class="string">&quot;#h2-2&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">500</span> &#125;, &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-javascript">scene2.<span class="title function_">fromTo</span>(<span class="string">&quot;#h2-3&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">700</span> &#125;, &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-javascript">scene2.<span class="title function_">fromTo</span>(<span class="string">&quot;#h2-4&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">700</span> &#125;, &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="number">0.2</span>);</span></span><br><span class="line"><span class="language-javascript">scene2.<span class="title function_">fromTo</span>(<span class="string">&quot;#h2-5&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">800</span> &#125;, &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-javascript">scene2.<span class="title function_">fromTo</span>(<span class="string">&quot;#h2-6&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">900</span> &#125;, &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* Bats */</span></span></span><br><span class="line"><span class="language-javascript">gsap.<span class="title function_">fromTo</span>(</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;#bats&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">opacity</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">400</span>, <span class="attr">scale</span>: <span class="number">0</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">y</span>: <span class="number">120</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scale</span>: <span class="number">0.8</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">transformOrigin</span>: <span class="string">&quot;50% 50%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">ease</span>: <span class="string">&quot;power3.out&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scrollTrigger</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">start</span>: <span class="string">&quot;40% top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">end</span>: <span class="string">&quot;70% 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">scrub</span>: <span class="number">3</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        gsap.<span class="property">utils</span>.<span class="title function_">toArray</span>(<span class="string">&quot;#bats path&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          gsap.<span class="title function_">to</span>(item, &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">scaleX</span>: <span class="number">0.5</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">yoyo</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">repeat</span>: <span class="number">11</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">duration</span>: <span class="number">0.15</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">delay</span>: <span class="number">0.7</span> + i / <span class="number">10</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">transformOrigin</span>: <span class="string">&quot;50% 50%&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        gsap.<span class="title function_">set</span>(<span class="string">&quot;#bats&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        gsap.<span class="title function_">to</span>(<span class="string">&quot;#bats&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">0</span>, <span class="attr">delay</span>: <span class="number">2</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* Sun increase */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sun2 = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: sun2,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;2200 top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;5000 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">sun2.<span class="title function_">to</span>(<span class="string">&quot;#sun&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.6&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">sun2.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(2)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">offset</span>: <span class="string">&quot;0.7&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">sun2.<span class="title function_">to</span>(<span class="string">&quot;#sun&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="string">&quot;stop-color&quot;</span>: <span class="string">&quot;#ffff00&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">sun2.<span class="title function_">to</span>(<span class="string">&quot;#lg4 stop:nth-child(1)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="string">&quot;stop-color&quot;</span>: <span class="string">&quot;#623951&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">sun2.<span class="title function_">to</span>(<span class="string">&quot;#lg4 stop:nth-child(2)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="string">&quot;stop-color&quot;</span>: <span class="string">&quot;#261F36&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">sun2.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad stop:nth-child(6)&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="string">&quot;stop-color&quot;</span>: <span class="string">&quot;#45224A&quot;</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* Transition (from Scene2 to Scene3) */</span></span></span><br><span class="line"><span class="language-javascript">gsap.<span class="title function_">set</span>(<span class="string">&quot;#scene3&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">580</span>, <span class="attr">visibility</span>: <span class="string">&quot;visible&quot;</span> &#125;);</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> sceneTransition = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: sceneTransition,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;70% top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;bottom 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">sceneTransition.<span class="title function_">to</span>(</span></span><br><span class="line"><span class="language-javascript">  <span class="string">&quot;#h2-1&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#123; <span class="attr">y</span>: -<span class="number">680</span>, <span class="attr">scale</span>: <span class="number">1.5</span>, <span class="attr">transformOrigin</span>: <span class="string">&quot;50% 50%&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">);</span></span><br><span class="line"><span class="language-javascript">sceneTransition.<span class="title function_">to</span>(<span class="string">&quot;#bg_grad&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">cy</span>: <span class="string">&quot;-80&quot;</span> &#125; &#125;, <span class="number">0.0</span>);</span></span><br><span class="line"><span class="language-javascript">sceneTransition.<span class="title function_">to</span>(<span class="string">&quot;#bg2&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">0</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* Scene 3 */</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> scene3 = gsap.<span class="title function_">timeline</span>();</span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ScrollTrigger</span>.<span class="title function_">create</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">animation</span>: scene3,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">start</span>: <span class="string">&quot;80% 50%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">end</span>: <span class="string">&quot;bottom 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrub</span>: <span class="number">3</span></span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//Hills motion</span></span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#h3-1&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">300</span> &#125;, &#123; <span class="attr">y</span>: -<span class="number">550</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#h3-2&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">800</span> &#125;, &#123; <span class="attr">y</span>: -<span class="number">550</span> &#125;, <span class="number">0.03</span>);</span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#h3-3&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">600</span> &#125;, &#123; <span class="attr">y</span>: -<span class="number">550</span> &#125;, <span class="number">0.06</span>);</span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#h3-4&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">800</span> &#125;, &#123; <span class="attr">y</span>: -<span class="number">550</span> &#125;, <span class="number">0.09</span>);</span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#h3-5&quot;</span>, &#123; <span class="attr">y</span>: <span class="number">1000</span> &#125;, &#123; <span class="attr">y</span>: -<span class="number">550</span> &#125;, <span class="number">0.12</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//stars</span></span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#stars&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">opacity</span>: <span class="number">0.5</span>, <span class="attr">y</span>: -<span class="number">500</span> &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// Scroll Back text</span></span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#arrow2&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">opacity</span>: <span class="number">0.7</span>, <span class="attr">y</span>: -<span class="number">710</span> &#125;, <span class="number">0.25</span>);</span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">fromTo</span>(<span class="string">&quot;#text2&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;, &#123; <span class="attr">opacity</span>: <span class="number">0.7</span>, <span class="attr">y</span>: -<span class="number">710</span> &#125;, <span class="number">0.3</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//gradient value change</span></span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">to</span>(<span class="string">&quot;#bg2-grad&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">cy</span>: <span class="number">600</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">scene3.<span class="title function_">to</span>(<span class="string">&quot;#bg2-grad&quot;</span>, &#123; <span class="attr">attr</span>: &#123; <span class="attr">r</span>: <span class="number">500</span> &#125; &#125;, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*   falling star   */</span></span></span><br><span class="line"><span class="language-javascript">gsap.<span class="title function_">to</span>(<span class="string">&quot;#fstar&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">x</span>: -<span class="number">700</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">y</span>: -<span class="number">250</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">ease</span>: <span class="string">&quot;power4.out&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">scrollTrigger</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">trigger</span>: <span class="string">&quot;.scrollElement&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">start</span>: <span class="string">&quot;4000 top&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">end</span>: <span class="string">&quot;6000 100%&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">scrub</span>: <span class="number">5</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      gsap.<span class="title function_">set</span>(<span class="string">&quot;#fstar&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">1</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      gsap.<span class="title function_">set</span>(<span class="string">&quot;#fstar&quot;</span>, &#123; <span class="attr">opacity</span>: <span class="number">0</span> &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//reset scrollbar position after refresh</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onbeforeunload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> fullscreen;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> fsEnter = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;fullscr&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">fsEnter.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">if</span> (!fullscreen) &#123;</span></span><br><span class="line"><span class="language-javascript">    fullscreen = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">requestFullscreen</span>();</span></span><br><span class="line"><span class="language-javascript">    fsEnter.<span class="property">innerHTML</span> = <span class="string">&quot;退出全屏&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    fullscreen = <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">exitFullscreen</span>();</span></span><br><span class="line"><span class="language-javascript">    fsEnter.<span class="property">innerHTML</span> = <span class="string">&quot;全屏&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html(5) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《如何阅读一本书》</title>
      <link href="/2022/05/032022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E9%98%85%E8%AF%BB_%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/ed9cd36e/"/>
      <url>/2022/05/032022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E9%98%85%E8%AF%BB_%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6/ed9cd36e/</url>
      
        <content type="html"><![CDATA[<h1 id="阅读的层次"><a href="#阅读的层次" class="headerlink" title="阅读的层次"></a>阅读的层次</h1><h2 id="基础阅读"><a href="#基础阅读" class="headerlink" title="基础阅读"></a>基础阅读</h2><ul><li>这个句子在说什么？</li></ul><h2 id="检视阅读"><a href="#检视阅读" class="headerlink" title="检视阅读"></a>检视阅读</h2><ul><li>在一定的时间之内，抓出一本书的重点。从表面去观察着本书，学习到书的表象所教给你的一切。</li><li>这本书在谈什么？</li><li>这本书的架构如何？</li><li>这本书包含哪些部分？<br>总结：这是哪一类书？————小说、历史、还是科学论文？</li></ul><h2 id="分析阅读"><a href="#分析阅读" class="headerlink" title="分析阅读"></a>分析阅读</h2><ul><li>在无限的时间里，最好、最完整的阅读。咀嚼、消化一本书。</li><li>对自己所读的东西提出许多又系统的问题。</li></ul><h2 id="主题阅读"><a href="#主题阅读" class="headerlink" title="主题阅读"></a>主题阅读</h2><ul><li>在做主题阅读时，阅读者会读很多书，而不是一本书，并列举出这些书之间的相关之处，提出一个所有的书都能谈到的主题。能够架构出一个可能在哪一本书里没提过的主题分析</li></ul><h1 id="阅读不同作品的方法"><a href="#阅读不同作品的方法" class="headerlink" title="阅读不同作品的方法"></a>阅读不同作品的方法</h1><h1 id="阅读的最终目标"><a href="#阅读的最终目标" class="headerlink" title="阅读的最终目标"></a>阅读的最终目标</h1>]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 阅读 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>速查指令</title>
      <link href="/2022/05/022022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E9%80%9F%E6%9F%A5%E6%8C%87%E4%BB%A4/efc31b2a/"/>
      <url>/2022/05/022022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_%E6%89%8B%E5%86%8C_%E9%80%9F%E6%9F%A5%E6%8C%87%E4%BB%A4/efc31b2a/</url>
      
        <content type="html"><![CDATA[<h1 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h1><h2 id="NPM-常用库"><a href="#NPM-常用库" class="headerlink" title="NPM 常用库"></a>NPM 常用库</h2><h3 id="uuid"><a href="#uuid" class="headerlink" title="uuid"></a>uuid</h3><p>用于创建 RFC4122 UUID</p><h3 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h3><p>一个小巧、安全、URL友好、唯一的 JavaScript 字符串ID生成器。</p><h1 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h1><h2 id="取消文件夹紧凑显示"><a href="#取消文件夹紧凑显示" class="headerlink" title="取消文件夹紧凑显示"></a>取消文件夹紧凑显示</h2><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316151245.png" alt="20230316151245"></p><p>取消后的效果：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice_23/main/img/20230316151324.png" alt="20230316151324"></p><h2 id="Vs-软件快捷键"><a href="#Vs-软件快捷键" class="headerlink" title="Vs-软件快捷键"></a>Vs-软件快捷键</h2><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220517141154.png" alt="20220517141154"></p><div class="table-container"><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + 左右</td><td>按照单词跳转</td></tr><tr><td>Ctrl + D</td><td>选择单词</td></tr><tr><td>Alt + Z</td><td>切换自动换行</td></tr><tr><td>Shift + Alt + F</td><td>格式化文档</td></tr><tr><td>Shift + Alt + 下箭头</td><td>快速复制一行文本</td></tr><tr><td>Shift + Alt + 鼠标左键上下拖动</td><td>快速选择多行区域</td></tr><tr><td>Ctrl + G</td><td>快速跳转指定行</td></tr></tbody></table></div><p>拓展：</p><ol><li>文本可以在右下角自定义语言格式。（用于特定语言的格式化）</li></ol><h2 id="Vs-前端插件"><a href="#Vs-前端插件" class="headerlink" title="Vs-前端插件"></a>Vs-前端插件</h2><div class="table-container"><table><thead><tr><th>插件</th><th>Description</th></tr></thead><tbody><tr><td>Code Runner</td><td>运行多种语言的代码片段或代码文件 。</td></tr><tr><td>Auto Rename Tag</td><td>Automatically rename paired HTML/XML tag 。</td></tr><tr><td>CSS Peek</td><td>在源代码中的字符串中找到css/scss/less(类和ID)。</td></tr><tr><td>Easy LESS</td><td>Easy LESS插件用来把less文件编译为css文件。</td></tr><tr><td>cssrem</td><td>px 转换 rem</td></tr><tr><td>px2vw</td><td>px 转换 vw</td></tr><tr><td>Vetur</td><td>Vue 语法高亮、智能感知、Emmet等</td></tr><tr><td>Open in External App</td><td>使用指定 App 打开文件</td></tr><tr><td>vue-helper</td><td>增强了对Element-UI、VUX、iView编写VUE和扩展的能力</td></tr></tbody></table></div><h3 id="Code-Runner-配置"><a href="#Code-Runner-配置" class="headerlink" title="Code Runner 配置"></a>Code Runner 配置</h3><ul><li>[ ] 运行 Node 代码相对路径问题【未解决】</li></ul><h3 id="Easy-LESS-插件配置"><a href="#Easy-LESS-插件配置" class="headerlink" title="Easy LESS 插件配置"></a>Easy LESS 插件配置</h3><blockquote><p>默认 Easy LESS 插件导出的 css 文件和 less 文件是在同一级目录下的，可以自定义配置 css 文件的导出路径。</p></blockquote><ol><li>在 Easy LESS 插件中点击拓展设置</li><li>进入 settings.json 文件，配置以下内容：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;less.compile&quot;: &#123;</span><br><span class="line"><span class="addition">+    &quot;out&quot;: &quot;../css/&quot; # 设置 css 导出路径</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="cssrem-插件配置"><a href="#cssrem-插件配置" class="headerlink" title="cssrem  插件配置"></a>cssrem  插件配置</h3><p>设置 cssrem  插件的 Root Font Size (默认为16px)</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220725153139.png" alt="20220725153139"></p><h3 id="px2vw-插件配置"><a href="#px2vw-插件配置" class="headerlink" title="px2vw 插件配置"></a>px2vw 插件配置</h3><p>修改 px2vw 插件默认视口宽度：在拓展设置中直接自定义宽度</p><p><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220711023233.png" alt="20220711023233"></p><h2 id="Vs-插件快捷键"><a href="#Vs-插件快捷键" class="headerlink" title="Vs-插件快捷键"></a>Vs-插件快捷键</h2><div class="table-container"><table><thead><tr><th>插件</th><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Code Runner</td><td>Ctrl + Alt + N</td><td>运行代码</td></tr><tr><td>Markdown All in One</td><td>Ctrl + Shift + V</td><td>一边书写一边预览</td></tr><tr><td>Markdown All in One</td><td>Alt + Shift + F</td><td>格式化table</td></tr><tr><td>PicGo</td><td>Ctrl + Alt + u</td><td>Uploading an image from clipboard</td></tr><tr><td>PicGo</td><td>Ctrl + Alt + e</td><td>Uploading images from explorer</td></tr><tr><td>PicGo</td><td>Ctrl + Alt + o</td><td>Uploading an image from input box</td></tr><tr><td>Live Server</td><td>Alt + l + o</td><td>开启本地开发服务器。</td></tr><tr><td>open in browser</td><td>Alt + b</td><td>用默认浏览器打开html文件</td></tr></tbody></table></div><h1 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h1><h2 id="KMS-激活"><a href="#KMS-激活" class="headerlink" title="KMS 激活"></a>KMS 激活</h2><p>Windows10家庭中文版 KMS 激活：</p><p>管理员命令行输入：</p><ol><li>slmgr.vbs /upk</li><li>slmgr /ipk PVMJN-6DFY6-9CCP6-7BKTT-D3WVR</li><li>slmgr /skms kms.03k.org</li><li>slmgr /ato</li></ol><p>Windows11专业版 KMS 激活：</p><p>管理员命令行输入：</p><ol><li>slmgr.vbs /upk</li><li>slmgr -ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</li><li>slmgr -skms kms.0t.net.cn</li><li>slmgr -ato</li></ol><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><div class="table-container"><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>tree /f /a &gt; tree.txt</td><td>生成目标文件夹树状图到目标文件夹tree.txt文件</td></tr><tr><td>ssh-keygen -t rsa -C “your_email@example.com”</td><td>生成新的ssh key</td></tr><tr><td>ssh -T git@github.com</td><td>测试ssh是否绑定成功</td></tr></tbody></table></div><h2 id="Windows-系统快捷键"><a href="#Windows-系统快捷键" class="headerlink" title="Windows 系统快捷键"></a>Windows 系统快捷键</h2><div class="table-container"><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Shift + Space</td><td>全 / 半角切换</td></tr><tr><td>Ctrl + W</td><td>关闭当前页面/文件夹</td></tr><tr><td>Alt + F4</td><td>关闭当前所有页面</td></tr><tr><td>win + v</td><td>打开剪贴板</td></tr><tr><td>ctrl + shift + f</td><td>设置简体/繁体</td></tr><tr><td>win + shift + s</td><td>截屏</td></tr><tr><td>右键 + Shift + D</td><td>彻底删除该文件，不经过回收站</td></tr><tr><td>计算机管理 —&gt; 存储 —&gt; 磁盘管理 —&gt;压缩卷</td><td>分盘</td></tr></tbody></table></div><h2 id="Windows-软件快捷键"><a href="#Windows-软件快捷键" class="headerlink" title="Windows 软件快捷键"></a>Windows 软件快捷键</h2><div class="table-container"><table><thead><tr><th>软件</th><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>uToos</td><td>alt + shift + 1</td><td>讯飞 ocr</td></tr><tr><td>uToos</td><td>alt + shift + 2</td><td>聚合翻译</td></tr><tr><td>uToos</td><td>alt + shift + 3</td><td>快贴</td></tr><tr><td>uToos</td><td>ctrl + alt + c</td><td>剪贴板</td></tr><tr><td>欧陆词典</td><td>ctrl + alt + x</td><td>显示隐藏查询主面板</td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 手册 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>butterfly 主题外挂标签</title>
      <link href="/2022/04/272022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Hexo_butterfly%20%E4%B8%BB%E9%A2%98%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/45a94de5/"/>
      <url>/2022/04/272022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Hexo_butterfly%20%E4%B8%BB%E9%A2%98%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE/45a94de5/</url>
      
        <content type="html"><![CDATA[<blockquote><p>标签外挂是 Hexo 独有的功能，并不是标准的 Markdown 格式，以下的写法，只适用于 Butterfly 主题。</p></blockquote><h1 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [[no-icon]/[icon]] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>用法</th><th>参数</th></tr></thead><tbody><tr><td>class</td><td>【可选】标识，不同的标识有不同的配色</td><td>default / primary / success / info / warning / danger</td></tr><tr><td>no-icon / icon</td><td>【可选】不显示 icon</td><td>可配置自定义 icon ,支持 fontawesome 图标</td></tr><tr><td>style</td><td>【可选】可以覆盖配置中的 style</td><td>simple/modern/flat/disabled</td></tr></tbody></table></div><h2 id="内置-icon"><a href="#内置-icon" class="headerlink" title="内置 icon"></a>内置 icon</h2><div class="note simple"><p>默认 提示块标籤</p></div><div class="note primary no-icon flat"><p>默认 提示块标籤</p></div><div class="note primary modern"><p>primary 提示块标籤</p></div><div class="note warning flat"><p>warning 提示块标籤</p></div><div class="note danger disabled"><p>danger 提示块标籤</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">默认 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标籤</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义-icon"><a href="#自定义-icon" class="headerlink" title="自定义 icon"></a>自定义 icon</h2><div class="note icon simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><h1 id="Gallery"><a href="#Gallery" class="headerlink" title="Gallery"></a>Gallery</h1><h2 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>用法</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>连接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面的地址</td></tr></tbody></table></div><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>关于OH MY GIRL的图片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;关于OH MY GIRL的图片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br></pre></td></tr></table></figure>## Gallery相册> Gallery相册会自动根据图片长度（大小）进行排版，与markdown格式一样,可根据需要插入到相应的md。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt=""></p>          </div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure># tag-hide 内容隐藏> tag-hide内的标签外挂content内都不建议有h1 - h6 等标题,可能会导致Toc的滚动出现异常。## inline> inline 在文本里面添加按钮隐藏内容，只限文字<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure>| 属性    | 参数                    || ------- | ----------------------- || content | 文本内容                || display | 【可选】按钮显示的文字  || bg      | 【可选】 按钮的背景颜色 || color   | 【可选】 按钮文字的颜色 |哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #00c4b6;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span></span><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#00c4b6,#fff %&#125;</span><br></pre></td></tr></table></figure>## block> block独立的block隐藏内容，可以隐藏很多内容，包括图片，代码块等等<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 按钮文字 %&#125;</span><br><span class="line">文本，图片，代码块等</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure>| 属性    | 参数                    || ------- | ----------------------- || content | 文本内容                || display | 【可选】按钮显示的文字  || bg      | 【可选】 按钮的背景颜色 || color   | 【可选】 按钮文字的颜色 |<div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>PigPigPig…<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;PigPigPig...&#x27;</span>)</span><br></pre></td></tr></table></figure><br><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""></p></div></div>## Toggle> 如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。（display 不能包含英文逗号，可用&sbquo;）<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle" ><summary class="toggle-button" style="">Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p><p>如果想要安装比较新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p></div></details># mermaid 图表> mermaid文档: https://mermaid-js.github.io/mermaid/#/ > 使用mermaid标籤可以绘製Flowchart（流程图）、Sequence diagram（时序图）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图）<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure>## Flowchart（流程图）<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart TD    Start --&gt; Stop  </pre></div><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  flowchart LR    A[Hard edge] --&gt;|Link text| B(Round edge)    B --&gt; C{Decision}    C --&gt;|One| D[Result one]    C --&gt;|Two| E[Result two]  </pre></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">flowchart TD</span><br><span class="line"><span class="code">    Start --&gt; Stop</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">flowchart LR</span><br><span class="line"><span class="code">    A[Hard edge] --&gt;|Link text| B(Round edge)</span></span><br><span class="line"><span class="code">    B --&gt; C&#123;Decision&#125;</span></span><br><span class="line"><span class="code">    C --&gt;|One| D[Result one]</span></span><br><span class="line"><span class="code">    C --&gt;|Two| E[Result two]</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>## Sequence diagram（时序图）<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram    Alice-&gt;&gt;John: Hello John, how are you?    John--&gt;&gt;Alice: Great!    Alice-)John: See you later!  </pre></div><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  sequenceDiagram    actor Alice    actor Bob    Alice-&gt;&gt;Bob: Hi Bob    Bob-&gt;&gt;Alice: Hi Alice  </pre></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    Alice-&gt;&gt;John: Hello John, how are you?</span></span><br><span class="line"><span class="code">    John--&gt;&gt;Alice: Great!</span></span><br><span class="line"><span class="code">    Alice-)John: See you later!</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">sequenceDiagram</span><br><span class="line"><span class="code">    actor Alice</span></span><br><span class="line"><span class="code">    actor Bob</span></span><br><span class="line"><span class="code">    Alice-&gt;&gt;Bob: Hi Bob</span></span><br><span class="line"><span class="code">    Bob-&gt;&gt;Alice: Hi Alice</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>## Class Diagram（类别图）<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  classDiagram      Animal &lt;|-- Duck      Animal &lt;|-- Fish      Animal &lt;|-- Zebra      Animal : +int age      Animal : +String gender      Animal: +isMammal()      Animal: +mate()      class Duck{          +String beakColor          +swim()          +quack()      }      class Fish{          -int sizeInFeet          -canEat()      }      class Zebra{          +bool is_wild          +run()      }  </pre></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">classDiagram</span><br><span class="line"><span class="code">      Animal &lt;|-- Duck</span></span><br><span class="line"><span class="code">      Animal &lt;|-- Fish</span></span><br><span class="line"><span class="code">      Animal &lt;|-- Zebra</span></span><br><span class="line"><span class="code">      Animal : +int age</span></span><br><span class="line"><span class="code">      Animal : +String gender</span></span><br><span class="line"><span class="code">      Animal: +isMammal()</span></span><br><span class="line"><span class="code">      Animal: +mate()</span></span><br><span class="line"><span class="code">      class Duck&#123;</span></span><br><span class="line"><span class="code">          +String beakColor</span></span><br><span class="line"><span class="code">          +swim()</span></span><br><span class="line"><span class="code">          +quack()</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">      class Fish&#123;</span></span><br><span class="line"><span class="code">          -int sizeInFeet</span></span><br><span class="line"><span class="code">          -canEat()</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">      class Zebra&#123;</span></span><br><span class="line"><span class="code">          +bool is_wild</span></span><br><span class="line"><span class="code">          +run()</span></span><br><span class="line"><span class="code">      &#125;</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>## State Diagram（状态图）<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  stateDiagram-v2    [*] --&gt; Still    Still --&gt; [*]    Still --&gt; Moving    Moving --&gt; Still    Moving --&gt; Crash    Crash --&gt; [*]  </pre></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">stateDiagram-v2</span><br><span class="line"><span class="code">    [*] --&gt; Still</span></span><br><span class="line"><span class="code">    Still --&gt; [*]</span></span><br><span class="line"><span class="code">    Still --&gt; Moving</span></span><br><span class="line"><span class="code">    Moving --&gt; Still</span></span><br><span class="line"><span class="code">    Moving --&gt; Crash</span></span><br><span class="line"><span class="code">    Crash --&gt; [*]</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>## Gantt（甘特图）<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  gantt    title A Gantt Diagram    dateFormat  YYYY-MM-DD    section Section    Task in one           :a1, 2014-01-01, 30d    Another task     :after a1  , 20d    section Another    Task in sec      :2014-01-12  , 12d    Another task      : 24d  </pre></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">gantt</span><br><span class="line"><span class="code">    title A Gantt Diagram</span></span><br><span class="line"><span class="code">    dateFormat  YYYY-MM-DD</span></span><br><span class="line"><span class="code">    section Section</span></span><br><span class="line"><span class="code">    Task in one           :a1, 2014-01-01, 30d</span></span><br><span class="line"><span class="code">    Another task     :after a1  , 20d</span></span><br><span class="line"><span class="code">    section Another</span></span><br><span class="line"><span class="code">    Task in sec      :2014-01-12  , 12d</span></span><br><span class="line"><span class="code">    Another task      : 24d</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure>## Pie Chart（圆形图）<div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure># Tabs<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure># Button<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br></pre></td></tr></table></figure>## 行内<a class="btn-beautify " href="#"   title="#"><span>#</span></a><a class="btn-beautify outline" href="#"   title="#"><span>#</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;#&#x27;,# %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,,outline%&#125;</span><br></pre></td></tr></table></figure>## 固定<a class="btn-beautify block larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify block center larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify block right blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,block larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,block right blue larger %&#125;</span><br></pre></td></tr></table></figure>## 居中多个<div class="btn-center"><a class="btn-beautify larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify blue larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify pink larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify outline purple larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify outline orange larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a><a class="btn-beautify outline green larger" href="#"   title="#"><i class="far fa-hand-point-right"></i><span>#</span></a></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;#&#x27;,#,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="inlineImg-内联图片"><a href="#inlineImg-内联图片" class="headerlink" title="inlineImg 内联图片"></a>inlineImg 内联图片</h1><blockquote><p>主题中的图片都是默认以块级元素显示，如果想以内联元素显示，可以使用这个标签外挂。</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br><span class="line"></span><br><span class="line">[src]      :    图片链接</span><br><span class="line">[height]   ：   【可选】图片高度单位：px</span><br></pre></td></tr></table></figure><p>我后面是一张行内图片：<img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"/></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我后面是一张行内图片：&#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure><h1 id="label-高亮文字"><a href="#label-高亮文字" class="headerlink" title="label 高亮文字"></a>label 高亮文字</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>text</td><td>高亮文字</td></tr><tr><td>color</td><td>【可选】背景颜色，默认为 default<br>default/blue/pink/red/purple/orange/green</td></tr></tbody></table></div><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><h1 id="timeline-时间线"><a href="#timeline-时间线" class="headerlink" title="timeline 时间线"></a>timeline 时间线</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>title</td><td>标题/时间线</td></tr><tr><td>color</td><td>timeline 颜色<br>default(留空) / blue / pink / red / purple / orange / green</td></tr></tbody></table></div><div class="timeline pink"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-30</p></div></div><div class='timeline-item-content'><p>这是测试页面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink%&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 01-30 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><h1 id="flink-链接列表"><a href="#flink-链接列表" class="headerlink" title="flink 链接列表"></a>flink 链接列表</h1><blockquote><p>支持 yml 格式</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Twitter" />              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享">社交分享</div>            </a>          </div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 网站</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 值得推荐的网站</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: Youtube</span></span><br><span class="line"><span class="emphasis">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="emphasis">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="emphasis">      descr: 视频网站</span></span><br><span class="line"><span class="emphasis">    - name: Twitter</span></span><br><span class="line"><span class="emphasis">      link: https://twitter.com/</span></span><br><span class="line"><span class="emphasis">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="emphasis">      descr: 社交分享</span></span><br><span class="line"><span class="emphasis">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2022/04/262022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Markdown_Markdown%E8%AF%AD%E6%B3%95/3c50d03d/"/>
      <url>/2022/04/262022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Markdown_Markdown%E8%AF%AD%E6%B3%95/3c50d03d/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Markdown 是一种轻量级的标记语言，可用于在纯文本文档中添加格式化元素。</p></blockquote><h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>要创建标题，请在单词或短语前面添加井号 (#) 。# 的数量代表了标题的级别。<br>不同的 Markdown 应用程序处理 # 和标题之间的空格方式并不一致。为了兼容考虑，在 # 和标题之间加一个空格进行分隔。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 最多支持 6级标题</span><br><span class="line"># Heading level 1</span><br><span class="line">###### Heading level 6</span><br></pre></td></tr></table></figure></p><h1 id="Markdown-换行语法"><a href="#Markdown-换行语法" class="headerlink" title="Markdown 换行语法"></a>Markdown 换行语法</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 换行可使用&lt;br&gt; 标签</span><br><span class="line">&lt;br&gt;</span><br></pre></td></tr></table></figure><h1 id="Markdown-强调语法"><a href="#Markdown-强调语法" class="headerlink" title="Markdown 强调语法"></a>Markdown 强调语法</h1><ol><li>加粗文本在单词或短语的前后各添加两个星号或下划线</li><li>斜体显示文本，请在单词或短语前后添加一个星号或下划线</li><li>同时用粗体和斜体突出显示文本，请在单词或短语的前后各添加三个星号或下划线。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 加粗</span><br><span class="line">**Blod**</span><br><span class="line">__Blod__</span><br><span class="line"></span><br><span class="line">// 斜体</span><br><span class="line">*Italic*</span><br><span class="line">_Italic_</span><br><span class="line"></span><br><span class="line">// 同时用粗体和斜体突出显示文本</span><br><span class="line">***BlodItalic***</span><br><span class="line">___BlodItalic___</span><br></pre></td></tr></table></figure><h1 id="Markdown-引用语法"><a href="#Markdown-引用语法" class="headerlink" title="Markdown 引用语法"></a>Markdown 引用语法</h1><ol><li>创建块引用，请在段落前添加一个 <code>&gt;</code> 符号</li><li>块引用可以嵌套。在要嵌套的段落前添加一个 <code>&gt;&gt;</code> 符号</li><li>带有其它元素的块引用：块引用可以包含其他 Markdown 格式的元素<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 引用</span><br><span class="line">&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span><br><span class="line">// 嵌套引用</span><br><span class="line">&gt;&gt; Dorothy followed her through many of the beautiful rooms in her castle.</span><br><span class="line">// 带有其它元素的块引用</span><br><span class="line">&gt; - Revenue was off the chart.</span><br><span class="line">&gt;  *Everything* is going according to **plan**.</span><br></pre></td></tr></table></figure><h1 id="Markdown-列表语法"><a href="#Markdown-列表语法" class="headerlink" title="Markdown 列表语法"></a>Markdown 列表语法</h1></li><li>有序列表：在每个列表项前添加数字并紧跟一个英文句点</li><li>无序列表：在每个列表项前面添加破折号 <code>(-)、星号 (*) 或加号 (+)</code></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 有序列表</span><br><span class="line">1. first</span><br><span class="line">2. second</span><br><span class="line">    1. Indented item</span><br><span class="line">3. Third item</span><br><span class="line"></span><br><span class="line">// 无序列表</span><br><span class="line">- Item</span><br><span class="line">* Item</span><br><span class="line">+ Item</span><br><span class="line">    - Indented item</span><br><span class="line">- Item</span><br></pre></td></tr></table></figure><h1 id="Markdown-代码语法"><a href="#Markdown-代码语法" class="headerlink" title="Markdown 代码语法"></a>Markdown 代码语法</h1><ol><li>要将单词或短语表示为代码，请将其包裹在反引号 (`) 中。</li><li>转义反引号：可以通过将单词或短语包裹在双反引号(``)中。</li><li>围栏代码块：在代码块之前和之后的行上使用三个反引号（```）或三个波浪号（~~~）。</li><li>语法高亮：在第一个三个反引号或三个波浪号后面写上<code>对应的编程语言</code>。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 将单词表示为代码</span><br><span class="line">At the command prompt, type `nano`.</span><br><span class="line">// 转义反引号</span><br><span class="line">``Use `code` in your Markdown file.``</span><br></pre></td></tr></table></figure></li></ol><p>// 代码语法高亮<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;china!&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h1 id="Markdown-分隔线语法"><a href="#Markdown-分隔线语法" class="headerlink" title="Markdown 分隔线语法"></a>Markdown 分隔线语法</h1><p>创建分隔线，请在单独一行上使用三个或多个星号 (<em>*</em>)、破折号 (—-) 或下划线 (<em>_</em>) ，并且不能包含其他内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 分隔线</span><br><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure><h1 id="Markdown-链接语法"><a href="#Markdown-链接语法" class="headerlink" title="Markdown 链接语法"></a>Markdown 链接语法</h1><ol><li>链接文本放在中括号内，链接地址放在后面的括号中，链接title可选</li><li>网址和Email地址：使用<code>尖括号</code>可以很方便地把URL或者email地址变成可点击的链接<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 链接写法</span><br><span class="line">[超链接显示名](超链接地址 &quot;超链接title&quot;)</span><br><span class="line">// 网址和Email地址</span><br><span class="line">&lt;https://markdown.com.cn&gt;</span><br><span class="line">&lt;fake@example.com&gt;</span><br></pre></td></tr></table></figure></li></ol><h1 id="Markdown-图片语法"><a href="#Markdown-图片语法" class="headerlink" title="Markdown 图片语法"></a>Markdown 图片语法</h1><ol><li>添加图像，请使用感叹号 (!), 然后在方括号增加替代文本，图片链接放在圆括号里，括号里的链接后可以增加一个可选的图片标题文本</li><li>链接图片：给图片增加链接，将图像的Markdown 括在方括号中，然后将链接添加在圆括号中<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 普通图片</span><br><span class="line">![图片alt](图片链接 &quot;图片title&quot;)</span><br><span class="line">// 链接图片</span><br><span class="line">[![图片alt](图片链接 &quot;图片title&quot;)](https://example.com)</span><br></pre></td></tr></table></figure><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1></li><li>基础表格：使用三个或多个连字符（—-）创建每列的标题，并使用管道（|）分隔每列。</li><li>表格对齐：在标题行中的连字符的左侧，右侧或两侧添加冒号（:），将列中的文本对齐到左侧，右侧或中心。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 基础表格</span><br><span class="line">| Syntax    | Description |</span><br><span class="line">| --------- | ----------- |</span><br><span class="line">| Header    | Title       |</span><br><span class="line">| Paragraph | Text        |</span><br><span class="line"></span><br><span class="line">// 对齐</span><br><span class="line">| Syntax | Description |   Test Text |</span><br><span class="line">| :----- | :---------: | ----------: |</span><br><span class="line">| Header |    Title    | Here&#x27;s this |</span><br><span class="line">| left   |   middle    |       right |</span><br></pre></td></tr></table></figure><h1 id="Markdown-脚注"><a href="#Markdown-脚注" class="headerlink" title="Markdown 脚注"></a>Markdown 脚注</h1><p>在方括号（<sup><a href="#fn_1" id="reffn_1">1</a></sup>）内添加插入符号和标识符。标识符可以是数字或单词，但不能包含空格或制表符。<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 脚注</span><br><span class="line">[^1]: This is the first footnote.</span><br></pre></td></tr></table></figure></p><h1 id="Markdown-定义列表"><a href="#Markdown-定义列表" class="headerlink" title="Markdown 定义列表"></a>Markdown 定义列表</h1><p>第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Term</span><br><span class="line">: This is the definition of the first term.</span><br></pre></td></tr></table></figure><h1 id="Markdown-删除线"><a href="#Markdown-删除线" class="headerlink" title="Markdown 删除线"></a>Markdown 删除线</h1><p>删除单词，在单词前后使用两个波浪号<code>~~</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 删除线</span><br><span class="line">~~Deleted~~ not deleted</span><br></pre></td></tr></table></figure><h1 id="Markdown-任务列表语法"><a href="#Markdown-任务列表语法" class="headerlink" title="Markdown 任务列表语法"></a>Markdown 任务列表语法</h1><p>在任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 任务列表</span><br><span class="line">- [x] Write the press release</span><br><span class="line">- [ ] Update the website</span><br></pre></td></tr></table></figure><h1 id="Markdown-使用-Emoji-表情"><a href="#Markdown-使用-Emoji-表情" class="headerlink" title="Markdown 使用 Emoji 表情"></a>Markdown 使用 Emoji 表情</h1><p>符号简码：以冒号开头和结尾，并包含表情符号的名称</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">去露营了！ :tent: 很快回来。</span><br><span class="line">真好笑！ :joy:</span><br></pre></td></tr></table></figure><h1 id="Markdown-数学公式【KaTeX】"><a href="#Markdown-数学公式【KaTeX】" class="headerlink" title="Markdown 数学公式【KaTeX】"></a>Markdown 数学公式【KaTeX】</h1><p><a href="https://demo.wiris.com/mathtype/en/developers.php#mathml-latex">可视化公式编辑器</a></p><p>MathType: 可视化公式编辑器 APP</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Markdown </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Github + Hexo 搭建个人博客</title>
      <link href="/2022/04/252022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Hexo_Github-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/587b4c9b/"/>
      <url>/2022/04/252022%20%E5%BD%92%E6%A1%A3/%E5%B7%A5%E5%85%B7/%E5%B7%A5%E5%85%B7_Hexo_Github-Hexo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/587b4c9b/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="基本环境"><a href="#基本环境" class="headerlink" title="基本环境"></a>基本环境</h2><ol><li>NodeJS</li><li>Git</li><li>Hexo 框架</li></ol><h2 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h2><ol><li>格式必须为：<code>&lt;用户名&gt;.github.io</code>，然后点击 Create repository</li><li>生成 SSHKeys<ol><li>检查SSH keys是否存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al ~/.ssh</span><br><span class="line"><span class="comment"># Lists the files in your .ssh directory, if they exist</span></span><br></pre></td></tr></table></figure></li><li>生成新的ssh key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;your_email@example.com&quot;</span></span><br><span class="line"><span class="comment">#生成完成后在 C:\Users\用户名\.ssh 目录下</span></span><br></pre></td></tr></table></figure></li><li>将ssh key添加到GitHub中<ol><li>文本编辑器打开<code>id_rsa.pub</code>文件复制内容</li><li>Github —&gt; Settings —&gt; SH and GPG keys —&gt; New SSH key (<strong>Title 随意取</strong>，将内容粘贴到 Key文本框) —&gt; Add SSH key</li></ol></li><li>测试ssh是否绑定成功：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h2 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h2></li></ol></li><li>安装Hexo（如已安装可跳过此步骤）<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">``2. 初始化</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure></li><li>初始化完成之后，打开 <code>_config.yml</code> 文件，添加以下配置信息<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/HaloBoys/HaloBoys.github.io.git</span></span><br><span class="line">  <span class="comment"># github 更新之后仓库默认分支为 main</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li>打开本地博客目录安装<code>hexo-deployer-git</code>自动部署发布工具<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>本地编写完博客之后输入命令：<code>hexo g</code> 将md 文件转换为html文件<br>然后输入命令：<code>hexo d</code> 部署页面到远程仓库，会弹出提示框要求填写<strong>用户名和 token 令牌</strong><br>Token 令牌获取路径：<strong>Settings —&gt; Developer settings —&gt; Personal access tokens —&gt; Generate new token</strong>  </li></ol><h1 id="Hexo-主题-Butterfly"><a href="#Hexo-主题-Butterfly" class="headerlink" title="Hexo 主题 (Butterfly)"></a>Hexo 主题 (Butterfly)</h1><blockquote><p><a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a> [butterfly官方文档]</p></blockquote><h2 id="功能配置"><a href="#功能配置" class="headerlink" title="功能配置"></a>功能配置</h2><h3 id="评论功能："><a href="#评论功能：" class="headerlink" title="评论功能："></a>评论功能：</h3><h4 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h4><p><a href="https://github.com/gitalk/gitalk">Gitalk</a> 是一个基于 GitHub Issue 和 Preact 开发的评论插件。</p><ol><li>在github上创建一个仓库，Gitalk会把评论放在这个仓库的issues里面。<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220510184112.png" alt="20220510184112"></li><li>在github上申请一个GitHub OAuth application，来让Gitalk有权限操作github上的仓库。详情<a href="https://docs.github.com/cn/developers/apps/getting-started-with-apps/about-apps#about-oauth-apps">GitHub 应用文档</a></li></ol><ul><li>打开github网站登陆后，点击右上角Settings —&gt; Developer settings —&gt; OAuth Apps —&gt; New OAuth App<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220510184615.png" alt="20220510184615"></li></ul><div class="table-container"><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>Application name</td><td>【必填】OAuth的名字</td></tr><tr><td>Homepage URL</td><td>【必填】应用的网址，哪个网站用了Gitalk组件，就填写这个网址</td></tr><tr><td>Application description</td><td>【选填】该OAuth的说明</td></tr><tr><td>Authorization callback URL</td><td>【必填】授权成功后回调网址，跟Homepage URL参数保持一致就好</td></tr></tbody></table></div><ul><li>注册成功后会自动跳转到这个OAuth应用的页面，或在Developer settings —&gt; OAuth Apps后就能看见你创建的OAuth应用名字，新创建的OAuth应用里面的<code>Client ID</code>和<code>Client Secret</code>就是我们需要的参数。<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220510185258.png" alt="20220510185258"></li><li>进入主题Hexo 主题配置文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitalk</span></span><br><span class="line"><span class="comment"># https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span> </span><br><span class="line">  <span class="attr">client_id:</span> </span><br><span class="line">  <span class="attr">client_secret:</span> </span><br><span class="line">  <span class="attr">repo:</span> </span><br><span class="line">  <span class="comment"># 仓库的创建者</span></span><br><span class="line">  <span class="attr">owner:</span> </span><br><span class="line">  <span class="comment"># 如果仓库有多个人可以操作，那么在这里以数组形式写出</span></span><br><span class="line">  <span class="attr">admin:</span></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure><h4 id="Twikoo"><a href="#Twikoo" class="headerlink" title="Twikoo"></a>Twikoo</h4><a href="https://twikoo.js.org/quick-start.html#%E7%8E%AF%E5%A2%83%E5%88%9D%E5%A7%8B%E5%8C%96">Twikoo</a> 是一个简洁、安全、无后端的静态网站评论系统，基于腾讯云开发。</li></ul><h3 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h3><h4 id="Chatra"><a href="#Chatra" class="headerlink" title="Chatra"></a>Chatra</h4><ol><li><a href="https://chatra.com/cn/">https://chatra.com/cn/</a> [chatra] 直接注册账号，然后在这里将key 复制到主题_config配置文件中<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202204271621186.png" alt="image-20220427162100013"></li><li>修改主题_config配置文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># chatra</span><br><span class="line"># https://chatra.io/</span><br><span class="line">chatra:</span><br><span class="line">  enable: true</span><br><span class="line">  id:  xxxxxxx // Public key</span><br></pre></td></tr></table></figure></li><li>Chatra 手机/电脑 App 下载<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/202204271638696.png" alt="image-20220427162608710"></li></ol><h3 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h3><ol><li><a href="https://github.com/overtrue/share.js/">https://github.com/overtrue/share.js/</a>  [Share.js]</li><li><a href="https://www.addtoany.com/">https://www.addtoany.com/</a>  [一个第三方分享服务] </li><li><a href="https://www.addthis.com/">https://www.addthis.com/</a> [一个第三方分享服务]</li></ol><h3 id="网站搜索系统"><a href="#网站搜索系统" class="headerlink" title="网站搜索系统"></a>网站搜索系统</h3><ol><li><a href="https://github.com/thom4parisot/hexo-algolia">https://github.com/thom4parisot/hexo-algolia</a></li><li>localsearch</li><li>安装 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a>，根据官方文档去做相应配置</li><li>修改主题配置文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">CDN:</span></span><br></pre></td></tr></table></figure></li></ol><div class="table-container"><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>enable</td><td>是否开启本地搜索</td></tr><tr><td>preload</td><td>预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件</td></tr><tr><td>CDN</td><td>搜索文件的 CDN 地址（默认使用的本地链接）</td></tr></tbody></table></div><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><p>开源地址 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">https://github.com/D0n9X1n/hexo-blog-encrypt</a></p><ol><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure></li><li>快速使用：将 <code>&quot;password&quot;</code> 字段添加到您文章信息头就像这样<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hello World</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line"><span class="section">password: hello</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>再使用 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 在本地预览加密的文章.</li></ol><p>对博文禁用 Tag 加密</p><p>只需要将博文头部的 password 设置为 “” 即可取消 Tag 加密.<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Callback Test</span><br><span class="line">date: 2019-12-21 11:54:07</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">    -</span> A Tag should be encrypted</span><br><span class="line"><span class="section">password: &quot;&quot;</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line">Use a &quot;&quot; to diable tag encryption.</span><br></pre></td></tr></table></figure></p><h3 id="swiper-置顶文章"><a href="#swiper-置顶文章" class="headerlink" title="swiper 置顶文章"></a>swiper 置顶文章</h3><blockquote><p>参考：<a href="https://akilar.top/posts/8e1264d1/">https://akilar.top/posts/8e1264d1/</a></p></blockquote><ol><li>安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-swiper --save</span><br></pre></td></tr></table></figure></li><li>在站点配置文件_config.yml 或者主题配置文件_config.butterfly.yml 中添加<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hexo-butterfly-swiper</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/8e1264d1/</span></span><br><span class="line"><span class="attr">swiper:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">timemode:</span> <span class="string">date</span> <span class="comment">#date/updated</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">id</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">recent-posts</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">default_descr:</span> <span class="string">再怎么看我也不知道怎么描述它的啦！</span></span><br><span class="line">  <span class="attr">swiper_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css</span> <span class="comment">#swiper css依赖</span></span><br><span class="line">  <span class="attr">swiper_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js</span> <span class="comment">#swiper js依赖</span></span><br><span class="line">  <span class="attr">custom_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiperstyle.css</span> <span class="comment"># 适配主题样式补丁</span></span><br><span class="line">  <span class="attr">custom_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper_init.js</span> <span class="comment"># swiper初始化方法</span></span><br></pre></td></tr></table></figure></li><li>在文章的 front_matter 中添加 swiper_index 配置项即可。<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 创建日期</span><br><span class="line">updated: 更新日期</span><br><span class="line">cover: 文章封面</span><br><span class="line">description: 文章描述</span><br><span class="line"><span class="section">swiper<span class="emphasis">_index: 1 #置顶轮播图顺序，非负整数，数字越大越靠前</span></span></span><br><span class="line"><span class="emphasis"><span class="section">---</span></span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Math-数学"><a href="#Math-数学" class="headerlink" title="Math 数学"></a>Math 数学</h3><p>參考： <a href="https://butterfly.js.org/posts/ceeb73f/#Math-%E6%95%B8%E5%AD%B8">https://butterfly.js.org/posts/ceeb73f/#Math-%E6%95%B8%E5%AD%B8</a> 并采用 katex 数学公式方案</p><p><a href="https://katex.org/docs/options.html">https://katex.org/docs/options.html</a></p><h2 id="效果设置"><a href="#效果设置" class="headerlink" title="效果设置"></a>效果设置</h2><h3 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h3><ol><li>在 themes\Butterfly\source\css 文件夹新建 scrollbar.css 文件，文件内容如下：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 滚动条 */</span></span><br><span class="line">::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-track &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">73</span>, <span class="number">177</span>, <span class="number">245</span>, <span class="number">0.2</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(</span><br><span class="line"><span class="number">45deg</span>,</span><br><span class="line"><span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">25%</span>,</span><br><span class="line">transparent <span class="number">25%</span>,</span><br><span class="line">transparent <span class="number">50%</span>,</span><br><span class="line"><span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">50%</span>,</span><br><span class="line"><span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.4</span>) <span class="number">75%</span>,</span><br><span class="line">transparent <span class="number">75%</span>,</span><br><span class="line">transparent</span><br><span class="line">  ) <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-webkit-scrollbar-corner &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: transparent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">::-moz-selection &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#49b1f5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> ::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1f1f1f</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编辑 _config.butterfly.yml 文件，在 inject-&gt;head 下面添加如下内容：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/scrollbar.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="公告canvas小人"><a href="#公告canvas小人" class="headerlink" title="公告canvas小人"></a>公告canvas小人</h3><blockquote><p>在 Butterfly/layout/includes/widget/card_announcement.pug 下添加如下代码：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">   .<span class="title function_">xpand</span>(style=<span class="string">&#x27;height:200px;&#x27;</span>)</span><br><span class="line">canvas.<span class="title function_">illo</span>(width=<span class="string">&#x27;800&#x27;</span> height=<span class="string">&#x27;800&#x27;</span> style=<span class="string">&#x27;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&#x27;</span>)</span><br><span class="line"><span class="title function_">script</span>(src=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople1.js&#x27;</span>)</span><br><span class="line"><span class="title function_">script</span>(src=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/zdog.dist.js&#x27;</span>)</span><br><span class="line">script#rendered-<span class="title function_">js</span>(src=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople.js&#x27;</span>)</span><br><span class="line">style.</span><br><span class="line">.<span class="property">card</span>-widget.<span class="property">card</span>-announcement &#123;</span><br><span class="line"><span class="attr">margin</span>: <span class="number">0</span>;</span><br><span class="line">align-<span class="attr">items</span>: center;</span><br><span class="line">justify-<span class="attr">content</span>: center;</span><br><span class="line">text-<span class="attr">align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line">canvas &#123;</span><br><span class="line"><span class="attr">display</span>: block;</span><br><span class="line"><span class="attr">margin</span>: <span class="number">0</span> auto;</span><br><span class="line"><span class="attr">cursor</span>: move;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="星空背景和流星特效"><a href="#星空背景和流星特效" class="headerlink" title="星空背景和流星特效"></a>星空背景和流星特效</h3><ol><li>在 [Blogroot]\themes\source\js\ 目录下新建 universe.js 输入：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">dark</span>(<span class="params"></span>) &#123;<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>=<span class="variable language_">window</span>.<span class="property">requestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">mozRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">webkitRequestAnimationFrame</span>||<span class="variable language_">window</span>.<span class="property">msRequestAnimationFrame</span>;<span class="keyword">var</span> n,e,i,h,t=<span class="number">.05</span>,s=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;universe&quot;</span>),o=!<span class="number">0</span>,a=<span class="string">&quot;180,184,240&quot;</span>,r=<span class="string">&quot;226,225,142&quot;</span>,d=<span class="string">&quot;226,225,224&quot;</span>,c=[];<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;n=<span class="variable language_">window</span>.<span class="property">innerWidth</span>,e=<span class="variable language_">window</span>.<span class="property">innerHeight</span>,i=<span class="number">.216</span>*n,s.<span class="title function_">setAttribute</span>(<span class="string">&quot;width&quot;</span>,n),s.<span class="title function_">setAttribute</span>(<span class="string">&quot;height&quot;</span>,e)&#125;<span class="keyword">function</span> <span class="title function_">u</span>(<span class="params"></span>)&#123;h.<span class="title function_">clearRect</span>(<span class="number">0</span>,<span class="number">0</span>,n,e);<span class="keyword">for</span>(<span class="keyword">var</span> t=c.<span class="property">length</span>,i=<span class="number">0</span>;i&lt;t;i++)&#123;<span class="keyword">var</span> s=c[i];s.<span class="title function_">move</span>(),s.<span class="title function_">fadeIn</span>(),s.<span class="title function_">fadeOut</span>(),s.<span class="title function_">draw</span>()&#125;&#125;<span class="keyword">function</span> <span class="title function_">y</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">reset</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">giant</span>=<span class="title function_">m</span>(<span class="number">3</span>),<span class="variable language_">this</span>.<span class="property">comet</span>=!<span class="variable language_">this</span>.<span class="property">giant</span>&amp;&amp;!o&amp;&amp;<span class="title function_">m</span>(<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">x</span>=<span class="title function_">l</span>(<span class="number">0</span>,n-<span class="number">10</span>),<span class="variable language_">this</span>.<span class="property">y</span>=<span class="title function_">l</span>(<span class="number">0</span>,e),<span class="variable language_">this</span>.<span class="property">r</span>=<span class="title function_">l</span>(<span class="number">1.1</span>,<span class="number">2.6</span>),<span class="variable language_">this</span>.<span class="property">dx</span>=<span class="title function_">l</span>(t,<span class="number">6</span>*t)+(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>)+<span class="number">2</span>*t,<span class="variable language_">this</span>.<span class="property">dy</span>=-<span class="title function_">l</span>(t,<span class="number">6</span>*t)-(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)*t*<span class="title function_">l</span>(<span class="number">50</span>,<span class="number">120</span>),<span class="variable language_">this</span>.<span class="property">fadingOut</span>=<span class="literal">null</span>,<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacity</span>=<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">opacityTresh</span>=<span class="title function_">l</span>(<span class="number">.2</span>,<span class="number">1</span>-<span class="number">.4</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)),<span class="variable language_">this</span>.<span class="property">do</span>=<span class="title function_">l</span>(<span class="number">5e-4</span>,<span class="number">.002</span>)+<span class="number">.001</span>*(<span class="variable language_">this</span>.<span class="property">comet</span>+<span class="number">1</span>-<span class="number">1</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeIn</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingIn</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingIn</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&gt;<span class="variable language_">this</span>.<span class="property">opacityTresh</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>+=<span class="variable language_">this</span>.<span class="property">do</span>)&#125;,<span class="variable language_">this</span>.<span class="property">fadeOut</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!(<span class="variable language_">this</span>.<span class="property">opacity</span>&lt;<span class="number">0</span>),<span class="variable language_">this</span>.<span class="property">opacity</span>-=<span class="variable language_">this</span>.<span class="property">do</span>/<span class="number">2</span>,(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">1</span>,<span class="variable language_">this</span>.<span class="title function_">reset</span>()))&#125;,<span class="variable language_">this</span>.<span class="property">draw</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">if</span>(h.<span class="title function_">beginPath</span>(),<span class="variable language_">this</span>.<span class="property">giant</span>)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+a+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">comet</span>)&#123;h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">arc</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="number">1.5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="title class_">Math</span>.<span class="property">PI</span>,!<span class="number">1</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;<span class="number">30</span>;t++)h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+d+<span class="string">&quot;,&quot;</span>+(<span class="variable language_">this</span>.<span class="property">opacity</span>-<span class="variable language_">this</span>.<span class="property">opacity</span>/<span class="number">20</span>*t)+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>-<span class="variable language_">this</span>.<span class="property">dx</span>/<span class="number">4</span>*t,<span class="variable language_">this</span>.<span class="property">y</span>-<span class="variable language_">this</span>.<span class="property">dy</span>/<span class="number">4</span>*t-<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>),h.<span class="title function_">fill</span>()&#125;<span class="keyword">else</span> h.<span class="property">fillStyle</span>=<span class="string">&quot;rgba(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+<span class="variable language_">this</span>.<span class="property">opacity</span>+<span class="string">&quot;)&quot;</span>,h.<span class="title function_">rect</span>(<span class="variable language_">this</span>.<span class="property">x</span>,<span class="variable language_">this</span>.<span class="property">y</span>,<span class="variable language_">this</span>.<span class="property">r</span>,<span class="variable language_">this</span>.<span class="property">r</span>);h.<span class="title function_">closePath</span>(),h.<span class="title function_">fill</span>()&#125;,<span class="variable language_">this</span>.<span class="property">move</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">this</span>.<span class="property">x</span>+=<span class="variable language_">this</span>.<span class="property">dx</span>,<span class="variable language_">this</span>.<span class="property">y</span>+=<span class="variable language_">this</span>.<span class="property">dy</span>,!<span class="number">1</span>===<span class="variable language_">this</span>.<span class="property">fadingOut</span>&amp;&amp;<span class="variable language_">this</span>.<span class="title function_">reset</span>(),(<span class="variable language_">this</span>.<span class="property">x</span>&gt;n-n/<span class="number">4</span>||<span class="variable language_">this</span>.<span class="property">y</span>&lt;<span class="number">0</span>)&amp;&amp;(<span class="variable language_">this</span>.<span class="property">fadingOut</span>=!<span class="number">0</span>)&#125;,<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;o=!<span class="number">1</span>&#125;,<span class="number">50</span>)&#125;<span class="keyword">function</span> <span class="title function_">m</span>(<span class="params">t</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1e3</span>*<span class="title class_">Math</span>.<span class="title function_">random</span>())+<span class="number">1</span>&lt;<span class="number">10</span>*t&#125;<span class="keyword">function</span> <span class="title function_">l</span>(<span class="params">t,i</span>)&#123;<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">random</span>()*(i-t)+t&#125;<span class="title function_">f</span>(),<span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>,f,!<span class="number">1</span>),<span class="keyword">function</span>(<span class="params"></span>)&#123;h=s.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;i;t++)c[t]=<span class="keyword">new</span> y,c[t].<span class="title function_">reset</span>();<span class="title function_">u</span>()&#125;(),<span class="keyword">function</span> <span class="title function_">t</span>(<span class="params"></span>)&#123;<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;html&#x27;</span>)[<span class="number">0</span>].<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>)==<span class="string">&#x27;dark&#x27;</span>&amp;&amp;<span class="title function_">u</span>(),<span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(t)&#125;()&#125;;</span><br><span class="line"><span class="title function_">dark</span>()</span><br></pre></td></tr></table></figure></li><li>在 [Blogroot]\themes\source\css\ 目录下新建 universe.css 输入：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 背景宇宙星光  */</span></span><br><span class="line"><span class="selector-id">#universe</span>&#123;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">position</span>: fixed;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">pointer-events</span>: none;</span><br><span class="line"><span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 [Blogroot]_config.butterfly.yml 的 inject 配置项中 bottom 下填入：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">   bottom:</span><br><span class="line"><span class="addition">+# 星空背景</span></span><br><span class="line"><span class="addition">+    - &lt;canvas id=&quot;universe&quot;&gt;&lt;/canvas&gt;</span></span><br><span class="line"><span class="addition">+    - &lt;script defer src=&quot;[root]/js/universe.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>在 [Blogroot]_config.butterfly.yml 的 inject 配置项中 head 下填入：<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">   head:</span><br><span class="line"><span class="addition">+    # 星空背景</span></span><br><span class="line"><span class="addition">+    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/universe.css&quot;&gt;</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="SAO-UI-风格侧栏卡片"><a href="#SAO-UI-风格侧栏卡片" class="headerlink" title="SAO UI 风格侧栏卡片"></a>SAO UI 风格侧栏卡片</h3><p>实现效果：<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220518204655.png" alt="20220518204655"></p><ol><li>在 [Blogroot]\themes\butterfly\source\css\custom.css 中添加如下内容。<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* SAOUI字体精简包，仅73KB */</span></span><br><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;SAOUI&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;https://npm.elemecdn.com/akilar-candyassets/fonts/SAOUI.ttf&#x27;</span>);</span><br><span class="line">  <span class="attribute">font-display</span>: swap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 应用于除了作者卡片以为的所有侧栏卡片 */</span></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.card-info</span>) &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: visible <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">45px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;SAOUI&#x27;</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">60</span>,<span class="number">60</span>,<span class="number">61</span>,<span class="number">0.7</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 修复一下对侧栏电子钟的覆盖 */</span></span><br><span class="line"><span class="selector-class">.card-widget</span><span class="selector-class">.card-clock</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 定义标题栏的定位方式为绝对定位 */</span></span><br><span class="line"><span class="selector-class">.item-headline</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;SAOUI&#x27;</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">60</span>,<span class="number">60</span>,<span class="number">61</span>,<span class="number">0.7</span>);</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">27px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">65%</span>;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">27px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">7px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 标题栏下各元素的层级，保证它们能显示在伪类之上 */</span></span><br><span class="line"><span class="selector-class">.item-headline</span> <span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">5%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-headline</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-headline</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 梯形伪类 */</span></span><br><span class="line"><span class="selector-class">.item-headline</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">3px</span>; <span class="comment">/*卡片顶部突起上下偏移量*/</span></span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">3px</span>; <span class="comment">/*卡片顶部突起左右偏移量*/</span></span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0</span> solid <span class="number">#fff</span>;</span><br><span class="line">  <span class="comment">/* 关键形变 */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">20px</span>) <span class="built_in">rotateX</span>(<span class="number">3deg</span>);</span><br><span class="line">  <span class="attribute">border-top-right-radius</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-top-left-radius</span>: <span class="number">5px</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 下划线伪类 */</span></span><br><span class="line"><span class="selector-class">.item-headline</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">140%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">160</span>,<span class="number">159</span>,<span class="number">160</span>,<span class="number">0.9</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 针对手机样式的偏移量调整 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">800px</span>) &#123;</span><br><span class="line">  <span class="selector-class">.item-headline</span> &#123;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">8px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 夜间模式色彩适配，此处仅代表糖果屋夜间模式配色 */</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.card-widget</span><span class="selector-pseudo">:not</span>(<span class="selector-class">.card-info</span>) &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.item-headline</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.item-headline</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">0</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-class">.item-headline</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在 [Blogroot]_config.butterfly.yml 中引入<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;/css/custom.css&quot;</span>  <span class="string">media=&quot;defer&quot;</span> <span class="string">onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="昼夜转换动画"><a href="#昼夜转换动画" class="headerlink" title="昼夜转换动画"></a>昼夜转换动画</h3><ol><li>新建 [Blogroot]\themes\butterfly\layout\includes\custom\sun_moon.pug, 这部分其实实质上就是一个 svg 文件，通过 js 操作它的旋转显隐，淡入淡出实现动画效果。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">svg(aria-hidden=&#x27;true&#x27;, style=&#x27;position:absolute; overflow:hidden; width:0; height:0&#x27;)</span><br><span class="line">symbol#icon-sun(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">  path(d=&#x27;M960 512l-128 128v192h-192l-128 128-128-128H192v-192l-128-128 128-128V192h192l128-128 128 128h192v192z&#x27;, fill=&#x27;#FFD878&#x27;, p-id=&#x27;8420&#x27;)</span><br><span class="line">  path(d=&#x27;M736 512a224 224 0 1 0-448 0 224 224 0 1 0 448 0z&#x27;, fill=&#x27;#FFE4A9&#x27;, p-id=&#x27;8421&#x27;)</span><br><span class="line">  path(d=&#x27;M512 109.248L626.752 224H800v173.248L914.752 512 800 626.752V800h-173.248L512 914.752 397.248 800H224v-173.248L109.248 512 224 397.248V224h173.248L512 109.248M512 64l-128 128H192v192l-128 128 128 128v192h192l128 128 128-128h192v-192l128-128-128-128V192h-192l-128-128z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8422&#x27;)</span><br><span class="line">  path(d=&#x27;M512 320c105.888 0 192 86.112 192 192s-86.112 192-192 192-192-86.112-192-192 86.112-192 192-192m0-32a224 224 0 1 0 0 448 224 224 0 0 0 0-448z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8423&#x27;)</span><br><span class="line">symbol#icon-moon(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">  path(d=&#x27;M611.370667 167.082667a445.013333 445.013333 0 0 1-38.4 161.834666 477.824 477.824 0 0 1-244.736 244.394667 445.141333 445.141333 0 0 1-161.109334 38.058667 85.077333 85.077333 0 0 0-65.066666 135.722666A462.08 462.08 0 1 0 747.093333 102.058667a85.077333 85.077333 0 0 0-135.722666 65.024z&#x27;, fill=&#x27;#FFB531&#x27;, p-id=&#x27;11345&#x27;)</span><br><span class="line">  path(d=&#x27;M329.728 274.133333l35.157333-35.157333a21.333333 21.333333 0 1 0-30.165333-30.165333l-35.157333 35.157333-35.114667-35.157333a21.333333 21.333333 0 0 0-30.165333 30.165333l35.114666 35.157333-35.114666 35.157334a21.333333 21.333333 0 1 0 30.165333 30.165333l35.114667-35.157333 35.157333 35.157333a21.333333 21.333333 0 1 0 30.165333-30.165333z&#x27;, fill=&#x27;#030835&#x27;, p-id=&#x27;11346&#x27;)</span><br></pre></td></tr></table></figure></li><li>新建 [Blogroot]\themes\butterfly\source\_layout\sun_moon.styl：<figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line"><span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="attribute">position</span> fixed</span><br><span class="line"><span class="attribute">left</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">right</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">top</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line"><span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line"><span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#feb8b0</span>, <span class="number">#fef9db</span>)</span><br><span class="line"><span class="selector-pseudo">&amp;:before</span></span><br><span class="line">  <span class="attribute">transition</span> <span class="number">2s</span> ease all</span><br><span class="line">  <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#4c3f6d</span>, <span class="number">#6c62bb</span>, <span class="number">#93b1ed</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line"><span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line"><span class="attribute">position</span> fixed</span><br><span class="line"><span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line"><span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line"><span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line"><span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">-webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="attribute">transform-origin</span> center bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">to &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line"><span class="number">0%</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">to &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line"><span class="selector-pseudo">&amp;:after</span></span><br><span class="line">  <span class="attribute">position</span> absolute</span><br><span class="line">  <span class="attribute">left</span> <span class="number">35%</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">40%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">9.375rem</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">9.375rem</span></span><br><span class="line">  <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">  <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#fefefe</span>, <span class="number">#fffbe8</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line"><span class="selector-tag">span</span></span><br><span class="line">  <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line"><span class="selector-tag">a</span></span><br><span class="line">  <span class="attribute">text-decoration</span> none<span class="meta">!important</span></span><br><span class="line"><span class="comment">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span></span><br><span class="line"><span class="selector-class">.icon-V</span></span><br><span class="line"><span class="attribute">padding</span> <span class="number">5px</span></span><br></pre></td></tr></table></figure></li><li>新建 [Blogroot]\themes\butterfly\source\js\sun_moon.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">switchNightMode</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>, <span class="string">&#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span>),</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;DarkMode&#x27;</span>) ? (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;0&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)) : (<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;isDark&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)),</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">transition</span> = <span class="string">&#x27;opacity 3s&#x27;</span>;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="property">style</span>.<span class="property">opacity</span> = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Cuteen_DarkSky&#x27;</span>)[<span class="number">0</span>].<span class="title function_">remove</span>();</span><br><span class="line">        &#125;, <span class="number">1e3</span>);</span><br><span class="line">      &#125;, <span class="number">2e3</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">const</span> nowMode = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-theme&#x27;</span>) === <span class="string">&#x27;dark&#x27;</span> ? <span class="string">&#x27;dark&#x27;</span> : <span class="string">&#x27;light&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (nowMode === <span class="string">&#x27;light&#x27;</span>) &#123;</span><br><span class="line">  <span class="title function_">activateDarkMode</span>()</span><br><span class="line">  saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span> !== <span class="literal">undefined</span> &amp;&amp; btf.<span class="title function_">snackbarShow</span>(<span class="variable constant_">GLOBAL_CONFIG</span>.<span class="property">Snackbar</span>.<span class="property">day_to_night</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-sun&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="title function_">activateLightMode</span>()</span><br><span class="line">  saveToLocal.<span class="title function_">set</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;light&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>).<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;DarkMode&#x27;</span>), <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;modeicon&#x27;</span>).<span class="title function_">setAttribute</span>(<span class="string">&#x27;xlink:href&#x27;</span>, <span class="string">&#x27;#icon-moon&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// handle some cases</span></span><br><span class="line"><span class="keyword">typeof</span> utterancesTheme === <span class="string">&#x27;function&#x27;</span> &amp;&amp; <span class="title function_">utterancesTheme</span>()</span><br><span class="line"><span class="keyword">typeof</span> <span class="variable constant_">FB</span> === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="variable language_">window</span>.<span class="title function_">loadFBComment</span>()</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">DISQUS</span> &amp;&amp; <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;disqus_thread&#x27;</span>).<span class="property">children</span>.<span class="property">length</span> &amp;&amp; <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">window</span>.<span class="title function_">disqusReset</span>(), <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改 [Blogroot]\themes\butterfly\layout\includes\head.pug, 在文件末位加上一行：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//- global config</span><br><span class="line">!=partial(&#x27;includes/head/config&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">include ./head/config_site.pug</span><br><span class="line">include ./head/noscript.pug</span><br><span class="line"></span><br><span class="line">!=fragment_cache(&#x27;injectHeadJs&#x27;, function()&#123;return inject_head_js()&#125;)</span><br><span class="line"></span><br><span class="line">!=fragment_cache(&#x27;injectHead&#x27;, function()&#123;return injectHtml(theme.inject.head)&#125;)</span><br><span class="line"></span><br><span class="line">+ include ./custom/sun_moon.pug</span><br></pre></td></tr></table></figure></li><li>修改 [Blogroot]\themes\butterfly\layout\includes\rightside.pug, 把原本的昼夜切换按钮替换掉：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;translate&#x27;</span><br><span class="line">if translate.enable</span><br><span class="line"> button#translateLink(type=&quot;button&quot; title=_p(&#x27;rightside.translate_title&#x27;))= translate.default</span><br><span class="line">when &#x27;darkmode&#x27;</span><br><span class="line">if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">-     button#darkmode(type=&quot;button&quot; title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">-       i.fas.fa-adjust</span><br><span class="line">+     a.icon-V.hidden(onclick=&#x27;switchNightMode()&#x27;,  title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">+       svg(width=&#x27;25&#x27;, height=&#x27;25&#x27;, viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">+         use#modeicon(xlink:href=&#x27;#icon-moon&#x27;)</span><br></pre></td></tr></table></figure></li><li>修改 [Blogroot]_config.butterfly.yml, 引入一下 js：<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line"><span class="attr">head:</span></span><br><span class="line"><span class="attr">bottome:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;[root]/js/sun_moon.js&quot;</span> <span class="string">async&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="Butterfly-标签文章数上下标"><a href="#Butterfly-标签文章数上下标" class="headerlink" title="Butterfly 标签文章数上下标"></a>Butterfly 标签文章数上下标</h3><blockquote><p>在 Butterfly 主题中，文章标签页和标签侧边栏都有文章标签的词云图，但仅仅用字体大小表示某个标签下的文章数量是不明显的，可以在这个基础上加上表示某个标签下文章数的上下标，其中 <sup> 表示上标，<sub> 表示下标。</p></blockquote><ul><li>在 \themes\butterfly\scripts\helpers\page.js 找到 cloudTags 函数增加 <sup>${tag.length}</sup> 或 <sub>${tag.length}</sub> 可绘制表示标签文章数的上下标。<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">hexo.extend.helper.register(&#x27;cloudTags&#x27;, function (options = &#123;&#125;) &#123;</span><br><span class="line">  const theme = hexo.theme.config</span><br><span class="line">  const env = this</span><br><span class="line">  let source = options.source</span><br><span class="line">  const minfontsize = options.minfontsize</span><br><span class="line">  const maxfontsize = options.maxfontsize</span><br><span class="line">  const limit = options.limit</span><br><span class="line">  const unit = options.unit || &#x27;px&#x27;</span><br><span class="line"></span><br><span class="line">  let result = &#x27;&#x27;</span><br><span class="line">  if (limit &gt; 0) &#123;</span><br><span class="line">    source = source.limit(limit)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  const sizes = []</span><br><span class="line">  source.sort(&#x27;length&#x27;).forEach(tag =&gt; &#123;</span><br><span class="line">    const &#123; length &#125; = tag</span><br><span class="line">    if (sizes.includes(length)) return</span><br><span class="line">    sizes.push(length)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  const length = sizes.length - 1</span><br><span class="line">  source.forEach(tag =&gt; &#123;</span><br><span class="line">    const ratio = length ? sizes.indexOf(tag.length) / length : 0</span><br><span class="line">    const size = minfontsize + ((maxfontsize - minfontsize) * ratio)</span><br><span class="line">    let style = `font-size: $&#123;parseFloat(size.toFixed(2))&#125;$&#123;unit&#125;;`</span><br><span class="line">    const color = &#x27;rgb(&#x27; + Math.floor(Math.random() * 201) + &#x27;, &#x27; + Math.floor(Math.random() * 201) + &#x27;, &#x27; + Math.floor(Math.random() * 201) + &#x27;)&#x27; // 0,0,0 -&gt; 200,200,200</span><br><span class="line">    style += ` color: $&#123;color&#125;`</span><br><span class="line"><span class="deletion">-   result += `&lt;a href=&quot;$&#123;env.url_for(tag.path)&#125;&quot; style=&quot;$&#123;style&#125;&quot;&gt;$&#123;tag.name&#125;&lt;/a&gt;`</span></span><br><span class="line"><span class="addition">+   result += `&lt;a href=&quot;$&#123;env.url_for(tag.path)&#125;&quot; style=&quot;$&#123;style&#125;&quot;&gt;$&#123;tag.name&#125;&lt;sup&gt;$&#123;tag.length&#125;&lt;/sup&gt;&lt;/a&gt;`</span></span><br><span class="line">  &#125;)</span><br><span class="line">  return result</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="Hexo-博客文章统计图"><a href="#Hexo-博客文章统计图" class="headerlink" title="Hexo 博客文章统计图"></a>Hexo 博客文章统计图</h3><blockquote><p>使用的是 ECharts 开源可视化库对博客的文章发布时间、文章分类、文章标签的维度绘制统计图。</p></blockquote><ol><li>新建 charts 页面：<br>在 [Blogroot]\source\ 目录下新建 charts 文件夹，并在新建的 charts 文件夹下新建 index.md 文件，添加以下内容：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 统计图表</span><br><span class="line"><span class="section">date: 2022-05-01 08:00:00</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure></li><li>引入 ECharts.js（echarts.js 必须在渲染 echarts 实例的 JavaScript 前引入）<br>在 [Blogroot]_config.butterfly.yml 的 inject 配置项中引入 echart.js 文件。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/echarts@4.9.0/dist/echarts.min.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li>新建文章统计代码<br>在 [Blogroot]\themes\butterfly\scripts\helpers\ 目录下新建 charts.js 文件，然后添加以下内容：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">&#x27;cheerio&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">filter</span>.<span class="title function_">register</span>(<span class="string">&#x27;after_render:html&#x27;</span>, <span class="keyword">function</span> (<span class="params">locals</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> $ = cheerio.<span class="title function_">load</span>(locals)</span><br><span class="line">  <span class="keyword">const</span> post = $(<span class="string">&#x27;#posts-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> tag = $(<span class="string">&#x27;#tags-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> category = $(<span class="string">&#x27;#categories-chart&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> htmlEncode = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> || tag.<span class="property">length</span> &gt; <span class="number">0</span> || category.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (post.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#postsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (post.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      post.<span class="title function_">after</span>(<span class="title function_">postsChart</span>(post.<span class="title function_">attr</span>(<span class="string">&#x27;data-start&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tag.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#tagsChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      tag.<span class="title function_">after</span>(<span class="title function_">tagsChart</span>(tag.<span class="title function_">attr</span>(<span class="string">&#x27;data-length&#x27;</span>)))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (category.<span class="property">length</span> &gt; <span class="number">0</span> &amp;&amp; $(<span class="string">&#x27;#categoriesChart&#x27;</span>).<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (category.<span class="title function_">attr</span>(<span class="string">&#x27;data-encode&#x27;</span>) === <span class="string">&#x27;true&#x27;</span>) htmlEncode = <span class="literal">true</span></span><br><span class="line">      category.<span class="title function_">after</span>(<span class="title function_">categoriesChart</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (htmlEncode) &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>().<span class="title function_">replace</span>(<span class="regexp">/&amp;amp;#/g</span>, <span class="string">&#x27;&amp;#&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> $.<span class="title function_">root</span>().<span class="title function_">html</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> locals</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">postsChart</span> (startMonth) &#123;</span><br><span class="line">  <span class="keyword">const</span> startDate = <span class="title function_">moment</span>(startMonth || <span class="string">&#x27;2020-01&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> endDate = <span class="title function_">moment</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> monthMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">const</span> dayTime = <span class="number">3600</span> * <span class="number">24</span> * <span class="number">1000</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> time = startDate; time &lt;= endDate; time += dayTime) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = <span class="title function_">moment</span>(time).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;posts&#x27;</span>).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">post</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> month = post.<span class="property">date</span>.<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (monthMap.<span class="title function_">has</span>(month)) &#123;</span><br><span class="line">      monthMap.<span class="title function_">set</span>(month, monthMap.<span class="title function_">get</span>(month) + <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">const</span> monthArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">keys</span>()])</span><br><span class="line">  <span class="keyword">const</span> monthValueArr = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...monthMap.<span class="title function_">values</span>()])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;postsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var postsChart = echarts.init(document.getElementById(&#x27;posts-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var postsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章发布统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;axis&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;日期&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        boundaryGap: false,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthArr&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;line&#x27;,</span></span><br><span class="line"><span class="string">        smooth: true,</span></span><br><span class="line"><span class="string">        lineStyle: &#123;</span></span><br><span class="line"><span class="string">            width: 0</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        showSymbol: false,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        areaStyle: &#123;</span></span><br><span class="line"><span class="string">          opacity: 1,</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;, &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;monthValueArr&#125;</span>,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    postsChart.setOption(postsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      postsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tagsChart</span> (len) &#123;</span><br><span class="line">  <span class="keyword">const</span> tagArr = []</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;tags&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">tag</span>) &#123;</span><br><span class="line">    tagArr.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: tag.<span class="property">name</span>, <span class="attr">value</span>: tag.<span class="property">length</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  tagArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataLength = <span class="title class_">Math</span>.<span class="title function_">min</span>(tagArr.<span class="property">length</span>, len) || tagArr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> tagNameArr = []</span><br><span class="line">  <span class="keyword">const</span> tagCountArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataLength; i++) &#123;</span><br><span class="line">    tagNameArr.<span class="title function_">push</span>(tagArr[i].<span class="property">name</span>)</span><br><span class="line">    tagCountArr.<span class="title function_">push</span>(tagArr[i].<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> tagNameArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagNameArr)</span><br><span class="line">  <span class="keyword">const</span> tagCountArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(tagCountArr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;tagsChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var tagsChart = echarts.init(document.getElementById(&#x27;tags-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var tagsOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;Top <span class="subst">$&#123;dataLength&#125;</span> 标签统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;&#125;,</span></span><br><span class="line"><span class="string">      xAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;标签&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;category&#x27;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagNameArrJson&#125;</span></span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      yAxis: &#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;value&#x27;,</span></span><br><span class="line"><span class="string">        splitLine: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        nameTextStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisTick: &#123;</span></span><br><span class="line"><span class="string">          show: false</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLabel: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        axisLine: &#123;</span></span><br><span class="line"><span class="string">          show: true,</span></span><br><span class="line"><span class="string">          lineStyle: &#123;</span></span><br><span class="line"><span class="string">            color: color</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;bar&#x27;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;tagCountArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          borderRadius: [5, 5, 0, 0],</span></span><br><span class="line"><span class="string">          color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">            offset: 0,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(128, 255, 165)&#x27;</span></span><br><span class="line"><span class="string">          &#125;,</span></span><br><span class="line"><span class="string">          &#123;</span></span><br><span class="line"><span class="string">            offset: 1,</span></span><br><span class="line"><span class="string">            color: &#x27;rgba(1, 191, 236)&#x27;</span></span><br><span class="line"><span class="string">          &#125;])</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        emphasis: &#123;</span></span><br><span class="line"><span class="string">          itemStyle: &#123;</span></span><br><span class="line"><span class="string">            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [&#123;</span></span><br><span class="line"><span class="string">              offset: 0,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(128, 255, 195)&#x27;</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">              offset: 1,</span></span><br><span class="line"><span class="string">              color: &#x27;rgba(1, 211, 255)&#x27;</span></span><br><span class="line"><span class="string">            &#125;])</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        markLine: &#123;</span></span><br><span class="line"><span class="string">          data: [&#123;</span></span><br><span class="line"><span class="string">            name: &#x27;平均值&#x27;,</span></span><br><span class="line"><span class="string">            type: &#x27;average&#x27;,</span></span><br><span class="line"><span class="string">            label: &#123;</span></span><br><span class="line"><span class="string">              color: color</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">          &#125;]</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    tagsChart.setOption(tagsOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      tagsChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    tagsChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      let href = &#x27;/tags/&#x27; + event.name + &#x27;/&#x27;;</span></span><br><span class="line"><span class="string">      window.location.href = href;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">categoriesChart</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> categoryArr = []</span><br><span class="line">  hexo.<span class="property">locals</span>.<span class="title function_">get</span>(<span class="string">&#x27;categories&#x27;</span>).<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">category</span>) &#123;</span><br><span class="line">    categoryArr.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: category.<span class="property">name</span>, <span class="attr">value</span>: category.<span class="property">length</span> &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  categoryArr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">return</span> b.<span class="property">value</span> - a.<span class="property">value</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> categoryArrJson = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(categoryArr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;script id=&quot;categoriesChart&quot;&gt;</span></span><br><span class="line"><span class="string">    var color = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;light&#x27; ? &#x27;#4c4948&#x27; : &#x27;rgba(255,255,255,0.7)&#x27;</span></span><br><span class="line"><span class="string">    var categoriesChart = echarts.init(document.getElementById(&#x27;categories-chart&#x27;), &#x27;light&#x27;);</span></span><br><span class="line"><span class="string">    var categoriesOption = &#123;</span></span><br><span class="line"><span class="string">      title: &#123;</span></span><br><span class="line"><span class="string">        text: &#x27;文章分类统计图&#x27;,</span></span><br><span class="line"><span class="string">        x: &#x27;center&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      legend: &#123;</span></span><br><span class="line"><span class="string">        top: &#x27;bottom&#x27;,</span></span><br><span class="line"><span class="string">        textStyle: &#123;</span></span><br><span class="line"><span class="string">          color: color</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      tooltip: &#123;</span></span><br><span class="line"><span class="string">        trigger: &#x27;item&#x27;,</span></span><br><span class="line"><span class="string">        formatter: &#x27;&#123;a&#125; &lt;br/&gt;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      series: [&#123;</span></span><br><span class="line"><span class="string">        name: &#x27;文章篇数&#x27;,</span></span><br><span class="line"><span class="string">        type: &#x27;pie&#x27;,</span></span><br><span class="line"><span class="string">        radius: [30, 80],</span></span><br><span class="line"><span class="string">        center: [&#x27;50%&#x27;, &#x27;50%&#x27;],</span></span><br><span class="line"><span class="string">        roseType: &#x27;area&#x27;,</span></span><br><span class="line"><span class="string">        label: &#123;</span></span><br><span class="line"><span class="string">          color: color,</span></span><br><span class="line"><span class="string">          formatter: &#x27;&#123;b&#125; : &#123;c&#125; (&#123;d&#125;%)&#x27;</span></span><br><span class="line"><span class="string">        &#125;,</span></span><br><span class="line"><span class="string">        data: <span class="subst">$&#123;categoryArrJson&#125;</span>,</span></span><br><span class="line"><span class="string">        itemStyle: &#123;</span></span><br><span class="line"><span class="string">          emphasis: &#123;</span></span><br><span class="line"><span class="string">            shadowBlur: 10,</span></span><br><span class="line"><span class="string">            shadowOffsetX: 0,</span></span><br><span class="line"><span class="string">            shadowColor: &#x27;rgba(255, 255, 255, 0.5)&#x27;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;]</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">    categoriesChart.setOption(categoriesOption);</span></span><br><span class="line"><span class="string">    window.addEventListener(&#x27;resize&#x27;, () =&gt; &#123; </span></span><br><span class="line"><span class="string">      categoriesChart.resize();</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">    categoriesChart.on(&#x27;click&#x27;, &#x27;series&#x27;, (event) =&gt; &#123;</span></span><br><span class="line"><span class="string">      let href = &#x27;/categories/&#x27; + event.name + &#x27;/&#x27;;</span></span><br><span class="line"><span class="string">      window.location.href = href;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &lt;/script&gt;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用统计图<br>在 [Blogroot]\source\charts\index.md 文件中添加以下内容：<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// posts-chart 的 data-start=&quot;2021-01&quot; 属性表示文章发布时间统计图仅显示 2021-01 及以后的文章数据。</span><br><span class="line">// tags-chart 的 data-length=&quot;10&quot; 属性表示仅显示排名前 10 的标签。</span><br><span class="line"></span><br><span class="line">&lt;!-- 文章发布时间统计图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;posts-chart&quot;</span> <span class="attr">data-start</span>=<span class="string">&quot;2021-01&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- 文章标签统计图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tags-chart&quot;</span> <span class="attr">data-length</span>=<span class="string">&quot;10&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;!-- 文章分类统计图 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;categories-chart&quot;</span> <span class="attr">style</span>=<span class="string">&quot;border-radius: 8px; height: 300px; padding: 10px;&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li>安装 <code>cheerio</code> 插件：在根目录执行：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i cheerio --save</span><br></pre></td></tr></table></figure></li></ol><h3 id="GitHub-贡献度"><a href="#GitHub-贡献度" class="headerlink" title="GitHub 贡献度"></a>GitHub 贡献度</h3><ol><li>安装插件 <a href="https://github.com/Zfour/hexo-github-calendar">hexo-github-calendar</a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-githubcalendar --save</span><br></pre></td></tr></table></figure></li><li>打开 Hexo 的站点配置文件<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubcalendar:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">/</span>  <span class="comment"># 表示只在根目录(首页)显示</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">xxx</span>  <span class="comment"># 替换成你 GitHub 的用户名</span></span><br><span class="line">  <span class="attr">layout_id:</span> <span class="string">recent-posts</span></span><br><span class="line">  <span class="attr">githubcalendar_html:</span> <span class="string">&#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">  <span class="attr">pc_minheight:</span> <span class="string">280px</span></span><br><span class="line">  <span class="attr">mobile_minheight:</span> <span class="string">0px</span></span><br><span class="line">  <span class="comment"># 粉色调</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot;</span></span><br><span class="line">  <span class="comment"># 橘黄色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span></span><br><span class="line">  <span class="comment"># 翠绿色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f0fff4&#x27;, &#x27;#dcffe4&#x27;, &#x27;#bef5cb&#x27;, &#x27;#85e89d&#x27;, &#x27;#34d058&#x27;, &#x27;#28a745&#x27;, &#x27;#22863a&#x27;, &#x27;#176f2c&#x27;, &#x27;#165c26&#x27;, &#x27;#144620&#x27;]&quot;</span></span><br><span class="line">  <span class="comment"># 天青色调</span></span><br><span class="line">  <span class="comment"># color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#f1f8ff&#x27;, &#x27;#dbedff&#x27;, &#x27;#c8e1ff&#x27;, &#x27;#79b8ff&#x27;, &#x27;#2188ff&#x27;, &#x27;#0366d6&#x27;, &#x27;#005cc5&#x27;, &#x27;#044289&#x27;, &#x27;#032f62&#x27;, &#x27;#05264c&#x27;]&quot;</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://python-github-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="comment"># api: https://python-gitee-calendar-api.vercel.app/api</span></span><br><span class="line">  <span class="attr">calendar_js:</span> <span class="string">https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.16/hexo_githubcalendar.js</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="博客透明度设置"><a href="#博客透明度设置" class="headerlink" title="博客透明度设置"></a>博客透明度设置</h3><ol><li>在 [Blogroot]\themes\source\css\ 目录下新建 alpha.css 输入：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文章页背景 */</span></span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.5 可以自行修改*/</span></span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 所有页面背景 */</span></span><br><span class="line"><span class="selector-id">#aside_content</span> <span class="selector-class">.card-widget</span>,</span><br><span class="line"><span class="selector-id">#recent-posts</span>&gt;<span class="selector-class">.recent-post-item</span>,</span><br><span class="line"><span class="selector-class">.layout_page</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">:not</span>(<span class="selector-class">.recent-posts</span>),</span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#page</span>,</span><br><span class="line"><span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span>,</span><br><span class="line"><span class="selector-class">.read-mode</span> <span class="selector-class">.layout_post</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="comment">/* 以下代表透明度为0.5 */</span></span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*侧边栏背景*/</span></span><br><span class="line"><span class="selector-class">.aside-content</span>&gt;<span class="selector-class">.card-widget</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.sticky_layout</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*文章页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#post</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*分类页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#page</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*时间轴页面*/</span></span><br><span class="line"><span class="selector-class">.layout</span>&gt;<span class="selector-id">#archive</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在主题配置文件 inject&gt;head 中引入<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel=&quot;stylesheet&quot;</span> <span class="string">href=&quot;[root]/css/alpha.css&quot;&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="首页页码样式调整"><a href="#首页页码样式调整" class="headerlink" title="首页页码样式调整"></a>首页页码样式调整</h3><p>修改 [Blogroot]\themes\butterfly\source\css_layout\pagination.styl, 将整个文件<strong>替换</strong>成以下内容，不保证魔改普适性，请务必记得做好文件备份方便回退！开头为效果配色，可以自行调整成适合自己的。<br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  <span class="attr">--pagenumber-color</span>: <span class="number">#ffffff</span></span><br><span class="line">  <span class="attr">--pagenumber-current-color</span>: <span class="number">#1E7EE2</span></span><br><span class="line">  <span class="attr">--pagenumber-current-shadow-color</span>: <span class="number">#104477</span></span><br><span class="line">  <span class="attr">--pagenumber-hover-color</span>: <span class="number">#1E7EE2</span></span><br><span class="line">  <span class="attr">--pagenumber-background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.85</span>)</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="attr">--pagenumber-color</span>: <span class="number">#ffffff</span></span><br><span class="line">  <span class="attr">--pagenumber-current-color</span>: <span class="number">#1E7EE2</span></span><br><span class="line">  <span class="attr">--pagenumber-current-shadow-color</span>: <span class="number">#104477</span></span><br><span class="line">  <span class="attr">--pagenumber-hover-color</span>: <span class="number">#1E7EE2</span></span><br><span class="line">  <span class="attr">--pagenumber-background-color</span>: <span class="built_in">rgba</span>(<span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>, <span class="number">0.85</span>)</span><br><span class="line"><span class="selector-id">#pagination</span></span><br><span class="line">  <span class="selector-class">.pagination</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span></span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="selector-tag">a</span></span><br><span class="line">      <span class="attribute">color</span>: <span class="built_in">var</span>(--pagenumber-color)</span><br><span class="line">    <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">      <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">      <span class="attribute">position</span> absolute</span><br><span class="line">      <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">35px</span></span><br><span class="line">      <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">z-index</span> -<span class="number">1</span></span><br><span class="line">      <span class="attribute">background-image</span> <span class="built_in">-moz-linear-gradient</span>(left, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="number">0%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">40%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">50%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">60%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="number">100%</span>)</span><br><span class="line">      <span class="attribute">background-image</span> <span class="built_in">-webkit-linear-gradient</span>(left, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="number">0%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">40%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">50%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">60%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="number">100%</span>)</span><br><span class="line">      <span class="attribute">background-image</span> <span class="built_in">linear-gradient</span>(to right, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="number">0%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">40%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">50%</span>, <span class="built_in">var</span>(--pagenumber-background-color) <span class="number">60%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="number">100%</span>)</span><br><span class="line">  <span class="selector-class">.page-number</span></span><br><span class="line">    &amp;<span class="selector-class">.current</span></span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--pagenumber-current-color)</span><br><span class="line">      <span class="attribute">color</span> <span class="built_in">var</span>(--pagenumber-color)</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">9px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="number">3px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">      <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">20px</span>);</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">7px</span> solid <span class="built_in">var</span>(--pagenumber-current-shadow-color);</span><br><span class="line">        <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">            <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span></span><br><span class="line">  &amp; &gt; <span class="selector-class">.recent-posts</span></span><br><span class="line">    <span class="selector-class">.pagination</span></span><br><span class="line">      &amp; &gt; *</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">6px</span></span><br><span class="line">        <span class="attribute">min-width</span>: <span class="number">30px</span></span><br><span class="line">        <span class="attribute">width</span>: auto</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">35px</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">30px</span></span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">3px</span> <span class="number">0px</span> <span class="number">3px</span>;</span><br><span class="line"></span><br><span class="line">      &amp; &gt; *<span class="selector-pseudo">:not</span>(.space)</span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">var</span>(--pagenumber-hover-color)</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--pagenumber-color)</span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(.recent-posts)</span><br><span class="line">    <span class="selector-class">.pagination</span></span><br><span class="line">      <span class="selector-class">.page-number</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--pagenumber-color);</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">13px</span> <span class="number">5px</span> <span class="number">5px</span>;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--pagenumber-color)</span><br><span class="line">          <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">            <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="attribute">position</span> absolute</span><br><span class="line">            <span class="attribute">width</span> <span class="number">24px</span></span><br><span class="line">            <span class="attribute">height</span> <span class="number">24px</span></span><br><span class="line">            <span class="attribute">background</span> <span class="built_in">var</span>(--pagenumber-hover-color)</span><br><span class="line">            -moz-<span class="attribute">border-radius</span> <span class="number">100%</span></span><br><span class="line">            -webkit-<span class="attribute">border-radius</span> <span class="number">100%</span></span><br><span class="line">            <span class="attribute">border-radius</span> <span class="number">100%</span></span><br><span class="line">            <span class="attribute">z-index</span> -<span class="number">1</span></span><br><span class="line">            <span class="attribute">left</span> -<span class="number">3px</span></span><br><span class="line">            <span class="attribute">bottom</span> <span class="number">4px</span></span><br><span class="line">            <span class="attribute">margin</span> auto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pagination-info</span></span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.prev_info</span>,</span><br><span class="line">  <span class="selector-class">.next_info</span></span><br><span class="line">    <span class="keyword">@extend</span> <span class="selector-class">.limit-one-line</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--white)</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.next-post</span></span><br><span class="line">    <span class="selector-class">.pagination-info</span></span><br><span class="line">      <span class="attribute">text-align</span>: right</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pull-full</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.prev-post</span> <span class="selector-class">.label</span>,</span><br><span class="line">  <span class="selector-class">.next-post</span> <span class="selector-class">.label</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--light-grey)</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.prev-post</span>,</span><br><span class="line">  <span class="selector-class">.next-post</span></span><br><span class="line">    <span class="keyword">@extend</span> <span class="selector-class">.postImgHover</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span></span><br><span class="line"></span><br><span class="line">    +<span class="built_in">maxWidth768</span>()</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span></span><br><span class="line">      <span class="attribute">position</span>: relative</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">150px</span></span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.pagination-post</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40px</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$dark</span>-black</span><br></pre></td></tr></table></figure><br>原文件备份：<br><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#pagination</span></span><br><span class="line">  <span class="selector-class">.pagination</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span></span><br><span class="line">    <span class="attribute">text-align</span>: center</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.page-number</span></span><br><span class="line">    &amp;<span class="selector-class">.current</span></span><br><span class="line">      <span class="attribute">background</span>: <span class="variable">$theme</span>-paginator-color</span><br><span class="line">      <span class="attribute">color</span>: <span class="built_in">var</span>(--white)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pagination-info</span></span><br><span class="line">    <span class="attribute">position</span>: absolute</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>)</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.prev_info</span>,</span><br><span class="line">  <span class="selector-class">.next_info</span></span><br><span class="line">    <span class="keyword">@extend</span> <span class="selector-class">.limit-one-line</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--white)</span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">500</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.next-post</span></span><br><span class="line">    <span class="selector-class">.pagination-info</span></span><br><span class="line">      <span class="attribute">text-align</span>: right</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.pull-full</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.prev-post</span> <span class="selector-class">.label</span>,</span><br><span class="line">  <span class="selector-class">.next-post</span> <span class="selector-class">.label</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--light-grey)</span><br><span class="line">    <span class="attribute">text-transform</span>: uppercase</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">90%</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.prev-post</span>,</span><br><span class="line">  <span class="selector-class">.next-post</span></span><br><span class="line">    <span class="keyword">@extend</span> <span class="selector-class">.postImgHover</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span></span><br><span class="line"></span><br><span class="line">    +<span class="built_in">maxWidth768</span>()</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span></span><br><span class="line">      <span class="attribute">position</span>: relative</span><br><span class="line">      <span class="attribute">display</span>: block</span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">150px</span></span><br><span class="line"></span><br><span class="line">  &amp;<span class="selector-class">.pagination-post</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">40px</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$dark</span>-black</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.layout</span></span><br><span class="line">  &amp; &gt; <span class="selector-class">.recent-posts</span></span><br><span class="line">    <span class="selector-class">.pagination</span></span><br><span class="line">      &amp; &gt; *</span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">6px</span></span><br><span class="line">        <span class="attribute">width</span>: w = <span class="number">2.5em</span></span><br><span class="line">        <span class="attribute">height</span>: w</span><br><span class="line">        <span class="attribute">line-height</span>: w</span><br><span class="line"></span><br><span class="line">      &amp; &gt; *<span class="selector-pseudo">:not</span>(.space)</span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.cardHover</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">background</span>: <span class="built_in">var</span>(--btn-hover-color)</span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--btn-color)</span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:not</span>(.recent-posts)</span><br><span class="line">    <span class="selector-class">.pagination</span></span><br><span class="line">      <span class="selector-class">.page-number</span></span><br><span class="line">        <span class="attribute">display</span>: inline-block</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line">        <span class="attribute">min-width</span>: w = <span class="number">24px</span></span><br><span class="line">        <span class="attribute">height</span>: w</span><br><span class="line">        <span class="attribute">text-align</span>: center</span><br><span class="line">        <span class="attribute">line-height</span>: w</span><br><span class="line">        <span class="attribute">cursor</span>: pointer</span><br></pre></td></tr></table></figure></p><h3 id="首页文章卡片修改"><a href="#首页文章卡片修改" class="headerlink" title="首页文章卡片修改"></a>首页文章卡片修改</h3><ol><li>修改 [Blogroot]\themes\butterfly\layout\includes\mixins\post-ui.pug，将整个文件的内容替换为以下代码：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">mixin postUI(posts)</span><br><span class="line">  each article , index in page.posts.data</span><br><span class="line">    .recent-post-item</span><br><span class="line">      -</span><br><span class="line">        let link = article.link || article.path</span><br><span class="line">        let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">        const position = theme.cover.position</span><br><span class="line">        let leftOrRight = position === &#x27;both&#x27;</span><br><span class="line">          ? index%2 == 0 ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">          : position === &#x27;left&#x27; ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">        let post_cover = article.cover</span><br><span class="line">        let no_cover = article.cover === false || !theme.cover.index_enable ? &#x27;no-cover&#x27; : &#x27;&#x27;</span><br><span class="line">      -</span><br><span class="line">      .recent-post-content(class=leftOrRight)</span><br><span class="line">        a.article-content(href=url_for(link) title=subtitle)</span><br><span class="line">          //- Display the article introduction on homepage</span><br><span class="line">          case theme.index_post_content.method</span><br><span class="line">            when false</span><br><span class="line">              - break</span><br><span class="line">            when 1</span><br><span class="line">              .article-content-text!= article.description</span><br><span class="line">            when 2</span><br><span class="line">              if article.description</span><br><span class="line">                .article-content-text!= article.description</span><br><span class="line">              else</span><br><span class="line">                - const content = strip_html(article.content)</span><br><span class="line">                - let expert = content.substring(0, theme.index_post_content.length)</span><br><span class="line">                - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">                .article-content-text!= expert</span><br><span class="line">            default</span><br><span class="line">              - const content = strip_html(article.content)</span><br><span class="line">              - let expert = content.substring(0, theme.index_post_content.length)</span><br><span class="line">              - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">              .article-content-text!= expert</span><br><span class="line">        .recent-post-info</span><br><span class="line">          a.article-title(href=url_for(link) title=subtitle)</span><br><span class="line">            .article-title-link= title</span><br><span class="line">          .recent-post-meta                </span><br><span class="line">            .article-meta-wrap</span><br><span class="line">              if (is_home() &amp;&amp; (article.top || article.sticky &gt; 0))</span><br><span class="line">                span.article-meta</span><br><span class="line">                  i.fas.fa-thumbtack.sticky</span><br><span class="line">                  span.sticky= _p(&#x27;sticky&#x27;)</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">              if (theme.post_meta.page.date_type)</span><br><span class="line">                span.post-meta-date</span><br><span class="line">                  if (theme.post_meta.page.date_type === &#x27;both&#x27;)</span><br><span class="line">                    i.far.fa-calendar-alt</span><br><span class="line">                    span.article-meta-label=_p(&#x27;post.created&#x27;)</span><br><span class="line">                    time.post-meta-date-created(datetime=date_xml(article.date) title=_p(&#x27;post.created&#x27;) + &#x27; &#x27; + full_date(article.date))=date(article.date, config.date_format)</span><br><span class="line">                    span.article-meta-separator |</span><br><span class="line">                    i.fas.fa-history</span><br><span class="line">                    span.article-meta-label=_p(&#x27;post.updated&#x27;)</span><br><span class="line">                    time.post-meta-date-updated(datetime=date_xml(article.updated) title=_p(&#x27;post.updated&#x27;) + &#x27; &#x27; + full_date(article.updated))=date(article.updated, config.date_format)</span><br><span class="line">                  else</span><br><span class="line">                    - let data_type_updated = theme.post_meta.page.date_type === &#x27;updated&#x27;</span><br><span class="line">                    - let date_type = data_type_updated ? &#x27;updated&#x27; : &#x27;date&#x27;</span><br><span class="line">                    - let date_icon = data_type_updated ? &#x27;fas fa-history&#x27; :&#x27;far fa-calendar-alt&#x27;</span><br><span class="line">                    - let date_title = data_type_updated ? _p(&#x27;post.updated&#x27;) : _p(&#x27;post.created&#x27;)</span><br><span class="line">                    i(class=date_icon)</span><br><span class="line">                    span.article-meta-label=date_title</span><br><span class="line">                    time(datetime=date_xml(article[date_type]) title=date_title + &#x27; &#x27; + full_date(article[date_type]))=date(article[date_type], config.date_format)</span><br><span class="line">              if (theme.post_meta.page.categories &amp;&amp; article.categories.data.length &gt; 0)</span><br><span class="line">                span.article-meta</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">                  i.fas.fa-inbox</span><br><span class="line">                  each item, index in article.categories.data</span><br><span class="line">                    a(href=url_for(item.path)).article-meta__categories #[=item.name]</span><br><span class="line">                    if (index &lt; article.categories.data.length - 1)</span><br><span class="line">                      i.fas.fa-angle-right.article-meta-link</span><br><span class="line">              if (theme.post_meta.page.tags &amp;&amp; article.tags.data.length &gt; 0)</span><br><span class="line">                span.article-meta.tags</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">                  i.fas.fa-tag</span><br><span class="line">                  each item, index in article.tags.data</span><br><span class="line">                    a(href=url_for(item.path)).article-meta__tags #[=item.name]</span><br><span class="line">                    if (index &lt; article.tags.data.length - 1)</span><br><span class="line">                      span.article-meta-link #[=&#x27;•&#x27;]</span><br><span class="line"></span><br><span class="line">              mixin countBlockInIndex</span><br><span class="line">                - needLoadCountJs = true</span><br><span class="line">                span.article-meta</span><br><span class="line">                  span.article-meta-separator |</span><br><span class="line">                  i.fas.fa-comments</span><br><span class="line">                  if block</span><br><span class="line">                    block</span><br><span class="line">                  span.article-meta-label= &#x27; &#x27; + _p(&#x27;card_post_count&#x27;)</span><br><span class="line"></span><br><span class="line">              if theme.comments.card_post_count</span><br><span class="line">                case theme.comments.use[0]</span><br><span class="line">                  when &#x27;Disqus&#x27;</span><br><span class="line">                  when &#x27;Disqusjs&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=full_url_for(link) + &#x27;#disqus_thread&#x27;)</span><br><span class="line">                  when &#x27;Valine&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27; itemprop=&quot;discussionUrl&quot;)</span><br><span class="line">                        span.valine-comment-count(data-xid=url_for(link) itemprop=&quot;commentCount&quot;)</span><br><span class="line">                  when &#x27;Waline&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.waline-comment-count(id=url_for(link))</span><br><span class="line">                  when &#x27;Twikoo&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a.twikoo-count(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                  when &#x27;Facebook Comments&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.fb-comments-count(data-href=urlNoIndex(article.permalink))</span><br><span class="line">        .recent-post-cover</span><br><span class="line">          img.article-cover(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;`+ url_for(theme.error_img.post_page) + `&#x27;` alt=subtitle)</span><br><span class="line"></span><br><span class="line">    if theme.ad &amp;&amp; theme.ad.index</span><br><span class="line">      if (index + 1) % 3 == 0</span><br><span class="line">        .recent-post-item.ads-wrap!=theme.ad.index</span><br></pre></td></tr></table></figure></li></ol><p>备份：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">mixin postUI(posts)</span><br><span class="line">  each article , index in page.posts.data</span><br><span class="line">    .recent-post-item</span><br><span class="line">      -</span><br><span class="line">        let link = article.link || article.path</span><br><span class="line">        let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">        const position = theme.cover.position</span><br><span class="line">        let leftOrRight = position === &#x27;both&#x27; </span><br><span class="line">          ? index%2 == 0 ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">          : position === &#x27;left&#x27; ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">        let post_cover = article.cover</span><br><span class="line">        let no_cover = article.cover === false || !theme.cover.index_enable ? &#x27;no-cover&#x27; : &#x27;&#x27;</span><br><span class="line">      -</span><br><span class="line">      if post_cover &amp;&amp; theme.cover.index_enable</span><br><span class="line">        .post_cover(class=leftOrRight)</span><br><span class="line">          a(href=url_for(link) title=title)</span><br><span class="line">            img.post_bg(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;`+ url_for(theme.error_img.post_page) + `&#x27;` alt=title)</span><br><span class="line">      .recent-post-info(class=no_cover)</span><br><span class="line">        a.article-title(href=url_for(link) title=title)= title</span><br><span class="line">        .article-meta-wrap</span><br><span class="line">          if (is_home() &amp;&amp; (article.top || article.sticky &gt; 0))</span><br><span class="line">            span.article-meta</span><br><span class="line">              i.fas.fa-thumbtack.sticky</span><br><span class="line">              span.sticky= _p(&#x27;sticky&#x27;)</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">          if (theme.post_meta.page.date_type)</span><br><span class="line">            span.post-meta-date</span><br><span class="line">              if (theme.post_meta.page.date_type === &#x27;both&#x27;)</span><br><span class="line">                i.far.fa-calendar-alt</span><br><span class="line">                span.article-meta-label=_p(&#x27;post.created&#x27;)</span><br><span class="line">                time.post-meta-date-created(datetime=date_xml(article.date) title=_p(&#x27;post.created&#x27;) + &#x27; &#x27; + full_date(article.date))=date(article.date, config.date_format)</span><br><span class="line">                span.article-meta-separator |</span><br><span class="line">                i.fas.fa-history</span><br><span class="line">                span.article-meta-label=_p(&#x27;post.updated&#x27;)</span><br><span class="line">                time.post-meta-date-updated(datetime=date_xml(article.updated) title=_p(&#x27;post.updated&#x27;) + &#x27; &#x27; + full_date(article.updated))=date(article.updated, config.date_format)</span><br><span class="line">              else</span><br><span class="line">                - let data_type_updated = theme.post_meta.page.date_type === &#x27;updated&#x27;</span><br><span class="line">                - let date_type = data_type_updated ? &#x27;updated&#x27; : &#x27;date&#x27;</span><br><span class="line">                - let date_icon = data_type_updated ? &#x27;fas fa-history&#x27; :&#x27;far fa-calendar-alt&#x27;</span><br><span class="line">                - let date_title = data_type_updated ? _p(&#x27;post.updated&#x27;) : _p(&#x27;post.created&#x27;)</span><br><span class="line">                i(class=date_icon)</span><br><span class="line">                span.article-meta-label=date_title</span><br><span class="line">                time(datetime=date_xml(article[date_type]) title=date_title + &#x27; &#x27; + full_date(article[date_type]))=date(article[date_type], config.date_format)</span><br><span class="line">          if (theme.post_meta.page.categories &amp;&amp; article.categories.data.length &gt; 0)</span><br><span class="line">            span.article-meta</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">              i.fas.fa-inbox</span><br><span class="line">              each item, index in article.categories.data</span><br><span class="line">                a(href=url_for(item.path)).article-meta__categories #[=item.name]</span><br><span class="line">                if (index &lt; article.categories.data.length - 1)</span><br><span class="line">                  i.fas.fa-angle-right.article-meta-link</span><br><span class="line">          if (theme.post_meta.page.tags &amp;&amp; article.tags.data.length &gt; 0)</span><br><span class="line">            span.article-meta.tags</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">              i.fas.fa-tag</span><br><span class="line">              each item, index in article.tags.data</span><br><span class="line">                a(href=url_for(item.path)).article-meta__tags #[=item.name]</span><br><span class="line">                if (index &lt; article.tags.data.length - 1)</span><br><span class="line">                  span.article-meta-link #[=&#x27;•&#x27;]</span><br><span class="line">          </span><br><span class="line">          mixin countBlockInIndex</span><br><span class="line">            - needLoadCountJs = true</span><br><span class="line">            span.article-meta</span><br><span class="line">              span.article-meta-separator |</span><br><span class="line">              i.fas.fa-comments</span><br><span class="line">              if block</span><br><span class="line">                block</span><br><span class="line">              span.article-meta-label= &#x27; &#x27; + _p(&#x27;card_post_count&#x27;)</span><br><span class="line">          </span><br><span class="line">          if theme.comments.card_post_count</span><br><span class="line">            case theme.comments.use[0]</span><br><span class="line">              when &#x27;Disqus&#x27;</span><br><span class="line">              when &#x27;Disqusjs&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=full_url_for(link) + &#x27;#disqus_thread&#x27;)</span><br><span class="line">              when &#x27;Valine&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27; itemprop=&quot;discussionUrl&quot;)</span><br><span class="line">                    span.valine-comment-count(data-xid=url_for(link) itemprop=&quot;commentCount&quot;)</span><br><span class="line">              when &#x27;Waline&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.waline-comment-count(id=url_for(link))</span><br><span class="line">              when &#x27;Twikoo&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a.twikoo-count(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">              when &#x27;Facebook Comments&#x27;</span><br><span class="line">                +countBlockInIndex</span><br><span class="line">                  a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                    span.fb-comments-count(data-href=urlNoIndex(article.permalink))</span><br><span class="line"></span><br><span class="line">        //- Display the article introduction on homepage</span><br><span class="line">        case theme.index_post_content.method</span><br><span class="line">          when false</span><br><span class="line">            - break</span><br><span class="line">          when 1</span><br><span class="line">            .content!= article.description</span><br><span class="line">          when 2</span><br><span class="line">            if article.description</span><br><span class="line">              .content!= article.description</span><br><span class="line">            else</span><br><span class="line">              - const content = strip_html(article.content)</span><br><span class="line">              - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">              - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">              .content!= expert</span><br><span class="line">          default</span><br><span class="line">            - const content = strip_html(article.content)</span><br><span class="line">            - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">            - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">            .content!= expert</span><br><span class="line"></span><br><span class="line">    if theme.ad &amp;&amp; theme.ad.index</span><br><span class="line">      if (index + 1) % 3 == 0</span><br><span class="line">        .recent-post-item.ads-wrap!=theme.ad.index</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><ol><li>修改 [Blogroot]\themes\butterfly\source\css_page\homepage.styl，将整个文件的内容替换为以下代码：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//default color:</span></span><br><span class="line"><span class="selector-pseudo">:root</span></span><br><span class="line">  <span class="attr">--recent-post-bgcolor</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>)</span><br><span class="line">  <span class="attr">--article-content-bgcolor</span>: <span class="number">#49b1f5</span></span><br><span class="line">  <span class="attr">--recent-post-triangle</span>: <span class="number">#fff</span></span><br><span class="line">  <span class="attr">--recent-post-cover-shadow</span>: <span class="number">#ffffff</span></span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span></span><br><span class="line">  <span class="attr">--recent-post-bgcolor</span>: <span class="built_in">rgba</span>(<span class="number">35</span>,<span class="number">35</span>,<span class="number">35</span>,<span class="number">0.5</span>)</span><br><span class="line">  <span class="attr">--article-content-bgcolor</span>: <span class="number">#99999a</span></span><br><span class="line">  <span class="attr">--recent-post-triangle</span>: <span class="number">#37e2dd</span></span><br><span class="line">  <span class="attr">--recent-post-cover-shadow</span>: <span class="number">#232323</span></span><br><span class="line"><span class="selector-class">.recent-posts</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">0</span> <span class="number">15px</span></span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.recent-post-item</span></span><br><span class="line">    <span class="attribute">margin-bottom</span> <span class="number">15px</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">var</span>(--recent-post-bgcolor)</span><br><span class="line">    <span class="attribute">overflow</span> hidden</span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">15px</span></span><br><span class="line">    <span class="selector-class">.recent-post-info</span></span><br><span class="line">      <span class="selector-class">.article-title-link</span></span><br><span class="line">        <span class="attribute">display</span> -webkit-box</span><br><span class="line">        -webkit-box-orient vertical</span><br><span class="line">        -webkit-line-clamp <span class="number">2</span></span><br><span class="line">        <span class="attribute">overflow</span> hidden</span><br><span class="line">    <span class="selector-class">.article-content</span></span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--article-content-bgcolor)</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">display</span> flex</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="selector-class">.article-content-text</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">        <span class="attribute">display</span> -webkit-box</span><br><span class="line">        -webkit-box-orient vertical</span><br><span class="line">        -webkit-line-clamp <span class="number">4</span></span><br><span class="line">        <span class="attribute">text-overflow</span>: ellipsis</span><br><span class="line">        <span class="attribute">overflow</span> hidden</span><br><span class="line">        <span class="attribute">color</span> <span class="number">#fff</span></span><br><span class="line">        <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="number">#000</span>;</span><br><span class="line">    <span class="selector-class">.recent-post-cover</span></span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">background</span> transparent</span><br><span class="line">      <span class="selector-tag">img</span></span><br><span class="line">        &amp;<span class="selector-class">.article-cover</span></span><br><span class="line">          <span class="attribute">height</span> <span class="number">100%</span></span><br><span class="line">          <span class="attribute">width</span> <span class="number">100%</span></span><br><span class="line">          <span class="attribute">object-fit</span> cover</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-info</span></span><br><span class="line">      <span class="attribute">align-items</span> center</span><br><span class="line">      <span class="attribute">flex-direction</span> column</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--recent-post-bgcolor)</span><br><span class="line">      <span class="attribute">display</span> flex</span><br><span class="line">      <span class="attribute">color</span> <span class="number">#000000</span></span><br><span class="line">      <span class="selector-class">.article-title</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">50%</span></span><br><span class="line">        <span class="attribute">font-size</span> <span class="number">24px</span></span><br><span class="line">        <span class="attribute">display</span>: flex</span><br><span class="line">        <span class="attribute">align-items</span>: center</span><br><span class="line">        <span class="attribute">justify-content</span>: flex-end</span><br><span class="line">        <span class="attribute">flex-direction</span>: column</span><br><span class="line">        <span class="selector-class">.article-title-link</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color)</span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line">          <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line">      <span class="selector-class">.recent-post-meta</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">50%</span></span><br><span class="line">        <span class="attribute">display</span>: flex</span><br><span class="line">        <span class="attribute">align-items</span>: center</span><br><span class="line">        <span class="attribute">justify-content</span>: flex-start</span><br><span class="line">        <span class="attribute">flex-direction</span>: column</span><br><span class="line">      <span class="selector-class">.article-meta-wrap</span></span><br><span class="line">        <span class="attribute">font-size</span> <span class="number">12px</span></span><br><span class="line">        <span class="attribute">color</span> <span class="number">#969797</span></span><br><span class="line">        <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">        -webkit-box-orient: vertical;</span><br><span class="line">        -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color)</span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line">          <span class="attribute">color</span> <span class="number">#969797</span></span><br><span class="line">          <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line">    &amp;<span class="selector-class">.ads-wrap</span></span><br><span class="line">      <span class="attribute">display</span>: block <span class="meta">!important</span></span><br><span class="line">      <span class="attribute">height</span>: auto <span class="meta">!important</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">600px</span>)</span><br><span class="line">  .recent-post-item</span><br><span class="line">    &amp;:<span class="attribute">hover</span></span><br><span class="line">      .recent-post-content</span><br><span class="line">        &amp;.both,</span><br><span class="line">        &amp;.right</span><br><span class="line">          transform translateX(<span class="number">21%</span>)</span><br><span class="line">          transition: all .<span class="number">8s</span> cubic-bezier(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">          &amp;::before</span><br><span class="line">            transition: all .<span class="number">8s</span> cubic-bezier(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">            left: <span class="number">50px</span>;</span><br><span class="line">          <span class="selector-class">.article-content-text</span></span><br><span class="line">            <span class="attribute">margin</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">60px</span></span><br><span class="line">        &amp;<span class="selector-class">.left</span></span><br><span class="line">          <span class="attribute">transform</span> <span class="built_in">translateX</span>(-<span class="number">21%</span>)</span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">          <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">            <span class="attribute">transition</span>: all .<span class="number">8s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">            <span class="attribute">right</span>: <span class="number">50px</span>;</span><br><span class="line">          <span class="selector-class">.article-content-text</span></span><br><span class="line">            <span class="attribute">margin</span> <span class="number">20px</span> <span class="number">60px</span> <span class="number">20px</span> <span class="number">20px</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.recent-post-content</span></span><br><span class="line">      <span class="attribute">background</span> <span class="built_in">var</span>(--recent-post-bgcolor)</span><br><span class="line">      <span class="attribute">position</span> relative</span><br><span class="line">      <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">130%</span></span><br><span class="line">      <span class="attribute">z-index</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">display</span> flex</span><br><span class="line">      <span class="attribute">overflow</span> hidden</span><br><span class="line">      <span class="attribute">border</span> <span class="number">0px</span> solid</span><br><span class="line">      <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background</span>: transparent;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">10px</span>);</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">10px</span> solid transparent;</span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">5s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">      &amp;<span class="selector-class">.both</span>,</span><br><span class="line">      &amp;<span class="selector-class">.right</span></span><br><span class="line">        <span class="attribute">flex-direction</span>: row;</span><br><span class="line">        <span class="attribute">left</span> <span class="built_in">calc</span>(-<span class="number">23.07%</span> - <span class="number">41px</span>)</span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">5s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">        <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">          <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">23.07%</span> + <span class="number">40px</span>);</span><br><span class="line">          <span class="attribute">border-left</span>: <span class="number">6px</span> solid <span class="built_in">var</span>(--recent-post-triangle);</span><br><span class="line">        <span class="selector-class">.recent-post-info</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">            <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(to right, <span class="built_in">var</span>(--recent-post-cover-shadow), transparent)</span><br><span class="line">            <span class="attribute">left</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">1px</span>)</span><br><span class="line">        <span class="selector-class">.article-content</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">            <span class="attribute">right</span> -<span class="number">59px</span></span><br><span class="line">            <span class="attribute">border-left</span> <span class="number">60px</span> solid <span class="built_in">var</span>(--article-content-bgcolor)</span><br><span class="line">        <span class="selector-class">.article-content-text</span></span><br><span class="line">          <span class="attribute">margin</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">0px</span></span><br><span class="line">        <span class="selector-class">.article-title</span></span><br><span class="line">          <span class="attribute">padding</span> <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span> <span class="number">70px</span></span><br><span class="line">        <span class="selector-class">.recent-post-meta</span></span><br><span class="line">          <span class="attribute">padding</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="number">70px</span></span><br><span class="line">      &amp;<span class="selector-class">.left</span></span><br><span class="line">        <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">        <span class="attribute">right</span> <span class="number">9px</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">5s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.59</span>, <span class="number">0.01</span>, <span class="number">0.48</span>, <span class="number">1.17</span>)</span><br><span class="line">        <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">          <span class="attribute">right</span>: <span class="built_in">calc</span>(<span class="number">23.07%</span> + <span class="number">40px</span>);</span><br><span class="line">          <span class="attribute">border-right</span>: <span class="number">6px</span> solid <span class="built_in">var</span>(--recent-post-triangle);</span><br><span class="line">        <span class="selector-class">.recent-post-info</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">            <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(to left, <span class="built_in">var</span>(--recent-post-cover-shadow), transparent)</span><br><span class="line">            <span class="attribute">right</span> <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">1px</span>)</span><br><span class="line">        <span class="selector-class">.article-content</span></span><br><span class="line">          <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">            <span class="attribute">left</span> -<span class="number">59px</span></span><br><span class="line">            <span class="attribute">border-right</span> <span class="number">60px</span> solid <span class="built_in">var</span>(--article-content-bgcolor)</span><br><span class="line">        <span class="selector-class">.article-content-text</span></span><br><span class="line">          <span class="attribute">margin</span> <span class="number">20px</span> <span class="number">0px</span> <span class="number">20px</span> <span class="number">20px</span></span><br><span class="line">        <span class="selector-class">.article-title</span></span><br><span class="line">          <span class="attribute">padding</span> <span class="number">0px</span> <span class="number">70px</span> <span class="number">0px</span> <span class="number">30px</span></span><br><span class="line">        <span class="selector-class">.recent-post-meta</span></span><br><span class="line">          <span class="attribute">padding</span> <span class="number">0px</span> <span class="number">70px</span> <span class="number">0px</span> <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.article-content</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">30%</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">      <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">      <span class="attribute">align-items</span> center</span><br><span class="line">      <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">        <span class="attribute">content</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">background</span> transparent</span><br><span class="line">        <span class="attribute">position</span> absolute</span><br><span class="line">        <span class="attribute">z-index</span> <span class="number">2</span></span><br><span class="line">        <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">border-top</span> <span class="number">100px</span> solid transparent</span><br><span class="line">        <span class="attribute">border-bottom</span> <span class="number">100px</span> solid transparent</span><br><span class="line">    <span class="selector-class">.recent-post-info</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">60%</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">      <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">        <span class="attribute">content</span> <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="attribute">width</span> <span class="number">200px</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">        <span class="attribute">position</span> absolute</span><br><span class="line">        <span class="attribute">z-index</span> <span class="number">1</span></span><br><span class="line">        <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">      <span class="selector-class">.recent-post-meta</span></span><br><span class="line">        &amp; &gt; <span class="selector-class">.article-meta-wrap</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">6px</span> <span class="number">0</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="variable">$theme</span>-meta-color</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">90%</span></span><br><span class="line"></span><br><span class="line">          &amp; &gt; <span class="selector-class">.post-meta-date</span></span><br><span class="line">            <span class="attribute">cursor</span>: default</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.sticky</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$sticky</span>-color</span><br><span class="line"></span><br><span class="line">          <span class="selector-tag">i</span></span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.article-meta-label</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;post_meta.page.label&#x27;</span>)</span><br><span class="line">              <span class="attribute">padding-right</span>: <span class="number">4px</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">              <span class="attribute">display</span>: none</span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.article-meta-separator</span></span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">6px</span></span><br><span class="line"></span><br><span class="line">          <span class="selector-class">.article-meta-link</span></span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;post_meta.page.date_format&#x27;</span>) == <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">            <span class="selector-tag">time</span></span><br><span class="line">              <span class="attribute">display</span>: none</span><br><span class="line"></span><br><span class="line">          <span class="selector-tag">a</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$theme</span>-meta-color</span><br><span class="line"></span><br><span class="line">            <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">              <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line">              <span class="attribute">text-decoration</span>: underline</span><br><span class="line">    <span class="selector-class">.recent-post-cover</span></span><br><span class="line">      <span class="attribute">width</span> <span class="number">40%</span></span><br><span class="line">      <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">600px</span>)</span><br><span class="line">  .recent-post-item</span><br><span class="line">    <span class="attribute">height</span> <span class="number">400px</span></span><br><span class="line">    .recent-post-content</span><br><span class="line">      display flex</span><br><span class="line">      flex-direction: column</span><br><span class="line">      <span class="attribute">height</span> <span class="number">400px</span></span><br><span class="line">      .article-content</span><br><span class="line">        pointer-events none</span><br><span class="line">        order: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">40px</span>);</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">22</span>,<span class="number">22</span>,<span class="number">22</span>,<span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">border-top-left-radius</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">border-top-right-radius</span>: <span class="number">15px</span>;</span><br><span class="line">        <span class="attribute">display</span>: none</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span></span><br><span class="line">        <span class="selector-class">.article-content-text</span></span><br><span class="line">          <span class="attribute">height</span> <span class="number">120px</span></span><br><span class="line">          <span class="attribute">color</span>: white;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">80%</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-class">.recent-post-cover</span></span><br><span class="line">        <span class="attribute">order</span>: <span class="number">2</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">5s</span></span><br><span class="line">      <span class="selector-class">.recent-post-info</span></span><br><span class="line">        <span class="attribute">order</span>: <span class="number">3</span></span><br><span class="line">        <span class="attribute">height</span> <span class="number">200px</span></span><br><span class="line">        <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">          <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">4px</span>);</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">          <span class="attribute">border-right</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">        <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">          <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">150px</span>);</span><br><span class="line">          <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">border-top</span>: <span class="number">50px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">          <span class="attribute">border-left</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">        <span class="selector-class">.article-title</span></span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">35px</span> <span class="number">0px</span> <span class="number">35px</span></span><br><span class="line">        <span class="selector-class">.recent-post-meta</span></span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span> <span class="number">30px</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-class">.article-content</span></span><br><span class="line">        <span class="attribute">display</span>: flex <span class="meta">!important</span>;</span><br><span class="line">        <span class="attribute">animation</span>: shutter-effect-content <span class="number">0.5s</span> <span class="number">2</span> forwards linear</span><br><span class="line">      <span class="selector-class">.recent-post-info</span></span><br><span class="line">        <span class="selector-pseudo">&amp;::before</span></span><br><span class="line">          <span class="attribute">animation</span>: shutter-effect-left <span class="number">0.5s</span> <span class="number">1</span> ease-in-out</span><br><span class="line">        <span class="selector-pseudo">&amp;::after</span></span><br><span class="line">          <span class="attribute">animation</span>: shutter-effect-right <span class="number">0.5s</span> <span class="number">1</span> ease-in-out</span><br><span class="line">      <span class="selector-class">.recent-post-cover</span></span><br><span class="line">        <span class="attribute">filter</span> <span class="built_in">blur</span>(<span class="number">2px</span>)</span><br><span class="line"><span class="keyword">@keyframes</span> shutter-effect-<span class="attribute">right</span>  &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">150px</span>);</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">200px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">600px</span> solid transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> + <span class="number">150px</span>);</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">50px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> shutter-effect-<span class="attribute">left</span>  &#123;</span><br><span class="line">  <span class="number">0%</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">200px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">600px</span> solid transparent;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span>&#123;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">4px</span>);</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">50px</span> solid <span class="built_in">var</span>(--recent-post-bgcolor);</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">300px</span> solid transparent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> shutter-effect-<span class="attribute">content</span> &#123;</span><br><span class="line">  from &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>备份：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#recent-posts</span></span><br><span class="line">  &amp; &gt; <span class="selector-class">.recent-post-item</span><span class="selector-pseudo">:not</span>(:first-child)</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">  &amp; &gt; <span class="selector-class">.recent-post-item</span></span><br><span class="line">    <span class="keyword">@extend</span> <span class="selector-class">.cardHover</span></span><br><span class="line">    <span class="attribute">display</span>: flex</span><br><span class="line">    <span class="attribute">flex-direction</span>: row</span><br><span class="line">    <span class="attribute">align-items</span>: center</span><br><span class="line">    <span class="attribute">overflow</span>: hidden</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">18em</span></span><br><span class="line"></span><br><span class="line">    +<span class="built_in">maxWidth768</span>()</span><br><span class="line">      <span class="attribute">flex-direction</span>: column</span><br><span class="line">      <span class="attribute">height</span>: auto</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">      <span class="selector-tag">img</span><span class="selector-class">.post_bg</span></span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>)</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-class">.ads-wrap</span></span><br><span class="line">      <span class="attribute">display</span>: block <span class="meta">!important</span></span><br><span class="line">      <span class="attribute">height</span>: auto <span class="meta">!important</span></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.post_cover</span></span><br><span class="line">      <span class="attribute">overflow</span>: hidden</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">44%</span></span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">      +<span class="built_in">maxWidth768</span>()</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line">        <span class="attribute">height</span>: <span class="number">230px</span></span><br><span class="line"></span><br><span class="line">      <span class="selector-tag">img</span><span class="selector-class">.post_bg</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.imgHover</span></span><br><span class="line"></span><br><span class="line">      &amp;<span class="selector-class">.right</span></span><br><span class="line">        <span class="attribute">order</span>: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth768</span>()</span><br><span class="line">          <span class="attribute">order</span>: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    &amp; &gt;<span class="selector-class">.recent-post-info</span></span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">40px</span></span><br><span class="line">      <span class="attribute">width</span>: <span class="number">57%</span></span><br><span class="line"></span><br><span class="line">      +<span class="built_in">maxWidth768</span>()</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">30px</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">      &amp;<span class="selector-class">.no-cover</span></span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth768</span>()</span><br><span class="line">          <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">20px</span></span><br><span class="line"></span><br><span class="line">      &amp; &gt; <span class="selector-class">.article-title</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.limit-more-line</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="built_in">var</span>(--text-highlight-color)</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">1.72em</span></span><br><span class="line">        <span class="attribute">line-height</span>: <span class="number">1.4</span></span><br><span class="line">        <span class="attribute">transition</span>: all .<span class="number">2s</span> ease-in-out</span><br><span class="line">        -webkit-line-clamp: <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        +<span class="built_in">maxWidth768</span>()</span><br><span class="line">          <span class="attribute">font-size</span>: <span class="number">1.43em</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line"></span><br><span class="line">      &amp; &gt; <span class="selector-class">.article-meta-wrap</span></span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">6px</span> <span class="number">0</span></span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$theme</span>-meta-color</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">90%</span></span><br><span class="line"></span><br><span class="line">        &amp; &gt; <span class="selector-class">.post-meta-date</span></span><br><span class="line">          <span class="attribute">cursor</span>: default</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.sticky</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="variable">$sticky</span>-color</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">i</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.article-meta-label</span></span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;post_meta.page.label&#x27;</span>)</span><br><span class="line">            <span class="attribute">padding-right</span>: <span class="number">4px</span></span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            <span class="attribute">display</span>: none</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.article-meta-separator</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">6px</span></span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.article-meta-link</span></span><br><span class="line">          <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">4px</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hexo-config</span>(<span class="string">&#x27;post_meta.page.date_format&#x27;</span>) == <span class="string">&#x27;relative&#x27;</span></span><br><span class="line">          <span class="selector-tag">time</span></span><br><span class="line">            <span class="attribute">display</span>: none</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">a</span></span><br><span class="line">          <span class="attribute">color</span>: <span class="variable">$theme</span>-meta-color</span><br><span class="line"></span><br><span class="line">          <span class="selector-pseudo">&amp;:hover</span></span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$text</span>-hover</span><br><span class="line">            <span class="attribute">text-decoration</span>: underline</span><br><span class="line"></span><br><span class="line">      &amp; &gt; <span class="selector-class">.content</span></span><br><span class="line">        <span class="keyword">@extend</span> <span class="selector-class">.limit-more-line</span></span><br><span class="line">        -webkit-line-clamp: <span class="number">2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="时钟插件"><a href="#时钟插件" class="headerlink" title="时钟插件"></a>时钟插件</h3><ol><li>安装插件，在博客根目录 [Blogroot] 下打开终端，运行以下指令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-clock --save</span><br></pre></td></tr></table></figure></li><li>在站点配置文件_config.yml 或者主题配置文件_config.butterfly.yml 中添加<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># electric_clock</span></span><br><span class="line"><span class="comment"># see https://akilar.top/posts/4e39cf4a/</span></span><br><span class="line"><span class="attr">electric_clock:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 开关</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="number">5</span> <span class="comment">#过滤器优先权</span></span><br><span class="line">  <span class="attr">enable_page:</span> <span class="string">all</span> <span class="comment"># 应用页面</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /posts/</span></span><br><span class="line">    <span class="comment"># - /about/</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="comment"># 挂载容器类型</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">class</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sticky_layout</span></span><br><span class="line">    <span class="attr">index:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">loading:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-clock/lib/loading.gif</span> <span class="comment">#加载动画自定义</span></span><br><span class="line">  <span class="attr">clock_css:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-clock/lib/clock.min.css</span></span><br><span class="line">  <span class="attr">clock_js:</span> <span class="string">https://npm.elemecdn.com/hexo-butterfly-clock/lib/clock.min.js</span></span><br><span class="line">  <span class="attr">ip_api:</span> <span class="string">https://pv.sohu.com/cityjson?ie=utf-8</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="字体样式修改"><a href="#字体样式修改" class="headerlink" title="字体样式修改"></a>字体样式修改</h3><blockquote><p>不一定是 ttf 后缀，其他后缀也是完全正常的，例如 eot、otf、fon、font、ttc、woff、woff2 等.</p></blockquote><ol><li>首先需要下载心仪的字体。第一字体网：<a href="https://www.diyiziti.com/List/all/2">https://www.diyiziti.com/List/all/2</a>  选择心仪的字体下载得到相应的字体文件，将其重命名为英文 xxx.ttf。</li><li>将下载好的字体包放到本地文件夹下，这里推荐新建一个 fonts 文件夹: [Blogroot]\themes\butterfly\source\fonts\ 目录下。</li><li>在自定义样式 custom.css 中引入字体包：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&#x27;UniverseFont&#x27;</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;/fonts/Font.ttf&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">  <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>在页面按<code>F12</code>，然后在控制台中进行调试。获取想应用字体元素的 <code>id/class</code> 然后把 font-family 写进 custom.css 就可以了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&#x27;UniverseFont&#x27;</span> ;  <span class="comment">/* 字体名自定义即可 */</span></span><br><span class="line">  <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;/fonts/Font.ttf&#x27;</span>); <span class="comment">/* 字体文件路径 */</span></span><br><span class="line">  <span class="attribute">font-display</span> : swap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 例如 */</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#site-title</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;UniverseFont&#x27;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="更改文章-h1-6-级标题前-icon-图标"><a href="#更改文章-h1-6-级标题前-icon-图标" class="headerlink" title="更改文章 h1~6 级标题前 icon 图标"></a>更改文章 h1~6 级标题前 icon 图标</h3><blockquote><p>单靠肉眼识别字体大小来判断标题等级不是件容易的事情，若 h1~6 标题使用不同图标的话，那么识别会容易许多。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* 在&lt;Custom&gt;.css里添加以下代码： */</span></span><br><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&lt;Custom&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* h2~6以此类推 */</span></span><br></pre></td></tr></table></figure><p>其中<Custom>部分可以填写一下内容：</p><ul><li>H¹、H²、H³、H⁴、H⁵、H⁶</li><li>H₁、H₂、H₃、H₄、H₅、H₆</li><li>H1、H2、H3、H4、H5、H6</li><li>icon 图标</li><li>阿里图标 …<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#article-container</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span>;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&lt;Custom&gt;&quot;</span>;  <span class="comment">/*阿里图标的 Unicode*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="补充插件"><a href="#补充插件" class="headerlink" title="补充插件"></a>补充插件</h2><h3 id="hexo-renderer-pug"><a href="#hexo-renderer-pug" class="headerlink" title="hexo-renderer-pug"></a>hexo-renderer-pug</h3><blockquote><p>pug 以及 stylus 的渲染器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h3 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h3><blockquote><p>hexo-next文章链接默认的生成规则是：:year/:month/:day/:title，是按照年、月、日、标题来生成的，如果文章标题是中文的话，URL链接是也会是中文，复制后的链接是一长串，非常不利于阅读，也不简洁。用此插件可以生成唯一不变的URl链接。</p></blockquote><ol><li>安装<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure></li><li>修改根目录站点配置文件config.yml<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span>  <span class="comment"># post 参数为自己的自定义设置。比如：:year/:month/:day:title/:abbrlink.html</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">   <span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">   <span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure></li><li>生成完后，原md文件的Front-matter 内会增加abbrlink 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</li></ol><h1 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h1><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><h3 id="PicGo-Gitee-Typora"><a href="#PicGo-Gitee-Typora" class="headerlink" title="PicGo + Gitee +  Typora"></a><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + Gitee +  Typora</h3><h3 id="PicGo-Github-Typora"><a href="#PicGo-Github-Typora" class="headerlink" title="PicGo + Github +  Typora"></a><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + Github +  Typora</h3><blockquote><p>特点：绑定 Typora 后支持直接在软件内插入图片自动上传图床。<br>缺点：国内访问速度慢（用的是github 作为存储仓库）</p></blockquote><p>Typora 配置：<br><img src="https://cdn.jsdelivr.net/gh/HaloBoys/PicGoMyDevice/img/20220521224229.png" alt="20220521224229"></p><h3 id="PicGo-SMMS"><a href="#PicGo-SMMS" class="headerlink" title="PicGo + SMMS"></a><a href="https://github.com/Molunerfinn/PicGo">PicGo</a> + <a href="https://sm.ms">SMMS</a></h3><blockquote><p>永久存储，图片链接支持https，可以删除上传的图片，提供多种图片链接格式。<br>每个图片最大5M，单次最多上传10张 。</p></blockquote><h3 id="Chrome-图床插件-不保证其稳定性"><a href="#Chrome-图床插件-不保证其稳定性" class="headerlink" title="Chrome 图床插件(不保证其稳定性)"></a>Chrome 图床插件(不保证其稳定性)</h3><p>方法：<a href="https://chrome.google.com/webstore/category/extensions?hl=zh">Chrome 插件市场</a> 搜索插件名称安装即可</p><ol><li>微博图床<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220510154000.png" alt="20220510154000"></li><li>Bilibili图床<br><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20220510154056.png" alt="20220510154056"></li></ol><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><h3 id="Github-自定义"><a href="#Github-自定义" class="headerlink" title="Github 自定义"></a>Github 自定义</h3><blockquote><p>之前绑定过了，现在好像忘了，看来不做笔记还是不行啊。有时间再重新操作下。</p></blockquote><h3 id="Gitee-自定义"><a href="#Gitee-自定义" class="headerlink" title="Gitee 自定义"></a>Gitee 自定义</h3><blockquote><p>要Pro版本才可以自定义，找了下开通Pro的入口没找到暂时被取消了</p></blockquote><h2 id="Hexo-写作命令"><a href="#Hexo-写作命令" class="headerlink" title="Hexo 写作命令"></a>Hexo 写作命令</h2><ul><li>分类与子分类<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">并列分类:</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> [Linux]</span><br><span class="line"><span class="bullet">-</span> [Tools]</span><br><span class="line"></span><br><span class="line">并列+子分类:</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> [Linux, Hexo]</span><br><span class="line"><span class="bullet">-</span> [Tools, PHP]</span><br></pre></td></tr></table></figure></li><li>创建页面 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br><span class="line">// hexo new post &#x27;test&#x27;</span><br><span class="line"></span><br><span class="line">Layout：Hexo 有三种默认布局：post、page 和 draft,创建这三种不同类型的文件时，它们将会被保存到不同的路径:</span><br><span class="line">postsource/_posts</span><br><span class="line">pagesource</span><br><span class="line">draftsource/_drafts</span><br></pre></td></tr></table></figure></li><li><strong>模版（Scaffold）：在新建文章时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件来建立文件</strong> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Blog\scaffolds 文件夹下新建模板编辑模板取好模板名称，然后可以执行如下命令根据模板内容建立文章</span><br><span class="line">hexo new [模板名称] &quot;文件名&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">模板参数        描述       默认值</span><br><span class="line">layout          布局     config.default_layout</span><br><span class="line">title          标题     文章的文件名</span><br><span class="line">date          建立日期    文件建立日期</span><br><span class="line">updated          更新日期    文件更新日期</span><br><span class="line">comments          开启文章的评论功能  true</span><br><span class="line">tags          标签（不适用于分页）</span><br><span class="line">categories      分类（不适用于分页）</span><br><span class="line">permalink         覆盖文章网址</span><br><span class="line">excerpt           纯文本的页面摘录。使用这个插件来格式化文本</span><br><span class="line">disableNunjucks   启用时禁用 Nunjucks 标签 &#123;&#123; &#125;&#125;/&#123;% %&#125; 和标签插件的呈现</span><br><span class="line">lang              设置语言          Inherited from _config.yml</span><br></pre></td></tr></table></figure></li><li>分类和标签 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 需要为文章添加多个分类，可以使用以下 list 中的方法</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line">- [Diary, PlayStation]</span><br><span class="line">- [Diary, Games]</span><br><span class="line">- [Life]</span><br><span class="line"></span><br><span class="line">此时这篇文章同时包括三个分类： </span><br><span class="line">PlayStation 和 Games 分别都是父分类 Diary 的子分类</span><br><span class="line">Life 是一个没有子分类的分类</span><br></pre></td></tr></table></figure></li><li>监视文件变动 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate --watch</span><br></pre></td></tr></table></figure></li><li>一键三连<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp; hexo g &amp; hexo d</span><br></pre></td></tr></table></figure></li><li>部署 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行下列的其中一个命令，让 Hexo 在生成完毕后自动部署网站，两个命令的作用是相同的</span></span><br><span class="line">hexo generate --deploy</span><br><span class="line">hexo deploy --generate</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">简写：上面两个命令可以简写为</span></span><br><span class="line">hexo g -d</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>找工作指南（记录）</title>
      <link href="/2021/11/012022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_%E6%89%BE%E5%B7%A5%E4%BD%9C/f75e92e9/"/>
      <url>/2021/11/012022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_%E6%89%BE%E5%B7%A5%E4%BD%9C/f75e92e9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>值得参考的链接：</p><ul><li><a href="https://www.yuque.com/u29422/dg5uy8/fyqwl9">https://www.yuque.com/u29422/dg5uy8/fyqwl9</a></li></ul></blockquote><p>投递时间：金三银四，金九银十，年底最差。</p><h1 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h1><p>站在 <code>HR</code> 和 <code>面试官</code> 角度撰写简历</p><ul><li>简明扼要，重要内容放在醒目位置，废话不要</li><li>内容详尽，工作经历、项目详情要描述清楚</li><li>方便阅读，重点、关键词要用<code>醒目样式</code></li></ul><h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><p>文件名：方方-前端工程师-北京-2019.pdf<br>文件格式：PDF 最佳，Word勉强，Markdown和在线链接不推荐，前端工程师最好用PDF+在线网页两种格式<br>页数：两页为宜<br>留白：越少越好</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><h2 id="必不可少的内容"><a href="#必不可少的内容" class="headerlink" title="必不可少的内容"></a>必不可少的内容</h2><p>个人信息、学历、项目、工作经历、技能描述</p><ul><li>个人信息：<ul><li>头像</li><li>性别</li></ul></li><li>学历：<ul><li>要写（如实）</li><li>专业</li></ul></li></ul><h2 id="不需要的内容"><a href="#不需要的内容" class="headerlink" title="不需要的内容"></a>不需要的内容</h2><p>自我评价（不如他人评价，如获奖）、对公司的喜爱（过于谄媚）</p><p>工程师可以加的内容：</p><p>开源项目、看过的书、博客</p>]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 规划 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>五险一金基础认知</title>
      <link href="/2021/10/312022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/f75e92e9/"/>
      <url>/2021/10/312022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_%E4%BA%94%E9%99%A9%E4%B8%80%E9%87%91/f75e92e9/</url>
      
        <content type="html"><![CDATA[<h1 id="社保种类"><a href="#社保种类" class="headerlink" title="社保种类"></a>社保种类</h1><blockquote><p>社保就是我们日常说的五险，五险一金只是比社保多了一个公积金，社保跟五险一金的差别就是，少了一个住房公积金。</p></blockquote><h2 id="城乡居民社保"><a href="#城乡居民社保" class="headerlink" title="城乡居民社保"></a>城乡居民社保</h2><h2 id="灵活就业社保"><a href="#灵活就业社保" class="headerlink" title="灵活就业社保"></a>灵活就业社保</h2><h2 id="职工社保"><a href="#职工社保" class="headerlink" title="职工社保"></a>职工社保</h2><p>享受最全的保障</p><h1 id="五险一金"><a href="#五险一金" class="headerlink" title="五险一金"></a>五险一金</h1><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221031153931.png" alt="20221031153931"></p><p>1、养老险：累计交够15年，可以领退休金。<code>个人交 8%</code><br>2、医疗险：累计交够25年，可以终身享受医疗报销，<code>个人交 2%</code>。可能每个地方不一样，有的地方是把钱打到医保卡里面，只能消费不能取出来。有的地方就打到个人医保账户，跟活期存款一样。<br>3、失业险：失业后可以领失业金。一般交满一年可以领一个月。最高不超过6个月。<br>4、工伤险：因公受伤可以赔偿<br>5、生育险：不用解释了吧。不过生育险要和医疗险合并了。<br>6、住房公积金：<code>个人和公司按照 1：1来交</code>。比如自己交 100，公司就要交 100，相当于 200 都是自己的。</p><h2 id="养老险"><a href="#养老险" class="headerlink" title="养老险"></a>养老险</h2><h3 id="养老津贴"><a href="#养老津贴" class="headerlink" title="养老津贴"></a>养老津贴</h3><p>养老金 = 基础养老金 + 个人账户养老金</p><p>基础养老金：基础养老金 = 退休当地去年平均月工资（1+缴费平均数）/ 2 <em> 缴费年限 </em> 1%<br>个人账户养老金：个人账户养老金 = 个人账户余额 / 计发月数</p><h2 id="医疗险"><a href="#医疗险" class="headerlink" title="医疗险"></a>医疗险</h2><h3 id="公立医院分类（三级九等）"><a href="#公立医院分类（三级九等）" class="headerlink" title="公立医院分类（三级九等）"></a>公立医院分类（三级九等）</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221031154928.png" alt="20221031154928"></p><p>医院的级别越高，医保的报销比例越低。（所以感冒发烧就去小医院用基础药，大病重病再去三甲大医院用进口药）</p><h2 id="失业险"><a href="#失业险" class="headerlink" title="失业险"></a>失业险</h2><blockquote><p>失业险会自动缴医保</p></blockquote><p>失业金的领取条件是离职时公司给你登记为非自愿失业。（包括裁员、倒闭、试用期不合格。不包括主动辞职。）</p><p>失业金一般为当地工资最低标准的 80% （社保的缴费年限越长，领失业金的时间越长。最长可以一次领24个月。）</p><h2 id="工伤险"><a href="#工伤险" class="headerlink" title="工伤险"></a>工伤险</h2><p>基本可以全部报销</p><h2 id="生育险（将要和医疗险合并）"><a href="#生育险（将要和医疗险合并）" class="headerlink" title="生育险（将要和医疗险合并）"></a>生育险（将要和医疗险合并）</h2><blockquote><p>生育保险包括: 生育医疗费和生育津贴两笔钱（生了孩子并且已经交满一年生育险就可以申请。）</p><ol><li>生育医疗费：生育医疗费报销的是你去医院花的钱</li><li>生育津贴：生育津贴就是你产假期间的工资</li></ol></blockquote><h3 id="生育医疗费"><a href="#生育医疗费" class="headerlink" title="生育医疗费"></a>生育医疗费</h3><h3 id="生育津贴"><a href="#生育津贴" class="headerlink" title="生育津贴"></a>生育津贴</h3><p>计算公式：生育津贴 = 单位去年的平均月工资 / 30 天 * 产假天数（98天【单胎顺产】）</p><p>平均月工资越高，领到的生育津贴就越多。</p><h2 id="住房公积金"><a href="#住房公积金" class="headerlink" title="住房公积金"></a>住房公积金</h2><blockquote><p>公积金就是自己的钱，可以提出来，可以还房贷，放着还有利息。</p></blockquote><p>如果想贷款买房，可以想办法多存公积金，使用公积金贷款，享受更多的利息。</p><p>具体分两块:</p><ol><li>申请低息房贷</li><li>付首付、还贷款</li></ol><h1 id="五险一金问题"><a href="#五险一金问题" class="headerlink" title="五险一金问题"></a>五险一金问题</h1><h2 id="缴费比例与缴费基数"><a href="#缴费比例与缴费基数" class="headerlink" title="缴费比例与缴费基数"></a>缴费比例与缴费基数</h2><p>缴费比例：公司交的多(19.74%-34.49%)，个人交的少(13.4%-22.3%)。<br>缴费基数：公司是按什么基数给你交的五险一金，这块浮动区间大(2200-31938),公司能做的文章也大。</p><p>缴费基数乘以缴费比例， 就是我们每个月的五险一金所得。(公司少交五险一金，反映到我们的收入上，就体现为到手工资多了。)</p><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[x] 缴费比例、缴费基数</li><li>[ ] 是不是按实际工资缴五险一金。（全额缴纳五险一金）</li><li>[ ] 各个城市社保缴费比例</li><li>[ ] 外企工作</li><li>[ ] 医保不能断？（尽量买职工医保或灵活就业医保）</li><li>[ ] 公积金加商贷组合？</li></ul>]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 规划 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>接受成长08</title>
      <link href="/2021/08/192022%20%E5%BD%92%E6%A1%A3/Diary/2022/%E9%9A%8F%E7%AC%94_%E5%B0%8F%E9%BB%84_%E6%8E%A5%E5%8F%97%E6%88%90%E9%95%BF08/94a71e9c/"/>
      <url>/2021/08/192022%20%E5%BD%92%E6%A1%A3/Diary/2022/%E9%9A%8F%E7%AC%94_%E5%B0%8F%E9%BB%84_%E6%8E%A5%E5%8F%97%E6%88%90%E9%95%BF08/94a71e9c/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Sorry, this password doesn't look right. Please try again." data-whm="Sorry, this article cannot be verified, but you can still see the decrypted content.">  <script id="hbeData" type="hbeData" data-hmacdigest="61d66dc37b2266c411366f97406b233458a75a31eb1a9f11dac4bb8bd7bdf1f1">176af5f71c6ac5419ca35683f9a93d1dcd2899269e20d9804e62c5de4432615a4d1e8ad54b4a8a3b8518df1b3c97e83b1d09bd57f98836696a5ddf06e80824d83ad0f1a6741808ad9acd301b80c53552db2cf45d5f2bbe6448d80c51bc42e63574c025807b9d89b89e7d2cb9d043b9380f1f910f47fdca33f71e7016f676181c823ed79fea53e6921bcacc9ccaf9d69e25db9b539274a1502ac68e22661536a0dc783b427bc3ce5d69f0b47eebcac55a60ccd25ca429a25bfaae50acc92b28dd28f1e84ccb84f285d0183abb6aa38effdd7588c3067bb03bebc71df1a7efc70120982825fc83dcef4abbdb2d518d6e861635012730bfeb88fa4e61813c6470e1cf087fa07b654f7d33d80cb02bd22c6ba6d84d043c16e78922cfafbc208ec26f87aa86e5987c08ab79ade5b8b8f2c03baccacb4569041862391807b97d3793cf315b8dbfcfac7813e42e50d23703fdb3bcd08e3c29256362da57dccc92093d0979b046089e867c25bd63a38fde13578882c8f585625d07655480e28970ceb098a635f3c1130aada69632ff0831b5ccd67ca14b3c76f611c9f41dfaa36f4ab5ab4ca0bc34761fdb9a3296735cbd0aeebd4c7ffd5a2902a3714653efe4bec87249e63d466bf0ae5460fc921667a66494a136503c21e058f63ab05bf50b1d2a1efced11f7ecc56d884dfcc0b6fe1ddd3ad9b54a44b1a589ca3f93bb108f7096d046be545cf04d53a296789d2f06914178b376ddc0b2adb3cfc6b1124558c71f0db54a6d80a9f9b733bec2f62f69b06232dd02a2f713663c56622d7b7df9f163220257df83b7e30b21f4d0a7cd6ba11e95698b309b59ecb426aa41e75c45c026180a702bfac6ddbae851315f4f3a223c2166c6aee191462cb0f4119c585c8469408273d07aef1b8a9378cc4c5fd171c4071eadcf63c6f6a6338495b1b19473e511a9059409162243a6032005bbb7121f7dfb354d2542571b5ec5baa0955b9fdcb9b75244bb4f3139513781e4c820d6a8a07110c471d36057a701795484d6de84d7a74bb4b92019e5f6596cfa18488f8cdf2d17aa6440fc7979c2300bac62dec6cc128343c073313bb4a7dfc0b05235324775380ed782ca0de14a1fb66db96e25c7e08dfe2bd5e77b5cb92043ef8eb1e90f86c089e01c862c1bc4efb9a7203ff8e6c6e58b22ac1c46b26e2f29ecbc080355c32c58f95ae565f7213b8244fe6170ad04618e8c020e562999ed8f2108d567dd53f24db38c7e2bbd81118aad508afaaa5a0cb4f25a79a858bdc0a540a92044667ae0c189ba15692137c183d62fb9ccd06f2150a95d047462c76aa82ae73003c37b5d78ce16800fbf38cd0e66fbadf30da3debd3128483627c870cbce653d4a99b4b25487895d95035c6441ab86e1dd89a514c3187615d0b111355c5dfeddd43058ffbd402caae0d5954643e7ca470a3d1a966ab53e0c51e776d9a870b4a833167fb4409836fa3acd9d0c6e4c0b722bf8c713b7057a1dde35261a50220a94d5ab5155ac4857fd25789f68cc657cd33198e8086a89e87d07e8271a4aa6135a046f159d2f6599bb27195d2fe788a7a43c32c713498e5e62f733ce26aa99fa54500b2a0b3d1d79f7eb41dbcc38ebf99ef644bf2ea7ac28f247bafeefac5fd6abcd12a0d13f527e7dffa9f436e53e224fb24933af9898766c3a62e477a8fbd807b140452f8a484eabfcab46fbfc0cc615ba6cb6fcd9e60e4df0bff8f5aa2ccbf00bb037af7e31099d9d2f2f2fb567c3bdeaf62408f6ba1eaf809457a9b45db8654e951709d81884e43b70ce0f426c7b1ad6c9020076a58f0049f6ac6fe395fd95dd22ee14d35d4307da92277196c38398eada9ec69edd6a0e6fa4566d60f0b4f4d2bbb24d62c4bcf35e01c0c051ace84245dba7be073d7484389e0925cfe8e8ceb2a59901c53a266c14f9dba94d6fff9140f3ba032e120d2bbf28f742dec56619a908b65616b21bbeddad96146caa23232848ce6e05020f09b8bf983326630f5c3437b02b7f03a3797e716dcc251be86382c1f71e2660e39a3aecc97ad989834b06d47bc81dcba6ab55cf78b8e726468d75d3e07855f2cd045228fdf42457fa9292abff36087d13ba5737adc74b9731e75baa48d78a82bfd919a8dece7f21b06d20377631c7cf2b25271365b90eac0ac83873313dcf8d5a846266910bf5925c7208728d10309d7c7b34e9567f6c4f84d1dcfae58b63e478f25995917c2c4f14b122906ef93cd8a85e84244d4e12898dc4c181aeb92c566015cf0add83ed8dd763423b8933a4400a5044fc4103ec6fe8a637ec9b20e536dc97987c0b081afaf8a9bfb2f3e35e36c1fc41ce87b759559d29fcb3f211c58b8590d2d0b87dbd9114e6bc0938aaf2ec72723cc39c8492593652942f16ca83a15aa3d762f33f9949f76ddf85cea93404cc2e29b3a32a436f19812445893a27b8e00492dc2c5f2f31d1d05472eaff2c817d4dc2daedcb325d0811dccdafc40b700ab2b3e9cff5e86754018f64675377a23e568f707d71c61720c2a288355431cf724c8124af29bec961a0ed92b382a8aa47c02c65242a35680b4e9c77390917e995c9e7fa35f04c722d28f98577e76b64293e64fd1383a003e29e1ccbd91d39ca0d5b74401bd2885dd2bc176694dd0a57f46bbdb26e5864717da32a74845b798a8b1e367a2e33637d64daedbb722b213101ed136ccf26db4b752829d1a0944821aaa70ea301210191f460e9098e98a9f03b5fc3e0e871da61641d8c8592b03a2bc77d2f6bac2778545560ceedbbd3e57162232b854e445383cf8c36b33e04da6fb44670dd195e8586772fb190f683d791d0a4e0a80265155b1ecd178a6eb2e16105a61c51857a11d0b3cd38a27c6b67be7945e1cc591a3e0d8ca60ba408aad5e82b54ddabce4ff5aca60a361e1bdf5f1eb35574e6ab1af06feb3664ce57947dae155dcda6fd1fdeffca8a38556d4f160d22c9cc25e7e541025e1913dc0a595512ff54989684f5a47d65585973ddb760d07ab6d666a3f10f976dfee1661e6b92c7b215d7328901f9740ff7d4d892f675aaf244fb315e3548a778d7af165e378f53d14dd8ab63532ea713dc01c09a5a1f12851064aac68ff6a0bec67d893288bb533cdfd7d8a7d5f306a53db659d996d0555c33d5ac687eee9f6c16af58c40c91047c9ef3ab46e50dbe128142e406008877ad1451588b71b7f538828b5deea170a528f2969d28f9cb1ca2aaee01a109ab5d113ac2cee7801356eee36afca53d0370f00bf15c814dbc1497a4fa802ffcadef9bd15423ee340e14179595a36083f24c9d22c53666329b9b08e9e9f6d908e7d9cbc44c0a1828009c798824c662ebebf1a5f697b5219352221af3148801a5625edd06b3cc1ca6590485aa158ab37fc1825e50bdcc0608abe813984f47b8f9794e5f1481c780f6875b29a775339a5ba66e5bd62868ecf35cdc4a10e32f27f11155f7fd84f5440e1fec3ee9ab62943c870d1441876b4f2841eed047dfb926e3157177ad72a6ae770aebe486742dee7dddc7351b4a5edf48758d7ff8af6f5bb0f20197f329817f92a6d454b4450bba5a3a28c401bd40044aaf1e053f517d2e8467dd46743434a405da488632409646d7f87947e2c22e432a3bd4581be14fff2e736362b317ae7240636599bd6952cb32ea76fb95726f13f5e10c85dd5a98bec69c00eac66cfaec31acb263a6fb48981e42ee78d32f346fa5d239ff3c2332e4924e57ff8847435e83975a37d4591ac39081c3ef013261d5a70fd2f0daac7ccff764193ee47533c1199d45d6508ac47b3fe7dbe08eae39fd627e94398be9b59eb24dbae01ce81b1eadc58fa90b1bc36ae671693a6bd8456f1c4732c0c18a104c5990d2acc52a03ee60d205c7f5f338593c1d98818bb267c15886dd9aca8ddd7313215203aa563e26498015be18d8323089b7fc3682791e6f6cbafa590fb153299674471b9df2a5ae668693c607c43d2bfadaf29ea441389dc37ac98ac1182401774ae4bcdede4afa9c9464e682701ba4091266fe5cf40e89070d5649c39052fed67fe4864432786f75dce80210b89f5aa37ba1564aae137def324e460c4a58d0445b1fb110dc6f72061762c690054af8b159ff458dc02e32e2c98f180eaa082a4bd2deaddd02e4f3f8d28c45183f62d1321daf70051b55d577d29f25cc076e8fad24fe5f3fabaea152b6ba1ee0612196cd7bc7934fcf021760b2d601e4fa1c50bbb931546661e403fcb351c0c92292d78d0f096dbaaaee2bc7a7762ba1900f8824043eb565ab172608b1e067b35b1c962085f57b050a1222c0fd17ca8d5b4bea121f22a64fbd9288ef7f86b005c74fd63e531af8495be20c3140e448e372e411c258fec2a09cf8f370b540d4312db7bd858c1fb6180f03d9d1c234802ca1292f23a07cf398e182918b73736669c20c61739f745b99a829a49d2711dc4d3ca645c6bc47d4252e4ccd9a07729168ee0afaee2dcdd1fd212cb534b7b9ceb4af7fd2e4f4e675a6775f7504e104ff6530f358be06de3d9f9b12e1863dbb2ab269ad192bdebc89f397ff0d2961d1039f9b84ec295716b2a14687d48cc0c38d8bce56c522a43a9eec72e4d407047cba5967ffaa945339e687dd49ae45d34d9c8954aa71b193d617db7bb4e01ff68debc3ec8aa6255efa98db20409ac1e6f83f049095b9ecec2d840b24c722bf3c1d8f9bdb3752b7a54b5532bfed870941530cd817a01ad79c4edb3f271b00271a0676b94a0633905454eed3002086e33203cc8c7262adab491d0630ffc7eb7bcefb26a5dc136611d0053fc30780b56e69e83b9b94ec83f7ae44c64911dcd20092448262c037d725491ab8ba25cb57b84873b054133759e3f4286c7a41020f7c8ff7dfba84abac7cd64daff7a2d3095940103764f00bab43126afad4fc8e15aad47af433e6e85ad14d3ef3d4eaad69acb0a12c1d9a88f3a2b06f0ccd97dc71274a5bc2bea860ac0ddf1b66a6a116c08b385fdaaa94f4826b53168ed63058b12d485d5f2ce8abf2989ed0f300c3ca70481d6eed5881c0281f51a59e93fbb9f25dfaa68a822123dde87270ccf0ce80a1af2399cee13627ec1a0105c49787f76ee5e4b40be90bd89cb17815eb27d97fec004aea989135b39b938fee8519471f01430052b70e396d1fe714e18c30e4621ba25065510ada7b0daee6a0bdac31241312d0ae562eabd10395753ebff562f926bc9828b2b06055435d9cfd29fd39b5e0dd0388b09321687ead9781ee889c23c09fb5b3beff8f13070f5186e2a179286221a1c209dcdee45e79488eac21394e3d2dff61ef6b1a4173e408c1a413142129f8b3dda2e32392a797dc93c2fdcf5485a4ec00bc3a364bf2f83acbf3e68b9122c0d92f201d2bb4cd6390a1f82ec1b819aab5adadd82adff8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="Enter Password.">Enter Password.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
          <category> Diary </category>
          
          <category> 小黄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Private </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我有一个 DJ 梦</title>
      <link href="/2021/01/032022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AADJ%E6%A2%A6/f75e92e9/"/>
      <url>/2021/01/032022%20%E5%BD%92%E6%A1%A3/%E5%8F%91%E5%B1%95/%E5%8F%91%E5%B1%95_%E8%A7%84%E5%88%92_%E6%88%91%E6%9C%89%E4%B8%80%E4%B8%AADJ%E6%A2%A6/f75e92e9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一直以来都很喜欢电子音乐，感觉比较小众，因为身边的人没能理解我整天戴着耳机在自己的世界里在做什么，我接触音乐算是比较早的了，小时候姐姐把她的 mp4 送给我的时候，我就整天沉迷于音乐的世界，但是仅限于听歌，目前我有一个大胆的想法，如果有机会的话，我挺想成为一个 DJ 制作人，这样我就可以把自己喜欢的东西和自己创造的东西分享给能懂我的人，也希望能结交到志同道合的朋友吧，我现在的圈子实在是太小了。从现在开始，我想每天花点时间学习这方面的知识，也算是追求自己的爱好吧，就把这个爱好记录在这里了。</p></blockquote><h1 id="EDM（ELECTRONIC-DANCE-MUSIC）"><a href="#EDM（ELECTRONIC-DANCE-MUSIC）" class="headerlink" title="EDM（ELECTRONIC DANCE MUSIC）"></a>EDM（ELECTRONIC DANCE MUSIC）</h1><p>EDM（ELECTRONIC DANCE MUSIC）一般指主要用于蹦迪场景下，令人舞动蹦跳的音乐，而DJ打碟过程中进行混音接歌的绝大部分曲目便是EDM电子舞曲。</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221103224556.png" alt="20221103224556"></p><h2 id="电子舞曲分类"><a href="#电子舞曲分类" class="headerlink" title="电子舞曲分类"></a>电子舞曲分类</h2><p>权威分类：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221104010004.png" alt="20221104010004"></p><p>以下是当下比较流行的几种风格：</p><blockquote><p>视频介绍：<a href="https://www.bilibili.com/video/BV13a4y1W7bT/?vd_source=3ed70d49b47a074637711a68e7f42b04">https://www.bilibili.com/video/BV13a4y1W7bT/?vd_source=3ed70d49b47a074637711a68e7f42b04</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221103225914.png" alt="20221103225914"></p><h3 id="BIG-ROOM-HOUSE"><a href="#BIG-ROOM-HOUSE" class="headerlink" title="BIG ROOM HOUSE"></a>BIG ROOM HOUSE</h3><blockquote><p>BIG ROOM HOUSE 是 ELECTRO HOUSE 的子分类，从2010年以后 BIG ROOM HOUSE 开始在 <code>Tomorrowland</code> 等各大音乐节被越来越多地演奏并广为流行。Martin Garrix（小马丁）、KSHMR（性感洋男）、Dimitri Vegas &amp; Like Mike（比利时基佬）、Blasterjaxx 等知名音乐人都是此曲风的代表人物。<br>BIG ROOM HOUSE 整体编曲比较简单，但在 DROP 高潮部分的音响效果听起来却宽广而宏大，极具感染力。</p><ul><li>在速度节奏上 BIG ROOM HOUSE 速度 BPM 般为126-132之间，并以典型的 HOUSE 舞曲底鼓形式呈现为四四拍。</li><li>在音乐结构和音色效果上 BIG ROOM HOUSE 最鲜明的特征是在 Breakdown 间奏之后、DROP 主奏高潮前，会有一段抽离旋律的 Build-up 渐进部分，以愈发密集的鼓点，不断加强的 Riser 及各类效果音效，积累听众期待和渴望的情绪，来达到欲求不满却又呼之欲出的临界状态，直到紧接而来的DROP高潮部分，会带有旋律简单洗脑，但却直击灵魂的Lead主奏音色，低沉的贝斯音色，以及强劲的底鼓，这带有震撼人心音响效果的 DROP 部分让听众的情绪瞬间喷涌而出一泻干里。</li></ul></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Tremor</td><td>Dimitri Vegas &amp; Like Mike</td></tr><tr><td>Animals</td><td>Martin Garrixe</td></tr><tr><td>Kshmir</td><td>KSHMR</td></tr><tr><td>Superwave</td><td>Ummet Ozcan</td></tr></tbody></table></div><h3 id="ELECTRO-HOUSE"><a href="#ELECTRO-HOUSE" class="headerlink" title="ELECTRO HOUSE"></a>ELECTRO HOUSE</h3><blockquote><p>ELECTRO HOUSE 是 BIG ROOM HOUSE 的上级分类，ZEDD（萌猴）、Deadmau5（死老鼠）、R3hab（三哥）、Wolfgang Gartner 等是此曲风的代表人物。作为HOUSE舞曲的一种，ELECTRO HOUSE 同样以显著的底鼓呈现出四四拍，速度BPM一般为 125-135 之间，ELECTRO HOUSE 最为显著的特征是带有嘶嘶声的沙哑王奏音色以及贝斯音色，搭配悦耳的旋律，丰富的 FX 音效，便呈现出了诱人舞动的 ELECTRO HOUSE 风格的舞曲。</p></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Nevada</td><td>Vicetone</td></tr><tr><td>I Want You to Know</td><td>Zedd ft. Selena Gomez</td></tr></tbody></table></div><h3 id="DEEP-HOUSE"><a href="#DEEP-HOUSE" class="headerlink" title="DEEP HOUSE"></a>DEEP HOUSE</h3><blockquote><p>DEEP HOUSE 是一个深沉而略带忧郁的曲风，作为同为 HOUSE 风格的 DEEP HOUSE 依然为<code>四四拍</code>但其速度相比 ELECTRO HOUSE 要慢很多，一般BPM在 110-125 之间，DEEP HOUSE 最为显著的特征是其独特的闷音贝斯声线，宁静迷人的灵魂唱腔，搭配上重低音底鼓和恰到好处的打击乐，DEEP HOUSE 听上去的感觉就好似一个失恋的 DJ，在酒吧放一首舞曲，浓厚的情感忧伤的旋律，却配上了动次打次的节奏鼓点，让人在悲伤和快感之间徘徊欲罢不能。</p></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Lovefool</td><td>Twocolors</td></tr><tr><td>Alcohol</td><td>Holy Molly</td></tr><tr><td>Utopia</td><td>Demeter</td></tr></tbody></table></div><h3 id="DUBSTEP"><a href="#DUBSTEP" class="headerlink" title="DUBSTEP"></a>DUBSTEP</h3><blockquote><p>DUBSTEP 曲风作为一个整体而言，它最大的特点是稀疏、强烈切分的节奏形，以及突出的 SUB BASS，尽管鼓点的密集程度较其他电子舞曲要少了近一半但伴随着贝斯的强势进入能达到一击入魂的效果，在音色方面，DUBSTEP 大量采用 Wobble Bass（震荡贝斯）、Growl Bass（咆哮贝斯）、Electro（电气化声音）和 glitch（失真）等音色。舞曲风格具有很高的辨识。</p></blockquote><h3 id="FUTURE-RAVE"><a href="#FUTURE-RAVE" class="headerlink" title="FUTURE RAVE"></a>FUTURE RAVE</h3><blockquote><p>FUTURE RAVE 萌芽阶段，这个风格是由 David Guetta（塔叔）在大约 2019 年和丹麦DJ MORTEN 一起创立的。FUTURE RAVE 最大的特色主要是基于传统 EDM 的曲式，配上全新独特的合成器音色，以及完美融合的人声和动感的 EDM 鼓点结合而成。</p></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Nothing</td><td>David Guetta &amp; MORTEN</td></tr></tbody></table></div><h3 id="TECHNO"><a href="#TECHNO" class="headerlink" title="TECHNO"></a>TECHNO</h3><blockquote><p>TECHNO 的节奏为四四拍速度BPM通常为120-150，这个风格最大的特点就是冰冷而带有机械感，在渐进中迸发新的元素。<br>TECHNO 有诸多的子分类，例如带有极简风格的 <code>MINIMAL TECHNO</code>，充满工业感声音采样的<code>INDUSTRIAL TECHNO</code>，大量使用 Reverb 混响，Delay 延时效果器以展现巨大空间感的 <code>AMBIENT</code> 和 <code>DUB TECHNO</code>。</p></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>For An Endless Night</td><td>Alan Fitzpatrick</td></tr></tbody></table></div><h3 id="EDM-TRAP（狂拽酷炫吊炸天）"><a href="#EDM-TRAP（狂拽酷炫吊炸天）" class="headerlink" title="EDM TRAP（狂拽酷炫吊炸天）"></a>EDM TRAP（狂拽酷炫吊炸天）</h3><blockquote><p>EDM TRAP 风格最大的特色就是其黑暗的主题，以及强烈的节奏。</p><ul><li>在音色上 TRAP风格的特征非常鲜明，一般都拥有迷幻尖利的 Lead 主奏音色，有时还会加上或狂野、或魔性的人声。<br>在节奏鼓点上底鼓、低音贝斯、军鼓、踩擦、错落的编配、制造出了节奏的变化给听众带来舞曲动感摇曳的感受。</li></ul></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Turn Down For What</td><td>DJ Snake</td></tr><tr><td>Don’t Let Me Down</td><td>The Chainsmokers ft. Daya</td></tr><tr><td>Ratchet</td><td>Borgore</td></tr></tbody></table></div><h3 id="FUTURE-BASS（清纯可爱小姐姐）"><a href="#FUTURE-BASS（清纯可爱小姐姐）" class="headerlink" title="FUTURE BASS（清纯可爱小姐姐）"></a>FUTURE BASS（清纯可爱小姐姐）</h3><blockquote><p>FUTURE BASS 是 从 EDM TRAP 的一个分支 CHILL TRAP 发展而来，并逐渐形成了它自己独有的清纯可爱小姐姐特色。FUTURE BASS 与 EDM TRAP 的相同之处，在于鼓点节奏相似，以及明显的重低音音色，而 FUTURE BASS最大的不同，便是旋律部分非常突出悦耳与 EDM TRAP 那种硬糙的听觉形成鲜明对比，同时 FUTURE BASS 的 Lead主奏音色时常会带有：俏、媚、姨 的神奇塑料感，极具辨识度，有一种让人难以抵抗的诱惑力，所以 FUTURE BASS 给人最直观的听觉感受便是：欢乐愉悦、翻翻起舞。</p></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Alone</td><td>Marshmello</td></tr><tr><td>In The Name Of Love</td><td>Martin Garrix ft. Bebe Rexha</td></tr><tr><td>We Rise</td><td>San Holo</td></tr></tbody></table></div><h3 id="UPLIFTING-TRANCE（迷幻舞曲）"><a href="#UPLIFTING-TRANCE（迷幻舞曲）" class="headerlink" title="UPLIFTING TRANCE（迷幻舞曲）"></a>UPLIFTING TRANCE（迷幻舞曲）</h3><blockquote><p>UPLIFTING TRANCE（迷幻舞曲）是融合了众多音乐风格，例如 HOUSE、TECHNO、POP、古典乐等，而衍生出的一个独立曲风，在速度和节奏上为四四拍，速度较快 BPM 可达 128-150。<br>TRANCE 舞曲最大的特色是极富旋律性，它一般拥有一个贯穿整首乐曲的音乐动机 hook melody（洗脑）并不断进行反复和渐进。<br>UPLIFTING TRANCE 不同于其他 TRANCE 舞曲的阴暗风格，上如它名字 UPLIFTING（令人振奋）是一种明亮的、令人愉悦、振奋的曲风，UPLIFTING TRANCE 之所以有这样的听觉感受，主要是因为它的和弦进行基本为拥有明亮色彩的<code>大调和弦</code>。</p><ul><li>在编曲方面 UPLIFTING TRANCE 的曲式比较随意没有特定模式。</li><li>在音响效果方面的特点则往往是将主奏合成器、高低声部的各类乐器、进行旋律与和弦的齐奏再搭配背景声里的人声弦乐或合成器的和弦进行营造出宽阔丰满的音响效果。</li></ul></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Our Origin</td><td>Armin Van Buuren</td></tr><tr><td>We’re All We Need</td><td>Above &amp; Beyond</td></tr><tr><td>Venera</td><td>Ferry Corsten</td></tr></tbody></table></div><h3 id="HARDSTYLE"><a href="#HARDSTYLE" class="headerlink" title="HARDSTYLE"></a>HARDSTYLE</h3><blockquote><p>HARDSTYLE 曲风就是一个字：”硬”。它的硬主要体现在由过载的 KICK 底鼓，搭配 REVERSE BASS 反向贝斯，再经过一系列失真、均衡等处理，形成的标志性的敲击音色，这种敲击音色以四四拍，150 BPM 的快节奏呈现出来，给人带来一种排山倒海之势。</p></blockquote><p>代表作：</p><div class="table-container"><table><thead><tr><th>歌曲</th><th>作者</th></tr></thead><tbody><tr><td>Destiny</td><td>Headhunterz</td></tr><tr><td>Zombie</td><td>Ran-D</td></tr><tr><td>Hurricane</td><td>Ran-D</td></tr></tbody></table></div><h2 id="电子舞曲的结构编排"><a href="#电子舞曲的结构编排" class="headerlink" title="电子舞曲的结构编排"></a>电子舞曲的结构编排</h2><blockquote><p>视频介绍：<a href="https://www.bilibili.com/video/BV1dK4y1V77o/?vd_source=3ed70d49b47a074637711a68e7f42b04">https://www.bilibili.com/video/BV1dK4y1V77o/?vd_source=3ed70d49b47a074637711a68e7f42b04</a></p></blockquote><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221104023756.png" alt="20221104023756"></p><h3 id="基础乐理概念"><a href="#基础乐理概念" class="headerlink" title="基础乐理概念"></a>基础乐理概念</h3><blockquote><ul><li>拍是乐曲时间维度上的最基本单位，在电子舞曲最常用的四四拍中，即为以四分音符为一拍。</li><li>四拍组成一个小节，接着小节又组成了乐句。</li><li>在电子舞曲中，通常以8小节为一个乐句，一般而言一个乐句会包含最基本的旋律和节奏型，是一首乐曲的核心，而相邻的两个乐句间，又往往会有些许元素的变化，以使听众时刻保持新鲜感。诸如大家所熟知的 Progressive 渐进类舞曲，就是以乐句为单位，进行渐进发展的。</li><li>若干个乐句就组成了乐段，而乐段则进而组成整首舞曲。</li></ul></blockquote><h4 id="拍（Beat）"><a href="#拍（Beat）" class="headerlink" title="拍（Beat）"></a>拍（Beat）</h4><h4 id="小节（Bar）"><a href="#小节（Bar）" class="headerlink" title="小节（Bar）"></a>小节（Bar）</h4><h4 id="乐句（Phrase）"><a href="#乐句（Phrase）" class="headerlink" title="乐句（Phrase）"></a>乐句（Phrase）</h4><h4 id="乐段（Section）"><a href="#乐段（Section）" class="headerlink" title="乐段（Section）"></a>乐段（Section）</h4><h3 id="舞曲结构"><a href="#舞曲结构" class="headerlink" title="舞曲结构"></a>舞曲结构</h3><blockquote><p>一首典型的 EDM 电子舞曲一般由以下8个乐段组合而成。</p><ul><li>有时 Breakdown、Build-up 和 Drop 部分也会根据流行音乐的叫法称为 Verse 主歌、Pre-Chorus 前副歌 和 Chorus 副歌。</li><li>此外 Breakdown 有时也会简称为 Break</li></ul><p>INTRO（前奏）的音色最少，听起来比较平淡，BREAKDOWN (VERSE)（间奏）部分次之且伴随着音色的渐多渐强，听起来感觉渐入佳境。BUILD-UP（渐进）部分则更进一步，通过更多音色、效果的叠加，以及鼓点、旋律频度的变化与抽离，营造出山雨欲来风满楼之势。DROP(CHORUS)（高潮）部分便是最终主奏音色，以及各声部乐器的齐奏，展现出最丰满的音响效果，和最高的听觉能量层级。OUTRO（尾奏）部分回归平淡。一首优秀的EDM电子舞曲，一般都具有<code>鲜明的层次感和变化感</code>，可以带着听众领略其情绪的起伏，和能量的变化。</p></blockquote><h4 id="INTRO（前奏）"><a href="#INTRO（前奏）" class="headerlink" title="INTRO（前奏）"></a>INTRO（前奏）</h4><p>INTRO（前奏）顾名思义前奏就是一首舞曲的开头，这部分一般以简单的旋律音色，或者鼓组乐器呈现出来，通常长度为2-16小节。<br>很多舞曲除了原版 <code>Original Mix</code> 以外，经常还会有叫做 <code>Extended Mix</code>、或者 <code>Club Mix</code> 的加长版本，这些加长版最大的特色，就是拥有了长达16-32小节的前奏和尾奏部分，这些<code>强调鼓点</code>、<code>弱化旋律</code>的前奏与尾奏主要是用以帮助DJ们更方便地<code>混音接歌</code>。</p><h4 id="BREAKDOWN-VERSE-（间奏）"><a href="#BREAKDOWN-VERSE-（间奏）" class="headerlink" title="BREAKDOWN (VERSE)（间奏）"></a>BREAKDOWN (VERSE)（间奏）</h4><p>BREAKDOWN (VERSE)（间奏）随着鼓点以及氛围的减弱，以及旋律的明晰，人声、各类合成器音色的进入，整首乐曲的主题在听众面前呈现开来，第一个 Breakdown 给听众最直观的感受便是啊！开始了！<br>BREAKDOWN 部分通常拥有16-32小节，也就是2-4个乐句，通常而言，每个乐句相较于前面一个，会通过增加诸如 Claps 拍手、Hi-Hat 等各类 Percussion 打击乐器等等的手法，产生一个渐进的效果，使得听觉感受逐渐丰富，能量层级渐强，乐曲的主题得以发展开来。</p><h4 id="BUILD-UP（渐进）"><a href="#BUILD-UP（渐进）" class="headerlink" title="BUILD-UP（渐进）"></a>BUILD-UP（渐进）</h4><p>BUILD-UP（渐进）部分旋律会趋于简化，而打击乐器组的 Snare 军鼓、Tom 通鼓、更强烈的 Claps 拍手、甚至 Kick 底鼓都纷纷加入进来。<br>在8小节的 Build-up 里，这些愈发密集的鼓点，配上不断加强的 Riser 等各类效果器，使得乐曲的能量层级持续增加，将整首乐曲逐渐推向 DROP 高潮部分。<br>在诸如 Big Room House的曲风里，Build-up 有时会把旋律完全抽离，把这个效果发挥得更为淋漓尽致。如：<code>W/&amp;W-Rave After Rave (Original Mix)</code></p><h4 id="DROP-CHORUS-（高潮）"><a href="#DROP-CHORUS-（高潮）" class="headerlink" title="DROP(CHORUS)（高潮）"></a>DROP(CHORUS)（高潮）</h4><p>DROP(CHORUS)（高潮）部分伴随着Lead主奏音色的强势进入，Bass与Kick底鼓的交相辉映，简洁洗脑的旋律以震撼人心的音响效果，直冲云霄的能量层级，冲击到听众的耳膜，在这8-16小节里，你会感觉你站在了人生之巅，拥有了整个世界。</p><h4 id="BREAKDOWN-VERSE-（贤者间奏）"><a href="#BREAKDOWN-VERSE-（贤者间奏）" class="headerlink" title="BREAKDOWN (VERSE)（贤者间奏）"></a>BREAKDOWN (VERSE)（贤者间奏）</h4><p>DROP(CHORUS)（高潮）过后，便进入第二个Breakdown间奏部分，我把它称之为 <code>贤者间奏</code> ，在这段16-32小节的Breakdown贤者间奏里，强劲的鼓点、高亢的主奏全部退散，回归到简单的旋律与人声，重申了乐曲的主题，听众就像无欲无求、圣如佛的贤者，享受着火山爆发般高潮过后，片刻的宁静与抽离。</p><h4 id="BUILD-UP（渐进）-1"><a href="#BUILD-UP（渐进）-1" class="headerlink" title="BUILD-UP（渐进）"></a>BUILD-UP（渐进）</h4><p>当然 <code>贤者间奏</code> 同时也是另一场暴风雨前的短暂宁静，在片刻的休息之后随之而来的便是更猛烈的一轮狂风暴雨。</p><h4 id="DROP-CHORUS-（高潮）-1"><a href="#DROP-CHORUS-（高潮）-1" class="headerlink" title="DROP(CHORUS)（高潮）"></a>DROP(CHORUS)（高潮）</h4><p>在紧随而来的第二轮 build-up 和 drop 中，有时会基于第一轮的基础上进行旋律、bass、或鼓点的变化，或增加一些新的音色元素使整首乐曲的听觉感受和音响效果更多样化。</p><h4 id="OUTRO（尾奏）"><a href="#OUTRO（尾奏）" class="headerlink" title="OUTRO（尾奏）"></a>OUTRO（尾奏）</h4><p>第二轮的DROP过后，乐曲的主要内容基本就结束了，进入了OUTRO尾奏部分，这一部分的听觉感受与开头的INTRO前奏部分十分相似，主要是以简单的鼓组乐器或旋律呈现，不同的是：INTRO部分的元素是不断增加的，能量层级是渐强的，而OUTRO部分则与之相反都是慢慢减弱归于平静的。<br>在部分舞曲的 Extended Mix 版本中，会有长达16-32小节的OUTRO尾奏，他一般会保留相当能量层级的鼓点，主要是为了让DJ有更充裕的素材与时间，可以衔接播放下一首舞曲。</p><h2 id="电子舞曲中常用的7大乐器组音色"><a href="#电子舞曲中常用的7大乐器组音色" class="headerlink" title="电子舞曲中常用的7大乐器组音色"></a>电子舞曲中常用的7大乐器组音色</h2><blockquote><p>视频介绍：<a href="https://www.bilibili.com/video/BV18p4y1s76n/?spm_id_from=333.788&amp;vd_source=3ed70d49b47a074637711a68e7f42b04">https://www.bilibili.com/video/BV18p4y1s76n/?spm_id_from=333.788&amp;vd_source=3ed70d49b47a074637711a68e7f42b04</a></p><p>如果想要直观地了解电子舞曲中的这7大乐器组，我们可以把它们呈现的音响效果想象成一个<code>妖烧性感的女神</code>。</p><ol><li>打击乐器组 PERCUSSION 可以看作是女神的骨架，它支撑了女神的身体，定义了形态，可以说 没有打击乐器组，就无法构成电子舞曲。</li><li>贝斯乐器组 BASSLINE，可以看作是依附在女神骨架上的肌肉，和打击乐搭配起来后，它便能赋予整首电子舞曲以动感和活力。</li><li>人声乐器组 VOCAL 和 弦旋律乐器组 CHORD MELODY，可以看作是女神倾国倾城的盛世美颜，它们的出现会一把抓住听众的注意力，让听众开始渐渐沉浸享受舞曲的美妙。（主题）</li><li>主奏乐器组 LEAD 则是整首电子舞曲最夺人眼球，摄人心魄的部分，它就好像女神丰满的酥胸，纤细的腰肢，浑圆的翘臀，玩年的长腿，它往往奏出简单洗脑却勾人魂魄的乐句，让这首舞曲深深镜刻在听众的脑海里。</li><li>氛围乐器组 AMBIENT 就像是女神身上醉人的香气，其本身可能并不突出起眼，但却可以渲染整体氛围，和其他部分相得益彰，让电子舞曲更具整体的美感。</li><li>音效乐器组 FX 则好似女神身上堆琛耀眼的珠宝首饰，他们错落点缀在整首舞曲中，起到了<code>画龙点睛</code>的作用。</li></ol><p>最终 由千变万化音色组成的这七大乐器组，<strong>以恰当合适的比例编配混音在一起，便将一首层次感分明，音响效果完满的电子舞曲呈现给了听众</strong>，就像那个妖娆性感的女神，在你面前诱人地舞蹈。</p></blockquote><h3 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h3><blockquote><p>音轨（Track）</p><ul><li>音轨（Track）顾名思义，就是声音的轨道，在编曲软件里，我们可以把它理解为放着声音的容器，这个容器可以放置三种不同的音源，直接放置录制的<code>声音素材</code>，或者放置<code>合成器</code>来生成电子音色，也可以放置<code>采样器</code>以加载乐器音色。同时，在音轨里还可以通过放置各种各样的效果器来丰富改变这三种音源的音色。<br>一首舞曲通常拥有很多根音轨，当舞曲播放时，7大乐器组中的各个音轨中单独的音色一齐奏响，便组成了电子舞曲完整的音响效果</li></ul><p>音频频谱（Frequency Spectrum）</p><ul><li>音频频谱（Frequency Spectrum）是用来显示音色所在的频率范围赫兹，以及声音强度分贝的，一般而言，在音乐制作过程中，会使用到的音色频率范围在20-20k(20000)赫兹之间。<br>整个频谱可以大致分为4个频段：1. 次低频 Sub-Bass 20-60赫兹，2. 低频 Low 60-250赫兹，3. 中频 Mid 250-2k赫兹，4. 高频 High 2k-20k赫兹。<br>每个乐器组及其包含的音色，通常都有相对固定的频段，比如Bass贝斯Kick底鼓集中在中低频与次低频，Vocal人声 Lead主奏，集中在中高频，Hi-Hat 踩擦、某些 FX音效 集中在在高频。</li></ul><p>在一首优秀的电子舞曲中，各乐器组音色往往都是互不干涉，各得其所地分布在各个频段上，从而呈现出和谐饱满、且清晰不浑浊的音响效果。</p></blockquote><h3 id="打击乐器组-PERCUSSION"><a href="#打击乐器组-PERCUSSION" class="headerlink" title="打击乐器组 PERCUSSION"></a>打击乐器组 PERCUSSION</h3><p>打击乐器组 PERCUSSION，一般而言，主要包含以下音色：</p><ol><li>Kick 底鼓</li><li>Snare 军鼓</li><li>Tom 通鼓</li><li>Ride Cymbal 节奏擦</li><li>Crash Cymbal 吊擦</li><li>Hi-Hat 踩擦</li><li>Claps 拍手</li></ol><p>打击乐器组 PERCUSSION，一般会贯穿整首电子舞曲，从开头的 INTRO 前奏部分，直至最后的OUTRO 尾奏部分，除了有时会在 BREAKDOWN 间奏部分中，将打击乐器组 PERCUSSION 抽离，以淡化电子舞曲的节奏和泵动感，给听众以片刻的宁静和喘息。</p><p>如：在一些电子舞曲的 Extended Mix、和 Club Mix 中会有加长的 INTRO 和 OUTRO 部分，这里加长的部分就往往全部由打击乐器组 PERCUSSION 进行呈现。</p><p>在编排上，各打击乐音色，一般都是<code>循序渐进</code>，并以一个乐句，8个小节为单位，进行不断地增减变化的，这样的编排可以使整首舞曲的鼓点，更丰富多彩，引人入胜。</p><h3 id="贝斯乐器组-BASSLINE"><a href="#贝斯乐器组-BASSLINE" class="headerlink" title="贝斯乐器组 BASSLINE"></a>贝斯乐器组 BASSLINE</h3><p>贝斯乐器组 BASSLINE，通常配合打击乐器组，来给整首舞曲带来律动，也是电子舞曲最重要的组成部分之一。以下四种为常见的音色：</p><ol><li>808 Bass，808 Bass 是源于Roland逻兰公司的传奇鼓机TR-808的一个音色，音乐制作人将鼓机的采样音色进行 Distorted 失真、Pitch Bend 弯音效果处理后，便得到拥有极短 Attack起音，较长 Decay衰减的标志性 808 BASS音色。如今，808 BASS 主要由合成器基于 Sin Wave正弦波形模拟而成，其已经成为了Trap音乐的标志，并广泛应用于其他各类型的电子舞曲中。</li><li>冲击贝斯 Punch Bass，冲击贝斯 Punch Bass 也可以称作 Pluck Bass拨奏贝斯，或者House Bass浩室贝斯，经常被用在四四拍稳拍的 House舞曲中它主要和 Kick底鼓以及 Claps拍手搭配编排，来展现舞曲的律动。</li><li>咆哮贝斯 Growl Bass，咆哮贝斯 Growl Bass，从名字上就可以听出是一个很粗暴的音色，它基于Saw Wave 据齿波形，并经过LFO低频振荡器调制后合成，它在 Trap,Dubstep 等风格的电子舞曲中有广泛应用，总之就是一个字：”野”。</li><li>次低频贝斯 Sub Bass，次低频贝斯 Sub Bass，是基于Sin Wave正弦波形的，分布于20到60赫兹低频段的贝斯音色，尽管单独听起来 Sub Bass可能感觉不知所以浑浊一片，但它作为电子舞曲音响效果频段里最垫底的那部分是不可或缺的它可以使得整个贝斯、鼓组的低音区更加厚重和饱满，并衬托出其他中频高频的旋律与主奏音色。</li></ol><h3 id="人声乐器组-VOCAL"><a href="#人声乐器组-VOCAL" class="headerlink" title="人声乐器组 VOCAL"></a>人声乐器组 VOCAL</h3><p>在VOCAL人声部分，一般会使用录制的干声，再加入混响、均衡器等效果器进行调制，使之展现出更美妙的听觉效果，并与其他乐器组更好地融合。在一些特定曲风的舞曲中，制作人还会将VOCAL人声切片成采样，进行音调调整等更复杂的处理，以达到各种变幻的效果。</p><h3 id="和弦旋律乐器组-CHORD-MELODY"><a href="#和弦旋律乐器组-CHORD-MELODY" class="headerlink" title="和弦旋律乐器组 CHORD MELODY"></a>和弦旋律乐器组 CHORD MELODY</h3><p>CHORD MELODY 和弦旋律乐器组，则是可以包含众多的音色。例如PLUCK拨奏音色、MALLET敲击乐器音色、STRING弦乐音色、PPANO / KEYBOARD钢琴键盘类音色、等等其他各类合成器音色。这部分的音色通常比较干净清澈，不会加入过多过重的效果器，主要用来清晰地展现舞曲的主题，或者辅助VOCAL人声部分，达到更好地呈现效果。</p><h3 id="主奏乐器组-LEAD"><a href="#主奏乐器组-LEAD" class="headerlink" title="主奏乐器组 LEAD"></a>主奏乐器组 LEAD</h3><p>主奏乐器组 LEAD 并非是指具体某些特定的音色，而一般是指出现在DROP高潮部分，占绝对主导地位，演奏出主旋律的音色，理论上来说，任何一个音色都可以作为主奏音色，而一般常见的主奏音色有：Supersaw 超级锯齿波音色、Stab强奏音色、Bass贝斯音色、以及 CHORD MELODY 和弦旋律乐器组里的，包括Pluck拨奏、Piano / Keyboard 等各类音色。</p><h3 id="氛围乐器组-AMBIENT"><a href="#氛围乐器组-AMBIENT" class="headerlink" title="氛围乐器组 AMBIENT"></a>氛围乐器组 AMBIENT</h3><p>氛围乐器组 AMBIENT 主要由<code>PAD铺底音色</code>，或<code>背景采样音效</code>组成的 AMBIENT 氛围乐器组，一般主要出现在INTRO前奏、BREAKDOWN间奏、和BUILD-UP渐进部分中，用来渲染整首舞曲的氛围，奠定主题基调，并填补这些乐段中因为乐器组较少而产生的频段空缺，使得音响效果更为饱满。</p><ul><li>PAD铺底类音色一般拥有相当长的ATTACK起音，和RELEASE释音，并往往会使用滤波器Filter过滤掉高频部分的刺耳高音，最终将朦胧柔美、延绵不绝的音色呈现出来。</li><li>除了合成器音色以外，很多大自然的背景采样音效也可以用作AMBIENT乐器组里的音色，用来展现特定的场景、情绪或主题。比如：风声水声雷声火声轰鸣声等等。</li></ul><h3 id="音效乐器组-FX"><a href="#音效乐器组-FX" class="headerlink" title="音效乐器组 FX"></a>音效乐器组 FX</h3><p>FX 音效，它们可以说是整首电子舞曲的点睛之笔，在众多的FX音效中，SWEEP-UP/DOWN 或 RISER 气氛烘托效果可谓使用最多，也是最重要的音效之一，它主要是通过 White Noise白噪音的渐强渐弱，或者合成器音色音调、频率的变化，来达到将气氛推向高潮，或者让情绪逐渐舒缓的作用。</p><h2 id="音色之源：合成器、采样器、效果器"><a href="#音色之源：合成器、采样器、效果器" class="headerlink" title="音色之源：合成器、采样器、效果器"></a>音色之源：合成器、采样器、效果器</h2><blockquote><p>视频介绍：<a href="https://www.bilibili.com/video/BV1rb4y197Pe/?spm_id_from=333.788">https://www.bilibili.com/video/BV1rb4y197Pe/?spm_id_from=333.788</a></p></blockquote><p>一个电子舞曲<code>音色</code>的产生通常有以下三步：</p><ol><li>编曲软件发出事先记录好的MIDI信号</li><li>MIDI信号激发合成器或采样器音源输出音频信号</li><li>音频信号经过效果器的修饰输出到总线并从扬声器放出</li></ol><p>MIDI：MIDI指的是音乐数字接口使得电脑、合成器、电子乐器等，能相互控制、交换信息，MIDI信号不发送声音，而是发送像是音高、音量、持续时长等参数的数字控制信号。</p><p>音源主要分为：合成器 Synth 和采样器 Sampler 这两种。</p><h3 id="合成器-Synth"><a href="#合成器-Synth" class="headerlink" title="合成器 Synth"></a>合成器 Synth</h3><p>合成器 Synth，是自主凭空生成声音信号的电子乐器。</p><p>在电子音乐发展之初合成器都是基于硬件。例如60年代开创性的RCA声音合成器、Moog 合成器。以及在80年代风靡一时的 Yamaha DX7、Roland-D50 等等。</p><p>如今随着个人计算机的发展，以及电子音乐工作软件DAW的普及，像 Serum、Massive、Sylenth1、NEXUS等的<code>软件合成器</code>凭借其成本低、使用便捷的优势成为音乐制作人的标配。</p><p>软件合成器 Synth 的工作原理简单来说一般分为4步：</p><ol><li>接收到MIDI信号，由振荡器Oscillator生成波形</li><li>波形经过滤波器Filter，滤掉不需要的声波频段</li><li>过滤后的波形通过ADSR Envelope包络，对声波进行时间维度上变化的控制。（我们可以把包络理解为控制每一个音的“起承转合”）</li><li>最后由LFO低频振荡器对声波进行周期性变化的控制并最终输出给后续的效果器进行修饰。</li></ol><p>软件合成器 Synth 细分：</p><ol><li>Additive Synth 加法合成器</li><li>Subtractive Synth 减法合成器</li><li>FM Synth 调频合成器</li><li>Wavetable Synth 波表合成器…</li></ol><p>每个合成器都有其独特的功能和音色，并母每个合成器内部还有大量的控制器来进行参数的调节。</p><h3 id="采样器-Sampler"><a href="#采样器-Sampler" class="headerlink" title="采样器 Sampler"></a>采样器 Sampler</h3><p>和凭空生成声音信号的合成器相反，采样器是将音色采样Sample，事先采集储存起来的一种音源。</p><ol><li>录制声音采样</li><li>回放声音采样</li><li>采样音色根据MIDI信号调整输出</li></ol><h3 id="效果器-FX"><a href="#效果器-FX" class="headerlink" title="效果器 FX"></a>效果器 FX</h3><p>无论是合成器、采样器发出的音色，还是录制的人声与乐器音色，通常都还会需要通过效果器进行修饰，效果器：顾名思义，就是给音色添加效果的单元，所有效果器可以分为四大类：</p><ol><li>Dynamics 动态效果器：通常用于录制的人声或者乐器，用来限制或增强特定的音频信号。例如：<code>Compressor压缩器</code>，它会将超过阈值的音频信号，按照给定的比例进行压缩。由于录制的人声经常会有很大的动态变化，即有的地方轻有的地方响，Compressor压缩器便会把高于某个分贝音频信号的音量进行压缩，使得整体的音量更为均衡。</li><li>Tonal 音色效果器：通常用来进行混音Mixing。例如：<code>EQ效果器</code> 就可以用来增强或削弱某部分频段的声音。</li><li>Time-Based 时基效果器：即是让音色基于时间维度进行改变的。例如：常用的 <code>Reverb混响</code>、<code>Delay 延迟效果器</code>、可以通过对声音的叠加产生空间感。</li><li>Distortion &amp; Saturation 失真/饱和效果器：主要是用来给音色加入泛音和颗粒，使得音色可以从具有攻击性的冰冷感调整为令人愉悦的温暖感。音轨里的效果器就像工厂的流水线一样，是按顺序排布，依次对声音进行处理的，每个效果器都只会处理前一个效果器修饰完成的声音信号，因此效果器的放置排布顺序对于最终音色的形成也是起着决定性作用的。在经过这一系列效果器的处理后，原本干涩的音色被修饰得悦耳动人，最终被大家所听到。</li></ol><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="DJ-到底在干什么？"><a href="#DJ-到底在干什么？" class="headerlink" title="DJ 到底在干什么？"></a>DJ 到底在干什么？</h2><p>如果你去过音乐节，酒吧夜店，一定很好奇DJ到底在台上做什么，其实概括起来说：DJ 一共在做的其实就是两件事：<code>混音接歌</code>和<code>现场表演</code>。</p><p>混音接歌：即是指将不同的乐曲接连不断地播放出来并确保这些乐曲可以毫无违和感地进行衔接。同时DJ还会根据自己的想法，对这些乐曲进行实时地调整，包括乐曲的速度节奏、音调并添加一些效果，以达到最佳的听觉感受，使听众沉醉其中。</p><p>现场表演：可以包含基于混音接歌的基础上的其他各种形式包括 Finger Drum 手指鼓、Scratch搓碟 甚至 喊麦、跳舞等等，这些看似大相径庭的表现形式其目的都是为了配合乐曲，增加DJ演奏的表现力和吸引力。总而言之就是为了让观众更嗨让舞池更热。</p><h2 id="DJ-装备（硬件）"><a href="#DJ-装备（硬件）" class="headerlink" title="DJ 装备（硬件）"></a>DJ 装备（硬件）</h2><h3 id="打碟机"><a href="#打碟机" class="headerlink" title="打碟机"></a>打碟机</h3><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221104175348.png" alt="20221104175348"></p><p>Pioneer DJ先锋 打碟机。Pioneer DJ的打碟机分为三大系列：</p><ol><li>DDJ Controller 控制器：需要连接电脑，控制电脑里专业DJ软件来进行打碟的设备。（如型号：DDJ-400、DDJ-FLX6）</li><li>XDJ All ln One 一体机：它一体整合了播放器Deck、混音器Mixer，并且配置了彩色显示屏来进行显示与控制只需要插上U盘、连上音箱便能进行演奏。（如型号：XDJ-RR）</li><li>CDJ Player 高端播放器：顶级旗舰DJ播放器设备。（如型号：CDJ-3000）</li></ol><h3 id="监听耳机"><a href="#监听耳机" class="headerlink" title="监听耳机"></a>监听耳机</h3><p>监听耳机主要用于在DJ混音接歌中的<code>曲目试听</code>及<code>对拍</code>，也是必不可少的装备。（如型号：Pioneer HDJ-CUE1BT）</p><h3 id="音箱"><a href="#音箱" class="headerlink" title="音箱"></a>音箱</h3><p>如果你想在家里练习打碟，或者举办派对那一对价廉物美的音箱绝对可以让你的演奏锦上添花。（如型号：Pioneer DJDM-40）</p><h2 id="DJ-装备（软件）"><a href="#DJ-装备（软件）" class="headerlink" title="DJ 装备（软件）"></a>DJ 装备（软件）</h2><h3 id="打碟软件"><a href="#打碟软件" class="headerlink" title="打碟软件"></a>打碟软件</h3><p>Rekordbox: 是DDJ-400等主流设备所标配的专业DJ软件<br>Serato<br>Traktor</p><h3 id="分析软件（曲目BPM、调性、能量层级、Cue点）"><a href="#分析软件（曲目BPM、调性、能量层级、Cue点）" class="headerlink" title="分析软件（曲目BPM、调性、能量层级、Cue点）"></a>分析软件（曲目BPM、调性、能量层级、Cue点）</h3><p>Mixed in Key</p><h3 id="音乐制作软件"><a href="#音乐制作软件" class="headerlink" title="音乐制作软件"></a>音乐制作软件</h3><p>Ableton Live：通过它可以对音乐进行 Remix等高阶制作。</p><h1 id="DJ-必备乐理知识"><a href="#DJ-必备乐理知识" class="headerlink" title="DJ 必备乐理知识"></a>DJ 必备乐理知识</h1><h2 id="BPM-速度"><a href="#BPM-速度" class="headerlink" title="BPM 速度"></a>BPM 速度</h2><p>BPM 是 Beats Per Minute 的缩写，意味<code>每分钟节拍数</code>。</p><p>BPM 也是区分不同类型曲风的关键因素，同时它是串联起整场DJ演出的核心。</p><p>体现在软件里：</p><p><img src="https://raw.githubusercontent.com/HaloBoys/PicGoMyDevice/main/img/20221104203305.png" alt="20221104203305"></p><h2 id="拍、小节、乐句与数拍"><a href="#拍、小节、乐句与数拍" class="headerlink" title="拍、小节、乐句与数拍"></a>拍、小节、乐句与数拍</h2><h2 id="电子舞曲结构与能量层级"><a href="#电子舞曲结构与能量层级" class="headerlink" title="电子舞曲结构与能量层级"></a>电子舞曲结构与能量层级</h2><h2 id="DJ-软件波形详解"><a href="#DJ-软件波形详解" class="headerlink" title="DJ 软件波形详解"></a>DJ 软件波形详解</h2><h2 id="Mix-In-Key-调性混音"><a href="#Mix-In-Key-调性混音" class="headerlink" title="Mix In Key 调性混音"></a>Mix In Key 调性混音</h2><h1 id="Todo"><a href="#Todo" class="headerlink" title="Todo"></a>Todo</h1><ul><li>[ ] 百大 DJ 榜单</li><li>[ ] 格莱美</li><li>[ ] Billboard 电子舞曲</li><li>[ ] 荷兰皇室</li><li>[ ] 电子舞曲的音色配器</li></ul>]]></content>
      
      
      <categories>
          
          <category> 发展 </category>
          
          <category> 规划 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
